
#[test]
fn ic_1000() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ic ivau, x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 75, 0B, D5", "ic ivau, x4");
}

#[test]
fn ic_1001() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ic ialluis
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 71, 08, D5", "ic ialluis");
}

#[test]
fn ins_1002() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(19).B[8], v30.B[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 27, 11, 6E", "ins V(19).B[8], v30.B[4]");
}

#[test]
fn ins_1003() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins v1.H[2], v20.H[6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, 66, 0A, 6E", "ins v1.H[2], v20.H[6]");
}

#[test]
fn ins_1004() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins v19.S[2], v3.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 64, 14, 6E", "ins v19.S[2], v3.S[3]");
}

#[test]
fn ins_1005() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins v26.D[0], v31.D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, 47, 08, 6E", "ins v26.D[0], v31.D[1]");
}

#[test]
fn ins_1006() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins v13.B[13], W(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 1E, 1B, 4E", "ins v13.B[13], W(18)");
}

#[test]
fn ins_1007() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins v22.H[4], W(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 1D, 12, 4E", "ins v22.H[4], W(15)");
}

#[test]
fn ins_1008() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(0).S[1], w5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 1C, 0C, 4E", "ins V(0).S[1], w5");
}

#[test]
fn ins_1009() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(14).D[1], X(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 1E, 18, 4E", "ins V(14).D[1], X(21)");
}

#[test]
fn isb_1010() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; isb sy
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 3F, 03, D5", "isb sy");
}

#[test]
fn isb_1011() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; isb 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 33, 03, D5", "isb 3");
}

#[test]
fn isb_1012() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; isb
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 3F, 03, D5", "isb");
}

#[test]
fn ld1_1013() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v24.B16 * 1}, [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 71, 40, 4C", "ld1 {v24.B16 * 1}, [x12]");
}

#[test]
fn ld1_1014() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).B8 * 1}, [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 73, 40, 0C", "ld1 {V(6).B8 * 1}, [XSP(24)]");
}

#[test]
fn ld1_1015() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).H8 * 1}, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 76, 40, 4C", "ld1 {V(12).H8 * 1}, [XSP(20)]");
}

#[test]
fn ld1_1016() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.H4 * 1}, [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 77, 40, 0C", "ld1 {v15.H4 * 1}, [XSP(29)]");
}

#[test]
fn ld1_1017() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(1).S4 * 1}, [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 7B, 40, 4C", "ld1 {V(1).S4 * 1}, [XSP(27)]");
}

#[test]
fn ld1_1018() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v6.S2 * 1}, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 7A, 40, 0C", "ld1 {v6.S2 * 1}, [XSP(23)]");
}

#[test]
fn ld1_1019() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(22).D2 * 1}, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 7D, 40, 4C", "ld1 {V(22).D2 * 1}, [x11]");
}

#[test]
fn ld1_1020() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v26.D1 * 1}, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, 7C, 40, 0C", "ld1 {v26.D1 * 1}, [XSP(7)]");
}

#[test]
fn ld1_1021() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v1.B16 * 2}, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, A1, 40, 4C", "ld1 {v1.B16 * 2}, [XSP(8)]");
}

#[test]
fn ld1_1022() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(25).B8 * 2}, [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, A1, 40, 0C", "ld1 {V(25).B8 * 2}, [XSP(14)]");
}

#[test]
fn ld1_1023() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.H8 * 2}, [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, A6, 40, 4C", "ld1 {v28.H8 * 2}, [x20]");
}

#[test]
fn ld1_1024() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v7.H4 * 2}, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, A6, 40, 0C", "ld1 {v7.H4 * 2}, [x17]");
}

#[test]
fn ld1_1025() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v17.S4 * 2}, [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "91, AB, 40, 4C", "ld1 {v17.S4 * 2}, [XSP(28)]");
}

#[test]
fn ld1_1026() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.S2 * 2}, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, AB, 40, 0C", "ld1 {v13.S2 * 2}, [XSP(25)]");
}

#[test]
fn ld1_1027() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.D2 * 2}, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, AC, 40, 4C", "ld1 {v22.D2 * 2}, [x0]");
}

#[test]
fn ld1_1028() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v10.D1 * 2}, [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, AD, 40, 0C", "ld1 {v10.D1 * 2}, [XSP(14)]");
}

#[test]
fn ld1_1029() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.B16 * 3}, [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 60, 40, 4C", "ld1 {v13.B16 * 3}, [x2]");
}

#[test]
fn ld1_1030() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).B8 * 3}, [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 61, 40, 0C", "ld1 {V(31).B8 * 3}, [x12]");
}

#[test]
fn ld1_1031() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v0.H8 * 3}, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 64, 40, 4C", "ld1 {v0.H8 * 3}, [x6]");
}

#[test]
fn ld1_1032() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v4.H4 * 3}, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, 64, 40, 0C", "ld1 {v4.H4 * 3}, [x3]");
}

#[test]
fn ld1_1033() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v25.S4 * 3}, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 68, 40, 4C", "ld1 {v25.S4 * 3}, [x6]");
}

#[test]
fn ld1_1034() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v21.S2 * 3}, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 69, 40, 0C", "ld1 {v21.S2 * 3}, [x15]");
}

#[test]
fn ld1_1035() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(19).D2 * 3}, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 6D, 40, 4C", "ld1 {V(19).D2 * 3}, [x10]");
}

#[test]
fn ld1_1036() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(29).D1 * 3}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 6F, 40, 0C", "ld1 {V(29).D1 * 3}, [x30]");
}

#[test]
fn ld1_1037() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v4.B16 * 4}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 20, 40, 4C", "ld1 {v4.B16 * 4}, [x5]");
}

#[test]
fn ld1_1038() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(9).B8 * 4}, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 23, 40, 0C", "ld1 {V(9).B8 * 4}, [XSP(30)]");
}

#[test]
fn ld1_1039() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).H8 * 4}, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, 24, 40, 4C", "ld1 {V(2).H8 * 4}, [x1]");
}

#[test]
fn ld1_1040() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v2.H4 * 4}, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 25, 40, 0C", "ld1 {v2.H4 * 4}, [XSP(15)]");
}

#[test]
fn ld1_1041() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v21.S4 * 4}, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 2A, 40, 4C", "ld1 {v21.S4 * 4}, [x19]");
}

#[test]
fn ld1_1042() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.S2 * 4}, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 28, 40, 0C", "ld1 {v13.S2 * 4}, [x4]");
}

#[test]
fn ld1_1043() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).D2 * 4}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 2D, 40, 4C", "ld1 {V(31).D2 * 4}, [XSP(13)]");
}

#[test]
fn ld1_1044() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).D1 * 4}, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, 2F, 40, 0C", "ld1 {V(3).D1 * 4}, [XSP(26)]");
}

#[test]
fn ld1_1045() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v31.B8 * 1}, [x16], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 72, DF, 0C", "ld1 {v31.B8 * 1}, [x16], 8");
}

#[test]
fn ld1_1046() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v4.H4 * 1}, [x17], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 76, DF, 0C", "ld1 {v4.H4 * 1}, [x17], 8");
}

#[test]
fn ld1_1047() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(17).S2 * 1}, [XSP(25)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 7B, DF, 0C", "ld1 {V(17).S2 * 1}, [XSP(25)], 8");
}

#[test]
fn ld1_1048() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(28).D1 * 1}, [XSP(30)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 7F, DF, 0C", "ld1 {V(28).D1 * 1}, [XSP(30)], 8");
}

#[test]
fn ld1_1049() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.B16 * 1}, [x21], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, 72, DF, 4C", "ld1 {v19.B16 * 1}, [x21], 16");
}

#[test]
fn ld1_1050() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.H8 * 1}, [x27], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 77, DF, 4C", "ld1 {v19.H8 * 1}, [x27], 16");
}

#[test]
fn ld1_1051() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v12.S4 * 1}, [XSP(6)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 78, DF, 4C", "ld1 {v12.S4 * 1}, [XSP(6)], 16");
}

#[test]
fn ld1_1052() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(5).D2 * 1}, [XSP(31)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 7F, DF, 4C", "ld1 {V(5).D2 * 1}, [XSP(31)], 16");
}

#[test]
fn ld1_1053() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(0).B16 * 1}, [x21], X(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 72, D5, 4C", "ld1 {V(0).B16 * 1}, [x21], X(21)");
}

#[test]
fn ld1_1054() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.B8 * 1}, [XSP(17)], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, 72, C8, 0C", "ld1 {v9.B8 * 1}, [XSP(17)], x8");
}

#[test]
fn ld1_1055() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.H8 * 1}, [XSP(11)], X(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 75, C0, 4C", "ld1 {v22.H8 * 1}, [XSP(11)], X(0)");
}

#[test]
fn ld1_1056() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.H4 * 1}, [x19], X(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 76, D1, 0C", "ld1 {v28.H4 * 1}, [x19], X(17)");
}

#[test]
fn ld1_1057() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.S4 * 1}, [XSP(18)], X(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 7A, D0, 4C", "ld1 {v19.S4 * 1}, [XSP(18)], X(16)");
}

#[test]
fn ld1_1058() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v25.S2 * 1}, [x14], X(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 79, CD, 0C", "ld1 {v25.S2 * 1}, [x14], X(13)");
}

#[test]
fn ld1_1059() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(28).D2 * 1}, [x21], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 7E, DD, 4C", "ld1 {V(28).D2 * 1}, [x21], X(29)");
}

#[test]
fn ld1_1060() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.D1 * 1}, [x28], X(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 7F, D1, 0C", "ld1 {v22.D1 * 1}, [x28], X(17)");
}

#[test]
fn ld1_1061() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.B8 * 2}, [XSP(1)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, A0, DF, 0C", "ld1 {v20.B8 * 2}, [XSP(1)], 16");
}

#[test]
fn ld1_1062() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).H4 * 2}, [XSP(8)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, A5, DF, 0C", "ld1 {V(20).H4 * 2}, [XSP(8)], 16");
}

#[test]
fn ld1_1063() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v27.S2 * 2}, [x17], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, AA, DF, 0C", "ld1 {v27.S2 * 2}, [x17], 16");
}

#[test]
fn ld1_1064() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.D1 * 2}, [XSP(25)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "36, AF, DF, 0C", "ld1 {v22.D1 * 2}, [XSP(25)], 16");
}

#[test]
fn ld1_1065() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(24).B16 * 2}, [XSP(7)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, A0, DF, 4C", "ld1 {V(24).B16 * 2}, [XSP(7)], 32");
}

#[test]
fn ld1_1066() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(15).H8 * 2}, [x0], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, A4, DF, 4C", "ld1 {V(15).H8 * 2}, [x0], 32");
}

#[test]
fn ld1_1067() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.S4 * 2}, [x21], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, AA, DF, 4C", "ld1 {v13.S4 * 2}, [x21], 32");
}

#[test]
fn ld1_1068() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(27).D2 * 2}, [x29], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, AF, DF, 4C", "ld1 {V(27).D2 * 2}, [x29], 32");
}

#[test]
fn ld1_1069() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.B16 * 2}, [x6], x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, A0, CB, 4C", "ld1 {v16.B16 * 2}, [x6], x11");
}

#[test]
fn ld1_1070() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).B8 * 2}, [x5], x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, A0, DC, 0C", "ld1 {V(2).B8 * 2}, [x5], x28");
}

#[test]
fn ld1_1071() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.H8 * 2}, [XSP(16)], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, A6, D4, 4C", "ld1 {v20.H8 * 2}, [XSP(16)], x20");
}

#[test]
fn ld1_1072() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).H4 * 2}, [x3], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, A4, C7, 0C", "ld1 {V(6).H4 * 2}, [x3], x7");
}

#[test]
fn ld1_1073() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.S4 * 2}, [XSP(10)], X(9)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, A9, C9, 4C", "ld1 {v9.S4 * 2}, [XSP(10)], X(9)");
}

#[test]
fn ld1_1074() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(15).S2 * 2}, [x25], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2F, AB, C4, 0C", "ld1 {V(15).S2 * 2}, [x25], x4");
}

#[test]
fn ld1_1075() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.D2 * 2}, [x14], x22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, AD, D6, 4C", "ld1 {v9.D2 * 2}, [x14], x22");
}

#[test]
fn ld1_1076() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(17).D1 * 2}, [XSP(25)], x1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, AF, C1, 0C", "ld1 {V(17).D1 * 2}, [XSP(25)], x1");
}

#[test]
fn ld1_1077() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v14.B8 * 3}, [x22], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 62, DF, 0C", "ld1 {v14.B8 * 3}, [x22], 24");
}

#[test]
fn ld1_1078() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.H4 * 3}, [x22], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 66, DF, 0C", "ld1 {v9.H4 * 3}, [x22], 24");
}

#[test]
fn ld1_1079() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v21.S2 * 3}, [XSP(6)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 68, DF, 0C", "ld1 {v21.S2 * 3}, [XSP(6)], 24");
}

#[test]
fn ld1_1080() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.D1 * 3}, [XSP(22)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CD, 6E, DF, 0C", "ld1 {v13.D1 * 3}, [XSP(22)], 24");
}

#[test]
fn ld1_1081() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.B16 * 3}, [XSP(20)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 62, DF, 4C", "ld1 {v20.B16 * 3}, [XSP(20)], 48");
}

#[test]
fn ld1_1082() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v31.H8 * 3}, [XSP(30)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 67, DF, 4C", "ld1 {v31.H8 * 3}, [XSP(30)], 48");
}

#[test]
fn ld1_1083() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.S4 * 3}, [x16], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 6A, DF, 4C", "ld1 {v9.S4 * 3}, [x16], 48");
}

#[test]
fn ld1_1084() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(10).D2 * 3}, [x2], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 6C, DF, 4C", "ld1 {V(10).D2 * 3}, [x2], 48");
}

#[test]
fn ld1_1085() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v3.B16 * 3}, [XSP(8)], x13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 61, CD, 4C", "ld1 {v3.B16 * 3}, [XSP(8)], x13");
}

#[test]
fn ld1_1086() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.B8 * 3}, [XSP(2)], x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 60, DA, 0C", "ld1 {v16.B8 * 3}, [XSP(2)], x26");
}

#[test]
fn ld1_1087() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(25).H8 * 3}, [x28], X(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 67, C3, 4C", "ld1 {V(25).H8 * 3}, [x28], X(3)");
}

#[test]
fn ld1_1088() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(0).H4 * 3}, [XSP(2)], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 64, CB, 0C", "ld1 {V(0).H4 * 3}, [XSP(2)], X(11)");
}

#[test]
fn ld1_1089() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(29).S4 * 3}, [XSP(2)], x0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5D, 68, C0, 4C", "ld1 {V(29).S4 * 3}, [XSP(2)], x0");
}

#[test]
fn ld1_1090() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v11.S2 * 3}, [x12], X(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 69, D4, 0C", "ld1 {v11.S2 * 3}, [x12], X(20)");
}

#[test]
fn ld1_1091() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(25).D2 * 3}, [XSP(14)], x18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 6D, D2, 4C", "ld1 {V(25).D2 * 3}, [XSP(14)], x18");
}

#[test]
fn ld1_1092() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.D1 * 3}, [XSP(30)], X(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, 6F, C2, 0C", "ld1 {v16.D1 * 3}, [XSP(30)], X(2)");
}

#[test]
fn ld1_1093() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).B8 * 4}, [XSP(6)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 20, DF, 0C", "ld1 {V(12).B8 * 4}, [XSP(6)], 32");
}

#[test]
fn ld1_1094() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v6.H4 * 4}, [XSP(2)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 24, DF, 0C", "ld1 {v6.H4 * 4}, [XSP(2)], 32");
}

#[test]
fn ld1_1095() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).S2 * 4}, [x25], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 2B, DF, 0C", "ld1 {V(6).S2 * 4}, [x25], 32");
}

#[test]
fn ld1_1096() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v8.D1 * 4}, [XSP(25)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 2F, DF, 0C", "ld1 {v8.D1 * 4}, [XSP(25)], 32");
}

#[test]
fn ld1_1097() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(18).B16 * 4}, [XSP(26)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 23, DF, 4C", "ld1 {V(18).B16 * 4}, [XSP(26)], 64");
}

#[test]
fn ld1_1098() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v10.H8 * 4}, [XSP(30)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, 27, DF, 4C", "ld1 {v10.H8 * 4}, [XSP(30)], 64");
}

#[test]
fn ld1_1099() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v0.S4 * 4}, [XSP(19)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 2A, DF, 4C", "ld1 {v0.S4 * 4}, [XSP(19)], 64");
}

#[test]
fn ld1_1100() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.D2 * 4}, [XSP(17)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 2E, DF, 4C", "ld1 {v13.D2 * 4}, [XSP(17)], 64");
}

#[test]
fn ld1_1101() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v31.B16 * 4}, [x2], x12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 20, CC, 4C", "ld1 {v31.B16 * 4}, [x2], x12");
}

#[test]
fn ld1_1102() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v26.B8 * 4}, [XSP(0)], x13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 20, CD, 0C", "ld1 {v26.B8 * 4}, [XSP(0)], x13");
}

#[test]
fn ld1_1103() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).H8 * 4}, [XSP(22)], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, 26, D4, 4C", "ld1 {V(2).H8 * 4}, [XSP(22)], x20");
}

#[test]
fn ld1_1104() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(10).H4 * 4}, [XSP(14)], x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, 25, C9, 0C", "ld1 {V(10).H4 * 4}, [XSP(14)], x9");
}

#[test]
fn ld1_1105() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.S4 * 4}, [XSP(19)], x13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, 2A, CD, 4C", "ld1 {v20.S4 * 4}, [XSP(19)], x13");
}

#[test]
fn ld1_1106() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v0.S2 * 4}, [XSP(16)], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 2A, DD, 0C", "ld1 {v0.S2 * 4}, [XSP(16)], X(29)");
}

#[test]
fn ld1_1107() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.D2 * 4}, [XSP(0)], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 2C, D7, 4C", "ld1 {v9.D2 * 4}, [XSP(0)], x23");
}

#[test]
fn ld1_1108() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.D1 * 4}, [x9], X(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, 2D, C6, 0C", "ld1 {v9.D1 * 4}, [x9], X(6)");
}

#[test]
fn ld1_1109() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(29).B * 1}[9], [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BD, 07, 40, 4D", "ld1 {V(29).B * 1}[9], [XSP(29)]");
}

#[test]
fn ld1_1110() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(13).H * 1}[2], [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 53, 40, 0D", "ld1 {V(13).H * 1}[2], [x27]");
}

#[test]
fn ld1_1111() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.S * 1}[1], [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 92, 40, 0D", "ld1 {v28.S * 1}[1], [x19]");
}

#[test]
fn ld1_1112() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).D * 1}[1], [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 84, 40, 4D", "ld1 {V(23).D * 1}[1], [XSP(3)]");
}

#[test]
fn ld1_1113() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).B * 1}[11], [XSP(24)], 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, 0F, DF, 4D", "ld1 {V(14).B * 1}[11], [XSP(24)], 1");
}

#[test]
fn ld1_1114() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(27).B * 1}[14], [x10], X(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 19, D4, 4D", "ld1 {V(27).B * 1}[14], [x10], X(20)");
}

#[test]
fn ld1_1115() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(11).H * 1}[6], [x6], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 50, DF, 4D", "ld1 {V(11).H * 1}[6], [x6], 2");
}

#[test]
fn ld1_1116() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.H * 1}[0], [XSP(5)], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, 40, C4, 0D", "ld1 {v20.H * 1}[0], [XSP(5)], x4");
}

#[test]
fn ld1_1117() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(17).S * 1}[2], [XSP(25)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 83, DF, 4D", "ld1 {V(17).S * 1}[2], [XSP(25)], 4");
}

#[test]
fn ld1_1118() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(4).S * 1}[1], [XSP(1)], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 90, C4, 0D", "ld1 {V(4).S * 1}[1], [XSP(1)], X(4)");
}

#[test]
fn ld1_1119() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v5.D * 1}[1], [XSP(14)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 85, DF, 4D", "ld1 {v5.D * 1}[1], [XSP(14)], 8");
}

#[test]
fn ld1_1120() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(8).D * 1}[1], [x14], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 85, D4, 4D", "ld1 {V(8).D * 1}[1], [x14], x20");
}

#[test]
fn ld1r_1121() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v20.B16 * 1}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, C1, 40, 4D", "ld1r {v20.B16 * 1}, [XSP(9)]");
}

#[test]
fn ld1r_1122() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v5.B8 * 1}, [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, C3, 40, 0D", "ld1r {v5.B8 * 1}, [XSP(28)]");
}

#[test]
fn ld1r_1123() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(29).H8 * 1}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, C7, 40, 4D", "ld1r {V(29).H8 * 1}, [x30]");
}

#[test]
fn ld1r_1124() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(28).H4 * 1}, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, C5, 40, 0D", "ld1r {V(28).H4 * 1}, [x10]");
}

#[test]
fn ld1r_1125() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v1.S4 * 1}, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, CB, 40, 4D", "ld1r {v1.S4 * 1}, [XSP(31)]");
}

#[test]
fn ld1r_1126() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(3).S2 * 1}, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, CB, 40, 0D", "ld1r {V(3).S2 * 1}, [XSP(26)]");
}

#[test]
fn ld1r_1127() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v15.D2 * 1}, [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6F, CF, 40, 4D", "ld1r {v15.D2 * 1}, [XSP(27)]");
}

#[test]
fn ld1r_1128() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v22.D1 * 1}, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, CF, 40, 0D", "ld1r {v22.D1 * 1}, [x26]");
}

#[test]
fn ld1r_1129() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(6).B16 * 1}, [XSP(28)], 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, C3, DF, 4D", "ld1r {V(6).B16 * 1}, [XSP(28)], 1");
}

#[test]
fn ld1r_1130() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(19).B8 * 1}, [x2], 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, C0, DF, 0D", "ld1r {V(19).B8 * 1}, [x2], 1");
}

#[test]
fn ld1r_1131() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(26).H8 * 1}, [x12], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, C5, DF, 4D", "ld1r {V(26).H8 * 1}, [x12], 2");
}

#[test]
fn ld1r_1132() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v13.H4 * 1}, [XSP(3)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, C4, DF, 0D", "ld1r {v13.H4 * 1}, [XSP(3)], 2");
}

#[test]
fn ld1r_1133() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v12.S4 * 1}, [x4], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, C8, DF, 4D", "ld1r {v12.S4 * 1}, [x4], 4");
}

#[test]
fn ld1r_1134() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(27).S2 * 1}, [x28], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, CB, DF, 0D", "ld1r {V(27).S2 * 1}, [x28], 4");
}

#[test]
fn ld1r_1135() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v31.D2 * 1}, [x25], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, CF, DF, 4D", "ld1r {v31.D2 * 1}, [x25], 8");
}

#[test]
fn ld1r_1136() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v25.D1 * 1}, [XSP(24)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, CF, DF, 0D", "ld1r {v25.D1 * 1}, [XSP(24)], 8");
}

#[test]
fn ld1r_1137() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v9.B16 * 1}, [XSP(17)], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, C2, C7, 4D", "ld1r {v9.B16 * 1}, [XSP(17)], x7");
}

#[test]
fn ld1r_1138() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(0).B8 * 1}, [XSP(1)], x17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, C0, D1, 0D", "ld1r {V(0).B8 * 1}, [XSP(1)], x17");
}

#[test]
fn ld1r_1139() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(2).H8 * 1}, [x10], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, C5, D3, 4D", "ld1r {V(2).H8 * 1}, [x10], X(19)");
}

#[test]
fn ld1r_1140() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v17.H4 * 1}, [x10], X(22)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, C5, D6, 0D", "ld1r {v17.H4 * 1}, [x10], X(22)");
}

#[test]
fn ld1r_1141() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(2).S4 * 1}, [x5], x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, C8, DB, 4D", "ld1r {V(2).S4 * 1}, [x5], x27");
}

#[test]
fn ld1r_1142() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v7.S2 * 1}, [x30], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, CB, D4, 0D", "ld1r {v7.S2 * 1}, [x30], x20");
}

#[test]
fn ld1r_1143() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v23.D2 * 1}, [x22], x16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, CE, D0, 4D", "ld1r {v23.D2 * 1}, [x22], x16");
}

#[test]
fn ld1r_1144() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(4).D1 * 1}, [XSP(27)], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, CF, CA, 0D", "ld1r {V(4).D1 * 1}, [XSP(27)], x10");
}

#[test]
fn ld2_1145() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v6.B16 * 2}, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 80, 40, 4C", "ld2 {v6.B16 * 2}, [x6]");
}

#[test]
fn ld2_1146() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v20.B8 * 2}, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 83, 40, 0C", "ld2 {v20.B8 * 2}, [XSP(31)]");
}

#[test]
fn ld2_1147() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v29.H8 * 2}, [XSP(17)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 86, 40, 4C", "ld2 {v29.H8 * 2}, [XSP(17)]");
}

#[test]
fn ld2_1148() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v13.H4 * 2}, [x9]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 85, 40, 0C", "ld2 {v13.H4 * 2}, [x9]");
}

#[test]
fn ld2_1149() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(12).S4 * 2}, [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, 88, 40, 4C", "ld2 {V(12).S4 * 2}, [XSP(1)]");
}

#[test]
fn ld2_1150() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(17).S2 * 2}, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, 8B, 40, 0C", "ld2 {V(17).S2 * 2}, [XSP(31)]");
}

#[test]
fn ld2_1151() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(25).D2 * 2}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 8C, 40, 4C", "ld2 {V(25).D2 * 2}, [x5]");
}

#[test]
fn ld2_1152() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v21.B8 * 2}, [XSP(12)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 81, DF, 0C", "ld2 {v21.B8 * 2}, [XSP(12)], 16");
}

#[test]
fn ld2_1153() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(4).H4 * 2}, [x25], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 87, DF, 0C", "ld2 {V(4).H4 * 2}, [x25], 16");
}

#[test]
fn ld2_1154() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(1).S2 * 2}, [x16], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 8A, DF, 0C", "ld2 {V(1).S2 * 2}, [x16], 16");
}

#[test]
fn ld2_1155() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(21).B16 * 2}, [XSP(28)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 83, DF, 4C", "ld2 {V(21).B16 * 2}, [XSP(28)], 32");
}

#[test]
fn ld2_1156() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(11).H8 * 2}, [x2], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 84, DF, 4C", "ld2 {V(11).H8 * 2}, [x2], 32");
}

#[test]
fn ld2_1157() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(16).S4 * 2}, [XSP(20)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, 8A, DF, 4C", "ld2 {V(16).S4 * 2}, [XSP(20)], 32");
}

#[test]
fn ld2_1158() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(27).D2 * 2}, [XSP(16)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 8E, DF, 4C", "ld2 {V(27).D2 * 2}, [XSP(16)], 32");
}

#[test]
fn ld2_1159() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v14.B16 * 2}, [XSP(13)], X(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 81, C8, 4C", "ld2 {v14.B16 * 2}, [XSP(13)], X(8)");
}

#[test]
fn ld2_1160() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v15.B8 * 2}, [XSP(12)], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, 81, C8, 0C", "ld2 {v15.B8 * 2}, [XSP(12)], x8");
}

#[test]
fn ld2_1161() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v9.H8 * 2}, [x19], x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 86, DB, 4C", "ld2 {v9.H8 * 2}, [x19], x27");
}

#[test]
fn ld2_1162() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v17.H4 * 2}, [XSP(30)], X(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 87, D7, 0C", "ld2 {v17.H4 * 2}, [XSP(30)], X(23)");
}

#[test]
fn ld2_1163() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(17).S4 * 2}, [XSP(5)], X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 88, DA, 4C", "ld2 {V(17).S4 * 2}, [XSP(5)], X(26)");
}

#[test]
fn ld2_1164() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(24).S2 * 2}, [x6], X(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 88, C8, 0C", "ld2 {V(24).S2 * 2}, [x6], X(8)");
}

#[test]
fn ld2_1165() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v3.D2 * 2}, [x21], X(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, 8E, C1, 4C", "ld2 {v3.D2 * 2}, [x21], X(1)");
}

#[test]
fn ld2_1166() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v28.B * 2}[12], [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 13, 60, 4D", "ld2 {v28.B * 2}[12], [x25]");
}

#[test]
fn ld2_1167() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v3.H * 2}[1], [x18]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, 4A, 60, 0D", "ld2 {v3.H * 2}[1], [x18]");
}

#[test]
fn ld2_1168() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v12.S * 2}[2], [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 83, 60, 4D", "ld2 {v12.S * 2}[2], [XSP(26)]");
}

#[test]
fn ld2_1169() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v14.D * 2}[0], [XSP(17)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 86, 60, 0D", "ld2 {v14.D * 2}[0], [XSP(17)]");
}

#[test]
fn ld2_1170() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v26.B * 2}[12], [XSP(16)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 12, FF, 4D", "ld2 {v26.B * 2}[12], [XSP(16)], 2");
}

#[test]
fn ld2_1171() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v7.B * 2}[9], [x22], X(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 06, E2, 4D", "ld2 {v7.B * 2}[9], [x22], X(2)");
}

#[test]
fn ld2_1172() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(8).H * 2}[0], [x25], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 43, FF, 0D", "ld2 {V(8).H * 2}[0], [x25], 4");
}

#[test]
fn ld2_1173() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v6.H * 2}[5], [XSP(3)], x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, 48, F3, 4D", "ld2 {v6.H * 2}[5], [XSP(3)], x19");
}

#[test]
fn ld2_1174() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v31.S * 2}[3], [x11], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 91, FF, 4D", "ld2 {v31.S * 2}[3], [x11], 8");
}

#[test]
fn ld2_1175() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v11.S * 2}[1], [x16], x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 92, E5, 0D", "ld2 {v11.S * 2}[1], [x16], x5");
}

#[test]
fn ld2_1176() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v23.D * 2}[1], [XSP(21)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 86, FF, 4D", "ld2 {v23.D * 2}[1], [XSP(21)], 16");
}

#[test]
fn ld2_1177() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v23.D * 2}[1], [x13], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 85, E7, 4D", "ld2 {v23.D * 2}[1], [x13], x7");
}

#[test]
fn ld2r_1178() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v23.B16 * 2}, [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, C0, 60, 4D", "ld2r {v23.B16 * 2}, [XSP(3)]");
}

#[test]
fn ld2r_1179() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v10.B8 * 2}, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, C1, 60, 0D", "ld2r {v10.B8 * 2}, [x14]");
}

#[test]
fn ld2r_1180() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(19).H8 * 2}, [XSP(11)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, C5, 60, 4D", "ld2r {V(19).H8 * 2}, [XSP(11)]");
}

#[test]
fn ld2r_1181() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v13.H4 * 2}, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, C5, 60, 0D", "ld2r {v13.H4 * 2}, [x8]");
}

#[test]
fn ld2r_1182() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(9).S4 * 2}, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, CA, 60, 4D", "ld2r {V(9).S4 * 2}, [XSP(18)]");
}

#[test]
fn ld2r_1183() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(9).S2 * 2}, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, CB, 60, 0D", "ld2r {V(9).S2 * 2}, [x25]");
}

#[test]
fn ld2r_1184() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v18.D2 * 2}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, CC, 60, 4D", "ld2r {v18.D2 * 2}, [x5]");
}

#[test]
fn ld2r_1185() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(20).D1 * 2}, [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, CE, 60, 0D", "ld2r {V(20).D1 * 2}, [x20]");
}

#[test]
fn ld2r_1186() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(26).B16 * 2}, [x29], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, C3, FF, 4D", "ld2r {V(26).B16 * 2}, [x29], 2");
}

#[test]
fn ld2r_1187() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v30.B8 * 2}, [XSP(6)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, C0, FF, 0D", "ld2r {v30.B8 * 2}, [XSP(6)], 2");
}

#[test]
fn ld2r_1188() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(21).H8 * 2}, [XSP(30)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, C7, FF, 4D", "ld2r {V(21).H8 * 2}, [XSP(30)], 4");
}

#[test]
fn ld2r_1189() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v14.H4 * 2}, [x11], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, C5, FF, 0D", "ld2r {v14.H4 * 2}, [x11], 4");
}

#[test]
fn ld2r_1190() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v12.S4 * 2}, [x29], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, CB, FF, 4D", "ld2r {v12.S4 * 2}, [x29], 8");
}

#[test]
fn ld2r_1191() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v21.S2 * 2}, [XSP(26)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, CB, FF, 0D", "ld2r {v21.S2 * 2}, [XSP(26)], 8");
}

#[test]
fn ld2r_1192() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v30.D2 * 2}, [XSP(3)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, CC, FF, 4D", "ld2r {v30.D2 * 2}, [XSP(3)], 16");
}

#[test]
fn ld2r_1193() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(27).D1 * 2}, [XSP(24)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, CF, FF, 0D", "ld2r {V(27).D1 * 2}, [XSP(24)], 16");
}

#[test]
fn ld2r_1194() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(14).B16 * 2}, [x16], X(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, C2, E6, 4D", "ld2r {V(14).B16 * 2}, [x16], X(6)");
}

#[test]
fn ld2r_1195() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v1.B8 * 2}, [XSP(18)], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, C2, F4, 0D", "ld2r {v1.B8 * 2}, [XSP(18)], x20");
}

#[test]
fn ld2r_1196() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(26).H8 * 2}, [x20], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, C6, FD, 4D", "ld2r {V(26).H8 * 2}, [x20], X(29)");
}

#[test]
fn ld2r_1197() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(5).H4 * 2}, [x28], x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, C7, F3, 0D", "ld2r {V(5).H4 * 2}, [x28], x19");
}

#[test]
fn ld2r_1198() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(27).S4 * 2}, [x12], X(14)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, C9, EE, 4D", "ld2r {V(27).S4 * 2}, [x12], X(14)");
}

#[test]
fn ld2r_1199() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v3.S2 * 2}, [XSP(29)], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, CB, FC, 0D", "ld2r {v3.S2 * 2}, [XSP(29)], X(28)");
}

#[test]
fn ld2r_1200() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(31).D2 * 2}, [x4], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, CC, E4, 4D", "ld2r {V(31).D2 * 2}, [x4], X(4)");
}

#[test]
fn ld2r_1201() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v10.D1 * 2}, [x17], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, CE, E4, 0D", "ld2r {v10.D1 * 2}, [x17], X(4)");
}

#[test]
fn ld3_1202() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(16).B16 * 3}, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 43, 40, 4C", "ld3 {V(16).B16 * 3}, [XSP(26)]");
}

#[test]
fn ld3_1203() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v30.B8 * 3}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, 40, 40, 0C", "ld3 {v30.B8 * 3}, [x5]");
}

#[test]
fn ld3_1204() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(3).H8 * 3}, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 45, 40, 4C", "ld3 {V(3).H8 * 3}, [x8]");
}

#[test]
fn ld3_1205() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v27.H4 * 3}, [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 47, 40, 0C", "ld3 {v27.H4 * 3}, [sp]");
}

#[test]
fn ld3_1206() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(14).S4 * 3}, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 48, 40, 4C", "ld3 {V(14).S4 * 3}, [x6]");
}

#[test]
fn ld3_1207() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v9.S2 * 3}, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, 4B, 40, 0C", "ld3 {v9.S2 * 3}, [x25]");
}

#[test]
fn ld3_1208() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v10.D2 * 3}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, 4C, 40, 4C", "ld3 {v10.D2 * 3}, [x5]");
}

#[test]
fn ld3_1209() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v0.B8 * 3}, [XSP(18)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 42, DF, 0C", "ld3 {v0.B8 * 3}, [XSP(18)], 24");
}

#[test]
fn ld3_1210() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(11).H4 * 3}, [XSP(16)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 46, DF, 0C", "ld3 {V(11).H4 * 3}, [XSP(16)], 24");
}

#[test]
fn ld3_1211() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).S2 * 3}, [XSP(19)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 4A, DF, 0C", "ld3 {V(0).S2 * 3}, [XSP(19)], 24");
}

#[test]
fn ld3_1212() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(14).B16 * 3}, [XSP(29)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 43, DF, 4C", "ld3 {V(14).B16 * 3}, [XSP(29)], 48");
}

#[test]
fn ld3_1213() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(22).H8 * 3}, [XSP(28)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 47, DF, 4C", "ld3 {V(22).H8 * 3}, [XSP(28)], 48");
}

#[test]
fn ld3_1214() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(19).S4 * 3}, [XSP(16)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, 4A, DF, 4C", "ld3 {V(19).S4 * 3}, [XSP(16)], 48");
}

#[test]
fn ld3_1215() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(23).D2 * 3}, [x21], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 4E, DF, 4C", "ld3 {V(23).D2 * 3}, [x21], 48");
}

#[test]
fn ld3_1216() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v8.B16 * 3}, [x17], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 42, C4, 4C", "ld3 {v8.B16 * 3}, [x17], X(4)");
}

#[test]
fn ld3_1217() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).B8 * 3}, [XSP(17)], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 42, C4, 0C", "ld3 {V(0).B8 * 3}, [XSP(17)], x4");
}

#[test]
fn ld3_1218() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v6.H8 * 3}, [x19], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, 46, C8, 4C", "ld3 {v6.H8 * 3}, [x19], x8");
}

#[test]
fn ld3_1219() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v25.H4 * 3}, [XSP(27)], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 47, DD, 0C", "ld3 {v25.H4 * 3}, [XSP(27)], X(29)");
}

#[test]
fn ld3_1220() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v15.S4 * 3}, [XSP(13)], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 49, C8, 4C", "ld3 {v15.S4 * 3}, [XSP(13)], x8");
}

#[test]
fn ld3_1221() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(28).S2 * 3}, [XSP(18)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, 4A, D9, 0C", "ld3 {V(28).S2 * 3}, [XSP(18)], X(25)");
}

#[test]
fn ld3_1222() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(29).D2 * 3}, [x24], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 4F, C2, 4C", "ld3 {V(29).D2 * 3}, [x24], x2");
}

#[test]
fn ld3_1223() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).B * 3}[14], [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 39, 40, 4D", "ld3 {V(0).B * 3}[14], [x10]");
}

#[test]
fn ld3_1224() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v21.H * 3}[4], [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 61, 40, 4D", "ld3 {v21.H * 3}[4], [XSP(13)]");
}

#[test]
fn ld3_1225() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v8.S * 3}[0], [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, A2, 40, 0D", "ld3 {v8.S * 3}[0], [XSP(16)]");
}

#[test]
fn ld3_1226() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).D * 3}[1], [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, A7, 40, 4D", "ld3 {V(0).D * 3}[1], [x26]");
}

#[test]
fn ld3_1227() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v1.B * 3}[3], [x8], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 2D, DF, 0D", "ld3 {v1.B * 3}[3], [x8], 3");
}

#[test]
fn ld3_1228() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(11).B * 3}[4], [XSP(29)], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AB, 33, C2, 0D", "ld3 {V(11).B * 3}[4], [XSP(29)], x2");
}

#[test]
fn ld3_1229() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(20).H * 3}[3], [x4], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 78, DF, 0D", "ld3 {V(20).H * 3}[3], [x4], 6");
}

#[test]
fn ld3_1230() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(5).H * 3}[5], [XSP(19)], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 6A, C7, 4D", "ld3 {V(5).H * 3}[5], [XSP(19)], x7");
}

#[test]
fn ld3_1231() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(3).S * 3}[0], [XSP(19)], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, A2, DF, 0D", "ld3 {V(3).S * 3}[0], [XSP(19)], 12");
}

#[test]
fn ld3_1232() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(14).S * 3}[3], [XSP(23)], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, B2, CF, 4D", "ld3 {V(14).S * 3}[3], [XSP(23)], X(15)");
}

#[test]
fn ld3_1233() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(22).D * 3}[0], [XSP(25)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "36, A7, DF, 0D", "ld3 {V(22).D * 3}[0], [XSP(25)], 24");
}

#[test]
fn ld3_1234() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(24).D * 3}[0], [x14], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, A5, CB, 0D", "ld3 {V(24).D * 3}[0], [x14], X(11)");
}

#[test]
fn ld3r_1235() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(29).B16 * 3}, [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FD, E0, 40, 4D", "ld3r {V(29).B16 * 3}, [x7]");
}

#[test]
fn ld3r_1236() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v4.B8 * 3}, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, E2, 40, 0D", "ld3r {v4.B8 * 3}, [XSP(18)]");
}

#[test]
fn ld3r_1237() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(10).H8 * 3}, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, E4, 40, 4D", "ld3r {V(10).H8 * 3}, [XSP(7)]");
}

#[test]
fn ld3r_1238() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(19).H4 * 3}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, E5, 40, 0D", "ld3r {V(19).H4 * 3}, [XSP(13)]");
}

#[test]
fn ld3r_1239() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v2.S4 * 3}, [XSP(10)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, E9, 40, 4D", "ld3r {v2.S4 * 3}, [XSP(10)]");
}

#[test]
fn ld3r_1240() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v3.S2 * 3}, [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, EB, 40, 0D", "ld3r {v3.S2 * 3}, [sp]");
}

#[test]
fn ld3r_1241() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).D2 * 3}, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, EF, 40, 4D", "ld3r {V(3).D2 * 3}, [XSP(30)]");
}

#[test]
fn ld3r_1242() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.D1 * 3}, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, EE, 40, 0D", "ld3r {v26.D1 * 3}, [x21]");
}

#[test]
fn ld3r_1243() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(16).B16 * 3}, [XSP(22)], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, E2, DF, 4D", "ld3r {V(16).B16 * 3}, [XSP(22)], 3");
}

#[test]
fn ld3r_1244() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v12.B8 * 3}, [XSP(30)], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, E3, DF, 0D", "ld3r {v12.B8 * 3}, [XSP(30)], 3");
}

#[test]
fn ld3r_1245() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.H8 * 3}, [XSP(20)], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, E6, DF, 4D", "ld3r {v26.H8 * 3}, [XSP(20)], 6");
}

#[test]
fn ld3r_1246() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).H4 * 3}, [x26], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, E7, DF, 0D", "ld3r {V(3).H4 * 3}, [x26], 6");
}

#[test]
fn ld3r_1247() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).S4 * 3}, [XSP(29)], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, EB, DF, 4D", "ld3r {V(3).S4 * 3}, [XSP(29)], 12");
}

#[test]
fn ld3r_1248() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(14).S2 * 3}, [XSP(21)], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, EA, DF, 0D", "ld3r {V(14).S2 * 3}, [XSP(21)], 12");
}

#[test]
fn ld3r_1249() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(19).D2 * 3}, [XSP(22)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, EE, DF, 4D", "ld3r {V(19).D2 * 3}, [XSP(22)], 24");
}

#[test]
fn ld3r_1250() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v11.D1 * 3}, [x26], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, EF, DF, 0D", "ld3r {v11.D1 * 3}, [x26], 24");
}

#[test]
fn ld3r_1251() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(11).B16 * 3}, [XSP(6)], X(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, E0, D5, 4D", "ld3r {V(11).B16 * 3}, [XSP(6)], X(21)");
}

#[test]
fn ld3r_1252() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v2.B8 * 3}, [sp], x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, E3, CE, 0D", "ld3r {v2.B8 * 3}, [sp], x14");
}

#[test]
fn ld3r_1253() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(28).H8 * 3}, [x11], x1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, E5, C1, 4D", "ld3r {V(28).H8 * 3}, [x11], x1");
}

#[test]
fn ld3r_1254() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v18.H4 * 3}, [XSP(22)], X(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, E6, CC, 0D", "ld3r {v18.H4 * 3}, [XSP(22)], X(12)");
}

#[test]
fn ld3r_1255() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(31).S4 * 3}, [XSP(17)], x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, EA, CB, 4D", "ld3r {V(31).S4 * 3}, [XSP(17)], x11");
}

#[test]
fn ld3r_1256() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.S2 * 3}, [x18], X(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, EA, D7, 0D", "ld3r {v26.S2 * 3}, [x18], X(23)");
}

#[test]
fn ld3r_1257() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v27.D2 * 3}, [x10], x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, ED, D3, 4D", "ld3r {v27.D2 * 3}, [x10], x19");
}

#[test]
fn ld3r_1258() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(14).D1 * 3}, [XSP(15)], x1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, ED, C1, 0D", "ld3r {V(14).D1 * 3}, [XSP(15)], x1");
}

#[test]
fn ld4_1259() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(25).B16 * 4}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 01, 40, 4C", "ld4 {V(25).B16 * 4}, [XSP(13)]");
}

#[test]
fn ld4_1260() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(27).B8 * 4}, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 00, 40, 0C", "ld4 {V(27).B8 * 4}, [XSP(0)]");
}

#[test]
fn ld4_1261() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.H8 * 4}, [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 06, 40, 4C", "ld4 {v20.H8 * 4}, [XSP(16)]");
}

#[test]
fn ld4_1262() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v3.H4 * 4}, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 05, 40, 0C", "ld4 {v3.H4 * 4}, [x14]");
}

#[test]
fn ld4_1263() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v17.S4 * 4}, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, 08, 40, 4C", "ld4 {v17.S4 * 4}, [x3]");
}

#[test]
fn ld4_1264() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(7).S2 * 4}, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 0B, 40, 0C", "ld4 {V(7).S2 * 4}, [XSP(25)]");
}

#[test]
fn ld4_1265() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.D2 * 4}, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 0C, 40, 4C", "ld4 {v20.D2 * 4}, [XSP(0)]");
}

#[test]
fn ld4_1266() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v8.B8 * 4}, [XSP(16)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 02, DF, 0C", "ld4 {v8.B8 * 4}, [XSP(16)], 32");
}

#[test]
fn ld4_1267() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(20).H4 * 4}, [XSP(5)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, 04, DF, 0C", "ld4 {V(20).H4 * 4}, [XSP(5)], 32");
}

#[test]
fn ld4_1268() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.S2 * 4}, [x23], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 0A, DF, 0C", "ld4 {v20.S2 * 4}, [x23], 32");
}

#[test]
fn ld4_1269() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(23).B16 * 4}, [XSP(23)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 02, DF, 4C", "ld4 {V(23).B16 * 4}, [XSP(23)], 64");
}

#[test]
fn ld4_1270() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(16).H8 * 4}, [XSP(8)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 05, DF, 4C", "ld4 {V(16).H8 * 4}, [XSP(8)], 64");
}

#[test]
fn ld4_1271() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(26).S4 * 4}, [XSP(26)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 0B, DF, 4C", "ld4 {V(26).S4 * 4}, [XSP(26)], 64");
}

#[test]
fn ld4_1272() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).D2 * 4}, [XSP(12)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 0D, DF, 4C", "ld4 {V(24).D2 * 4}, [XSP(12)], 64");
}

#[test]
fn ld4_1273() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(22).B16 * 4}, [x0], x17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, 00, D1, 4C", "ld4 {V(22).B16 * 4}, [x0], x17");
}

#[test]
fn ld4_1274() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(11).B8 * 4}, [x12], X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 01, DB, 0C", "ld4 {V(11).B8 * 4}, [x12], X(27)");
}

#[test]
fn ld4_1275() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).H8 * 4}, [XSP(20)], x12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 06, CC, 4C", "ld4 {V(24).H8 * 4}, [XSP(20)], x12");
}

#[test]
fn ld4_1276() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(21).H4 * 4}, [XSP(10)], x21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, 05, D5, 0C", "ld4 {V(21).H4 * 4}, [XSP(10)], x21");
}

#[test]
fn ld4_1277() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v30.S4 * 4}, [x26], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 0B, C2, 4C", "ld4 {v30.S4 * 4}, [x26], x2");
}

#[test]
fn ld4_1278() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(19).S2 * 4}, [XSP(5)], X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, 08, DB, 0C", "ld4 {V(19).S2 * 4}, [XSP(5)], X(27)");
}

#[test]
fn ld4_1279() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v21.D2 * 4}, [XSP(0)], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 0C, CA, 4C", "ld4 {v21.D2 * 4}, [XSP(0)], x10");
}

#[test]
fn ld4_1280() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(15).B * 4}[9], [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 24, 60, 4D", "ld4 {V(15).B * 4}[9], [XSP(0)]");
}

#[test]
fn ld4_1281() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.H * 4}[4], [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 60, 60, 4D", "ld4 {v25.H * 4}[4], [XSP(6)]");
}

#[test]
fn ld4_1282() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.S * 4}[0], [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, A2, 60, 0D", "ld4 {v25.S * 4}[0], [x17]");
}

#[test]
fn ld4_1283() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(28).D * 4}[0], [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, A5, 60, 0D", "ld4 {V(28).D * 4}[0], [XSP(9)]");
}

#[test]
fn ld4_1284() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.B * 4}[4], [XSP(23)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, 32, FF, 0D", "ld4 {v25.B * 4}[4], [XSP(23)], 4");
}

#[test]
fn ld4_1285() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).B * 4}[6], [x5], x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 38, F3, 0D", "ld4 {V(24).B * 4}[6], [x5], x19");
}

#[test]
fn ld4_1286() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(26).H * 4}[5], [XSP(9)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 69, FF, 4D", "ld4 {V(26).H * 4}[5], [XSP(9)], 8");
}

#[test]
fn ld4_1287() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v30.H * 4}[7], [x22], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, 7A, F7, 4D", "ld4 {v30.H * 4}[7], [x22], x23");
}

#[test]
fn ld4_1288() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v28.S * 4}[3], [XSP(29)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, B3, FF, 4D", "ld4 {v28.S * 4}[3], [XSP(29)], 16");
}

#[test]
fn ld4_1289() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v17.S * 4}[0], [x20], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "91, A2, F4, 0D", "ld4 {v17.S * 4}[0], [x20], x20");
}

#[test]
fn ld4_1290() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(10).D * 4}[1], [XSP(31)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, A7, FF, 4D", "ld4 {V(10).D * 4}[1], [XSP(31)], 32");
}

#[test]
fn ld4_1291() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(31).D * 4}[0], [x27], x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, A7, FC, 0D", "ld4 {V(31).D * 4}[0], [x27], x28");
}

#[test]
fn ld4r_1292() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v16.B16 * 4}, [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, E0, 60, 4D", "ld4r {v16.B16 * 4}, [XSP(1)]");
}

#[test]
fn ld4r_1293() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(27).B8 * 4}, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, E1, 60, 0D", "ld4r {V(27).B8 * 4}, [x15]");
}

#[test]
fn ld4r_1294() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(29).H8 * 4}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, E5, 60, 4D", "ld4r {V(29).H8 * 4}, [XSP(9)]");
}

#[test]
fn ld4r_1295() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v23.H4 * 4}, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, E4, 60, 0D", "ld4r {v23.H4 * 4}, [XSP(0)]");
}

#[test]
fn ld4r_1296() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(23).S4 * 4}, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, E8, 60, 4D", "ld4r {V(23).S4 * 4}, [x3]");
}

#[test]
fn ld4r_1297() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v10.S2 * 4}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, E9, 60, 0D", "ld4r {v10.S2 * 4}, [XSP(9)]");
}

#[test]
fn ld4r_1298() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v4.D2 * 4}, [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, ED, 60, 4D", "ld4r {v4.D2 * 4}, [XSP(14)]");
}

#[test]
fn ld4r_1299() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(11).D1 * 4}, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, EF, 60, 0D", "ld4r {V(11).D1 * 4}, [x27]");
}

#[test]
fn ld4r_1300() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v22.B16 * 4}, [x29], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B6, E3, FF, 4D", "ld4r {v22.B16 * 4}, [x29], 4");
}

#[test]
fn ld4r_1301() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v10.B8 * 4}, [XSP(1)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, E0, FF, 0D", "ld4r {v10.B8 * 4}, [XSP(1)], 4");
}

#[test]
fn ld4r_1302() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v29.H8 * 4}, [x22], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, E6, FF, 4D", "ld4r {v29.H8 * 4}, [x22], 8");
}

#[test]
fn ld4r_1303() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v26.H4 * 4}, [x26], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, E7, FF, 0D", "ld4r {v26.H4 * 4}, [x26], 8");
}

#[test]
fn ld4r_1304() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v25.S4 * 4}, [x13], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, E9, FF, 4D", "ld4r {v25.S4 * 4}, [x13], 16");
}

#[test]
fn ld4r_1305() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v2.S2 * 4}, [x9], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, E9, FF, 0D", "ld4r {v2.S2 * 4}, [x9], 16");
}

#[test]
fn ld4r_1306() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v24.D2 * 4}, [XSP(14)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, ED, FF, 4D", "ld4r {v24.D2 * 4}, [XSP(14)], 32");
}

#[test]
fn ld4r_1307() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(17).D1 * 4}, [x27], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, EF, FF, 0D", "ld4r {V(17).D1 * 4}, [x27], 32");
}

#[test]
fn ld4r_1308() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(20).B16 * 4}, [XSP(17)], X(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, E2, F5, 4D", "ld4r {V(20).B16 * 4}, [XSP(17)], X(21)");
}

#[test]
fn ld4r_1309() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v0.B8 * 4}, [x10], x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, E1, E9, 0D", "ld4r {v0.B8 * 4}, [x10], x9");
}

#[test]
fn ld4r_1310() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(9).H8 * 4}, [x27], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, E7, F7, 4D", "ld4r {V(9).H8 * 4}, [x27], x23");
}

#[test]
fn ld4r_1311() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v3.H4 * 4}, [x29], x0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, E7, E0, 0D", "ld4r {v3.H4 * 4}, [x29], x0");
}

#[test]
fn ld4r_1312() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(31).S4 * 4}, [XSP(21)], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, EA, F7, 4D", "ld4r {V(31).S4 * 4}, [XSP(21)], x23");
}

#[test]
fn ld4r_1313() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(17).S2 * 4}, [x0], x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, E8, E5, 0D", "ld4r {V(17).S2 * 4}, [x0], x5");
}

#[test]
fn ld4r_1314() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(23).D2 * 4}, [XSP(13)], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, ED, FD, 4D", "ld4r {V(23).D2 * 4}, [XSP(13)], X(29)");
}

#[test]
fn ld4r_1315() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(2).D1 * 4}, [XSP(19)], x22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, EE, F6, 0D", "ld4r {V(2).D1 * 4}, [XSP(19)], x22");
}

#[test]
fn ldadd_1316() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd w0, w9, [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 00, 20, B8", "ldadd w0, w9, [XSP(3)]");
}

#[test]
fn ldadd_1317() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd X(8), X(18), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 00, 28, F8", "ldadd X(8), X(18), [x7]");
}

#[test]
fn ldadda_1318() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda W(15), W(0), [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 03, AF, B8", "ldadda W(15), W(0), [sp]");
}

#[test]
fn ldadda_1319() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda X(24), x9, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 00, B8, F8", "ldadda X(24), x9, [x5]");
}

#[test]
fn ldaddab_1320() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddab w25, W(4), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 01, B9, 38", "ldaddab w25, W(4), [x8]");
}

#[test]
fn ldaddah_1321() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddah w18, W(24), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 02, B2, 78", "ldaddah w18, W(24), [x21]");
}

#[test]
fn ldaddal_1322() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal W(29), w4, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 02, FD, B8", "ldaddal W(29), w4, [x17]");
}

#[test]
fn ldaddal_1323() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal x22, X(2), [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, 01, F6, F8", "ldaddal x22, X(2), [x10]");
}

#[test]
fn ldaddalb_1324() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalb w12, w16, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 01, EC, 38", "ldaddalb w12, w16, [x11]");
}

#[test]
fn ldaddalh_1325() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalh W(2), W(14), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, 02, E2, 78", "ldaddalh W(2), W(14), [x20]");
}

#[test]
fn ldaddb_1326() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddb W(17), w4, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 03, 31, 38", "ldaddb W(17), w4, [x25]");
}

#[test]
fn ldaddh_1327() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddh w9, w2, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 03, 29, 78", "ldaddh w9, w2, [x24]");
}

#[test]
fn ldaddl_1328() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl W(11), w13, [XSP(21)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 02, 6B, B8", "ldaddl W(11), w13, [XSP(21)]");
}

#[test]
fn ldaddl_1329() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl X(26), X(27), [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 03, 7A, F8", "ldaddl X(26), X(27), [XSP(25)]");
}

#[test]
fn ldaddlb_1330() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlb W(30), W(7), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 02, 7E, 38", "ldaddlb W(30), W(7), [x20]");
}

#[test]
fn ldaddlh_1331() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlh w7, W(14), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, 02, 67, 78", "ldaddlh w7, W(14), [XSP(23)]");
}

#[test]
fn ldapr_1332() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr W(27), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, C2, BF, B8", "ldapr W(27), [XSP(23)]");
}

#[test]
fn ldapr_1333() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr X(18), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, C2, BF, F8", "ldapr X(18), [XSP(16)]");
}

#[test]
fn ldaprb_1334() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprb w5, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, C2, BF, 38", "ldaprb w5, [x19]");
}

#[test]
fn ldaprh_1335() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprh w23, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, C1, BF, 78", "ldaprh w23, [XSP(8)]");
}

#[test]
fn ldapur_1336() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur W(28), [XSP(0)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, 00, 40, 99", "ldapur W(28), [XSP(0)  ]");
}

#[test]
fn ldapur_1337() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur x24, [XSP(4) , -30  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 20, 5E, D9", "ldapur x24, [XSP(4) , -30  ]");
}

#[test]
fn ldapurb_1338() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurb w30, [x4 , -158  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 20, 56, 19", "ldapurb w30, [x4 , -158  ]");
}

#[test]
fn ldapurh_1339() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurh W(30), [sp , -25  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 73, 5E, 59", "ldapurh W(30), [sp , -25  ]");
}

#[test]
fn ldapursb_1340() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb W(0), [x17  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 02, C0, 19", "ldapursb W(0), [x17  ]");
}

#[test]
fn ldapursb_1341() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb x28, [XSP(25)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 03, 80, 19", "ldapursb x28, [XSP(25)  ]");
}

#[test]
fn ldapursh_1342() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh w0, [XSP(21)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 02, C0, 59", "ldapursh w0, [XSP(21)  ]");
}

#[test]
fn ldapursh_1343() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh X(11), [x25  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 03, 80, 59", "ldapursh X(11), [x25  ]");
}

#[test]
fn ldapursw_1344() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursw x23, [x30 , -247  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 93, 90, 99", "ldapursw x23, [x30 , -247  ]");
}

#[test]
fn ldar_1345() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldar W(24), [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, FE, DF, 88", "ldar W(24), [x22]");
}

#[test]
fn ldar_1346() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldar X(20), [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, FC, DF, C8", "ldar X(20), [x6]");
}

#[test]
fn ldarb_1347() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldarb w9, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, FD, DF, 08", "ldarb w9, [x14]");
}

#[test]
fn ldarh_1348() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldarh w22, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, FC, DF, 48", "ldarh w22, [x3]");
}

#[test]
fn ldaxp_1349() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp W(15), w16, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, C1, 7F, 88", "ldaxp W(15), w16, [x10]");
}

#[test]
fn ldaxp_1350() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp X(3), X(29), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, F6, 7F, C8", "ldaxp X(3), X(29), [x16]");
}

#[test]
fn ldaxr_1351() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr w2, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, FE, 5F, 88", "ldaxr w2, [x21]");
}

#[test]
fn ldaxr_1352() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr x29, [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, FE, 5F, C8", "ldaxr x29, [x22]");
}

#[test]
fn ldaxrb_1353() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrb w18, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, FE, 5F, 08", "ldaxrb w18, [XSP(18)]");
}

#[test]
fn ldaxrh_1354() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrh w2, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, FC, 5F, 48", "ldaxrh w2, [XSP(5)]");
}

#[test]
fn ldclr_1355() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr w16, w20, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 11, 30, B8", "ldclr w16, w20, [x15]");
}

#[test]
fn ldclr_1356() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr x15, X(30), [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 12, 2F, F8", "ldclr x15, X(30), [XSP(18)]");
}

#[test]
fn ldclra_1357() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra W(18), w19, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, 11, B2, B8", "ldclra W(18), w19, [XSP(13)]");
}

#[test]
fn ldclra_1358() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra X(12), x4, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 12, AC, F8", "ldclra X(12), x4, [XSP(20)]");
}

#[test]
fn ldclrab_1359() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrab w6, W(18), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 10, A6, 38", "ldclrab w6, W(18), [x2]");
}

#[test]
fn ldclrah_1360() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrah W(5), W(17), [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 10, A5, 78", "ldclrah W(5), W(17), [XSP(6)]");
}

#[test]
fn ldclral_1361() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral W(0), w28, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 12, E0, B8", "ldclral W(0), w28, [x21]");
}

#[test]
fn ldclral_1362() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral X(11), X(31), [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 10, EB, F8", "ldclral X(11), X(31), [XSP(3)]");
}

#[test]
fn ldclralb_1363() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralb w22, w17, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 10, F6, 38", "ldclralb w22, w17, [x0]");
}

#[test]
fn ldclralh_1364() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralh w11, w16, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 10, EB, 78", "ldclralh w11, w16, [XSP(7)]");
}

#[test]
fn ldclrb_1365() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrb W(6), W(28), [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 12, 26, 38", "ldclrb W(6), W(28), [x17]");
}

#[test]
fn ldclrh_1366() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrh W(7), W(31), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 11, 27, 78", "ldclrh W(7), W(31), [x13]");
}

#[test]
fn ldclrl_1367() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl W(8), W(24), [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 10, 68, B8", "ldclrl W(8), W(24), [XSP(4)]");
}

#[test]
fn ldclrl_1368() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl x2, x15, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2F, 12, 62, F8", "ldclrl x2, x15, [x17]");
}

#[test]
fn ldclrlb_1369() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlb W(6), w19, [XSP(17)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, 12, 66, 38", "ldclrlb W(6), w19, [XSP(17)]");
}

#[test]
fn ldclrlh_1370() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlh w8, w18, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 11, 68, 78", "ldclrlh w8, w18, [x15]");
}

#[test]
fn ldeor_1371() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor w26, w8, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 21, 3A, B8", "ldeor w26, w8, [x8]");
}

#[test]
fn ldeor_1372() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor x27, x30, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 22, 3B, F8", "ldeor x27, x30, [XSP(23)]");
}

#[test]
fn ldeora_1373() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora w9, w12, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 21, A9, B8", "ldeora w9, w12, [x14]");
}

#[test]
fn ldeora_1374() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora x8, x13, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, 20, A8, F8", "ldeora x8, x13, [XSP(0)]");
}

#[test]
fn ldeorab_1375() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorab W(28), w25, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 23, BC, 38", "ldeorab W(28), w25, [x30]");
}

#[test]
fn ldeorah_1376() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorah W(7), w0, [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 21, A7, 78", "ldeorah W(7), w0, [XSP(12)]");
}

#[test]
fn ldeoral_1377() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral W(15), w17, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 21, EF, B8", "ldeoral W(15), w17, [x8]");
}

#[test]
fn ldeoral_1378() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral X(2), x23, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 20, E2, F8", "ldeoral X(2), x23, [x3]");
}

#[test]
fn ldeoralb_1379() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralb W(25), w25, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 20, F9, 38", "ldeoralb W(25), w25, [XSP(5)]");
}

#[test]
fn ldeoralh_1380() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralh w24, W(15), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 22, F8, 78", "ldeoralh w24, W(15), [x21]");
}

#[test]
fn ldeorb_1381() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorb w1, w11, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AB, 22, 21, 38", "ldeorb w1, w11, [x21]");
}

#[test]
fn ldeorh_1382() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorh W(0), W(13), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 23, 20, 78", "ldeorh W(0), W(13), [x27]");
}

#[test]
fn ldeorl_1383() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl w17, W(13), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 22, 71, B8", "ldeorl w17, W(13), [XSP(20)]");
}

#[test]
fn ldeorl_1384() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl x7, x7, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 23, 67, F8", "ldeorl x7, x7, [XSP(30)]");
}

#[test]
fn ldeorlb_1385() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlb w16, w16, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 23, 70, 38", "ldeorlb w16, w16, [XSP(31)]");
}

#[test]
fn ldeorlh_1386() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlh w5, w13, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 22, 65, 78", "ldeorlh w5, w13, [x19]");
}

#[test]
fn ldlar_1387() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar w23, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 7F, DF, 88", "ldlar w23, [XSP(31)]");
}

#[test]
fn ldlar_1388() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar x23, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 7D, DF, C8", "ldlar x23, [XSP(15)]");
}

#[test]
fn ldlarb_1389() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarb W(29), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 7F, DF, 08", "ldlarb W(29), [x27]");
}

#[test]
fn ldlarh_1390() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarh w17, [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 7C, DF, 48", "ldlarh w17, [XSP(2)]");
}

#[test]
fn ldnp_1391() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp s18, s20, [x17  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 52, 40, 2C", "ldnp s18, s20, [x17  ]");
}

#[test]
fn ldnp_1392() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp D(23), D(14), [x13  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 39, 40, 6C", "ldnp D(23), D(14), [x13  ]");
}

#[test]
fn ldnp_1393() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp q6, q15, [XSP(25)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 3F, 40, AC", "ldnp q6, q15, [XSP(25)  ]");
}

#[test]
fn ldnp_1394() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp W(5), W(26), [x18 , 72  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 6A, 49, 28", "ldnp W(5), W(26), [x18 , 72  ]");
}

#[test]
fn ldnp_1395() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp x8, x13, [XSP(16) , 504  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, B6, 5F, A8", "ldnp x8, x13, [XSP(16) , 504  ]");
}

#[test]
fn ldp_1396() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(16), S(25), [XSP(26)], -168
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 67, EB, 2C", "ldp S(16), S(25), [XSP(26)], -168");
}

#[test]
fn ldp_1397() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d2, D(15), [x15], 216
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, BD, CD, 6C", "ldp d2, D(15), [x15], 216");
}

#[test]
fn ldp_1398() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp Q(28), Q(18), [x29], -640
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 4B, EC, AC", "ldp Q(28), Q(18), [x29], -640");
}

#[test]
fn ldp_1399() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(27), s5, [x10, -248]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 15, E1, 2D", "ldp S(27), s5, [x10, -248]!");
}

#[test]
fn ldp_1400() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d0, d9, [XSP(30), 400]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 27, D9, 6D", "ldp d0, d9, [XSP(30), 400]!");
}

#[test]
fn ldp_1401() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q20, Q(6), [XSP(17), -880]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 9A, E4, AD", "ldp q20, Q(6), [XSP(17), -880]!");
}

#[test]
fn ldp_1402() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(19), S(21), [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 54, 40, 2D", "ldp S(19), S(21), [XSP(3)  ]");
}

#[test]
fn ldp_1403() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d22, D(12), [x11  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 31, 40, 6D", "ldp d22, D(12), [x11  ]");
}

#[test]
fn ldp_1404() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q21, Q(20), [x0  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 50, 40, AD", "ldp q21, Q(20), [x0  ]");
}

#[test]
fn ldp_1405() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp W(22), w1, [x4], -100
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 84, F3, 28", "ldp W(22), w1, [x4], -100");
}

#[test]
fn ldp_1406() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(2), x21, [x15], 120
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, D5, C7, A8", "ldp X(2), x21, [x15], 120");
}

#[test]
fn ldp_1407() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp w25, w28, [x24, -116]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, F3, F1, 29", "ldp w25, w28, [x24, -116]!");
}

#[test]
fn ldp_1408() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(30), X(17), [x8, 168]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, C5, CA, A9", "ldp X(30), X(17), [x8, 168]!");
}

#[test]
fn ldp_1409() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp W(10), W(22), [XSP(12)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, 59, 40, 29", "ldp W(10), W(22), [XSP(12)  ]");
}

#[test]
fn ldp_1410() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(31), x2, [x24  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 0B, 40, A9", "ldp X(31), x2, [x24  ]");
}

#[test]
fn ldpsw_1411() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(13), X(7), [XSP(1)], -188
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 9C, E8, 68", "ldpsw X(13), X(7), [XSP(1)], -188");
}

#[test]
fn ldpsw_1412() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(26), x12, [x14, 208]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 31, DA, 69", "ldpsw X(26), x12, [x14, 208]!");
}

#[test]
fn ldpsw_1413() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(8), x23, [x4  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 5C, 40, 69", "ldpsw X(8), x23, [x4  ]");
}

#[test]
fn ldr_1414() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b6, [x11], -1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, F5, 5F, 3C", "ldr b6, [x11], -1");
}

#[test]
fn ldr_1415() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr H(25), [x26], 232
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 87, 4E, 7C", "ldr H(25), [x26], 232");
}

#[test]
fn ldr_1416() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s5, [x0], 47
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, F4, 42, BC", "ldr s5, [x0], 47");
}

#[test]
fn ldr_1417() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d19, [XSP(14)], 50
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 25, 43, FC", "ldr d19, [XSP(14)], 50");
}

#[test]
fn ldr_1418() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q10, [x15], -92
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 45, DA, 3C", "ldr q10, [x15], -92");
}

#[test]
fn ldr_1419() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b23, [sp, -17]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, FF, 5E, 3C", "ldr b23, [sp, -17]!");
}

#[test]
fn ldr_1420() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h17, [XSP(11), -53]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, BD, 5C, 7C", "ldr h17, [XSP(11), -53]!");
}

#[test]
fn ldr_1421() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s15, [XSP(28), 191]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, FF, 4B, BC", "ldr s15, [XSP(28), 191]!");
}

#[test]
fn ldr_1422() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(29), [XSP(30), -10]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 6F, 5F, FC", "ldr D(29), [XSP(30), -10]!");
}

#[test]
fn ldr_1423() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q12, [XSP(18), 36]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 4E, C2, 3C", "ldr q12, [XSP(18), 36]!");
}

#[test]
fn ldr_1424() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(12), [XSP(28) , 1498  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 6B, 57, 3D", "ldr B(12), [XSP(28) , 1498  ]");
}

#[test]
fn ldr_1425() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h29, [x24  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 03, 40, 7D", "ldr h29, [x24  ]");
}

#[test]
fn ldr_1426() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s29, [XSP(18)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5D, 02, 40, BD", "ldr s29, [XSP(18)  ]");
}

#[test]
fn ldr_1427() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d9, [XSP(10) , 6960  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, 99, 4D, FD", "ldr d9, [XSP(10) , 6960  ]");
}

#[test]
fn ldr_1428() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(3), [XSP(3) , 17120  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, B8, D0, 3D", "ldr Q(3), [XSP(3) , 17120  ]");
}

#[test]
fn ldr_1429() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(8), [XSP(12)], 41
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 95, 42, B8", "ldr W(8), [XSP(12)], 41");
}

#[test]
fn ldr_1430() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x10, [x0], -225
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, F4, 51, F8", "ldr x10, [x0], -225");
}

#[test]
fn ldr_1431() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(24), [x4, -237]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 3C, 51, B8", "ldr W(24), [x4, -237]!");
}

#[test]
fn ldr_1432() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x2, [XSP(8), 239]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, FD, 4E, F8", "ldr x2, [XSP(8), 239]!");
}

#[test]
fn ldr_1433() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(30), [x12 , 14784  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, C1, 79, B9", "ldr W(30), [x12 , 14784  ]");
}

#[test]
fn ldr_1434() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(11), [XSP(27)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 03, 40, F9", "ldr X(11), [XSP(27)  ]");
}

#[test]
fn ldr_1435() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s25, 128292
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, A9, 0F, 1C", "ldr s25, 128292");
}

#[test]
fn ldr_1436() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d6, 76448
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 55, 09, 5C", "ldr d6, 76448");
}

#[test]
fn ldr_1437() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q3, -25072
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, F0, FC, 9C", "ldr q3, -25072");
}

#[test]
fn ldr_1438() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(3), 206112
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 29, 19, 18", "ldr W(3), 206112");
}

#[test]
fn ldr_1439() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x27, -212192
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 19, E6, 58", "ldr x27, -212192");
}

#[test]
fn ldr_1440() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(13), [XSP(13), W(3)  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, D9, 63, 3C", "ldr B(13), [XSP(13), W(3)  , SXTW  0   ]");
}

#[test]
fn ldr_1441() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h21, [XSP(14), W(0)  , SXTW  1   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, D9, 60, 7C", "ldr h21, [XSP(14), W(0)  , SXTW  1   ]");
}

#[test]
fn ldr_1442() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(29), [XSP(12), W(21)  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9D, 49, 75, BC", "ldr S(29), [XSP(12), W(21)  , UXTW  0   ]");
}

#[test]
fn ldr_1443() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d17, [x13, X(15)  , LSL  3   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 79, 6F, FC", "ldr d17, [x13, X(15)  , LSL  3   ]");
}

#[test]
fn ldr_1444() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q29, [x27, W(21)  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 4B, F5, 3C", "ldr q29, [x27, W(21)  , UXTW  0   ]");
}

#[test]
fn ldr_1445() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(21), [x24, w30  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 4B, 7E, B8", "ldr W(21), [x24, w30  , UXTW  0   ]");
}

#[test]
fn ldr_1446() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x16, [x16, w18  , UXTW  3   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 5A, 72, F8", "ldr x16, [x16, w18  , UXTW  3   ]");
}

#[test]
fn ldraa_1447() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa x11, [XSP(11) , -280  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, D5, 7D, F8", "ldraa x11, [XSP(11) , -280  ]");
}

#[test]
fn ldraa_1448() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa x1, [x2, 2080]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, 4C, 30, F8", "ldraa x1, [x2, 2080]!");
}

#[test]
fn ldrab_1449() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab x4, [XSP(8) , 1768  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, D5, AD, F8", "ldrab x4, [XSP(8) , 1768  ]");
}

#[test]
fn ldrab_1450() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab x14, [XSP(22), 192]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 8E, A1, F8", "ldrab x14, [XSP(22), 192]!");
}

#[test]
fn ldrb_1451() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w8, [XSP(13)], 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, A5, 40, 38", "ldrb w8, [XSP(13)], 10");
}

#[test]
fn ldrb_1452() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(6), [x30, 154]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, AF, 49, 38", "ldrb W(6), [x30, 154]!");
}

#[test]
fn ldrb_1453() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(8), [XSP(29)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 03, 40, 39", "ldrb W(8), [XSP(29)  ]");
}

#[test]
fn ldrb_1454() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w28, [XSP(20), x24  , SXTX  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, FA, 78, 38", "ldrb w28, [XSP(20), x24  , SXTX  0   ]");
}

#[test]
fn ldrh_1455() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w14, [x1], -27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 54, 5E, 78", "ldrh w14, [x1], -27");
}

#[test]
fn ldrh_1456() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w25, [XSP(10), -26]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 6D, 5E, 78", "ldrh w25, [XSP(10), -26]!");
}

#[test]
fn ldrh_1457() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w9, [XSP(23)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 02, 40, 79", "ldrh w9, [XSP(23)  ]");
}

#[test]
fn ldrh_1458() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh W(10), [x1, W(10)  , SXTW  1   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, D8, 6A, 78", "ldrh W(10), [x1, W(10)  , SXTW  1   ]");
}

#[test]
fn ldrsb_1459() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(28), [XSP(3)], -234
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 64, D1, 38", "ldrsb W(28), [XSP(3)], -234");
}

#[test]
fn ldrsb_1460() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(9), [XSP(2)], 133
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, 54, 88, 38", "ldrsb X(9), [XSP(2)], 133");
}

#[test]
fn ldrsb_1461() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb w6, [x11, 70]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, 6D, C4, 38", "ldrsb w6, [x11, 70]!");
}

#[test]
fn ldrsb_1462() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb x27, [XSP(3), 52]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, 4C, 83, 38", "ldrsb x27, [XSP(3), 52]!");
}

#[test]
fn ldrsb_1463() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(9), [XSP(7) , 158  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 78, C2, 39", "ldrsb W(9), [XSP(7) , 158  ]");
}

#[test]
fn ldrsb_1464() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(5), [XSP(21)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 02, 80, 39", "ldrsb X(5), [XSP(21)  ]");
}

#[test]
fn ldrsb_1465() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(24), [x22, x8  , SXTX  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, FA, E8, 38", "ldrsb W(24), [x22, x8  , SXTX  0   ]");
}

#[test]
fn ldrsb_1466() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(24), [x29, w20  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 5B, B4, 38", "ldrsb X(24), [x29, w20  , UXTW  0   ]");
}

#[test]
fn ldrsh_1467() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(11), [x0], -140
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 44, D7, 78", "ldrsh W(11), [x0], -140");
}

#[test]
fn ldrsh_1468() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x1, [x20], 234
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, A6, 8E, 78", "ldrsh x1, [x20], 234");
}

#[test]
fn ldrsh_1469() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(13), [sp, -232]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 8F, D1, 78", "ldrsh W(13), [sp, -232]!");
}

#[test]
fn ldrsh_1470() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x0, [XSP(13), -72]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 8D, 9B, 78", "ldrsh x0, [XSP(13), -72]!");
}

#[test]
fn ldrsh_1471() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w26, [XSP(0) , 208  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, A0, C1, 79", "ldrsh w26, [XSP(0) , 208  ]");
}

#[test]
fn ldrsh_1472() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(21), [XSP(24)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 03, 80, 79", "ldrsh X(21), [XSP(24)  ]");
}

#[test]
fn ldrsh_1473() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w9, [XSP(12), W(23)  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 49, F7, 78", "ldrsh w9, [XSP(12), W(23)  , UXTW  0   ]");
}

#[test]
fn ldrsh_1474() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x28, [XSP(25), W(4)  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, CB, A4, 78", "ldrsh x28, [XSP(25), W(4)  , SXTW  0   ]");
}

#[test]
fn ldrsw_1475() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(31), [XSP(9)], -190
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 25, 94, B8", "ldrsw X(31), [XSP(9)], -190");
}

#[test]
fn ldrsw_1476() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(8), [x21, -229]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, BE, 91, B8", "ldrsw X(8), [x21, -229]!");
}

#[test]
fn ldrsw_1477() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x13, [XSP(21)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 02, 80, B9", "ldrsw x13, [XSP(21)  ]");
}

#[test]
fn ldrsw_1478() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x15, -216940
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 84, E5, 98", "ldrsw x15, -216940");
}

#[test]
fn ldrsw_1479() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x30, [x8, w6  , SXTW  2   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, D9, A6, B8", "ldrsw x30, [x8, w6  , SXTW  2   ]");
}

#[test]
fn ldset_1480() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldset w0, W(1), [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 33, 20, B8", "ldset w0, W(1), [XSP(25)]");
}

#[test]
fn ldset_1481() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldset X(8), x10, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, 32, 28, F8", "ldset X(8), x10, [x21]");
}

#[test]
fn ldseta_1482() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta W(2), w11, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 31, A2, B8", "ldseta W(2), w11, [XSP(8)]");
}

#[test]
fn ldseta_1483() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta x6, x0, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 33, A6, F8", "ldseta x6, x0, [XSP(26)]");
}

#[test]
fn ldsetab_1484() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetab w20, w5, [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 33, B4, 38", "ldsetab w20, w5, [XSP(24)]");
}

#[test]
fn ldsetah_1485() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetah W(20), W(7), [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 31, B4, 78", "ldsetah W(20), W(7), [XSP(12)]");
}

#[test]
fn ldsetal_1486() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal w25, W(26), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 31, F9, B8", "ldsetal w25, W(26), [x8]");
}

#[test]
fn ldsetal_1487() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal X(12), X(28), [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 32, EC, F8", "ldsetal X(12), X(28), [x22]");
}

#[test]
fn ldsetalb_1488() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalb w7, W(8), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 33, E7, 38", "ldsetalb w7, W(8), [x27]");
}

#[test]
fn ldsetalh_1489() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalh W(31), w4, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 32, FF, 78", "ldsetalh W(31), w4, [XSP(20)]");
}

#[test]
fn ldsetb_1490() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetb W(21), W(1), [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 33, 35, 38", "ldsetb W(21), W(1), [x25]");
}

#[test]
fn ldseth_1491() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldseth w16, w5, [x18]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 32, 30, 78", "ldseth w16, w5, [x18]");
}

#[test]
fn ldsetl_1492() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl w27, W(5), [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 30, 7B, B8", "ldsetl w27, W(5), [x0]");
}

#[test]
fn ldsetl_1493() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl x8, X(25), [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 32, 68, F8", "ldsetl x8, X(25), [XSP(18)]");
}

#[test]
fn ldsetlb_1494() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlb w5, w24, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 32, 65, 38", "ldsetlb w5, w24, [x19]");
}

#[test]
fn ldsetlh_1495() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlh w22, W(11), [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 33, 76, 78", "ldsetlh w22, W(11), [XSP(26)]");
}

#[test]
fn ldsmax_1496() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax w2, W(24), [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 40, 22, B8", "ldsmax w2, W(24), [x3]");
}

#[test]
fn ldsmax_1497() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax x24, x21, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 42, 38, F8", "ldsmax x24, x21, [XSP(19)]");
}

#[test]
fn ldsmaxa_1498() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa W(4), w26, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, 42, A4, B8", "ldsmaxa W(4), w26, [XSP(23)]");
}

#[test]
fn ldsmaxa_1499() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa x8, X(18), [x9]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 41, A8, F8", "ldsmaxa x8, X(18), [x9]");
}

#[test]
fn ldsmaxab_1500() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxab w24, w7, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 42, B8, 38", "ldsmaxab w24, w7, [XSP(18)]");
}

#[test]
fn ldsmaxah_1501() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxah W(3), W(0), [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 41, A3, 78", "ldsmaxah W(3), W(0), [x14]");
}

#[test]
fn ldsmaxal_1502() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal w22, W(10), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, 43, F6, B8", "ldsmaxal w22, W(10), [x27]");
}

#[test]
fn ldsmaxal_1503() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal x0, x17, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 40, E0, F8", "ldsmaxal x0, x17, [XSP(5)]");
}

#[test]
fn ldsmaxalb_1504() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalb w30, w9, [x28]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 43, FE, 38", "ldsmaxalb w30, w9, [x28]");
}

#[test]
fn ldsmaxalh_1505() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalh W(29), w26, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 40, FD, 78", "ldsmaxalh W(29), w26, [x1]");
}

#[test]
fn ldsmaxb_1506() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxb w12, W(23), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, 41, 2C, 38", "ldsmaxb w12, W(23), [x8]");
}

#[test]
fn ldsmaxh_1507() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxh W(7), w30, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 41, 27, 78", "ldsmaxh W(7), w30, [XSP(15)]");
}

#[test]
fn ldsmaxl_1508() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl W(26), w13, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 43, 7A, B8", "ldsmaxl W(26), w13, [XSP(26)]");
}

#[test]
fn ldsmaxl_1509() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl X(7), x7, [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 40, 67, F8", "ldsmaxl X(7), x7, [XSP(2)]");
}

#[test]
fn ldsmaxlb_1510() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlb W(20), w2, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 40, 74, 38", "ldsmaxlb W(20), w2, [x4]");
}

#[test]
fn ldsmaxlh_1511() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlh W(30), w14, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 41, 7E, 78", "ldsmaxlh W(30), w14, [XSP(13)]");
}

#[test]
fn ldsmin_1512() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin W(27), W(2), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 52, 3B, B8", "ldsmin W(27), W(2), [XSP(20)]");
}

#[test]
fn ldsmin_1513() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin X(19), X(21), [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 53, 33, F8", "ldsmin X(19), X(21), [XSP(24)]");
}

#[test]
fn ldsmina_1514() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina W(2), w20, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, 53, A2, B8", "ldsmina W(2), w20, [x30]");
}

#[test]
fn ldsmina_1515() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina x20, X(23), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "97, 52, B4, F8", "ldsmina x20, X(23), [x20]");
}

#[test]
fn ldsminab_1516() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminab W(3), W(4), [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 50, A3, 38", "ldsminab W(3), W(4), [x0]");
}

#[test]
fn ldsminah_1517() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminah w30, w20, [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 53, BE, 78", "ldsminah w30, w20, [sp]");
}

#[test]
fn ldsminal_1518() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal W(0), w21, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 52, E0, B8", "ldsminal W(0), w21, [x17]");
}

#[test]
fn ldsminal_1519() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal X(6), X(26), [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 52, E6, F8", "ldsminal X(6), X(26), [XSP(22)]");
}

#[test]
fn ldsminalb_1520() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalb W(5), W(6), [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 53, E5, 38", "ldsminalb W(5), W(6), [XSP(31)]");
}

#[test]
fn ldsminalh_1521() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalh w10, w8, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 51, EA, 78", "ldsminalh w10, w8, [x15]");
}

#[test]
fn ldsminb_1522() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminb w26, w12, [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 50, 3A, 38", "ldsminb w26, w12, [x2]");
}

#[test]
fn ldsminh_1523() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminh w28, w2, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 51, 3C, 78", "ldsminh w28, w2, [x8]");
}

#[test]
fn ldsminl_1524() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl W(25), W(5), [XSP(10)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 51, 79, B8", "ldsminl W(25), W(5), [XSP(10)]");
}

#[test]
fn ldsminl_1525() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl x9, x17, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 51, 69, F8", "ldsminl x9, x17, [x14]");
}

#[test]
fn ldsminlb_1526() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlb w10, w22, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "36, 53, 6A, 38", "ldsminlb w10, w22, [XSP(25)]");
}

#[test]
fn ldsminlh_1527() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlh W(10), w12, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 50, 6A, 78", "ldsminlh W(10), w12, [x4]");
}

#[test]
fn ldtr_1528() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr w11, [x30 , -203  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 5B, 53, B8", "ldtr w11, [x30 , -203  ]");
}

#[test]
fn ldtr_1529() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr x27, [XSP(4)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 08, 40, F8", "ldtr x27, [XSP(4)  ]");
}

#[test]
fn ldtrb_1530() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrb W(2), [x8 , -88  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 89, 5A, 38", "ldtrb W(2), [x8 , -88  ]");
}

#[test]
fn ldtrh_1531() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrh W(7), [x4 , 77  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, D8, 44, 78", "ldtrh W(7), [x4 , 77  ]");
}

#[test]
fn ldtrsb_1532() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb w20, [XSP(5)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, 08, C0, 38", "ldtrsb w20, [XSP(5)  ]");
}

#[test]
fn ldtrsb_1533() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb X(19), [x26 , -23  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 9B, 9E, 38", "ldtrsb X(19), [x26 , -23  ]");
}

#[test]
fn ldtrsh_1534() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh W(16), [XSP(15) , -78  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 29, DB, 78", "ldtrsh W(16), [XSP(15) , -78  ]");
}

#[test]
fn ldtrsh_1535() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh x16, [x10 , 212  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 49, 8D, 78", "ldtrsh x16, [x10 , 212  ]");
}

#[test]
fn ldtrsw_1536() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsw X(30), [XSP(22) , -78  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, 2A, 9B, B8", "ldtrsw X(30), [XSP(22) , -78  ]");
}

#[test]
fn ldumax_1537() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax w22, W(24), [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 63, 36, B8", "ldumax w22, W(24), [x26]");
}

#[test]
fn ldumax_1538() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax x0, X(0), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 60, 20, F8", "ldumax x0, X(0), [x2]");
}

#[test]
fn ldumaxa_1539() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa w13, W(12), [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 60, AD, B8", "ldumaxa w13, W(12), [XSP(7)]");
}

#[test]
fn ldumaxa_1540() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa x12, x2, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, 61, AC, F8", "ldumaxa x12, x2, [XSP(13)]");
}

#[test]
fn ldumaxab_1541() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxab w17, w2, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 62, B1, 38", "ldumaxab w17, w2, [x23]");
}

#[test]
fn ldumaxah_1542() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxah W(11), W(7), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 62, AB, 78", "ldumaxah W(11), W(7), [x20]");
}

#[test]
fn ldumaxal_1543() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal W(30), W(14), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 60, FE, B8", "ldumaxal W(30), W(14), [x2]");
}

#[test]
fn ldumaxal_1544() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal X(23), x22, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 63, F7, F8", "ldumaxal X(23), x22, [x27]");
}

#[test]
fn ldumaxalb_1545() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalb W(18), W(24), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 62, F2, 38", "ldumaxalb W(18), W(24), [XSP(20)]");
}

#[test]
fn ldumaxalh_1546() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalh w18, w0, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 60, F2, 78", "ldumaxalh w18, w0, [XSP(7)]");
}

#[test]
fn ldumaxb_1547() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxb W(9), w0, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 61, 29, 38", "ldumaxb W(9), w0, [x15]");
}

#[test]
fn ldumaxh_1548() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxh W(13), w13, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 62, 2D, 78", "ldumaxh W(13), w13, [x17]");
}

#[test]
fn ldumaxl_1549() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl W(28), W(25), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 62, 7C, B8", "ldumaxl W(28), W(25), [XSP(20)]");
}

#[test]
fn ldumaxl_1550() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl X(26), x1, [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 60, 7A, F8", "ldumaxl X(26), x1, [XSP(3)]");
}

#[test]
fn ldumaxlb_1551() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlb W(5), w18, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 63, 65, 38", "ldumaxlb W(5), w18, [XSP(25)]");
}

#[test]
fn ldumaxlh_1552() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlh W(12), wzr, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 63, 6C, 78", "ldumaxlh W(12), wzr, [x27]");
}

#[test]
fn ldumin_1553() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin W(10), W(10), [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 73, 2A, B8", "ldumin W(10), W(10), [x25]");
}

#[test]
fn ldumin_1554() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin X(7), x19, [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 73, 27, F8", "ldumin X(7), x19, [XSP(27)]");
}

#[test]
fn ldumina_1555() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina w17, w3, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 73, B1, B8", "ldumina w17, w3, [x24]");
}

#[test]
fn ldumina_1556() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina X(18), x13, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 73, B2, F8", "ldumina X(18), x13, [x26]");
}

#[test]
fn lduminab_1557() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminab w6, w30, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 72, A6, 38", "lduminab w6, w30, [XSP(23)]");
}

#[test]
fn lduminah_1558() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminah w14, w17, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 70, AE, 78", "lduminah w14, w17, [x6]");
}

#[test]
fn lduminal_1559() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal w11, w7, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, 71, EB, B8", "lduminal w11, w7, [x11]");
}

#[test]
fn lduminal_1560() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal x1, x12, [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 73, E1, F8", "lduminal x1, x12, [x29]");
}

#[test]
fn lduminalb_1561() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalb W(4), W(6), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 72, E4, 38", "lduminalb W(4), W(6), [XSP(16)]");
}

#[test]
fn lduminalh_1562() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalh w0, W(20), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "54, 70, E0, 78", "lduminalh w0, W(20), [x2]");
}

#[test]
fn lduminb_1563() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminb W(14), W(9), [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 70, 2E, 38", "lduminb W(14), W(9), [x0]");
}

#[test]
fn lduminh_1564() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminh w28, w15, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 73, 3C, 78", "lduminh w28, w15, [x24]");
}

#[test]
fn lduminl_1565() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl w8, w19, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 73, 68, B8", "lduminl w8, w19, [x26]");
}

#[test]
fn lduminl_1566() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl X(5), X(25), [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 73, 65, F8", "lduminl X(5), X(25), [x29]");
}

#[test]
fn lduminlb_1567() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlb W(30), W(27), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 71, 7E, 38", "lduminlb W(30), W(27), [XSP(14)]");
}

#[test]
fn lduminlh_1568() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlh w6, w12, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 72, 66, 78", "lduminlh w6, w12, [XSP(22)]");
}

#[test]
fn ldur_1569() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur B(23), [XSP(24) , -145  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, F3, 56, 3C", "ldur B(23), [XSP(24) , -145  ]");
}

#[test]
fn ldur_1570() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur h24, [x1  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, 00, 40, 7C", "ldur h24, [x1  ]");
}

#[test]
fn ldur_1571() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur S(28), [XSP(22) , -182  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, A2, 54, BC", "ldur S(28), [XSP(22) , -182  ]");
}

#[test]
fn ldur_1572() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur D(12), [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, 00, 40, FC", "ldur D(12), [XSP(3)  ]");
}

#[test]
fn ldur_1573() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur q2, [x11 , 37  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, 51, C2, 3C", "ldur q2, [x11 , 37  ]");
}

#[test]
fn ldur_1574() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur W(25), [XSP(27) , -6  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, A3, 5F, B8", "ldur W(25), [XSP(27) , -6  ]");
}

#[test]
fn ldur_1575() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur X(24), [XSP(18)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 02, 40, F8", "ldur X(24), [XSP(18)  ]");
}

#[test]
fn ldurb_1576() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldurb W(30), [x26  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 03, 40, 38", "ldurb W(30), [x26  ]");
}

#[test]
fn ldurh_1577() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldurh w15, [XSP(8)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 01, 40, 78", "ldurh w15, [XSP(8)  ]");
}

#[test]
fn ldursb_1578() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb w14, [x10  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 01, C0, 38", "ldursb w14, [x10  ]");
}

#[test]
fn ldursb_1579() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb X(16), [XSP(22) , -247  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, 92, 90, 38", "ldursb X(16), [XSP(22) , -247  ]");
}

#[test]
fn ldursh_1580() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh w23, [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 00, C0, 78", "ldursh w23, [XSP(3)  ]");
}

#[test]
fn ldursh_1581() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh x19, [x17 , 14  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, E2, 80, 78", "ldursh x19, [x17 , 14  ]");
}

#[test]
fn ldursw_1582() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursw X(10), [XSP(30)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, 03, 80, B8", "ldursw X(10), [XSP(30)  ]");
}

#[test]
fn ldxp_1583() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp W(1), w26, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 6B, 7F, 88", "ldxp W(1), w26, [XSP(31)]");
}

#[test]
fn ldxp_1584() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp X(4), X(1), [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 07, 7F, C8", "ldxp X(4), X(1), [XSP(25)]");
}

#[test]
fn ldxr_1585() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr w29, [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9D, 7D, 5F, 88", "ldxr w29, [x12]");
}

#[test]
fn ldxr_1586() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr X(27), [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 7F, 5F, C8", "ldxr X(27), [x25]");
}

#[test]
fn ldxrb_1587() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrb w5, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 7E, 5F, 08", "ldxrb w5, [x21]");
}

#[test]
fn ldxrh_1588() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrh W(2), [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 7E, 5F, 48", "ldxrh W(2), [x23]");
}

#[test]
fn lsl_1589() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl w7, w0, w8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 20, C8, 1A", "lsl w7, w0, w8");
}

#[test]
fn lsl_1590() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl x30, x4, x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 20, DC, 9A", "lsl x30, x4, x28");
}

#[test]
fn lsl_1591() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl W(20), w7, 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 70, 1D, 53", "lsl W(20), w7, 3");
}

#[test]
fn lsl_1592() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl x3, x29, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, EF, 7C, D3", "lsl x3, x29, 4");
}

#[test]
fn lslv_1593() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lslv W(20), W(6), w9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, 20, C9, 1A", "lslv W(20), W(6), w9");
}

#[test]
fn lslv_1594() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lslv x8, X(5), x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 20, DA, 9A", "lslv x8, X(5), x26");
}

#[test]
fn lsr_1595() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr w17, w5, w3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 24, C3, 1A", "lsr w17, w5, w3");
}

#[test]
fn lsr_1596() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(1), X(3), X(22)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 24, D6, 9A", "lsr X(1), X(3), X(22)");
}

#[test]
fn lsr_1597() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr W(23), W(14), 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 7D, 18, 53", "lsr W(23), W(14), 24");
}

#[test]
fn lsr_1598() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(0), X(9), 37
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, FD, 65, D3", "lsr X(0), X(9), 37");
}

#[test]
fn lsrv_1599() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsrv W(28), W(16), W(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, 26, CA, 1A", "lsrv W(28), W(16), W(10)");
}

#[test]
fn lsrv_1600() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsrv x22, x30, X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D6, 27, DA, 9A", "lsrv x22, x30, X(26)");
}

#[test]
fn madd_1601() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; madd W(18), W(4), W(10), W(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 1C, 0A, 1B", "madd W(18), W(4), W(10), W(7)");
}

#[test]
fn madd_1602() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; madd X(6), X(9), X(21), x13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 35, 15, 9B", "madd X(6), X(9), X(21), x13");
}

#[test]
fn mla_1603() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v22.H8, v28.H8, v9.H[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 03, 79, 6F", "mla v22.H8, v28.H8, v9.H[3]");
}

#[test]
fn mla_1604() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v1.H4, v0.H4, V(13).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 00, 5D, 2F", "mla v1.H4, v0.H4, V(13).H[1]");
}

#[test]
fn mla_1605() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v23.S4, V(22).S4, v25.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 02, 99, 6F", "mla v23.S4, V(22).S4, v25.S[0]");
}

#[test]
fn mla_1606() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla V(1).S2, v27.S2, V(10).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 03, 8A, 2F", "mla V(1).S2, v27.S2, V(10).S[0]");
}

#[test]
fn mla_1607() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v20.B16, V(12).B16, v27.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 95, 3B, 4E", "mla v20.B16, V(12).B16, v27.B16");
}

#[test]
fn mla_1608() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v13.B8, v16.B8, v0.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, 96, 20, 0E", "mla v13.B8, v16.B8, v0.B8");
}

#[test]
fn mla_1609() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla V(23).H8, v9.H8, v5.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, 95, 65, 4E", "mla V(23).H8, v9.H8, v5.H8");
}

#[test]
fn mla_1610() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla V(13).H4, v18.H4, v1.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 96, 61, 0E", "mla V(13).H4, v18.H4, v1.H4");
}

#[test]
fn mla_1611() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v0.S4, V(8).S4, V(10).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 95, AA, 4E", "mla v0.S4, V(8).S4, V(10).S4");
}

#[test]
fn mla_1612() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mla v11.S2, v11.S2, V(28).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 95, BC, 0E", "mla v11.S2, v11.S2, V(28).S2");
}

#[test]
fn mls_1613() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls v18.H8, v20.H8, v8.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 4A, 78, 6F", "mls v18.H8, v20.H8, v8.H[7]");
}

#[test]
fn mls_1614() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls V(7).H4, V(6).H4, V(11).H[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 40, 7B, 2F", "mls V(7).H4, V(6).H4, V(11).H[3]");
}

#[test]
fn mls_1615() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls v11.S4, v28.S4, v14.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 43, AE, 6F", "mls v11.S4, v28.S4, v14.S[1]");
}

#[test]
fn mls_1616() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls v24.S2, v4.S2, V(13).S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 40, AD, 2F", "mls v24.S2, v4.S2, V(13).S[1]");
}

#[test]
fn mls_1617() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls v8.B16, V(29).B16, V(10).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 97, 2A, 6E", "mls v8.B16, V(29).B16, V(10).B16");
}

#[test]
fn mls_1618() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls v15.B8, V(22).B8, v27.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CF, 96, 3B, 2E", "mls v15.B8, V(22).B8, v27.B8");
}

#[test]
fn mls_1619() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls V(6).H8, V(18).H8, v12.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 96, 6C, 6E", "mls V(6).H8, V(18).H8, v12.H8");
}

#[test]
fn mls_1620() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls V(16).H4, v30.H4, V(11).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, 97, 6B, 2E", "mls V(16).H4, v30.H4, V(11).H4");
}

#[test]
fn mls_1621() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls V(21).S4, V(28).S4, v28.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 97, BC, 6E", "mls V(21).S4, V(28).S4, v28.S4");
}

#[test]
fn mls_1622() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mls v30.S2, V(1).S2, V(10).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 94, AA, 2E", "mls v30.S2, V(1).S2, V(10).S2");
}

#[test]
fn mneg_1623() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mneg w3, w7, w11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, FC, 0B, 1B", "mneg w3, w7, w11");
}

#[test]
fn mneg_1624() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mneg x8, X(10), x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, FD, 14, 9B", "mneg x8, X(10), x20");
}

#[test]
fn mov_1625() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov WSP(30), w10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 03, 0A, 2A", "mov WSP(30), w10");
}

#[test]
fn mov_1626() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov XSP(7), XSP(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 03, 11, AA", "mov XSP(7), XSP(17)");
}

#[test]
fn mov_1627() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov B(6), V(18).B[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 06, 05, 5E", "mov B(6), V(18).B[2]");
}

#[test]
fn mov_1628() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov H(20), v24.H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 07, 12, 5E", "mov H(20), v24.H[4]");
}

#[test]
fn mov_1629() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov s5, V(3).S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 04, 14, 5E", "mov s5, V(3).S[2]");
}

#[test]
fn mov_1630() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov d27, v6.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 04, 08, 5E", "mov d27, v6.D[0]");
}

#[test]
fn mov_1631() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov v14.B[3], V(26).B[11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 5F, 07, 6E", "mov v14.B[3], V(26).B[11]");
}

#[test]
fn mov_1632() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov V(27).H[4], v29.H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 57, 12, 6E", "mov V(27).H[4], v29.H[5]");
}

#[test]
fn mov_1633() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov V(7).S[0], V(9).S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 45, 04, 6E", "mov V(7).S[0], V(9).S[2]");
}

#[test]
fn mov_1634() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov V(15).D[1], V(4).D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, 44, 18, 6E", "mov V(15).D[1], V(4).D[1]");
}

#[test]
fn mov_1635() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov v30.B[10], w18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 1E, 15, 4E", "mov v30.B[10], w18");
}

#[test]
fn mov_1636() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov V(24).H[5], w19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 1E, 16, 4E", "mov V(24).H[5], w19");
}

#[test]
fn mov_1637() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov V(2).S[0], W(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, 1F, 04, 4E", "mov V(2).S[0], W(29)");
}

#[test]
fn mov_1638() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov v27.D[1], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 1F, 18, 4E", "mov v27.D[1], x24");
}

#[test]
fn mov_inverted_1639() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov.inverted w30, 3644522495
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, D8, A4, 12", "mov.inverted w30, 3644522495");
}

#[test]
fn mov_inverted_1640() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov.inverted x23, 18446744073709502422
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, 05, 98, 92", "mov.inverted x23, 18446744073709502422");
}

#[test]
fn mov_1641() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov W(27), 694157312
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 2C, A5, 52", "mov W(27), 694157312");
}

#[test]
fn mov_1642() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov X(13), 4281466880
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, E6, BF, D2", "mov X(13), 4281466880");
}

#[test]
fn mov_1643() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov v6.B16, v4.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, 1C, A4, 4E", "mov v6.B16, v4.B16");
}

#[test]
fn mov_1644() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov V(7).B8, V(2).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 1C, A2, 0E", "mov V(7).B8, V(2).B8");
}

#[test]
fn mov_logical_1645() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov.logical WSP(21), 1073709056
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 3B, 11, 32", "mov.logical WSP(21), 1073709056");
}

#[test]
fn mov_logical_1646() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov.logical x28, 18158548881862828031
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 4B, 06, B2", "mov.logical x28, 18158548881862828031");
}

#[test]
fn mov_1647() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov wzr, W(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 03, 1C, 2A", "mov wzr, W(28)");
}

#[test]
fn mov_1648() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov X(9), x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 03, 05, AA", "mov X(9), x5");
}

#[test]
fn mov_1649() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov w7, V(8).S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 3D, 14, 0E", "mov w7, V(8).S[2]");
}

#[test]
fn mov_1650() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mov x20, v20.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 3E, 08, 4E", "mov x20, v20.D[0]");
}

#[test]
fn movi_1651() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi V(11).B16, 239 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, E5, 07, 4F", "movi V(11).B16, 239 , LSL 0");
}

#[test]
fn movi_1652() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi V(14).B8, 3 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, E4, 00, 0F", "movi V(14).B8, 3 , LSL 0");
}

#[test]
fn movi_1653() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi v5.H8, 202
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 85, 06, 4F", "movi v5.H8, 202");
}

#[test]
fn movi_1654() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi V(5).H4, 125 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 87, 03, 0F", "movi V(5).H4, 125 , LSL 0");
}

#[test]
fn movi_1655() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi V(6).S4, 118 , LSL 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 46, 03, 4F", "movi V(6).S4, 118 , LSL 16");
}

#[test]
fn movi_1656() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi v18.S2, 234
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 05, 07, 0F", "movi v18.S2, 234");
}

#[test]
fn movi_1657() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi V(12).S4, 93, MSL 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, D7, 02, 4F", "movi V(12).S4, 93, MSL 16");
}

#[test]
fn movi_1658() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi v1.S2, 196, MSL 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, D4, 06, 0F", "movi v1.S2, 196, MSL 16");
}

#[test]
fn movi_1659() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi d18, 18446463698244403455
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, E7, 06, 2F", "movi d18, 18446463698244403455");
}

#[test]
fn movi_1660() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movi V(30).D2, 18446463698227691520
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, E7, 06, 6F", "movi V(30).D2, 18446463698227691520");
}

#[test]
fn movk_1661() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movk w13, 4282 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 17, 82, 72", "movk w13, 4282 , LSL 0");
}

#[test]
fn movk_1662() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movk x2, 33368
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 4B, 90, F2", "movk x2, 33368");
}

#[test]
fn movn_1663() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movn W(19), 14924
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, 49, 87, 12", "movn W(19), 14924");
}

#[test]
fn movn_1664() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movn x22, 37683
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 66, 92, 92", "movn x22, 37683");
}

#[test]
fn movz_1665() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movz W(25), 11798
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, C2, 85, 52", "movz W(25), 11798");
}

#[test]
fn movz_1666() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; movz x8, 4050
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, FA, 81, D2", "movz x8, 4050");
}

#[test]
fn msub_1667() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; msub w18, w3, w17, W(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 88, 11, 1B", "msub w18, w3, w17, W(2)");
}

#[test]
fn msub_1668() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; msub X(26), x6, x8, x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, AC, 08, 9B", "msub X(26), x6, x8, x11");
}

#[test]
fn mul_1669() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul V(27).H8, V(12).H8, v3.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 89, 73, 4F", "mul V(27).H8, V(12).H8, v3.H[7]");
}

#[test]
fn mul_1670() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul v12.H4, V(14).H4, v0.H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 89, 50, 0F", "mul v12.H4, V(14).H4, v0.H[5]");
}

#[test]
fn mul_1671() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul V(26).S4, V(19).S4, v9.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7A, 82, A9, 4F", "mul V(26).S4, V(19).S4, v9.S[1]");
}

#[test]
fn mul_1672() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul V(23).S2, V(16).S2, v4.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, 8A, A4, 0F", "mul V(23).S2, V(16).S2, v4.S[3]");
}

#[test]
fn mul_1673() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul V(11).B16, v1.B16, V(27).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 9C, 3B, 4E", "mul V(11).B16, v1.B16, V(27).B16");
}

#[test]
fn mul_1674() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul V(31).B8, V(27).B8, V(30).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 9F, 3E, 0E", "mul V(31).B8, V(27).B8, V(30).B8");
}

#[test]
fn mul_1675() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul v30.H8, V(19).H8, V(8).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 9E, 68, 4E", "mul v30.H8, V(19).H8, V(8).H8");
}

#[test]
fn mul_1676() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul v31.H4, V(27).H4, V(13).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 9F, 6D, 0E", "mul v31.H4, V(27).H4, V(13).H4");
}

#[test]
fn mul_1677() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul V(25).S4, v25.S4, v11.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 9F, AB, 4E", "mul V(25).S4, v25.S4, v11.S4");
}

#[test]
fn mul_1678() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul v12.S2, V(27).S2, V(12).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, 9F, AC, 0E", "mul v12.S2, V(27).S2, V(12).S2");
}

#[test]
fn mul_1679() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul W(29), W(25), w11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 7F, 0B, 1B", "mul W(29), W(25), w11");
}

#[test]
fn mul_1680() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mul x3, x25, X(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 7F, 02, 9B", "mul x3, x25, X(2)");
}

#[test]
fn mvn_1681() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvn w10, w11 , ASR 18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 4B, AB, 2A", "mvn w10, w11 , ASR 18");
}

#[test]
fn mvn_1682() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvn X(2), X(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 03, 30, AA", "mvn X(2), X(16)");
}

#[test]
fn mvn_1683() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvn v3.B16, v4.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, 58, 20, 6E", "mvn v3.B16, v4.B16");
}

#[test]
fn mvn_1684() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvn v28.B8, v22.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 5A, 20, 2E", "mvn v28.B8, v22.B8");
}

#[test]
fn mvni_1685() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvni v20.H8, 20 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 86, 00, 6F", "mvni v20.H8, 20 , LSL 0");
}

#[test]
fn mvni_1686() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvni V(30).H4, 242 , LSL 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, A6, 07, 2F", "mvni V(30).H4, 242 , LSL 8");
}

#[test]
fn mvni_1687() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvni V(3).S4, 105
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 05, 03, 6F", "mvni V(3).S4, 105");
}

#[test]
fn mvni_1688() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvni v30.S2, 163 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 04, 05, 2F", "mvni v30.S2, 163 , LSL 0");
}

#[test]
fn mvni_1689() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvni V(12).S4, 236, MSL 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, C5, 07, 6F", "mvni V(12).S4, 236, MSL 8");
}

#[test]
fn mvni_1690() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; mvni v23.S2, 13, MSL 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, D5, 00, 2F", "mvni v23.S2, 13, MSL 16");
}

#[test]
fn neg_1691() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg W(12), W(24) , LSR 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 1F, 58, 4B", "neg W(12), W(24) , LSR 7");
}

#[test]
fn neg_1692() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg x12, x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 03, 07, CB", "neg x12, x7");
}

#[test]
fn neg_1693() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg d4, D(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, BA, E0, 7E", "neg d4, D(17)");
}

#[test]
fn neg_1694() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg V(31).B16, V(13).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, B9, 20, 6E", "neg V(31).B16, V(13).B16");
}

#[test]
fn neg_1695() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg v9.B8, V(3).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, B8, 20, 2E", "neg v9.B8, V(3).B8");
}

#[test]
fn neg_1696() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg v11.H8, V(12).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, B9, 60, 6E", "neg v11.H8, V(12).H8");
}

#[test]
fn neg_1697() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg v2.H4, V(14).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, B9, 60, 2E", "neg v2.H4, V(14).H4");
}

#[test]
fn neg_1698() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg v1.S4, v1.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, B8, A0, 6E", "neg v1.S4, v1.S4");
}

#[test]
fn neg_1699() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg V(19).S2, V(20).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, BA, A0, 2E", "neg V(19).S2, V(20).S2");
}

#[test]
fn neg_1700() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; neg V(20).D2, V(9).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, B9, E0, 6E", "neg V(20).D2, V(9).D2");
}

#[test]
fn negs_1701() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; negs w16, W(1) , LSR 14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 3B, 41, 6B", "negs w16, W(1) , LSR 14");
}

#[test]
fn negs_1702() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; negs x15, x22 , LSR 37
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 97, 56, EB", "negs x15, x22 , LSR 37");
}

#[test]
fn ngc_1703() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ngc W(31), w26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 03, 1A, 5A", "ngc W(31), w26");
}

#[test]
fn ngc_1704() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ngc xzr, x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 03, 1A, DA", "ngc xzr, x26");
}

#[test]
fn ngcs_1705() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ngcs W(28), w21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 03, 15, 7A", "ngcs W(28), w21");
}

#[test]
fn ngcs_1706() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ngcs X(12), X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 03, 1B, FA", "ngcs X(12), X(27)");
}

#[test]
fn nop_1707() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; nop
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 20, 03, D5", "nop");
}

#[test]
fn not_1708() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; not v18.B16, V(18).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 5A, 20, 6E", "not v18.B16, V(18).B16");
}

#[test]
fn not_1709() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; not v10.B8, V(9).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 59, 20, 2E", "not v10.B8, V(9).B8");
}

#[test]
fn orn_1710() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orn v27.B16, v6.B16, v17.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 1C, F1, 4E", "orn v27.B16, v6.B16, v17.B16");
}

#[test]
fn orn_1711() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orn v31.B8, V(26).B8, v8.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 1F, E8, 0E", "orn v31.B8, V(26).B8, v8.B8");
}

#[test]
fn orn_1712() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orn w14, w5, w6 , LSL 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 30, 26, 2A", "orn w14, w5, w6 , LSL 12");
}

#[test]
fn orn_1713() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orn x16, X(3), x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 00, 33, AA", "orn x16, X(3), x19");
}

#[test]
fn orr_1714() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr v24.H8, 177 , LSL 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, B6, 05, 4F", "orr v24.H8, 177 , LSL 8");
}

#[test]
fn orr_1715() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr V(18).H4, 131
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 94, 04, 0F", "orr V(18).H4, 131");
}

#[test]
fn orr_1716() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr v24.S4, 112
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 16, 03, 4F", "orr v24.S4, 112");
}

#[test]
fn orr_1717() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr V(10).S2, 223
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 17, 06, 0F", "orr V(10).S2, 223");
}

#[test]
fn orr_1718() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr V(9).B16, v10.B16, V(28).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, 1D, BC, 4E", "orr V(9).B16, v10.B16, V(28).B16");
}

#[test]
fn orr_1719() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr v25.B8, v2.B8, v11.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 1C, AB, 0E", "orr v25.B8, v2.B8, v11.B8");
}

#[test]
fn orr_1720() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr WSP(3), W(28), 2863311530
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, F3, 01, 32", "orr WSP(3), W(28), 2863311530");
}

#[test]
fn orr_1721() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr x29, x14, 6148914691236517205
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, F1, 00, B2", "orr x29, x14, 6148914691236517205");
}

#[test]
fn orr_1722() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr W(25), W(3), W(0) , LSL 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 1C, 00, 2A", "orr W(25), W(3), W(0) , LSL 7");
}

#[test]
fn orr_1723() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; orr x11, X(6), X(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 00, 1E, AA", "orr x11, X(6), X(30)");
}

#[test]
fn pacda_1724() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacda X(8), x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, 09, C1, DA", "pacda X(8), x10");
}

#[test]
fn pacdb_1725() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacdb x20, x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, 0C, C1, DA", "pacdb x20, x5");
}

#[test]
fn pacdza_1726() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacdza x18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 2B, C1, DA", "pacdza x18");
}

#[test]
fn pacdzb_1727() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacdzb X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 2F, C1, DA", "pacdzb X(27)");
}

#[test]
fn pacga_1728() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacga X(0), X(26), XSP(9)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 33, C9, 9A", "pacga X(0), X(26), XSP(9)");
}

#[test]
fn pacia_1729() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacia x27, x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, 01, C1, DA", "pacia x27, x11");
}

#[test]
fn pacia1716_1730() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacia1716
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 21, 03, D5", "pacia1716");
}

#[test]
fn paciasp_1731() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; paciasp
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 23, 03, D5", "paciasp");
}

#[test]
fn paciaz_1732() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; paciaz
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 23, 03, D5", "paciaz");
}

#[test]
fn pacib_1733() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacib X(2), x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, 07, C1, DA", "pacib X(2), x27");
}

#[test]
fn pacib1716_1734() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacib1716
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 21, 03, D5", "pacib1716");
}

#[test]
fn pacibsp_1735() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacibsp
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 23, 03, D5", "pacibsp");
}

#[test]
fn pacibz_1736() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacibz
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 23, 03, D5", "pacibz");
}

#[test]
fn paciza_1737() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; paciza X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E4, 23, C1, DA", "paciza X(4)");
}

#[test]
fn pacizb_1738() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pacizb x3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 27, C1, DA", "pacizb x3");
}

#[test]
fn pmul_1739() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pmul v20.B16, v17.B16, v26.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 9E, 3A, 6E", "pmul v20.B16, v17.B16, v26.B16");
}

#[test]
fn pmul_1740() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pmul v30.B8, V(19).B8, v31.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 9E, 3F, 2E", "pmul v30.B8, V(19).B8, v31.B8");
}

#[test]
fn pmull_1741() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pmull V(24).H8, V(9).B8, v6.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, E1, 26, 0E", "pmull V(24).H8, V(9).B8, v6.B8");
}

#[test]
fn pmull_1742() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pmull V(10).Q1, v7.D1, V(31).D1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, E0, FF, 0E", "pmull V(10).Q1, v7.D1, V(31).D1");
}

#[test]
fn pmull2_1743() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pmull2 V(5).H8, V(20).B16, v7.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, E2, 27, 4E", "pmull2 V(5).H8, V(20).B16, v7.B16");
}

#[test]
fn pmull2_1744() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pmull2 V(17).Q1, V(26).D2, V(8).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, E3, E8, 4E", "pmull2 V(17).Q1, V(26).D2, V(8).D2");
}

#[test]
fn prfm_1745() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; prfm 8, -56456
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 1B, F9, D8", "prfm 8, -56456");
}

#[test]
fn prfm_1746() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; prfm 21, [x25, W(27)  , UXTW  3   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 5B, BB, F8", "prfm 21, [x25, W(27)  , UXTW  3   ]");
}

#[test]
fn prfum_1747() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; prfum 24, [x27  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 03, 80, F8", "prfum 24, [x27  ]");
}

#[test]
fn psb_1748() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; psb csync
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 22, 03, D5", "psb csync");
}

#[test]
fn pssbb_1749() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; pssbb
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 34, 03, D5", "pssbb");
}

#[test]
fn raddhn_1750() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; raddhn v9.B8, V(11).H8, v30.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 41, 3E, 2E", "raddhn v9.B8, V(11).H8, v30.H8");
}

#[test]
fn raddhn_1751() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; raddhn v19.H4, V(18).S4, V(14).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 42, 6E, 2E", "raddhn v19.H4, V(18).S4, V(14).S4");
}

#[test]
fn raddhn_1752() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; raddhn v13.S2, v3.D2, v28.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 40, BC, 2E", "raddhn v13.S2, v3.D2, v28.D2");
}

#[test]
fn raddhn2_1753() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; raddhn2 v10.B16, v0.H8, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 40, 21, 6E", "raddhn2 v10.B16, v0.H8, v1.H8");
}

#[test]
fn raddhn2_1754() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; raddhn2 V(18).H8, V(22).S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 42, 6C, 6E", "raddhn2 V(18).H8, V(22).S4, V(12).S4");
}

#[test]
fn raddhn2_1755() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; raddhn2 v2.S4, v21.D2, v8.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, 42, A8, 6E", "raddhn2 v2.S4, v21.D2, v8.D2");
}

#[test]
fn rax1_1756() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rax1 V(27).D2, v4.D2, v17.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 8C, 71, CE", "rax1 V(27).D2, v4.D2, v17.D2");
}

#[test]
fn rbit_1757() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rbit V(1).B16, v21.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, 5A, 60, 6E", "rbit V(1).B16, v21.B16");
}

#[test]
fn rbit_1758() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rbit v28.B8, V(22).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 5A, 60, 2E", "rbit v28.B8, V(22).B8");
}

#[test]
fn rbit_1759() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rbit W(28), W(9)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 01, C0, 5A", "rbit W(28), W(9)");
}

#[test]
fn rbit_1760() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rbit X(7), X(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 02, C0, DA", "rbit X(7), X(18)");
}

#[test]
fn ret_1761() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ret X(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 00, 5F, D6", "ret X(0)");
}

#[test]
fn ret_1762() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ret
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 03, 5F, D6", "ret");
}

#[test]
fn retaa_1763() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; retaa
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 0B, 5F, D6", "retaa");
}

#[test]
fn retab_1764() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; retab
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 0F, 5F, D6", "retab");
}

#[test]
fn rev_1765() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev W(9), W(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 0B, C0, 5A", "rev W(9), W(30)");
}

#[test]
fn rev_1766() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev X(5), X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 0F, C0, DA", "rev X(5), X(25)");
}

#[test]
fn rev16_1767() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev16 V(15).B16, V(0).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 18, 20, 4E", "rev16 V(15).B16, V(0).B16");
}

#[test]
fn rev16_1768() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev16 v25.B8, v25.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 1B, 20, 0E", "rev16 v25.B8, v25.B8");
}

#[test]
fn rev16_1769() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev16 w21, w1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 04, C0, 5A", "rev16 w21, w1");
}

#[test]
fn rev16_1770() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev16 x20, X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, 07, C0, DA", "rev16 x20, X(29)");
}

#[test]
fn rev32_1771() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev32 V(12).B16, v29.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 0B, 20, 6E", "rev32 V(12).B16, v29.B16");
}

#[test]
fn rev32_1772() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev32 v31.B8, v1.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 08, 20, 2E", "rev32 v31.B8, v1.B8");
}

#[test]
fn rev32_1773() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev32 v30.H8, V(19).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 0A, 60, 6E", "rev32 v30.H8, V(19).H8");
}

#[test]
fn rev32_1774() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev32 v24.H4, v5.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 08, 60, 2E", "rev32 v24.H4, v5.H4");
}

#[test]
fn rev32_1775() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev32 X(24), x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 0A, C0, DA", "rev32 X(24), x19");
}

#[test]
fn rev64_1776() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 v9.B16, V(21).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 0A, 20, 4E", "rev64 v9.B16, V(21).B16");
}

#[test]
fn rev64_1777() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 v16.B8, V(4).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, 08, 20, 0E", "rev64 v16.B8, V(4).B8");
}

#[test]
fn rev64_1778() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 v17.H8, V(18).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 0A, 60, 4E", "rev64 v17.H8, V(18).H8");
}

#[test]
fn rev64_1779() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 v25.H4, v19.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 0A, 60, 0E", "rev64 v25.H4, v19.H4");
}

#[test]
fn rev64_1780() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 V(30).S4, v26.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 0B, A0, 4E", "rev64 V(30).S4, v26.S4");
}

#[test]
fn rev64_1781() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 V(9).S2, v7.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 08, A0, 0E", "rev64 V(9).S2, v7.S2");
}

#[test]
fn rev64_1782() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rev64 x18, X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 0C, C0, DA", "rev64 x18, X(4)");
}

#[test]
fn rmif_1783() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rmif x6, 53, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 84, 1A, BA", "rmif x6, 53, 5");
}

#[test]
fn ror_1784() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ror W(24), w9, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, 09, 89, 13", "ror W(24), w9, 2");
}

#[test]
fn ror_1785() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ror x0, X(2), 62
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, F8, C2, 93", "ror x0, X(2), 62");
}

#[test]
fn ror_1786() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ror w23, W(19), w3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 2E, C3, 1A", "ror w23, W(19), w3");
}

#[test]
fn ror_1787() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ror X(16), x0, X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 2C, DC, 9A", "ror X(16), x0, X(28)");
}

#[test]
fn rorv_1788() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rorv W(22), W(31), w27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 2F, DB, 1A", "rorv W(22), W(31), w27");
}

#[test]
fn rorv_1789() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rorv x2, x28, X(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 2F, C5, 9A", "rorv x2, x28, X(5)");
}

#[test]
fn rshrn_1790() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rshrn v14.B8, V(26).H8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 8F, 09, 0F", "rshrn v14.B8, V(26).H8, 7");
}

#[test]
fn rshrn_1791() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rshrn v5.H4, V(31).S4, 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 8F, 11, 0F", "rshrn v5.H4, V(31).S4, 15");
}

#[test]
fn rshrn_1792() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rshrn V(31).S2, V(2).D2, 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 8C, 37, 0F", "rshrn V(31).S2, V(2).D2, 9");
}

#[test]
fn rshrn2_1793() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rshrn2 V(2).B16, V(17).H8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, 8E, 09, 4F", "rshrn2 V(2).B16, V(17).H8, 7");
}

#[test]
fn rshrn2_1794() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rshrn2 V(8).H8, v22.S4, 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 8E, 15, 4F", "rshrn2 V(8).H8, v22.S4, 11");
}

#[test]
fn rshrn2_1795() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rshrn2 v31.S4, V(0).D2, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 8C, 3A, 4F", "rshrn2 v31.S4, V(0).D2, 6");
}

#[test]
fn rsubhn_1796() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rsubhn v26.B8, V(28).H8, v22.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 63, 36, 2E", "rsubhn v26.B8, V(28).H8, v22.H8");
}

#[test]
fn rsubhn_1797() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rsubhn v11.H4, V(31).S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, 63, 6C, 2E", "rsubhn v11.H4, V(31).S4, V(12).S4");
}

#[test]
fn rsubhn_1798() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rsubhn V(0).S2, v4.D2, v17.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 60, B1, 2E", "rsubhn V(0).S2, v4.D2, v17.D2");
}

#[test]
fn rsubhn2_1799() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rsubhn2 V(12).B16, V(24).H8, v24.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, 63, 38, 6E", "rsubhn2 V(12).B16, V(24).H8, v24.H8");
}

#[test]
fn rsubhn2_1800() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rsubhn2 V(13).H8, v26.S4, v5.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 63, 65, 6E", "rsubhn2 V(13).H8, v26.S4, v5.S4");
}

#[test]
fn rsubhn2_1801() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; rsubhn2 v0.S4, V(4).D2, V(10).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 60, AA, 6E", "rsubhn2 v0.S4, V(4).D2, V(10).D2");
}

#[test]
fn saba_1802() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saba V(1).B16, v27.B16, V(14).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 7F, 2E, 4E", "saba V(1).B16, v27.B16, V(14).B16");
}

#[test]
fn saba_1803() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saba V(5).B8, V(27).B8, V(29).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 7F, 3D, 0E", "saba V(5).B8, V(27).B8, V(29).B8");
}

#[test]
fn saba_1804() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saba V(12).H8, v5.H8, V(18).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 7C, 72, 4E", "saba V(12).H8, v5.H8, V(18).H8");
}

#[test]
fn saba_1805() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saba V(18).H4, V(27).H4, V(21).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 7F, 75, 0E", "saba V(18).H4, V(27).H4, V(21).H4");
}

#[test]
fn saba_1806() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saba V(28).S4, v27.S4, v8.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 7F, A8, 4E", "saba V(28).S4, v27.S4, v8.S4");
}

#[test]
fn saba_1807() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saba V(13).S2, V(4).S2, V(0).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 7C, A0, 0E", "saba V(13).S2, V(4).S2, V(0).S2");
}

#[test]
fn sabal_1808() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabal V(10).H8, v18.B8, v16.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 52, 30, 0E", "sabal V(10).H8, v18.B8, v16.B8");
}

#[test]
fn sabal_1809() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabal V(6).S4, V(21).H4, V(8).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A6, 52, 68, 0E", "sabal V(6).S4, V(21).H4, V(8).H4");
}

#[test]
fn sabal_1810() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabal v21.D2, V(9).S2, v12.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 51, AC, 0E", "sabal v21.D2, V(9).S2, v12.S2");
}

#[test]
fn sabal2_1811() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabal2 v31.H8, v29.B16, V(16).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 53, 30, 4E", "sabal2 v31.H8, v29.B16, V(16).B16");
}

#[test]
fn sabal2_1812() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabal2 v9.S4, V(30).H8, v20.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 53, 74, 4E", "sabal2 v9.S4, V(30).H8, v20.H8");
}

#[test]
fn sabal2_1813() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabal2 V(13).D2, V(9).S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 51, AC, 4E", "sabal2 V(13).D2, V(9).S4, V(12).S4");
}

#[test]
fn sabd_1814() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabd v29.B16, v14.B16, v26.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 75, 3A, 4E", "sabd v29.B16, v14.B16, v26.B16");
}

#[test]
fn sabd_1815() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabd V(5).B8, V(20).B8, V(7).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 76, 27, 0E", "sabd V(5).B8, V(20).B8, V(7).B8");
}

#[test]
fn sabd_1816() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabd v24.H8, V(29).H8, v17.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 77, 71, 4E", "sabd v24.H8, V(29).H8, v17.H8");
}

#[test]
fn sabd_1817() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabd V(11).H4, v10.H4, v3.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 75, 63, 0E", "sabd V(11).H4, v10.H4, v3.H4");
}

#[test]
fn sabd_1818() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabd V(6).S4, V(19).S4, V(3).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, 76, A3, 4E", "sabd V(6).S4, V(19).S4, V(3).S4");
}

#[test]
fn sabd_1819() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabd V(31).S2, V(24).S2, V(29).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 77, BD, 0E", "sabd V(31).S2, V(24).S2, V(29).S2");
}

#[test]
fn sabdl_1820() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabdl V(15).H8, V(18).B8, v18.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 72, 32, 0E", "sabdl V(15).H8, V(18).B8, v18.B8");
}

#[test]
fn sabdl_1821() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabdl V(21).S4, V(31).H4, v21.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 73, 75, 0E", "sabdl V(21).S4, V(31).H4, v21.H4");
}

#[test]
fn sabdl_1822() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabdl V(6).D2, V(2).S2, V(4).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 70, A4, 0E", "sabdl V(6).D2, V(2).S2, V(4).S2");
}

#[test]
fn sabdl2_1823() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabdl2 v29.H8, v17.B16, V(5).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 72, 25, 4E", "sabdl2 v29.H8, v17.B16, V(5).B16");
}

#[test]
fn sabdl2_1824() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabdl2 v13.S4, v9.H8, V(28).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 71, 7C, 4E", "sabdl2 v13.S4, v9.H8, V(28).H8");
}

#[test]
fn sabdl2_1825() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sabdl2 V(10).D2, v2.S4, V(22).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 70, B6, 4E", "sabdl2 V(10).D2, v2.S4, V(22).S4");
}

#[test]
fn sadalp_1826() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sadalp V(0).H8, V(19).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 6A, 20, 4E", "sadalp V(0).H8, V(19).B16");
}

#[test]
fn sadalp_1827() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sadalp v0.H4, V(8).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 69, 20, 0E", "sadalp v0.H4, V(8).B8");
}

#[test]
fn sadalp_1828() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sadalp V(24).S4, v12.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 69, 60, 4E", "sadalp V(24).S4, v12.H8");
}

#[test]
fn sadalp_1829() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sadalp v8.S2, v3.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 68, 60, 0E", "sadalp v8.S2, v3.H4");
}

#[test]
fn sadalp_1830() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sadalp V(8).D2, v21.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 6A, A0, 4E", "sadalp V(8).D2, v21.S4");
}

#[test]
fn sadalp_1831() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sadalp V(18).D1, V(3).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 68, A0, 0E", "sadalp V(18).D1, V(3).S2");
}

#[test]
fn saddl_1832() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddl V(25).H8, v16.B8, V(11).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, 02, 2B, 0E", "saddl V(25).H8, v16.B8, V(11).B8");
}

#[test]
fn saddl_1833() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddl v29.S4, v14.H4, v1.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 01, 61, 0E", "saddl v29.S4, v14.H4, v1.H4");
}

#[test]
fn saddl_1834() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddl v11.D2, v31.S2, v17.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, 03, B1, 0E", "saddl v11.D2, v31.S2, v17.S2");
}

#[test]
fn saddl2_1835() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddl2 v15.H8, v10.B16, v22.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 01, 36, 4E", "saddl2 v15.H8, v10.B16, v22.B16");
}

#[test]
fn saddl2_1836() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddl2 V(27).S4, v5.H8, V(1).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 00, 61, 4E", "saddl2 V(27).S4, v5.H8, V(1).H8");
}

#[test]
fn saddl2_1837() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddl2 v18.D2, V(3).S4, V(16).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 00, B0, 4E", "saddl2 v18.D2, V(3).S4, V(16).S4");
}

#[test]
fn saddlp_1838() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlp v4.H8, V(7).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E4, 28, 20, 4E", "saddlp v4.H8, V(7).B16");
}

#[test]
fn saddlp_1839() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlp V(25).H4, v5.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 28, 20, 0E", "saddlp V(25).H4, v5.B8");
}

#[test]
fn saddlp_1840() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlp v16.S4, v4.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, 28, 60, 4E", "saddlp v16.S4, v4.H8");
}

#[test]
fn saddlp_1841() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlp v8.S2, V(24).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 2B, 60, 0E", "saddlp v8.S2, V(24).H4");
}

#[test]
fn saddlp_1842() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlp v23.D2, V(29).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 2B, A0, 4E", "saddlp v23.D2, V(29).S4");
}

#[test]
fn saddlp_1843() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlp v23.D1, v10.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, 29, A0, 0E", "saddlp v23.D1, v10.S2");
}

#[test]
fn saddlv_1844() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlv H(25), v20.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 3A, 30, 4E", "saddlv H(25), v20.B16");
}

#[test]
fn saddlv_1845() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlv h31, v12.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 39, 30, 0E", "saddlv h31, v12.B8");
}

#[test]
fn saddlv_1846() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlv S(22), v12.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 39, 70, 4E", "saddlv S(22), v12.H8");
}

#[test]
fn saddlv_1847() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlv s27, V(5).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 38, 70, 0E", "saddlv s27, V(5).H4");
}

#[test]
fn saddlv_1848() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddlv D(20), v15.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 39, B0, 4E", "saddlv D(20), v15.S4");
}

#[test]
fn saddw_1849() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddw V(23).H8, V(2).H8, v22.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, 10, 36, 0E", "saddw V(23).H8, V(2).H8, v22.B8");
}

#[test]
fn saddw_1850() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddw v28.S4, V(28).S4, V(5).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 13, 65, 0E", "saddw v28.S4, V(28).S4, V(5).H4");
}

#[test]
fn saddw_1851() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddw V(28).D2, V(29).D2, V(19).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 13, B3, 0E", "saddw V(28).D2, V(29).D2, V(19).S2");
}

#[test]
fn saddw2_1852() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddw2 v19.H8, V(24).H8, V(11).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, 13, 2B, 4E", "saddw2 v19.H8, V(24).H8, V(11).B16");
}

#[test]
fn saddw2_1853() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddw2 v23.S4, V(12).S4, v5.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "97, 11, 65, 4E", "saddw2 v23.S4, V(12).S4, v5.H8");
}

#[test]
fn saddw2_1854() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; saddw2 v12.D2, v22.D2, v13.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 12, AD, 4E", "saddw2 v12.D2, v22.D2, v13.S4");
}

#[test]
fn sbc_1855() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbc w8, W(28), w2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 03, 02, 5A", "sbc w8, W(28), w2");
}

#[test]
fn sbc_1856() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbc x13, X(19), X(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 02, 0D, DA", "sbc x13, X(19), X(13)");
}

#[test]
fn sbcs_1857() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbcs W(10), w24, W(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 03, 00, 7A", "sbcs W(10), w24, W(0)");
}

#[test]
fn sbcs_1858() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbcs x27, x27, X(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, 03, 14, FA", "sbcs x27, x27, X(20)");
}

#[test]
fn sbfiz_1859() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbfiz w9, w3, 2, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 1C, 1E, 13", "sbfiz w9, w3, 2, 8");
}

#[test]
fn sbfiz_1860() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbfiz X(8), x19, 40, 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 22, 58, 93", "sbfiz X(8), x19, 40, 9");
}

#[test]
fn sbfm_1861() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbfm W(18), W(21), 15, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 0A, 0F, 13", "sbfm W(18), W(21), 15, 2");
}

#[test]
fn sbfm_1862() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbfm X(7), X(27), 4, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, 1F, 44, 93", "sbfm X(7), X(27), 4, 7");
}

#[test]
fn sbfx_1863() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbfx w21, W(6), 28, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 74, 1C, 13", "sbfx w21, W(6), 28, 2");
}

#[test]
fn sbfx_1864() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sbfx X(22), X(0), 37, 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, F0, 65, 93", "sbfx X(22), X(0), 37, 24");
}

#[test]
fn scvtf_1865() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf h7, H(3), 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, E4, 19, 5F", "scvtf h7, H(3), 7");
}

#[test]
fn scvtf_1866() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf s1, S(19), 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, E6, 39, 5F", "scvtf s1, S(19), 7");
}

#[test]
fn scvtf_1867() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf D(16), d14, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, E5, 7B, 5F", "scvtf D(16), d14, 5");
}

#[test]
fn scvtf_1868() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v21.H8, V(1).H8, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, E4, 10, 4F", "scvtf v21.H8, V(1).H8, 16");
}

#[test]
fn scvtf_1869() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v19.H4, V(30).H4, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, E7, 10, 0F", "scvtf v19.H4, V(30).H4, 16");
}

#[test]
fn scvtf_1870() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v8.S4, v6.S4, 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, E4, 28, 4F", "scvtf v8.S4, v6.S4, 24");
}

#[test]
fn scvtf_1871() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v4.S2, v23.S2, 26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E4, E6, 26, 0F", "scvtf v4.S2, v23.S2, 26");
}

#[test]
fn scvtf_1872() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v10.D2, V(16).D2, 33
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, E6, 5F, 4F", "scvtf v10.D2, V(16).D2, 33");
}

#[test]
fn scvtf_1873() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf H(25), H(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, DB, 79, 5E", "scvtf H(25), H(30)");
}

#[test]
fn scvtf_1874() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf S(24), s23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, DA, 21, 5E", "scvtf S(24), s23");
}

#[test]
fn scvtf_1875() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf d7, D(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, DB, 61, 5E", "scvtf d7, D(24)");
}

#[test]
fn scvtf_1876() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v31.H8, V(6).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, D8, 79, 4E", "scvtf v31.H8, V(6).H8");
}

#[test]
fn scvtf_1877() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf V(6).H4, V(17).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, DA, 79, 0E", "scvtf V(6).H4, V(17).H4");
}

#[test]
fn scvtf_1878() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf V(9).S4, v4.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, D8, 21, 4E", "scvtf V(9).S4, v4.S4");
}

#[test]
fn scvtf_1879() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf v30.S2, v8.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, D9, 21, 0E", "scvtf v30.S2, v8.S2");
}

#[test]
fn scvtf_1880() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf V(3).D2, V(30).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, DB, 61, 4E", "scvtf V(3).D2, V(30).D2");
}

#[test]
fn scvtf_1881() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf H(14), w4, 20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, B0, C2, 1E", "scvtf H(14), w4, 20");
}

#[test]
fn scvtf_1882() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf s12, W(6), 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, D4, 02, 1E", "scvtf s12, W(6), 11");
}

#[test]
fn scvtf_1883() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf d4, W(27), 30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, 8B, 42, 1E", "scvtf d4, W(27), 30");
}

#[test]
fn scvtf_1884() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf h22, x7, 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 90, C2, 9E", "scvtf h22, x7, 28");
}

#[test]
fn scvtf_1885() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf s2, x11, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, E9, 02, 9E", "scvtf s2, x11, 6");
}

#[test]
fn scvtf_1886() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf d4, X(22), 33
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 7E, 42, 9E", "scvtf d4, X(22), 33");
}

#[test]
fn scvtf_1887() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf h11, w24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 03, E2, 1E", "scvtf h11, w24");
}

#[test]
fn scvtf_1888() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf S(20), w4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 00, 22, 1E", "scvtf S(20), w4");
}

#[test]
fn scvtf_1889() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf d0, wzr
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 03, 62, 1E", "scvtf d0, wzr");
}

#[test]
fn scvtf_1890() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf H(21), x22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 02, E2, 9E", "scvtf H(21), x22");
}

#[test]
fn scvtf_1891() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf s1, X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 02, 22, 9E", "scvtf s1, X(19)");
}

#[test]
fn scvtf_1892() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; scvtf d1, x12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, 01, 62, 9E", "scvtf d1, x12");
}

#[test]
fn sdiv_1893() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sdiv w9, w10, W(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, 0D, C3, 1A", "sdiv w9, w10, W(3)");
}

#[test]
fn sdiv_1894() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sdiv x3, x19, x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 0E, C4, 9A", "sdiv x3, x19, x4");
}

#[test]
fn sdot_1895() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sdot v25.S2, v6.B8, v4.B4[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, E0, A4, 0F", "sdot v25.S2, v6.B8, v4.B4[1]");
}

#[test]
fn sdot_1896() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sdot v31.S4, v5.B16, v1.B4[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, E8, 81, 4F", "sdot v31.S4, v5.B16, v1.B4[2]");
}

#[test]
fn sdot_1897() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sdot v10.S2, V(28).B8, V(12).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, 97, 8C, 0E", "sdot v10.S2, V(28).B8, V(12).B8");
}

#[test]
fn sdot_1898() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sdot v10.S4, V(15).B16, v5.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 95, 85, 4E", "sdot v10.S4, V(15).B16, v5.B16");
}

#[test]
fn setf16_1899() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; setf16 W(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, 4B, 00, 3A", "setf16 W(24)");
}

#[test]
fn setf8_1900() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; setf8 w9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 09, 00, 3A", "setf8 w9");
}

#[test]
fn sev_1901() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sev
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 20, 03, D5", "sev");
}

#[test]
fn sevl_1902() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sevl
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 20, 03, D5", "sevl");
}

#[test]
fn sha1c_1903() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha1c q10, s23, v8.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 02, 08, 5E", "sha1c q10, s23, v8.S4");
}

#[test]
fn sha1h_1904() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha1h s6, S(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A6, 08, 28, 5E", "sha1h s6, S(5)");
}

#[test]
fn sha1m_1905() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha1m Q(7), S(6), v0.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 20, 00, 5E", "sha1m Q(7), S(6), v0.S4");
}

#[test]
fn sha1p_1906() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha1p Q(31), S(5), v18.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 10, 12, 5E", "sha1p Q(31), S(5), v18.S4");
}

#[test]
fn sha1su0_1907() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha1su0 V(10).S4, V(30).S4, V(30).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, 33, 1E, 5E", "sha1su0 V(10).S4, V(30).S4, V(30).S4");
}

#[test]
fn sha1su1_1908() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha1su1 v8.S4, v14.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 19, 28, 5E", "sha1su1 v8.S4, v14.S4");
}

#[test]
fn sha256h_1909() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha256h q4, Q(8), V(11).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 41, 0B, 5E", "sha256h q4, Q(8), V(11).S4");
}

#[test]
fn sha256h2_1910() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha256h2 Q(29), q11, v5.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 51, 05, 5E", "sha256h2 Q(29), q11, v5.S4");
}

#[test]
fn sha256su0_1911() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha256su0 v23.S4, V(1).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, 28, 28, 5E", "sha256su0 v23.S4, V(1).S4");
}

#[test]
fn sha256su1_1912() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha256su1 v28.S4, v24.S4, V(18).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, 63, 12, 5E", "sha256su1 v28.S4, v24.S4, V(18).S4");
}

#[test]
fn sha512h_1913() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha512h q30, q1, V(10).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 80, 6A, CE", "sha512h q30, q1, V(10).D2");
}

#[test]
fn sha512h2_1914() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha512h2 q20, Q(27), V(15).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, 87, 6F, CE", "sha512h2 q20, Q(27), V(15).D2");
}

#[test]
fn sha512su0_1915() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha512su0 v25.D2, V(29).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 83, C0, CE", "sha512su0 v25.D2, V(29).D2");
}

#[test]
fn sha512su1_1916() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sha512su1 v20.D2, V(0).D2, v22.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 88, 76, CE", "sha512su1 v20.D2, V(0).D2, v22.D2");
}

#[test]
fn shadd_1917() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shadd v19.B16, V(31).B16, V(10).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F3, 07, 2A, 4E", "shadd v19.B16, V(31).B16, V(10).B16");
}

#[test]
fn shadd_1918() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shadd v4.B8, V(20).B8, V(22).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 06, 36, 0E", "shadd v4.B8, V(20).B8, V(22).B8");
}

#[test]
fn shadd_1919() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shadd v17.H8, V(26).H8, V(5).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 07, 65, 4E", "shadd v17.H8, V(26).H8, V(5).H8");
}

#[test]
fn shadd_1920() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shadd V(7).H4, V(29).H4, V(30).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A7, 07, 7E, 0E", "shadd V(7).H4, V(29).H4, V(30).H4");
}

#[test]
fn shadd_1921() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shadd V(3).S4, V(7).S4, V(6).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 04, A6, 4E", "shadd V(3).S4, V(7).S4, V(6).S4");
}

#[test]
fn shadd_1922() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shadd V(20).S2, v4.S2, v0.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 04, A0, 0E", "shadd V(20).S2, v4.S2, v0.S2");
}

#[test]
fn shl_1923() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl D(8), D(29), 46
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 57, 6E, 5F", "shl D(8), D(29), 46");
}

#[test]
fn shl_1924() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl v5.B16, v30.B16, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 57, 0A, 4F", "shl v5.B16, v30.B16, 2");
}

#[test]
fn shl_1925() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl v14.B8, v13.B8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 55, 08, 0F", "shl v14.B8, v13.B8, 0");
}

#[test]
fn shl_1926() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl v24.H8, V(8).H8, 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 55, 1C, 4F", "shl v24.H8, V(8).H8, 12");
}

#[test]
fn shl_1927() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl V(26).H4, V(22).H4, 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 56, 19, 0F", "shl V(26).H4, V(22).H4, 9");
}

#[test]
fn shl_1928() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl V(6).S4, v22.S4, 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 56, 3B, 4F", "shl V(6).S4, v22.S4, 27");
}

#[test]
fn shl_1929() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl V(16).S2, v15.S2, 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 55, 2B, 0F", "shl V(16).S2, v15.S2, 11");
}

#[test]
fn shl_1930() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shl V(4).D2, v29.D2, 56
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 57, 78, 4F", "shl V(4).D2, v29.D2, 56");
}

#[test]
fn shll_1931() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shll v5.H8, V(23).B8, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 3A, 21, 2E", "shll v5.H8, V(23).B8, 8");
}

#[test]
fn shll_1932() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shll V(28).S4, v14.H4, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 39, 61, 2E", "shll V(28).S4, v14.H4, 16");
}

#[test]
fn shll_1933() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shll V(20).D2, v12.S2, 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 39, A1, 2E", "shll V(20).D2, v12.S2, 32");
}

#[test]
fn shll2_1934() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shll2 v5.H8, V(15).B16, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 39, 21, 6E", "shll2 v5.H8, V(15).B16, 8");
}

#[test]
fn shll2_1935() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shll2 v5.S4, v11.H8, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 39, 61, 6E", "shll2 v5.S4, v11.H8, 16");
}

#[test]
fn shll2_1936() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shll2 v10.D2, V(8).S4, 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 39, A1, 6E", "shll2 v10.D2, V(8).S4, 32");
}

#[test]
fn shrn_1937() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shrn v18.B8, v10.H8, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 85, 0E, 0F", "shrn v18.B8, v10.H8, 2");
}

#[test]
fn shrn_1938() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shrn V(20).H4, V(12).S4, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 85, 1B, 0F", "shrn V(20).H4, V(12).S4, 5");
}

#[test]
fn shrn_1939() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shrn v27.S2, v1.D2, 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 84, 24, 0F", "shrn v27.S2, v1.D2, 28");
}

#[test]
fn shrn2_1940() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shrn2 v15.B16, V(2).H8, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 84, 08, 4F", "shrn2 v15.B16, V(2).H8, 8");
}

#[test]
fn shrn2_1941() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shrn2 V(22).H8, V(7).S4, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 84, 1B, 4F", "shrn2 V(22).H8, V(7).S4, 5");
}

#[test]
fn shrn2_1942() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shrn2 V(30).S4, v16.D2, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 86, 3E, 4F", "shrn2 V(30).S4, v16.D2, 2");
}

#[test]
fn shsub_1943() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shsub V(8).B16, V(6).B16, v20.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 24, 34, 4E", "shsub V(8).B16, V(6).B16, v20.B16");
}

#[test]
fn shsub_1944() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shsub v9.B8, v23.B8, v3.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 26, 23, 0E", "shsub v9.B8, v23.B8, v3.B8");
}

#[test]
fn shsub_1945() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shsub V(20).H8, V(25).H8, V(15).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 27, 6F, 4E", "shsub V(20).H8, V(25).H8, V(15).H8");
}

#[test]
fn shsub_1946() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shsub V(28).H4, V(31).H4, v19.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 27, 73, 0E", "shsub V(28).H4, V(31).H4, v19.H4");
}

#[test]
fn shsub_1947() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shsub V(29).S4, V(27).S4, v3.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 27, A3, 4E", "shsub V(29).S4, V(27).S4, v3.S4");
}

#[test]
fn shsub_1948() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; shsub V(0).S2, v4.S2, v11.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 24, AB, 0E", "shsub V(0).S2, v4.S2, v11.S2");
}

#[test]
fn sli_1949() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli D(9), D(12), 57
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 55, 79, 7F", "sli D(9), D(12), 57");
}

#[test]
fn sli_1950() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli v13.B16, v13.B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 55, 08, 6F", "sli v13.B16, v13.B16, 0");
}

#[test]
fn sli_1951() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli V(0).B8, V(26).B8, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 57, 09, 2F", "sli V(0).B8, V(26).B8, 1");
}

#[test]
fn sli_1952() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli V(13).H8, v30.H8, 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CD, 57, 1B, 6F", "sli V(13).H8, v30.H8, 11");
}

#[test]
fn sli_1953() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli V(17).H4, v21.H4, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 56, 12, 2F", "sli V(17).H4, v21.H4, 2");
}

#[test]
fn sli_1954() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli V(29).S4, V(5).S4, 14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BD, 54, 2E, 6F", "sli V(29).S4, V(5).S4, 14");
}

#[test]
fn sli_1955() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli V(21).S2, V(10).S2, 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, 55, 2B, 2F", "sli V(21).S2, V(10).S2, 11");
}

#[test]
fn sli_1956() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sli v7.D2, v25.D2, 33
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 57, 61, 6F", "sli v7.D2, v25.D2, 33");
}

#[test]
fn sm3partw1_1957() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3partw1 v12.S4, v0.S4, V(5).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, C0, 65, CE", "sm3partw1 v12.S4, v0.S4, V(5).S4");
}

#[test]
fn sm3partw2_1958() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3partw2 v0.S4, V(20).S4, v10.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, C6, 6A, CE", "sm3partw2 v0.S4, V(20).S4, v10.S4");
}

#[test]
fn sm3ss1_1959() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3ss1 v12.S4, V(5).S4, v8.S4, v30.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 78, 48, CE", "sm3ss1 v12.S4, V(5).S4, v8.S4, v30.S4");
}

#[test]
fn sm3tt1a_1960() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3tt1a v13.S4, v1.S4, v21.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, B0, 55, CE", "sm3tt1a v13.S4, v1.S4, v21.S[3]");
}

#[test]
fn sm3tt1b_1961() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3tt1b v26.S4, v19.S4, v31.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7A, 96, 5F, CE", "sm3tt1b v26.S4, v19.S4, v31.S[1]");
}

#[test]
fn sm3tt2a_1962() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3tt2a V(31).S4, V(26).S4, v24.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 8B, 58, CE", "sm3tt2a V(31).S4, V(26).S4, v24.S[0]");
}

#[test]
fn sm3tt2b_1963() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm3tt2b v21.S4, V(28).S4, V(10).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 8F, 4A, CE", "sm3tt2b v21.S4, V(28).S4, V(10).S[0]");
}

#[test]
fn sm4e_1964() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm4e V(17).S4, V(5).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 84, C0, CE", "sm4e V(17).S4, V(5).S4");
}

#[test]
fn sm4ekey_1965() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sm4ekey v30.S4, V(0).S4, V(26).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, C8, 7A, CE", "sm4ekey v30.S4, V(0).S4, V(26).S4");
}

#[test]
fn smaddl_1966() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaddl X(18), W(13), W(25), x12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 31, 39, 9B", "smaddl X(18), W(13), W(25), x12");
}

#[test]
fn smax_1967() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smax V(3).B16, v30.B16, V(25).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 67, 39, 4E", "smax V(3).B16, v30.B16, V(25).B16");
}

#[test]
fn smax_1968() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smax v4.B8, V(24).B8, v20.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 67, 34, 0E", "smax v4.B8, V(24).B8, v20.B8");
}

#[test]
fn smax_1969() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smax V(26).H8, v6.H8, v9.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 64, 69, 4E", "smax V(26).H8, v6.H8, v9.H8");
}

#[test]
fn smax_1970() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smax V(20).H4, V(19).H4, v9.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, 66, 69, 0E", "smax V(20).H4, V(19).H4, v9.H4");
}

#[test]
fn smax_1971() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smax v28.S4, v18.S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, 66, AC, 4E", "smax v28.S4, v18.S4, V(12).S4");
}

#[test]
fn smax_1972() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smax V(10).S2, V(23).S2, V(13).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 66, AD, 0E", "smax V(10).S2, V(23).S2, V(13).S2");
}

#[test]
fn smaxp_1973() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxp V(12).B16, V(4).B16, v23.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, A4, 37, 4E", "smaxp V(12).B16, V(4).B16, v23.B16");
}

#[test]
fn smaxp_1974() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxp v21.B8, v13.B8, V(0).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, A5, 20, 0E", "smaxp v21.B8, v13.B8, V(0).B8");
}

#[test]
fn smaxp_1975() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxp v17.H8, V(6).H8, V(4).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, A4, 64, 4E", "smaxp v17.H8, V(6).H8, V(4).H8");
}

#[test]
fn smaxp_1976() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxp v28.H4, v18.H4, V(24).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, A6, 78, 0E", "smaxp v28.H4, v18.H4, V(24).H4");
}

#[test]
fn smaxp_1977() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxp v30.S4, v20.S4, v14.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, A6, AE, 4E", "smaxp v30.S4, v20.S4, v14.S4");
}

#[test]
fn smaxp_1978() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxp V(21).S2, v4.S2, v4.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, A4, A4, 0E", "smaxp V(21).S2, v4.S2, v4.S2");
}

#[test]
fn smaxv_1979() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxv B(14), V(26).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, AB, 30, 4E", "smaxv B(14), V(26).B16");
}

#[test]
fn smaxv_1980() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxv B(1), v21.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, AA, 30, 0E", "smaxv B(1), v21.B8");
}

#[test]
fn smaxv_1981() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxv h14, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, A8, 70, 4E", "smaxv h14, v1.H8");
}

#[test]
fn smaxv_1982() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxv H(4), V(12).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, A9, 70, 0E", "smaxv H(4), V(12).H4");
}

#[test]
fn smaxv_1983() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smaxv S(0), V(11).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, A9, B0, 4E", "smaxv S(0), V(11).S4");
}

#[test]
fn smc_1984() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smc 6657
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 40, 03, D4", "smc 6657");
}

#[test]
fn smin_1985() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smin v0.B16, v24.B16, v0.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 6F, 20, 4E", "smin v0.B16, v24.B16, v0.B16");
}

#[test]
fn smin_1986() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smin v30.B8, V(20).B8, v31.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 6E, 3F, 0E", "smin v30.B8, V(20).B8, v31.B8");
}

#[test]
fn smin_1987() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smin V(4).H8, V(11).H8, v30.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, 6D, 7E, 4E", "smin V(4).H8, V(11).H8, v30.H8");
}

#[test]
fn smin_1988() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smin v29.H4, V(19).H4, v19.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 6E, 73, 0E", "smin v29.H4, V(19).H4, v19.H4");
}

#[test]
fn smin_1989() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smin V(0).S4, V(3).S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 6C, AC, 4E", "smin V(0).S4, V(3).S4, V(12).S4");
}

#[test]
fn smin_1990() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smin V(7).S2, V(10).S2, V(21).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 6D, B5, 0E", "smin V(7).S2, V(10).S2, V(21).S2");
}

#[test]
fn sminp_1991() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminp V(21).B16, v13.B16, v0.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, AD, 20, 4E", "sminp V(21).B16, v13.B16, v0.B16");
}

#[test]
fn sminp_1992() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminp v20.B8, V(14).B8, V(18).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, AD, 32, 0E", "sminp v20.B8, V(14).B8, V(18).B8");
}

#[test]
fn sminp_1993() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminp v29.H8, v30.H8, V(12).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, AF, 6C, 4E", "sminp v29.H8, v30.H8, V(12).H8");
}

#[test]
fn sminp_1994() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminp V(19).H4, v17.H4, v0.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, AE, 60, 0E", "sminp V(19).H4, v17.H4, v0.H4");
}

#[test]
fn sminp_1995() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminp V(24).S4, V(11).S4, v0.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, AD, A0, 4E", "sminp V(24).S4, V(11).S4, v0.S4");
}

#[test]
fn sminp_1996() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminp v11.S2, V(30).S2, v29.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, AF, BD, 0E", "sminp v11.S2, V(30).S2, v29.S2");
}

#[test]
fn sminv_1997() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminv b10, v30.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, AB, 31, 4E", "sminv b10, v30.B16");
}

#[test]
fn sminv_1998() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminv B(2), v18.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, AA, 31, 0E", "sminv B(2), v18.B8");
}

#[test]
fn sminv_1999() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminv H(0), v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, A8, 71, 4E", "sminv H(0), v1.H8");
}
