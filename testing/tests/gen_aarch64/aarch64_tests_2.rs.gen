
#[test]
fn sminv_2000() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminv h1, v17.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, AA, 71, 0E", "sminv h1, v17.H4");
}

#[test]
fn sminv_2001() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sminv S(0), v22.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, AA, B1, 4E", "sminv S(0), v22.S4");
}

#[test]
fn smlal_2002() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(3).S4, v12.H4, v6.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, 29, 76, 0F", "smlal V(3).S4, v12.H4, v6.H[7]");
}

#[test]
fn smlal_2003() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal v20.D2, V(17).S2, V(8).S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 22, A8, 0F", "smlal v20.D2, V(17).S2, V(8).S[1]");
}

#[test]
fn smlal_2004() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal v13.H8, v12.B8, V(18).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 81, 32, 0E", "smlal v13.H8, v12.B8, V(18).B8");
}

#[test]
fn smlal_2005() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(6).S4, V(12).H4, V(14).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, 81, 6E, 0E", "smlal V(6).S4, V(12).H4, V(14).H4");
}

#[test]
fn smlal_2006() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(21).D2, v31.S2, V(23).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 83, B7, 0E", "smlal V(21).D2, v31.S2, V(23).S2");
}

#[test]
fn smlal2_2007() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(21).S4, v7.H8, V(10).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 28, 7A, 4F", "smlal2 V(21).S4, v7.H8, V(10).H[7]");
}

#[test]
fn smlal2_2008() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v3.D2, v15.S4, V(31).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 21, 9F, 4F", "smlal2 v3.D2, v15.S4, V(31).S[0]");
}

#[test]
fn smlal2_2009() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(2).H8, V(23).B16, v25.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 82, 39, 4E", "smlal2 V(2).H8, V(23).B16, v25.B16");
}

#[test]
fn smlal2_2010() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(7).S4, V(7).H8, v27.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 80, 7B, 4E", "smlal2 V(7).S4, V(7).H8, v27.H8");
}

#[test]
fn smlal2_2011() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(15).D2, v13.S4, v1.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 81, A1, 4E", "smlal2 V(15).D2, v13.S4, v1.S4");
}

#[test]
fn smlsl_2012() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(5).S4, V(26).H4, V(13).H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 6B, 5D, 0F", "smlsl V(5).S4, V(26).H4, V(13).H[5]");
}

#[test]
fn smlsl_2013() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v31.D2, v31.S2, v12.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 6B, AC, 0F", "smlsl v31.D2, v31.S2, v12.S[3]");
}

#[test]
fn smlsl_2014() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v14.H8, V(1).B8, v19.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, A0, 33, 0E", "smlsl v14.H8, V(1).B8, v19.B8");
}

#[test]
fn smlsl_2015() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v15.S4, v30.H4, V(29).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CF, A3, 7D, 0E", "smlsl v15.S4, v30.H4, V(29).H4");
}

#[test]
fn smlsl_2016() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v13.D2, V(21).S2, v18.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, A2, B2, 0E", "smlsl v13.D2, V(21).S2, v18.S2");
}

#[test]
fn smlsl2_2017() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v28.S4, v17.H8, V(12).H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 62, 6C, 4F", "smlsl2 v28.S4, v17.H8, V(12).H[2]");
}

#[test]
fn smlsl2_2018() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v8.D2, V(28).S4, V(11).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 63, 8B, 4F", "smlsl2 v8.D2, V(28).S4, V(11).S[0]");
}

#[test]
fn smlsl2_2019() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v3.H8, V(22).B16, V(21).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, A2, 35, 4E", "smlsl2 v3.H8, V(22).B16, V(21).B16");
}

#[test]
fn smlsl2_2020() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 V(18).S4, v13.H8, v30.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, A1, 7E, 4E", "smlsl2 V(18).S4, v13.H8, v30.H8");
}

#[test]
fn smlsl2_2021() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v10.D2, V(2).S4, v8.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, A0, A8, 4E", "smlsl2 v10.D2, V(2).S4, v8.S4");
}

#[test]
fn smnegl_2022() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smnegl x30, W(5), W(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, FC, 35, 9B", "smnegl x30, W(5), W(21)");
}

#[test]
fn smov_2023() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smov W(5), v27.B[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 2F, 03, 0E", "smov W(5), v27.B[1]");
}

#[test]
fn smov_2024() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smov W(29), V(25).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 2F, 1E, 0E", "smov W(29), V(25).H[7]");
}

#[test]
fn smov_2025() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smov X(11), v31.B[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, 2F, 0F, 4E", "smov X(11), v31.B[7]");
}

#[test]
fn smov_2026() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smov xzr, v2.H[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 2C, 0E, 4E", "smov xzr, v2.H[3]");
}

#[test]
fn smov_2027() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smov X(1), v17.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 2E, 14, 4E", "smov X(1), v17.S[2]");
}

#[test]
fn smsubl_2028() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smsubl x19, w4, w2, X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, EC, 22, 9B", "smsubl x19, w4, w2, X(27)");
}

#[test]
fn smulh_2029() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smulh X(7), X(31), x3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 7F, 43, 9B", "smulh X(7), X(31), x3");
}

#[test]
fn smull_2030() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(9).S4, v19.H4, v0.H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, A2, 40, 0F", "smull V(9).S4, v19.H4, v0.H[0]");
}

#[test]
fn smull_2031() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(2).D2, v1.S2, V(20).S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, A8, 94, 0F", "smull V(2).D2, v1.S2, V(20).S[2]");
}

#[test]
fn smull_2032() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull v14.H8, V(9).B8, V(2).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, C1, 22, 0E", "smull v14.H8, V(9).B8, V(2).B8");
}

#[test]
fn smull_2033() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(25).S4, v15.H4, V(25).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, C1, 79, 0E", "smull V(25).S4, v15.H4, V(25).H4");
}

#[test]
fn smull_2034() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(24).D2, V(29).S2, v26.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, C3, BA, 0E", "smull V(24).D2, V(29).S2, v26.S2");
}

#[test]
fn smull_2035() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull x10, W(31), W(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 7F, 38, 9B", "smull x10, W(31), W(24)");
}

#[test]
fn smull2_2036() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 v31.S4, v24.H8, v5.H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, A3, 65, 4F", "smull2 v31.S4, v24.H8, v5.H[2]");
}

#[test]
fn smull2_2037() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 v18.D2, V(1).S4, V(20).S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, A0, B4, 4F", "smull2 v18.D2, V(1).S4, V(20).S[1]");
}

#[test]
fn smull2_2038() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(9).H8, v20.B16, v28.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, C2, 3C, 4E", "smull2 V(9).H8, v20.B16, v28.B16");
}

#[test]
fn smull2_2039() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(12).S4, v19.H8, v14.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, C2, 6E, 4E", "smull2 V(12).S4, v19.H8, v14.H8");
}

#[test]
fn smull2_2040() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 v0.D2, v2.S4, v26.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, C0, BA, 4E", "smull2 v0.D2, v2.S4, v26.S4");
}

#[test]
fn sqabs_2041() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs B(2), b18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, 7A, 20, 5E", "sqabs B(2), b18");
}

#[test]
fn sqabs_2042() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs H(24), H(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 78, 60, 5E", "sqabs H(24), H(4)");
}

#[test]
fn sqabs_2043() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs s13, S(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 7A, A0, 5E", "sqabs s13, S(23)");
}

#[test]
fn sqabs_2044() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs D(10), d2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 78, E0, 5E", "sqabs D(10), d2");
}

#[test]
fn sqabs_2045() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v0.B16, v31.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 7B, 20, 4E", "sqabs v0.B16, v31.B16");
}

#[test]
fn sqabs_2046() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v26.B8, V(13).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, 79, 20, 0E", "sqabs v26.B8, V(13).B8");
}

#[test]
fn sqabs_2047() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v30.H8, v25.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 7B, 60, 4E", "sqabs v30.H8, v25.H8");
}

#[test]
fn sqabs_2048() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v29.H4, v1.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 78, 60, 0E", "sqabs v29.H4, v1.H4");
}

#[test]
fn sqabs_2049() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v8.S4, v7.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 78, A0, 4E", "sqabs v8.S4, v7.S4");
}

#[test]
fn sqabs_2050() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v14.S2, V(18).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 7A, A0, 0E", "sqabs v14.S2, V(18).S2");
}

#[test]
fn sqabs_2051() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(31).D2, v5.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 78, E0, 4E", "sqabs V(31).D2, v5.D2");
}

#[test]
fn sqadd_2052() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd B(9), b27, B(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 0F, 3D, 5E", "sqadd B(9), b27, B(29)");
}

#[test]
fn sqadd_2053() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd h13, H(26), H(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 0F, 64, 5E", "sqadd h13, H(26), H(4)");
}

#[test]
fn sqadd_2054() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd s19, s6, S(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 0C, A5, 5E", "sqadd s19, s6, S(5)");
}

#[test]
fn sqadd_2055() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd d31, d8, d31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 0D, FF, 5E", "sqadd d31, d8, d31");
}

#[test]
fn sqadd_2056() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v0.B16, v23.B16, V(4).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 0E, 24, 4E", "sqadd v0.B16, v23.B16, V(4).B16");
}

#[test]
fn sqadd_2057() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v9.B8, v3.B8, V(25).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 0C, 39, 0E", "sqadd v9.B8, v3.B8, V(25).B8");
}

#[test]
fn sqadd_2058() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(3).H8, v13.H8, v3.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, 0D, 63, 4E", "sqadd V(3).H8, v13.H8, v3.H8");
}

#[test]
fn sqadd_2059() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v7.H4, v21.H4, V(6).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A7, 0E, 66, 0E", "sqadd v7.H4, v21.H4, V(6).H4");
}

#[test]
fn sqadd_2060() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v16.S4, v1.S4, v10.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 0C, AA, 4E", "sqadd v16.S4, v1.S4, v10.S4");
}

#[test]
fn sqadd_2061() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v20.S2, v10.S2, v19.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "54, 0D, B3, 0E", "sqadd v20.S2, v10.S2, v19.S2");
}

#[test]
fn sqadd_2062() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(7).D2, v8.D2, V(12).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 0D, EC, 4E", "sqadd V(7).D2, v8.D2, V(12).D2");
}

#[test]
fn sqdmlal_2063() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal S(12), H(26), V(15).H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 33, 4F, 5F", "sqdmlal S(12), H(26), V(15).H[0]");
}

#[test]
fn sqdmlal_2064() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal d0, s22, V(22).S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 32, B6, 5F", "sqdmlal d0, s22, V(22).S[1]");
}

#[test]
fn sqdmlal_2065() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal V(20).S4, v24.H4, v11.H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 3B, 4B, 0F", "sqdmlal V(20).S4, v24.H4, v11.H[4]");
}

#[test]
fn sqdmlal_2066() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal V(26).D2, v4.S2, v4.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 30, A4, 0F", "sqdmlal V(26).D2, v4.S2, v4.S[1]");
}

#[test]
fn sqdmlal_2067() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal s30, H(25), h20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 93, 74, 5E", "sqdmlal s30, H(25), h20");
}

#[test]
fn sqdmlal_2068() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal d10, s20, s16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, 92, B0, 5E", "sqdmlal d10, s20, s16");
}

#[test]
fn sqdmlal_2069() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v4.S4, V(6).H4, v15.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 90, 6F, 0E", "sqdmlal v4.S4, V(6).H4, v15.H4");
}

#[test]
fn sqdmlal_2070() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v8.D2, v15.S2, V(9).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 91, A9, 0E", "sqdmlal v8.D2, v15.S2, V(9).S2");
}

#[test]
fn sqdmlal2_2071() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 V(19).S4, V(19).H8, v13.H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 32, 4D, 4F", "sqdmlal2 V(19).S4, V(19).H8, v13.H[0]");
}

#[test]
fn sqdmlal2_2072() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 V(7).D2, v28.S4, v24.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 3B, B8, 4F", "sqdmlal2 V(7).D2, v28.S4, v24.S[3]");
}

#[test]
fn sqdmlal2_2073() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 v28.S4, v28.H8, V(8).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 93, 68, 4E", "sqdmlal2 v28.S4, v28.H8, V(8).H8");
}

#[test]
fn sqdmlal2_2074() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 V(11).D2, v22.S4, V(10).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 92, AA, 4E", "sqdmlal2 V(11).D2, v22.S4, V(10).S4");
}

#[test]
fn sqdmlsl_2075() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl S(6), H(0), V(9).H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 78, 59, 5F", "sqdmlsl S(6), H(0), V(9).H[5]");
}

#[test]
fn sqdmlsl_2076() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl d18, s6, V(17).S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 70, B1, 5F", "sqdmlsl d18, s6, V(17).S[1]");
}

#[test]
fn sqdmlsl_2077() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl v19.S4, v14.H4, V(12).H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 79, 5C, 0F", "sqdmlsl v19.S4, v14.H4, V(12).H[5]");
}

#[test]
fn sqdmlsl_2078() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl v8.D2, V(1).S2, v24.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 78, B8, 0F", "sqdmlsl v8.D2, V(1).S2, v24.S[3]");
}

#[test]
fn sqdmlsl_2079() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl s19, H(19), H(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, B2, 71, 5E", "sqdmlsl s19, H(19), H(17)");
}

#[test]
fn sqdmlsl_2080() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl D(11), s18, S(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, B2, A7, 5E", "sqdmlsl D(11), s18, S(7)");
}

#[test]
fn sqdmlsl_2081() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(13).S4, V(0).H4, v15.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, B0, 6F, 0E", "sqdmlsl V(13).S4, V(0).H4, v15.H4");
}

#[test]
fn sqdmlsl_2082() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl v11.D2, v13.S2, v28.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AB, B1, BC, 0E", "sqdmlsl v11.D2, v13.S2, v28.S2");
}

#[test]
fn sqdmlsl2_2083() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(10).S4, v16.H8, v8.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 7A, 78, 4F", "sqdmlsl2 V(10).S4, v16.H8, v8.H[7]");
}

#[test]
fn sqdmlsl2_2084() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(12).D2, v12.S4, V(4).S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 79, 84, 4F", "sqdmlsl2 V(12).D2, v12.S4, V(4).S[2]");
}

#[test]
fn sqdmlsl2_2085() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(0).S4, v3.H8, V(5).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, B0, 65, 4E", "sqdmlsl2 V(0).S4, v3.H8, V(5).H8");
}

#[test]
fn sqdmlsl2_2086() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 v4.D2, v26.S4, v29.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, B3, BD, 4E", "sqdmlsl2 v4.D2, v26.S4, v29.S4");
}

#[test]
fn sqdmulh_2087() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh H(4), H(25), V(10).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, C3, 5A, 5F", "sqdmulh H(4), H(25), V(10).H[1]");
}

#[test]
fn sqdmulh_2088() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh s31, S(18), v13.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, CA, 8D, 5F", "sqdmulh s31, S(18), v13.S[2]");
}

#[test]
fn sqdmulh_2089() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(22).H8, v0.H8, v1.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, C8, 71, 4F", "sqdmulh V(22).H8, v0.H8, v1.H[7]");
}

#[test]
fn sqdmulh_2090() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(22).H4, V(11).H4, V(11).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, C9, 7B, 0F", "sqdmulh V(22).H4, V(11).H4, V(11).H[7]");
}

#[test]
fn sqdmulh_2091() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v31.S4, v22.S4, v16.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, C2, B0, 4F", "sqdmulh v31.S4, v22.S4, v16.S[1]");
}

#[test]
fn sqdmulh_2092() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v21.S2, v24.S2, V(5).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, C3, 85, 0F", "sqdmulh v21.S2, v24.S2, V(5).S[0]");
}

#[test]
fn sqdmulh_2093() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh h6, h18, H(14)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, B6, 6E, 5E", "sqdmulh h6, h18, H(14)");
}

#[test]
fn sqdmulh_2094() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh S(16), s4, s3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, B4, A3, 5E", "sqdmulh S(16), s4, s3");
}

#[test]
fn sqdmulh_2095() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(30).H8, v23.H8, V(2).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, B6, 62, 4E", "sqdmulh V(30).H8, v23.H8, V(2).H8");
}

#[test]
fn sqdmulh_2096() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v14.H4, v9.H4, v24.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, B5, 78, 0E", "sqdmulh v14.H4, v9.H4, v24.H4");
}

#[test]
fn sqdmulh_2097() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(13).S4, V(9).S4, v14.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, B5, AE, 4E", "sqdmulh V(13).S4, V(9).S4, v14.S4");
}

#[test]
fn sqdmulh_2098() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(17).S2, V(27).S2, v4.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, B7, A4, 0E", "sqdmulh V(17).S2, V(27).S2, v4.S2");
}

#[test]
fn sqdmull_2099() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull S(26), h7, v12.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, B8, 7C, 5F", "sqdmull S(26), h7, v12.H[7]");
}

#[test]
fn sqdmull_2100() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull d9, S(25), V(15).S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, BB, AF, 5F", "sqdmull d9, S(25), V(15).S[3]");
}

#[test]
fn sqdmull_2101() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull v11.S4, V(5).H4, V(15).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AB, B0, 5F, 0F", "sqdmull v11.S4, V(5).H4, V(15).H[1]");
}

#[test]
fn sqdmull_2102() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(23).D2, v3.S2, v7.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, B0, A7, 0F", "sqdmull V(23).D2, v3.S2, v7.S[1]");
}

#[test]
fn sqdmull_2103() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull S(2), h28, H(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, D3, 6A, 5E", "sqdmull S(2), h28, H(10)");
}

#[test]
fn sqdmull_2104() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull d6, s19, s12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, D2, AC, 5E", "sqdmull d6, s19, s12");
}

#[test]
fn sqdmull_2105() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(5).S4, v25.H4, v14.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, D3, 6E, 0E", "sqdmull V(5).S4, v25.H4, v14.H4");
}

#[test]
fn sqdmull_2106() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull v4.D2, V(12).S2, V(7).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, D1, A7, 0E", "sqdmull v4.D2, V(12).S2, V(7).S2");
}

#[test]
fn sqdmull2_2107() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 v22.S4, V(19).H8, V(11).H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, BA, 4B, 4F", "sqdmull2 v22.S4, V(19).H8, V(11).H[4]");
}

#[test]
fn sqdmull2_2108() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 v28.D2, V(18).S4, V(2).S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, B2, A2, 4F", "sqdmull2 v28.D2, V(18).S4, V(2).S[1]");
}

#[test]
fn sqdmull2_2109() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 v29.S4, V(6).H8, v10.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, D0, 6A, 4E", "sqdmull2 v29.S4, V(6).H8, v10.H8");
}

#[test]
fn sqdmull2_2110() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 V(28).D2, V(16).S4, V(16).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, D2, B0, 4E", "sqdmull2 V(28).D2, V(16).S4, V(16).S4");
}

#[test]
fn sqneg_2111() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg B(6), B(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, 78, 20, 7E", "sqneg B(6), B(4)");
}

#[test]
fn sqneg_2112() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg h30, h14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, 79, 60, 7E", "sqneg h30, h14");
}

#[test]
fn sqneg_2113() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg s16, S(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 7B, A0, 7E", "sqneg s16, S(26)");
}

#[test]
fn sqneg_2114() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg d4, d25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 7B, E0, 7E", "sqneg d4, d25");
}

#[test]
fn sqneg_2115() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(25).B16, v14.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 79, 20, 6E", "sqneg V(25).B16, v14.B16");
}

#[test]
fn sqneg_2116() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(23).B8, v1.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, 78, 20, 2E", "sqneg V(23).B8, v1.B8");
}

#[test]
fn sqneg_2117() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(23).H8, V(28).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "97, 7B, 60, 6E", "sqneg V(23).H8, V(28).H8");
}

#[test]
fn sqneg_2118() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v28.H4, v7.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 78, 60, 2E", "sqneg v28.H4, v7.H4");
}

#[test]
fn sqneg_2119() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v2.S4, v3.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, 78, A0, 6E", "sqneg v2.S4, v3.S4");
}

#[test]
fn sqneg_2120() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(3).S2, v14.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 79, A0, 2E", "sqneg V(3).S2, v14.S2");
}

#[test]
fn sqneg_2121() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v4.D2, V(7).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E4, 78, E0, 6E", "sqneg v4.D2, V(7).D2");
}

#[test]
fn sqrdmlah_2122() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah h0, h24, v1.H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, D3, 51, 7F", "sqrdmlah h0, h24, v1.H[1]");
}

#[test]
fn sqrdmlah_2123() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah s24, S(24), V(9).S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, DB, A9, 7F", "sqrdmlah s24, S(24), V(9).S[3]");
}

#[test]
fn sqrdmlah_2124() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v10.H8, v3.H8, V(12).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, D0, 5C, 6F", "sqrdmlah v10.H8, v3.H8, V(12).H[1]");
}

#[test]
fn sqrdmlah_2125() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v18.H4, V(27).H4, v1.H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, DB, 51, 2F", "sqrdmlah v18.H4, V(27).H4, v1.H[5]");
}

#[test]
fn sqrdmlah_2126() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(5).S4, V(19).S4, v12.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, DA, 8C, 6F", "sqrdmlah V(5).S4, V(19).S4, v12.S[2]");
}

#[test]
fn sqrdmlah_2127() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(14).S2, V(23).S2, V(12).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, D2, 8C, 2F", "sqrdmlah V(14).S2, V(23).S2, V(12).S[0]");
}

#[test]
fn sqrdmlah_2128() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah H(31), H(31), H(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 87, 5A, 7E", "sqrdmlah H(31), H(31), H(26)");
}

#[test]
fn sqrdmlah_2129() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah s4, S(13), S(31)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 85, 9F, 7E", "sqrdmlah s4, S(13), S(31)");
}

#[test]
fn sqrdmlah_2130() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v4.H8, V(6).H8, V(17).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 84, 51, 6E", "sqrdmlah v4.H8, V(6).H8, V(17).H8");
}

#[test]
fn sqrdmlah_2131() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(30).H4, V(16).H4, V(26).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 86, 5A, 2E", "sqrdmlah V(30).H4, V(16).H4, V(26).H4");
}

#[test]
fn sqrdmlah_2132() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(14).S4, V(23).S4, v0.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, 86, 80, 6E", "sqrdmlah V(14).S4, V(23).S4, v0.S4");
}

#[test]
fn sqrdmlah_2133() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(27).S2, v14.S2, v5.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 85, 85, 2E", "sqrdmlah V(27).S2, v14.S2, v5.S2");
}

#[test]
fn sqrdmlsh_2134() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh h25, h25, V(3).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, FB, 73, 7F", "sqrdmlsh h25, h25, V(3).H[7]");
}

#[test]
fn sqrdmlsh_2135() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh s15, S(12), v22.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, F1, B6, 7F", "sqrdmlsh s15, S(12), v22.S[1]");
}

#[test]
fn sqrdmlsh_2136() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(6).H8, V(17).H8, v0.H[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, F2, 70, 6F", "sqrdmlsh V(6).H8, V(17).H8, v0.H[3]");
}

#[test]
fn sqrdmlsh_2137() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v2.H4, V(22).H4, V(14).H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, F2, 6E, 2F", "sqrdmlsh v2.H4, V(22).H4, V(14).H[2]");
}

#[test]
fn sqrdmlsh_2138() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v14.S4, v24.S4, V(14).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, F3, 8E, 6F", "sqrdmlsh v14.S4, v24.S4, V(14).S[0]");
}

#[test]
fn sqrdmlsh_2139() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(11).S2, V(26).S2, V(8).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, F3, 88, 2F", "sqrdmlsh V(11).S2, V(26).S2, V(8).S[0]");
}

#[test]
fn sqrdmlsh_2140() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh H(25), H(13), H(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 8D, 5E, 7E", "sqrdmlsh H(25), H(13), H(30)");
}

#[test]
fn sqrdmlsh_2141() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh s11, S(26), s15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 8F, 8F, 7E", "sqrdmlsh s11, S(26), s15");
}

#[test]
fn sqrdmlsh_2142() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v8.H8, v13.H8, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 8D, 41, 6E", "sqrdmlsh v8.H8, v13.H8, v1.H8");
}

#[test]
fn sqrdmlsh_2143() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(21).H4, v13.H4, v14.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 8D, 4E, 2E", "sqrdmlsh V(21).H4, v13.H4, v14.H4");
}

#[test]
fn sqrdmlsh_2144() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(12).S4, V(14).S4, V(7).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 8D, 87, 6E", "sqrdmlsh V(12).S4, V(14).S4, V(7).S4");
}

#[test]
fn sqrdmlsh_2145() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v3.S2, V(31).S2, V(1).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 8F, 81, 2E", "sqrdmlsh v3.S2, V(31).S2, V(1).S2");
}

#[test]
fn sqrdmulh_2146() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh h21, h18, v12.H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, DA, 4C, 5F", "sqrdmulh h21, h18, v12.H[4]");
}

#[test]
fn sqrdmulh_2147() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh s8, S(1), V(5).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, D0, 85, 5F", "sqrdmulh s8, S(1), V(5).S[0]");
}

#[test]
fn sqrdmulh_2148() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v13.H8, v26.H8, V(4).H[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, D3, 74, 4F", "sqrdmulh v13.H8, v26.H8, V(4).H[3]");
}

#[test]
fn sqrdmulh_2149() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v3.H4, v31.H4, V(14).H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, D3, 6E, 0F", "sqrdmulh v3.H4, v31.H4, V(14).H[2]");
}

#[test]
fn sqrdmulh_2150() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v7.S4, v7.S4, V(13).S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, D8, 8D, 4F", "sqrdmulh v7.S4, v7.S4, V(13).S[2]");
}

#[test]
fn sqrdmulh_2151() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v30.S2, V(23).S2, v25.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, DA, 99, 0F", "sqrdmulh v30.S2, V(23).S2, v25.S[2]");
}

#[test]
fn sqrdmulh_2152() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh h14, h12, H(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, B5, 70, 7E", "sqrdmulh h14, h12, H(16)");
}

#[test]
fn sqrdmulh_2153() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh s8, s9, s27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, B5, BB, 7E", "sqrdmulh s8, s9, s27");
}

#[test]
fn sqrdmulh_2154() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(22).H8, v22.H8, v17.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D6, B6, 71, 6E", "sqrdmulh V(22).H8, v22.H8, v17.H8");
}

#[test]
fn sqrdmulh_2155() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(0).H4, V(23).H4, v26.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, B6, 7A, 2E", "sqrdmulh V(0).H4, V(23).H4, v26.H4");
}

#[test]
fn sqrdmulh_2156() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v9.S4, v13.S4, V(26).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, B5, BA, 6E", "sqrdmulh v9.S4, v13.S4, V(26).S4");
}

#[test]
fn sqrdmulh_2157() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(8).S2, v5.S2, V(0).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, B4, A0, 2E", "sqrdmulh V(8).S2, v5.S2, V(0).S2");
}

#[test]
fn sqrshl_2158() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl b12, b5, b7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 5C, 27, 5E", "sqrshl b12, b5, b7");
}

#[test]
fn sqrshl_2159() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl h0, h7, H(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 5C, 7D, 5E", "sqrshl h0, h7, H(29)");
}

#[test]
fn sqrshl_2160() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl S(0), s7, s31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 5C, BF, 5E", "sqrshl S(0), s7, s31");
}

#[test]
fn sqrshl_2161() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl D(3), D(19), d6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 5E, E6, 5E", "sqrshl D(3), D(19), d6");
}

#[test]
fn sqrshl_2162() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl V(15).B16, V(21).B16, V(18).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 5E, 32, 4E", "sqrshl V(15).B16, V(21).B16, V(18).B16");
}

#[test]
fn sqrshl_2163() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v27.B8, v4.B8, V(15).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 5C, 2F, 0E", "sqrshl v27.B8, v4.B8, V(15).B8");
}

#[test]
fn sqrshl_2164() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v0.H8, V(3).H8, V(6).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 5C, 66, 4E", "sqrshl v0.H8, V(3).H8, V(6).H8");
}

#[test]
fn sqrshl_2165() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v10.H4, V(4).H4, v12.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, 5C, 6C, 0E", "sqrshl v10.H4, V(4).H4, v12.H4");
}

#[test]
fn sqrshl_2166() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v0.S4, V(23).S4, V(23).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 5E, B7, 4E", "sqrshl v0.S4, V(23).S4, V(23).S4");
}

#[test]
fn sqrshl_2167() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl V(22).S2, V(4).S2, v23.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 5C, B7, 0E", "sqrshl V(22).S2, V(4).S2, v23.S2");
}

#[test]
fn sqrshl_2168() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v7.D2, v21.D2, V(8).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A7, 5E, E8, 4E", "sqrshl v7.D2, v21.D2, V(8).D2");
}

#[test]
fn sqrshrn_2169() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn b7, h8, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 9D, 08, 5F", "sqrshrn b7, h8, 8");
}

#[test]
fn sqrshrn_2170() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn H(25), s21, 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 9E, 17, 5F", "sqrshrn H(25), s21, 9");
}

#[test]
fn sqrshrn_2171() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn S(19), D(29), 14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, 9F, 32, 5F", "sqrshrn S(19), D(29), 14");
}

#[test]
fn sqrshrn_2172() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v7.B8, V(24).H8, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 9F, 08, 0F", "sqrshrn v7.B8, V(24).H8, 8");
}

#[test]
fn sqrshrn_2173() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn V(5).H4, v14.S4, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 9D, 1A, 0F", "sqrshrn V(5).H4, v14.S4, 6");
}

#[test]
fn sqrshrn_2174() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v24.S2, V(12).D2, 30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 9D, 22, 0F", "sqrshrn v24.S2, V(12).D2, 30");
}

#[test]
fn sqrshrn2_2175() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 v10.B16, V(25).H8, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 9F, 0C, 4F", "sqrshrn2 v10.B16, V(25).H8, 4");
}

#[test]
fn sqrshrn2_2176() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 v5.H8, v12.S4, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 9D, 10, 4F", "sqrshrn2 v5.H8, v12.S4, 16");
}

#[test]
fn sqrshrn2_2177() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 V(20).S4, V(10).D2, 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "54, 9D, 36, 4F", "sqrshrn2 V(20).S4, V(10).D2, 10");
}

#[test]
fn sqrshrun_2178() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun B(9), H(27), 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 8F, 0D, 7F", "sqrshrun B(9), H(27), 3");
}

#[test]
fn sqrshrun_2179() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun h21, s13, 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 8D, 11, 7F", "sqrshrun h21, s13, 15");
}

#[test]
fn sqrshrun_2180() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun s12, d11, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, 8D, 3B, 7F", "sqrshrun s12, d11, 5");
}

#[test]
fn sqrshrun_2181() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(21).B8, v16.H8, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 8E, 0E, 2F", "sqrshrun V(21).B8, v16.H8, 2");
}

#[test]
fn sqrshrun_2182() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(26).H4, V(26).S4, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 8F, 10, 2F", "sqrshrun V(26).H4, V(26).S4, 16");
}

#[test]
fn sqrshrun_2183() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(25).S2, v27.D2, 25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 8F, 27, 2F", "sqrshrun V(25).S2, v27.D2, 25");
}

#[test]
fn sqrshrun2_2184() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 V(18).B16, v11.H8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 8D, 09, 6F", "sqrshrun2 V(18).B16, v11.H8, 7");
}

#[test]
fn sqrshrun2_2185() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 V(18).H8, v17.S4, 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 8E, 17, 6F", "sqrshrun2 V(18).H8, v17.S4, 9");
}

#[test]
fn sqrshrun2_2186() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 V(28).S4, v18.D2, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, 8E, 3B, 6F", "sqrshrun2 V(28).S4, v18.D2, 5");
}

#[test]
fn sqshl_2187() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl b14, b16, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, 76, 09, 5F", "sqshl b14, b16, 1");
}

#[test]
fn sqshl_2188() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl H(25), H(14), 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 75, 1F, 5F", "sqshl H(25), H(14), 15");
}

#[test]
fn sqshl_2189() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl S(11), s13, 18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AB, 75, 32, 5F", "sqshl S(11), s13, 18");
}

#[test]
fn sqshl_2190() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl D(19), d3, 36
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 74, 64, 5F", "sqshl D(19), d3, 36");
}

#[test]
fn sqshl_2191() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(21).B16, v5.B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 74, 08, 4F", "sqshl V(21).B16, v5.B16, 0");
}

#[test]
fn sqshl_2192() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(7).B8, v6.B8, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 74, 0E, 0F", "sqshl V(7).B8, v6.B8, 6");
}

#[test]
fn sqshl_2193() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v20.H8, v7.H8, 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 74, 1A, 4F", "sqshl v20.H8, v7.H8, 10");
}

#[test]
fn sqshl_2194() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v1.H4, v26.H4, 13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, 77, 1D, 0F", "sqshl v1.H4, v26.H4, 13");
}

#[test]
fn sqshl_2195() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v17.S4, v17.S4, 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 76, 3C, 4F", "sqshl v17.S4, v17.S4, 28");
}

#[test]
fn sqshl_2196() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(28).S2, v2.S2, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, 74, 28, 0F", "sqshl V(28).S2, v2.S2, 8");
}

#[test]
fn sqshl_2197() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(18).D2, V(1).D2, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 74, 47, 4F", "sqshl V(18).D2, V(1).D2, 7");
}

#[test]
fn sqshl_2198() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl b5, B(2), B(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 4C, 3B, 5E", "sqshl b5, B(2), B(27)");
}

#[test]
fn sqshl_2199() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl h26, h20, h14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 4E, 6E, 5E", "sqshl h26, h20, h14");
}

#[test]
fn sqshl_2200() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl s11, s6, s9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 4C, A9, 5E", "sqshl s11, s6, s9");
}

#[test]
fn sqshl_2201() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl d2, d12, D(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 4D, F5, 5E", "sqshl d2, d12, D(21)");
}

#[test]
fn sqshl_2202() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(0).B16, v27.B16, V(23).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 4F, 37, 4E", "sqshl V(0).B16, v27.B16, V(23).B16");
}

#[test]
fn sqshl_2203() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v6.B8, V(20).B8, v0.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, 4E, 20, 0E", "sqshl v6.B8, V(20).B8, v0.B8");
}

#[test]
fn sqshl_2204() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v28.H8, V(0).H8, v27.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, 4C, 7B, 4E", "sqshl v28.H8, V(0).H8, v27.H8");
}

#[test]
fn sqshl_2205() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(17).H4, V(15).H4, V(7).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, 4D, 67, 0E", "sqshl V(17).H4, V(15).H4, V(7).H4");
}

#[test]
fn sqshl_2206() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v4.S4, V(1).S4, V(0).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 4C, A0, 4E", "sqshl v4.S4, V(1).S4, V(0).S4");
}

#[test]
fn sqshl_2207() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v25.S2, v28.S2, v4.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 4F, A4, 0E", "sqshl v25.S2, v28.S2, v4.S2");
}

#[test]
fn sqshl_2208() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v11.D2, v1.D2, V(16).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 4C, F0, 4E", "sqshl v11.D2, v1.D2, V(16).D2");
}

#[test]
fn sqshlu_2209() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu b24, B(30), 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 67, 0A, 7F", "sqshlu b24, B(30), 2");
}

#[test]
fn sqshlu_2210() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu h26, h1, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 64, 16, 7F", "sqshlu h26, h1, 6");
}

#[test]
fn sqshlu_2211() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu s16, s21, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B0, 66, 24, 7F", "sqshlu s16, s21, 4");
}

#[test]
fn sqshlu_2212() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu d28, d30, 50
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 67, 72, 7F", "sqshlu d28, d30, 50");
}

#[test]
fn sqshlu_2213() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v1.B16, V(29).B16, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, 67, 0F, 6F", "sqshlu v1.B16, V(29).B16, 7");
}

#[test]
fn sqshlu_2214() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(20).B8, V(8).B8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 65, 0D, 2F", "sqshlu V(20).B8, V(8).B8, 5");
}

#[test]
fn sqshlu_2215() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v9.H8, v4.H8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 64, 17, 6F", "sqshlu v9.H8, v4.H8, 7");
}

#[test]
fn sqshlu_2216() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(24).H4, V(31).H4, 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, 67, 13, 2F", "sqshlu V(24).H4, V(31).H4, 3");
}

#[test]
fn sqshlu_2217() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v12.S4, v25.S4, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, 67, 30, 6F", "sqshlu v12.S4, v25.S4, 16");
}

#[test]
fn sqshlu_2218() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v27.S2, V(4).S2, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 64, 25, 2F", "sqshlu v27.S2, V(4).S2, 5");
}

#[test]
fn sqshlu_2219() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(4).D2, v28.D2, 49
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 67, 71, 6F", "sqshlu V(4).D2, v28.D2, 49");
}

#[test]
fn sqshrn_2220() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn b31, H(2), 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 94, 0C, 5F", "sqshrn b31, H(2), 4");
}

#[test]
fn sqshrn_2221() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn H(0), s16, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 96, 18, 5F", "sqshrn H(0), s16, 8");
}

#[test]
fn sqshrn_2222() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn s7, d17, 23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 96, 29, 5F", "sqshrn s7, d17, 23");
}

#[test]
fn sqshrn_2223() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn v5.B8, V(20).H8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 96, 09, 0F", "sqshrn v5.B8, V(20).H8, 7");
}

#[test]
fn sqshrn_2224() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn v29.H4, V(1).S4, 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 94, 14, 0F", "sqshrn v29.H4, V(1).S4, 12");
}

#[test]
fn sqshrn_2225() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn V(28).S2, v17.D2, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 96, 3A, 0F", "sqshrn V(28).S2, v17.D2, 6");
}

#[test]
fn sqshrn2_2226() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(9).B16, V(4).H8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 94, 0B, 4F", "sqshrn2 V(9).B16, V(4).H8, 5");
}

#[test]
fn sqshrn2_2227() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(8).H8, v9.S4, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 95, 1F, 4F", "sqshrn2 V(8).H8, v9.S4, 1");
}

#[test]
fn sqshrn2_2228() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(16).S4, V(15).D2, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 95, 39, 4F", "sqshrn2 V(16).S4, V(15).D2, 7");
}

#[test]
fn sqshrun_2229() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun B(8), h16, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 86, 0E, 7F", "sqshrun B(8), h16, 2");
}

#[test]
fn sqshrun_2230() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun H(20), s7, 13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 84, 13, 7F", "sqshrun H(20), s7, 13");
}

#[test]
fn sqshrun_2231() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun s7, d20, 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 86, 2A, 7F", "sqshrun s7, d20, 22");
}

#[test]
fn sqshrun_2232() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v13.B8, v19.H8, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 86, 08, 2F", "sqshrun v13.B8, v19.H8, 8");
}

#[test]
fn sqshrun_2233() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v19.H4, v18.S4, 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 86, 14, 2F", "sqshrun v19.H4, v18.S4, 12");
}

#[test]
fn sqshrun_2234() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v10.S2, V(22).D2, 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, 86, 25, 2F", "sqshrun v10.S2, V(22).D2, 27");
}

#[test]
fn sqshrun2_2235() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 v24.B16, V(4).H8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 84, 0B, 6F", "sqshrun2 v24.B16, V(4).H8, 5");
}

#[test]
fn sqshrun2_2236() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 v27.H8, v29.S4, 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 87, 17, 6F", "sqshrun2 v27.H8, v29.S4, 9");
}

#[test]
fn sqshrun2_2237() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 v12.S4, v27.D2, 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, 87, 25, 6F", "sqshrun2 v12.S4, v27.D2, 27");
}

#[test]
fn sqsub_2238() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub b0, B(20), b13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 2E, 2D, 5E", "sqsub b0, B(20), b13");
}

#[test]
fn sqsub_2239() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub H(26), H(10), h2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 2D, 62, 5E", "sqsub H(26), H(10), h2");
}

#[test]
fn sqsub_2240() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub s12, s8, s27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, 2D, BB, 5E", "sqsub s12, s8, s27");
}

#[test]
fn sqsub_2241() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub d28, D(0), D(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, 2C, ED, 5E", "sqsub d28, D(0), D(13)");
}

#[test]
fn sqsub_2242() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub V(19).B16, v28.B16, v18.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, 2F, 32, 4E", "sqsub V(19).B16, v28.B16, v18.B16");
}

#[test]
fn sqsub_2243() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v7.B8, v4.B8, v5.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 2C, 25, 0E", "sqsub v7.B8, v4.B8, v5.B8");
}

#[test]
fn sqsub_2244() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v26.H8, v9.H8, v17.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 2D, 71, 4E", "sqsub v26.H8, v9.H8, v17.H8");
}

#[test]
fn sqsub_2245() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub V(6).H4, V(6).H4, v20.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 2C, 74, 0E", "sqsub V(6).H4, V(6).H4, v20.H4");
}

#[test]
fn sqsub_2246() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub V(30).S4, v28.S4, v27.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 2F, BB, 4E", "sqsub V(30).S4, v28.S4, v27.S4");
}

#[test]
fn sqsub_2247() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v6.S2, V(0).S2, v25.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 2C, B9, 0E", "sqsub v6.S2, V(0).S2, v25.S2");
}

#[test]
fn sqsub_2248() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v1.D2, v2.D2, v0.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, 2C, E0, 4E", "sqsub v1.D2, v2.D2, v0.D2");
}

#[test]
fn sqxtn_2249() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn b4, h20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 4A, 21, 5E", "sqxtn b4, h20");
}

#[test]
fn sqxtn_2250() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn h20, s0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 48, 61, 5E", "sqxtn h20, s0");
}

#[test]
fn sqxtn_2251() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn s28, d12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 49, A1, 5E", "sqxtn s28, d12");
}

#[test]
fn sqxtn_2252() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn v1.B8, v23.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 4A, 21, 0E", "sqxtn v1.B8, v23.H8");
}

#[test]
fn sqxtn_2253() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn V(28).H4, V(28).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 4B, 61, 0E", "sqxtn V(28).H4, V(28).S4");
}

#[test]
fn sqxtn_2254() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn V(26).S2, V(9).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 49, A1, 0E", "sqxtn V(26).S2, V(9).D2");
}

#[test]
fn sqxtn2_2255() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(4).B16, V(10).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, 49, 21, 4E", "sqxtn2 V(4).B16, V(10).H8");
}

#[test]
fn sqxtn2_2256() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(7).H8, v25.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 4B, 61, 4E", "sqxtn2 V(7).H8, v25.S4");
}

#[test]
fn sqxtn2_2257() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(13).S4, v21.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 4A, A1, 4E", "sqxtn2 V(13).S4, v21.D2");
}

#[test]
fn sqxtun_2258() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun B(24), h3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 28, 21, 7E", "sqxtun B(24), h3");
}

#[test]
fn sqxtun_2259() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun H(30), s6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, 28, 61, 7E", "sqxtun H(30), s6");
}

#[test]
fn sqxtun_2260() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun s5, D(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 28, A1, 7E", "sqxtun s5, D(5)");
}

#[test]
fn sqxtun_2261() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun V(1).B8, V(17).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 2A, 21, 2E", "sqxtun V(1).B8, V(17).H8");
}

#[test]
fn sqxtun_2262() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun v21.H4, v7.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 28, 61, 2E", "sqxtun v21.H4, v7.S4");
}

#[test]
fn sqxtun_2263() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun V(8).S2, v18.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, 2A, A1, 2E", "sqxtun V(8).S2, v18.D2");
}

#[test]
fn sqxtun2_2264() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 v4.B16, V(29).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 2B, 21, 6E", "sqxtun2 v4.B16, V(29).H8");
}

#[test]
fn sqxtun2_2265() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 v30.H8, v8.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 29, 61, 6E", "sqxtun2 v30.H8, v8.S4");
}

#[test]
fn sqxtun2_2266() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 V(30).S4, v23.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 2A, A1, 6E", "sqxtun2 V(30).S4, v23.D2");
}

#[test]
fn srhadd_2267() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v13.B16, v13.B16, V(23).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 15, 37, 4E", "srhadd v13.B16, v13.B16, V(23).B16");
}

#[test]
fn srhadd_2268() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v9.B8, v9.B8, v31.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, 15, 3F, 0E", "srhadd v9.B8, v9.B8, v31.B8");
}

#[test]
fn srhadd_2269() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(5).H8, V(6).H8, V(21).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 14, 75, 4E", "srhadd V(5).H8, V(6).H8, V(21).H8");
}

#[test]
fn srhadd_2270() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(27).H4, V(16).H4, V(30).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 16, 7E, 0E", "srhadd V(27).H4, V(16).H4, V(30).H4");
}

#[test]
fn srhadd_2271() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(12).S4, V(31).S4, v6.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 17, A6, 4E", "srhadd V(12).S4, V(31).S4, v6.S4");
}

#[test]
fn srhadd_2272() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(15).S2, V(28).S2, v7.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, 17, A7, 0E", "srhadd V(15).S2, V(28).S2, v7.S2");
}

#[test]
fn sri_2273() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri D(13), d13, 29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 45, 63, 7F", "sri D(13), d13, 29");
}

#[test]
fn sri_2274() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri v10.B16, V(9).B16, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 45, 09, 6F", "sri v10.B16, V(9).B16, 7");
}

#[test]
fn sri_2275() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri v2.B8, V(2).B8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, 44, 0B, 2F", "sri v2.B8, V(2).B8, 5");
}

#[test]
fn sri_2276() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(10).H8, v19.H8, 14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, 46, 12, 6F", "sri V(10).H8, v19.H8, 14");
}

#[test]
fn sri_2277() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(31).H4, v22.H4, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 46, 1A, 2F", "sri V(31).H4, v22.H4, 6");
}

#[test]
fn sri_2278() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri v17.S4, V(8).S4, 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 45, 28, 6F", "sri v17.S4, V(8).S4, 24");
}

#[test]
fn sri_2279() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(6).S2, V(5).S2, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A6, 44, 30, 2F", "sri V(6).S2, V(5).S2, 16");
}

#[test]
fn sri_2280() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sri v17.D2, V(9).D2, 38
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 45, 5A, 6F", "sri v17.D2, V(9).D2, 38");
}

#[test]
fn srshl_2281() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl d26, d12, D(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 55, F7, 5E", "srshl d26, d12, D(23)");
}

#[test]
fn srshl_2282() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v14.B16, v29.B16, V(20).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 57, 34, 4E", "srshl v14.B16, v29.B16, V(20).B16");
}

#[test]
fn srshl_2283() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v25.B8, v6.B8, v7.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 54, 27, 0E", "srshl v25.B8, v6.B8, v7.B8");
}

#[test]
fn srshl_2284() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v8.H8, V(8).H8, v26.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 55, 7A, 4E", "srshl v8.H8, V(8).H8, v26.H8");
}

#[test]
fn srshl_2285() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v20.H4, V(26).H4, v0.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "54, 57, 60, 0E", "srshl v20.H4, V(26).H4, v0.H4");
}

#[test]
fn srshl_2286() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v2.S4, V(27).S4, v6.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, 57, A6, 4E", "srshl v2.S4, V(27).S4, v6.S4");
}

#[test]
fn srshl_2287() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v6.S2, v1.S2, V(6).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 54, A6, 0E", "srshl v6.S2, v1.S2, V(6).S2");
}

#[test]
fn srshl_2288() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v10.D2, V(24).D2, V(17).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 57, F1, 4E", "srshl v10.D2, V(24).D2, V(17).D2");
}

#[test]
fn srshr_2289() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr D(24), d18, 56
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 26, 48, 5F", "srshr D(24), d18, 56");
}

#[test]
fn srshr_2290() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(5).B16, V(16).B16, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 26, 0A, 4F", "srshr V(5).B16, V(16).B16, 6");
}

#[test]
fn srshr_2291() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(14).B8, V(5).B8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 24, 0B, 0F", "srshr V(14).B8, V(5).B8, 5");
}

#[test]
fn srshr_2292() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v18.H8, V(21).H8, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 26, 1C, 4F", "srshr v18.H8, V(21).H8, 4");
}

#[test]
fn srshr_2293() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v22.H4, V(10).H4, 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, 25, 15, 0F", "srshr v22.H4, V(10).H4, 11");
}

#[test]
fn srshr_2294() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(0).S4, V(18).S4, 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 26, 25, 4F", "srshr V(0).S4, V(18).S4, 27");
}

#[test]
fn srshr_2295() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(1).S2, v19.S2, 19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 26, 2D, 0F", "srshr V(1).S2, v19.S2, 19");
}

#[test]
fn srshr_2296() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(11).D2, v27.D2, 29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 27, 63, 4F", "srshr V(11).D2, v27.D2, 29");
}

#[test]
fn srsra_2297() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra D(4), D(21), 42
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 36, 56, 5F", "srsra D(4), D(21), 42");
}

#[test]
fn srsra_2298() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(8).B16, v5.B16, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 34, 0B, 4F", "srsra V(8).B16, v5.B16, 5");
}

#[test]
fn srsra_2299() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v0.B8, V(0).B8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 34, 09, 0F", "srsra v0.B8, V(0).B8, 7");
}

#[test]
fn srsra_2300() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v10.H8, V(10).H8, 13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 35, 13, 4F", "srsra v10.H8, V(10).H8, 13");
}

#[test]
fn srsra_2301() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(12).H4, V(16).H4, 14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, 36, 12, 0F", "srsra V(12).H4, V(16).H4, 14");
}

#[test]
fn srsra_2302() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v16.S4, V(25).S4, 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 37, 2A, 4F", "srsra v16.S4, V(25).S4, 22");
}

#[test]
fn srsra_2303() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(30).S2, V(11).S2, 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 35, 31, 0F", "srsra V(30).S2, V(11).S2, 15");
}

#[test]
fn srsra_2304() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v4.D2, V(12).D2, 18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 35, 6E, 4F", "srsra v4.D2, V(12).D2, 18");
}

#[test]
fn ssbb_2305() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssbb
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 30, 03, D5", "ssbb");
}

#[test]
fn sshl_2306() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl d5, d25, d16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 47, F0, 5E", "sshl d5, d25, d16");
}

#[test]
fn sshl_2307() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(17).B16, V(30).B16, v29.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 47, 3D, 4E", "sshl V(17).B16, V(30).B16, v29.B16");
}

#[test]
fn sshl_2308() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v20.B8, V(17).B8, v4.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 46, 24, 0E", "sshl v20.B8, V(17).B8, v4.B8");
}

#[test]
fn sshl_2309() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v28.H8, v8.H8, V(22).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, 45, 76, 4E", "sshl v28.H8, v8.H8, V(22).H8");
}

#[test]
fn sshl_2310() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(13).H4, V(18).H4, v10.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 46, 6A, 0E", "sshl V(13).H4, V(18).H4, v10.H4");
}

#[test]
fn sshl_2311() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v26.S4, V(19).S4, V(31).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7A, 46, BF, 4E", "sshl v26.S4, V(19).S4, V(31).S4");
}

#[test]
fn sshl_2312() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(17).S2, v0.S2, v6.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 44, A6, 0E", "sshl V(17).S2, v0.S2, v6.S2");
}

#[test]
fn sshl_2313() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v8.D2, V(24).D2, V(18).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 47, F2, 4E", "sshl v8.D2, V(24).D2, V(18).D2");
}

#[test]
fn sshll_2314() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshll v26.H8, V(12).B8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, A5, 0D, 0F", "sshll v26.H8, V(12).B8, 5");
}

#[test]
fn sshll_2315() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshll V(28).S4, v25.H4, 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, A7, 12, 0F", "sshll V(28).S4, v25.H4, 2");
}

#[test]
fn sshll_2316() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshll V(2).D2, V(10).S2, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, A5, 28, 0F", "sshll V(2).D2, V(10).S2, 8");
}

#[test]
fn sshll2_2317() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 v17.H8, v7.B16, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, A4, 0E, 4F", "sshll2 v17.H8, v7.B16, 6");
}

#[test]
fn sshll2_2318() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 V(28).S4, V(22).H8, 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, A6, 1A, 4F", "sshll2 V(28).S4, V(22).H8, 10");
}

#[test]
fn sshll2_2319() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 v15.D2, v17.S4, 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2F, A6, 2F, 4F", "sshll2 v15.D2, v17.S4, 15");
}

#[test]
fn sshr_2320() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr d4, d13, 20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 05, 6C, 5F", "sshr d4, d13, 20");
}

#[test]
fn sshr_2321() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v24.B16, V(11).B16, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 05, 0C, 4F", "sshr v24.B16, V(11).B16, 4");
}

#[test]
fn sshr_2322() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(27).B8, V(14).B8, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 05, 08, 0F", "sshr V(27).B8, V(14).B8, 8");
}

#[test]
fn sshr_2323() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(21).H8, v11.H8, 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 05, 14, 4F", "sshr V(21).H8, v11.H8, 12");
}

#[test]
fn sshr_2324() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v17.H4, v7.H4, 14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, 04, 12, 0F", "sshr v17.H4, v7.H4, 14");
}

#[test]
fn sshr_2325() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v15.S4, V(18).S4, 23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 06, 29, 4F", "sshr v15.S4, V(18).S4, 23");
}

#[test]
fn sshr_2326() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(21).S2, v21.S2, 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 06, 28, 0F", "sshr V(21).S2, v21.S2, 24");
}

#[test]
fn sshr_2327() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v26.D2, v0.D2, 45
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 04, 53, 4F", "sshr v26.D2, v0.D2, 45");
}

#[test]
fn ssra_2328() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra D(20), D(30), 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, 17, 6A, 5F", "ssra D(20), D(30), 22");
}

#[test]
fn ssra_2329() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(17).B16, v21.B16, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 16, 0A, 4F", "ssra V(17).B16, v21.B16, 6");
}

#[test]
fn ssra_2330() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(7).B8, v21.B8, 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A7, 16, 0A, 0F", "ssra V(7).B8, v21.B8, 6");
}

#[test]
fn ssra_2331() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v13.H8, v20.H8, 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 16, 11, 4F", "ssra v13.H8, v20.H8, 15");
}

#[test]
fn ssra_2332() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v28.H4, V(13).H4, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 15, 1F, 0F", "ssra v28.H4, V(13).H4, 1");
}

#[test]
fn ssra_2333() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v14.S4, v17.S4, 18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 16, 2E, 4F", "ssra v14.S4, v17.S4, 18");
}

#[test]
fn ssra_2334() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(10).S2, v25.S2, 13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 17, 33, 0F", "ssra V(10).S2, v25.S2, 13");
}

#[test]
fn ssra_2335() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(11).D2, v30.D2, 33
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 17, 5F, 4F", "ssra V(11).D2, v30.D2, 33");
}

#[test]
fn ssubl_2336() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl v29.H8, v16.B8, V(10).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 22, 2A, 0E", "ssubl v29.H8, v16.B8, V(10).B8");
}

#[test]
fn ssubl_2337() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl v9.S4, V(28).H4, v30.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 23, 7E, 0E", "ssubl v9.S4, V(28).H4, v30.H4");
}

#[test]
fn ssubl_2338() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl v14.D2, V(25).S2, V(5).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 23, A5, 0E", "ssubl v14.D2, V(25).S2, V(5).S2");
}

#[test]
fn ssubl2_2339() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 v11.H8, V(15).B16, V(11).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, 21, 2B, 4E", "ssubl2 v11.H8, V(15).B16, V(11).B16");
}

#[test]
fn ssubl2_2340() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 V(14).S4, V(25).H8, v2.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 23, 62, 4E", "ssubl2 V(14).S4, V(25).H8, v2.H8");
}

#[test]
fn ssubl2_2341() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 V(21).D2, v20.S4, V(1).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 22, A1, 4E", "ssubl2 V(21).D2, v20.S4, V(1).S4");
}

#[test]
fn ssubw_2342() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw v27.H8, V(20).H8, V(1).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 32, 21, 0E", "ssubw v27.H8, V(20).H8, V(1).B8");
}

#[test]
fn ssubw_2343() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw v9.S4, V(16).S4, V(22).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 32, 76, 0E", "ssubw v9.S4, V(16).S4, V(22).H4");
}

#[test]
fn ssubw_2344() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw v9.D2, V(28).D2, v3.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 33, A3, 0E", "ssubw v9.D2, V(28).D2, v3.S2");
}

#[test]
fn ssubw2_2345() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 V(10).H8, v8.H8, V(29).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 31, 3D, 4E", "ssubw2 V(10).H8, v8.H8, V(29).B16");
}

#[test]
fn ssubw2_2346() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 v27.S4, V(9).S4, V(22).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 31, 76, 4E", "ssubw2 v27.S4, V(9).S4, V(22).H8");
}

#[test]
fn ssubw2_2347() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 v20.D2, V(0).D2, v2.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 30, A2, 4E", "ssubw2 v20.D2, V(0).D2, v2.S4");
}

#[test]
fn st1_2348() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v28.B16 * 1}, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 72, 00, 4C", "st1 {v28.B16 * 1}, [XSP(19)]");
}

#[test]
fn st1_2349() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(28).B8 * 1}, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 71, 00, 0C", "st1 {V(28).B8 * 1}, [x11]");
}

#[test]
fn st1_2350() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).H8 * 1}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 77, 00, 4C", "st1 {V(9).H8 * 1}, [x30]");
}

#[test]
fn st1_2351() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(19).H4 * 1}, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 75, 00, 0C", "st1 {V(19).H4 * 1}, [x11]");
}

#[test]
fn st1_2352() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(31).S4 * 1}, [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 78, 00, 4C", "st1 {V(31).S4 * 1}, [x2]");
}

#[test]
fn st1_2353() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v27.S2 * 1}, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 7A, 00, 0C", "st1 {v27.S2 * 1}, [x21]");
}

#[test]
fn st1_2354() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).D2 * 1}, [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 7D, 00, 4C", "st1 {V(5).D2 * 1}, [x13]");
}

#[test]
fn st1_2355() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(26).D1 * 1}, [XSP(11)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7A, 7D, 00, 0C", "st1 {V(26).D1 * 1}, [XSP(11)]");
}

#[test]
fn st1_2356() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v26.B16 * 2}, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, A1, 00, 4C", "st1 {v26.B16 * 2}, [x10]");
}

#[test]
fn st1_2357() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(11).B8 * 2}, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, A2, 00, 0C", "st1 {V(11).B8 * 2}, [XSP(20)]");
}

#[test]
fn st1_2358() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.H8 * 2}, [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, A4, 00, 4C", "st1 {v12.H8 * 2}, [x2]");
}

#[test]
fn st1_2359() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v4.H4 * 2}, [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, A6, 00, 0C", "st1 {v4.H4 * 2}, [x22]");
}

#[test]
fn st1_2360() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v20.S4 * 2}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, AB, 00, 4C", "st1 {v20.S4 * 2}, [x30]");
}

#[test]
fn st1_2361() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(17).S2 * 2}, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, AA, 00, 0C", "st1 {V(17).S2 * 2}, [XSP(19)]");
}

#[test]
fn st1_2362() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).D2 * 2}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, AD, 00, 4C", "st1 {V(5).D2 * 2}, [XSP(9)]");
}

#[test]
fn st1_2363() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v20.D1 * 2}, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, AC, 00, 0C", "st1 {v20.D1 * 2}, [XSP(5)]");
}

#[test]
fn st1_2364() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(13).B16 * 3}, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 60, 00, 4C", "st1 {V(13).B16 * 3}, [XSP(7)]");
}

#[test]
fn st1_2365() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(20).B8 * 3}, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 60, 00, 0C", "st1 {V(20).B8 * 3}, [x0]");
}

#[test]
fn st1_2366() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(27).H8 * 3}, [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 67, 00, 4C", "st1 {V(27).H8 * 3}, [XSP(29)]");
}

#[test]
fn st1_2367() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(24).H4 * 3}, [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 66, 00, 0C", "st1 {V(24).H4 * 3}, [XSP(16)]");
}

#[test]
fn st1_2368() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v3.S4 * 3}, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 6A, 00, 4C", "st1 {v3.S4 * 3}, [XSP(19)]");
}

#[test]
fn st1_2369() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).S2 * 3}, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 6A, 00, 0C", "st1 {V(5).S2 * 3}, [x16]");
}

#[test]
fn st1_2370() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.D2 * 3}, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A6, 6E, 00, 4C", "st1 {v6.D2 * 3}, [x21]");
}

#[test]
fn st1_2371() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v30.D1 * 3}, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 6F, 00, 0C", "st1 {v30.D1 * 3}, [x27]");
}

#[test]
fn st1_2372() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.B16 * 4}, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, 23, 00, 4C", "st1 {v12.B16 * 4}, [XSP(25)]");
}

#[test]
fn st1_2373() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.B8 * 4}, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 23, 00, 0C", "st1 {v6.B8 * 4}, [XSP(26)]");
}

#[test]
fn st1_2374() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(22).H8 * 4}, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 26, 00, 4C", "st1 {V(22).H8 * 4}, [XSP(20)]");
}

#[test]
fn st1_2375() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(19).H4 * 4}, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 26, 00, 0C", "st1 {V(19).H4 * 4}, [XSP(22)]");
}

#[test]
fn st1_2376() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(2).S4 * 4}, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, 2A, 00, 4C", "st1 {V(2).S4 * 4}, [XSP(18)]");
}

#[test]
fn st1_2377() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v2.S2 * 4}, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 29, 00, 0C", "st1 {v2.S2 * 4}, [x15]");
}

#[test]
fn st1_2378() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v11.D2 * 4}, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 2F, 00, 4C", "st1 {v11.D2 * 4}, [x26]");
}

#[test]
fn st1_2379() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(21).D1 * 4}, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, 2F, 00, 0C", "st1 {V(21).D1 * 4}, [XSP(26)]");
}

#[test]
fn st1_2380() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v26.B8 * 1}, [XSP(16)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 72, 9F, 0C", "st1 {v26.B8 * 1}, [XSP(16)], 8");
}

#[test]
fn st1_2381() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(14).H4 * 1}, [x30], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 77, 9F, 0C", "st1 {V(14).H4 * 1}, [x30], 8");
}

#[test]
fn st1_2382() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(13).S2 * 1}, [XSP(15)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 79, 9F, 0C", "st1 {V(13).S2 * 1}, [XSP(15)], 8");
}

#[test]
fn st1_2383() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(28).D1 * 1}, [XSP(14)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 7D, 9F, 0C", "st1 {V(28).D1 * 1}, [XSP(14)], 8");
}

#[test]
fn st1_2384() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(31).B16 * 1}, [x15], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 71, 9F, 4C", "st1 {V(31).B16 * 1}, [x15], 16");
}

#[test]
fn st1_2385() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v8.H8 * 1}, [x27], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 77, 9F, 4C", "st1 {v8.H8 * 1}, [x27], 16");
}

#[test]
fn st1_2386() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v7.S4 * 1}, [x4], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, 78, 9F, 4C", "st1 {v7.S4 * 1}, [x4], 16");
}

#[test]
fn st1_2387() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(20).D2 * 1}, [XSP(19)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, 7E, 9F, 4C", "st1 {V(20).D2 * 1}, [XSP(19)], 16");
}

#[test]
fn st1_2388() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.B16 * 1}, [XSP(25)], x22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 73, 96, 4C", "st1 {v16.B16 * 1}, [XSP(25)], x22");
}

#[test]
fn st1_2389() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v30.B8 * 1}, [x1], X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 70, 9A, 0C", "st1 {v30.B8 * 1}, [x1], X(26)");
}

#[test]
fn st1_2390() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(22).H8 * 1}, [XSP(7)], x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 74, 9A, 4C", "st1 {V(22).H8 * 1}, [XSP(7)], x26");
}

#[test]
fn st1_2391() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v7.H4 * 1}, [x25], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 77, 98, 0C", "st1 {v7.H4 * 1}, [x25], x24");
}

#[test]
fn st1_2392() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v2.S4 * 1}, [XSP(11)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, 79, 99, 4C", "st1 {v2.S4 * 1}, [XSP(11)], X(25)");
}

#[test]
fn st1_2393() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.S2 * 1}, [x11], X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 79, 9A, 0C", "st1 {v21.S2 * 1}, [x11], X(26)");
}

#[test]
fn st1_2394() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v31.D2 * 1}, [XSP(30)], X(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 7F, 8D, 4C", "st1 {v31.D2 * 1}, [XSP(30)], X(13)");
}

#[test]
fn st1_2395() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(7).D1 * 1}, [x25], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 7F, 8F, 0C", "st1 {V(7).D1 * 1}, [x25], X(15)");
}

#[test]
fn st1_2396() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).B8 * 2}, [XSP(1)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, A0, 9F, 0C", "st1 {V(9).B8 * 2}, [XSP(1)], 16");
}

#[test]
fn st1_2397() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(11).H4 * 2}, [x30], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, A7, 9F, 0C", "st1 {V(11).H4 * 2}, [x30], 16");
}

#[test]
fn st1_2398() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(21).S2 * 2}, [x3], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, A8, 9F, 0C", "st1 {V(21).S2 * 2}, [x3], 16");
}

#[test]
fn st1_2399() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v18.D1 * 2}, [x9], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, AD, 9F, 0C", "st1 {v18.D1 * 2}, [x9], 16");
}

#[test]
fn st1_2400() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v13.B16 * 2}, [XSP(1)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, A0, 9F, 4C", "st1 {v13.B16 * 2}, [XSP(1)], 32");
}

#[test]
fn st1_2401() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).H8 * 2}, [x11], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, A5, 9F, 4C", "st1 {V(1).H8 * 2}, [x11], 32");
}

#[test]
fn st1_2402() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v10.S4 * 2}, [x26], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, AB, 9F, 4C", "st1 {v10.S4 * 2}, [x26], 32");
}

#[test]
fn st1_2403() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v3.D2 * 2}, [XSP(6)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, AC, 9F, 4C", "st1 {v3.D2 * 2}, [XSP(6)], 32");
}

#[test]
fn st1_2404() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.B16 * 2}, [x20], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, A2, 98, 4C", "st1 {v21.B16 * 2}, [x20], x24");
}

#[test]
fn st1_2405() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(26).B8 * 2}, [XSP(25)], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, A3, 93, 0C", "st1 {V(26).B8 * 2}, [XSP(25)], X(19)");
}

#[test]
fn st1_2406() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(18).H8 * 2}, [XSP(24)], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, A7, 84, 4C", "st1 {V(18).H8 * 2}, [XSP(24)], x4");
}

#[test]
fn st1_2407() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v22.H4 * 2}, [XSP(31)], X(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, A7, 88, 0C", "st1 {v22.H4 * 2}, [XSP(31)], X(8)");
}

#[test]
fn st1_2408() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(8).S4 * 2}, [x26], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, AB, 93, 4C", "st1 {V(8).S4 * 2}, [x26], X(19)");
}

#[test]
fn st1_2409() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(30).S2 * 2}, [x0], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, A8, 8B, 0C", "st1 {V(30).S2 * 2}, [x0], X(11)");
}

#[test]
fn st1_2410() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(6).D2 * 2}, [XSP(22)], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, AE, 8A, 4C", "st1 {V(6).D2 * 2}, [XSP(22)], x10");
}

#[test]
fn st1_2411() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.D1 * 2}, [XSP(25)], x3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, AF, 83, 0C", "st1 {v12.D1 * 2}, [XSP(25)], x3");
}

#[test]
fn st1_2412() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(30).B8 * 3}, [XSP(0)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 60, 9F, 0C", "st1 {V(30).B8 * 3}, [XSP(0)], 24");
}

#[test]
fn st1_2413() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v17.H4 * 3}, [x13], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 65, 9F, 0C", "st1 {v17.H4 * 3}, [x13], 24");
}

#[test]
fn st1_2414() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v24.S2 * 3}, [XSP(20)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 6A, 9F, 0C", "st1 {v24.S2 * 3}, [XSP(20)], 24");
}

#[test]
fn st1_2415() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).D1 * 3}, [x17], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 6E, 9F, 0C", "st1 {V(5).D1 * 3}, [x17], 24");
}

#[test]
fn st1_2416() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(31).B16 * 3}, [x23], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 62, 9F, 4C", "st1 {V(31).B16 * 3}, [x23], 48");
}

#[test]
fn st1_2417() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(18).H8 * 3}, [XSP(31)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 67, 9F, 4C", "st1 {V(18).H8 * 3}, [XSP(31)], 48");
}

#[test]
fn st1_2418() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v25.S4 * 3}, [XSP(20)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 6A, 9F, 4C", "st1 {v25.S4 * 3}, [XSP(20)], 48");
}

#[test]
fn st1_2419() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v0.D2 * 3}, [x29], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 6F, 9F, 4C", "st1 {v0.D2 * 3}, [x29], 48");
}

#[test]
fn st1_2420() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(20).B16 * 3}, [XSP(8)], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 61, 94, 4C", "st1 {V(20).B16 * 3}, [XSP(8)], x20");
}

#[test]
fn st1_2421() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v26.B8 * 3}, [x15], X(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, 61, 83, 0C", "st1 {v26.B8 * 3}, [x15], X(3)");
}

#[test]
fn st1_2422() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v18.H8 * 3}, [x24], X(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, 67, 98, 4C", "st1 {v18.H8 * 3}, [x24], X(24)");
}

#[test]
fn st1_2423() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(25).H4 * 3}, [XSP(21)], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 66, 8B, 0C", "st1 {V(25).H4 * 3}, [XSP(21)], X(11)");
}

#[test]
fn st1_2424() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v5.S4 * 3}, [x3], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 68, 87, 4C", "st1 {v5.S4 * 3}, [x3], x7");
}

#[test]
fn st1_2425() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v19.S2 * 3}, [XSP(3)], x29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 68, 9D, 0C", "st1 {v19.S2 * 3}, [XSP(3)], x29");
}

#[test]
fn st1_2426() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).D2 * 3}, [x8], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 6D, 8F, 4C", "st1 {V(9).D2 * 3}, [x8], X(15)");
}

#[test]
fn st1_2427() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v23.D1 * 3}, [x20], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "97, 6E, 8A, 0C", "st1 {v23.D1 * 3}, [x20], x10");
}

#[test]
fn st1_2428() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v25.B8 * 4}, [XSP(18)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 22, 9F, 0C", "st1 {v25.B8 * 4}, [XSP(18)], 32");
}

#[test]
fn st1_2429() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).H4 * 4}, [x9], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 25, 9F, 0C", "st1 {V(5).H4 * 4}, [x9], 32");
}

#[test]
fn st1_2430() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(20).S2 * 4}, [x10], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "54, 29, 9F, 0C", "st1 {V(20).S2 * 4}, [x10], 32");
}

#[test]
fn st1_2431() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(29).D1 * 4}, [XSP(1)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 2C, 9F, 0C", "st1 {V(29).D1 * 4}, [XSP(1)], 32");
}

#[test]
fn st1_2432() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.B16 * 4}, [XSP(22)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 22, 9F, 4C", "st1 {v21.B16 * 4}, [XSP(22)], 64");
}

#[test]
fn st1_2433() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(21).H8 * 4}, [XSP(28)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 27, 9F, 4C", "st1 {V(21).H8 * 4}, [XSP(28)], 64");
}

#[test]
fn st1_2434() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).S4 * 4}, [XSP(24)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 2B, 9F, 4C", "st1 {V(5).S4 * 4}, [XSP(24)], 64");
}

#[test]
fn st1_2435() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.D2 * 4}, [x12], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 2D, 9F, 4C", "st1 {v12.D2 * 4}, [x12], 64");
}

#[test]
fn st1_2436() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(13).B16 * 4}, [XSP(23)], X(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 22, 87, 4C", "st1 {V(13).B16 * 4}, [XSP(23)], X(7)");
}

#[test]
fn st1_2437() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v7.B8 * 4}, [XSP(16)], x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 22, 9B, 0C", "st1 {v7.B8 * 4}, [XSP(16)], x27");
}

#[test]
fn st1_2438() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v23.H8 * 4}, [x13], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 25, 9C, 4C", "st1 {v23.H8 * 4}, [x13], X(28)");
}

#[test]
fn st1_2439() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).H4 * 4}, [x15], x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 25, 9C, 0C", "st1 {V(23).H4 * 4}, [x15], x28");
}

#[test]
fn st1_2440() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v14.S4 * 4}, [XSP(10)], X(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 29, 8A, 4C", "st1 {v14.S4 * 4}, [XSP(10)], X(10)");
}

#[test]
fn st1_2441() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.S2 * 4}, [XSP(8)], x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 29, 9A, 0C", "st1 {v6.S2 * 4}, [XSP(8)], x26");
}

#[test]
fn st1_2442() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(24).D2 * 4}, [x21], x15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 2E, 8F, 4C", "st1 {V(24).D2 * 4}, [x21], x15");
}

#[test]
fn st1_2443() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.D1 * 4}, [x3], x18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 2C, 92, 0C", "st1 {v21.D1 * 4}, [x3], x18");
}

#[test]
fn st1_2444() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v1.B * 1}[12], [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 13, 00, 4D", "st1 {v1.B * 1}[12], [XSP(24)]");
}

#[test]
fn st1_2445() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.H * 1}[6], [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 52, 00, 4D", "st1 {v6.H * 1}[6], [x16]");
}

#[test]
fn st1_2446() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).S * 1}[2], [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, 80, 00, 4D", "st1 {V(1).S * 1}[2], [x2]");
}

#[test]
fn st1_2447() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v27.D * 1}[0], [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 87, 00, 0D", "st1 {v27.D * 1}[0], [XSP(25)]");
}

#[test]
fn st1_2448() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(22).B * 1}[0], [x18], 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, 02, 9F, 0D", "st1 {V(22).B * 1}[0], [x18], 1");
}

#[test]
fn st1_2449() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v22.B * 1}[7], [sp], X(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 1F, 91, 0D", "st1 {v22.B * 1}[7], [sp], X(17)");
}

#[test]
fn st1_2450() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(19).H * 1}[0], [XSP(16)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, 42, 9F, 0D", "st1 {V(19).H * 1}[0], [XSP(16)], 2");
}

#[test]
fn st1_2451() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(27).H * 1}[7], [x30], X(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 5B, 8C, 4D", "st1 {V(27).H * 1}[7], [x30], X(12)");
}

#[test]
fn st1_2452() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).S * 1}[3], [XSP(2)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, 90, 9F, 4D", "st1 {V(23).S * 1}[3], [XSP(2)], 4");
}

#[test]
fn st1_2453() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v19.S * 1}[3], [XSP(31)], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F3, 93, 93, 4D", "st1 {v19.S * 1}[3], [XSP(31)], X(19)");
}

#[test]
fn st1_2454() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(6).D * 1}[1], [sp], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 87, 9F, 4D", "st1 {V(6).D * 1}[1], [sp], 8");
}

#[test]
fn st1_2455() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.D * 1}[0], [x1], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 84, 98, 0D", "st1 {v16.D * 1}[0], [x1], x24");
}

#[test]
fn st2_2456() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.B16 * 2}, [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 80, 00, 4C", "st2 {v31.B16 * 2}, [XSP(2)]");
}

#[test]
fn st2_2457() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v1.B8 * 2}, [x28]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, 83, 00, 0C", "st2 {v1.B8 * 2}, [x28]");
}

#[test]
fn st2_2458() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(21).H8 * 2}, [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 87, 00, 4C", "st2 {V(21).H8 * 2}, [XSP(24)]");
}

#[test]
fn st2_2459() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v1.H4 * 2}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 85, 00, 0C", "st2 {v1.H4 * 2}, [XSP(9)]");
}

#[test]
fn st2_2460() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v26.S4 * 2}, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 8B, 00, 4C", "st2 {v26.S4 * 2}, [x26]");
}

#[test]
fn st2_2461() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.S2 * 2}, [XSP(21)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 8A, 00, 0C", "st2 {v31.S2 * 2}, [XSP(21)]");
}

#[test]
fn st2_2462() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(11).D2 * 2}, [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 8C, 00, 4C", "st2 {V(11).D2 * 2}, [XSP(6)]");
}

#[test]
fn st2_2463() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(26).B8 * 2}, [x5], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, 80, 9F, 0C", "st2 {V(26).B8 * 2}, [x5], 16");
}

#[test]
fn st2_2464() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v20.H4 * 2}, [XSP(9)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 85, 9F, 0C", "st2 {v20.H4 * 2}, [XSP(9)], 16");
}

#[test]
fn st2_2465() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v22.S2 * 2}, [x13], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B6, 89, 9F, 0C", "st2 {v22.S2 * 2}, [x13], 16");
}

#[test]
fn st2_2466() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v22.B16 * 2}, [x15], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 81, 9F, 4C", "st2 {v22.B16 * 2}, [x15], 32");
}

#[test]
fn st2_2467() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(13).H8 * 2}, [XSP(21)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 86, 9F, 4C", "st2 {V(13).H8 * 2}, [XSP(21)], 32");
}

#[test]
fn st2_2468() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(21).S4 * 2}, [XSP(16)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, 8A, 9F, 4C", "st2 {V(21).S4 * 2}, [XSP(16)], 32");
}

#[test]
fn st2_2469() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v3.D2 * 2}, [x14], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 8D, 9F, 4C", "st2 {v3.D2 * 2}, [x14], 32");
}

#[test]
fn st2_2470() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v8.B16 * 2}, [XSP(22)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 82, 99, 4C", "st2 {v8.B16 * 2}, [XSP(22)], X(25)");
}

#[test]
fn st2_2471() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(6).B8 * 2}, [XSP(0)], x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 80, 8E, 0C", "st2 {V(6).B8 * 2}, [XSP(0)], x14");
}

#[test]
fn st2_2472() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(24).H8 * 2}, [XSP(29)], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 87, 9C, 4C", "st2 {V(24).H8 * 2}, [XSP(29)], X(28)");
}

#[test]
fn st2_2473() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v27.H4 * 2}, [x7], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 84, 84, 0C", "st2 {v27.H4 * 2}, [x7], x4");
}

#[test]
fn st2_2474() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v10.S4 * 2}, [XSP(11)], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, 89, 82, 4C", "st2 {v10.S4 * 2}, [XSP(11)], x2");
}

#[test]
fn st2_2475() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(10).S2 * 2}, [XSP(21)], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, 8A, 8F, 0C", "st2 {V(10).S2 * 2}, [XSP(21)], X(15)");
}

#[test]
fn st2_2476() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(29).D2 * 2}, [XSP(26)], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5D, 8F, 93, 4C", "st2 {V(29).D2 * 2}, [XSP(26)], X(19)");
}

#[test]
fn st2_2477() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v11.B * 2}[3], [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 0E, 20, 0D", "st2 {v11.B * 2}[3], [XSP(19)]");
}

#[test]
fn st2_2478() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(20).H * 2}[5], [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 48, 20, 4D", "st2 {V(20).H * 2}[5], [XSP(7)]");
}

#[test]
fn st2_2479() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(0).S * 2}[2], [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 80, 20, 4D", "st2 {V(0).S * 2}[2], [XSP(1)]");
}

#[test]
fn st2_2480() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v15.D * 2}[0], [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 86, 20, 0D", "st2 {v15.D * 2}[0], [XSP(16)]");
}

#[test]
fn st2_2481() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v6.B * 2}[14], [XSP(20)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, 1A, BF, 4D", "st2 {v6.B * 2}[14], [XSP(20)], 2");
}

#[test]
fn st2_2482() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.B * 2}[13], [x5], X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 14, BA, 4D", "st2 {v31.B * 2}[13], [x5], X(26)");
}

#[test]
fn st2_2483() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v16.H * 2}[1], [x7], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 48, BF, 0D", "st2 {v16.H * 2}[1], [x7], 4");
}

#[test]
fn st2_2484() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.H * 2}[2], [x2], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 50, B7, 0D", "st2 {v31.H * 2}[2], [x2], x23");
}

#[test]
fn st2_2485() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v11.S * 2}[3], [XSP(1)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 90, BF, 4D", "st2 {v11.S * 2}[3], [XSP(1)], 8");
}

#[test]
fn st2_2486() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v2.S * 2}[0], [XSP(23)], X(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 82, A8, 0D", "st2 {v2.S * 2}[0], [XSP(23)], X(8)");
}

#[test]
fn st2_2487() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(6).D * 2}[0], [XSP(30)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 87, BF, 0D", "st2 {V(6).D * 2}[0], [XSP(30)], 16");
}

#[test]
fn st2_2488() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v2.D * 2}[1], [XSP(20)], x17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 86, B1, 4D", "st2 {v2.D * 2}[1], [XSP(20)], x17");
}

#[test]
fn st3_2489() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(3).B16 * 3}, [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, 42, 00, 4C", "st3 {V(3).B16 * 3}, [x20]");
}

#[test]
fn st3_2490() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v10.B8 * 3}, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 40, 00, 0C", "st3 {v10.B8 * 3}, [XSP(7)]");
}

#[test]
fn st3_2491() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v16.H8 * 3}, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, 45, 00, 4C", "st3 {v16.H8 * 3}, [x14]");
}

#[test]
fn st3_2492() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v28.H4 * 3}, [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 44, 00, 0C", "st3 {v28.H4 * 3}, [XSP(4)]");
}

#[test]
fn st3_2493() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(15).S4 * 3}, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 4A, 00, 4C", "st3 {V(15).S4 * 3}, [x23]");
}

#[test]
fn st3_2494() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(12).S2 * 3}, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, 49, 00, 0C", "st3 {V(12).S2 * 3}, [x8]");
}

#[test]
fn st3_2495() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v7.D2 * 3}, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 4D, 00, 4C", "st3 {v7.D2 * 3}, [XSP(15)]");
}

#[test]
fn st3_2496() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v0.B8 * 3}, [XSP(24)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 43, 9F, 0C", "st3 {v0.B8 * 3}, [XSP(24)], 24");
}

#[test]
fn st3_2497() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v14.H4 * 3}, [XSP(23)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, 46, 9F, 0C", "st3 {v14.H4 * 3}, [XSP(23)], 24");
}

#[test]
fn st3_2498() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(1).S2 * 3}, [XSP(20)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, 4A, 9F, 0C", "st3 {V(1).S2 * 3}, [XSP(20)], 24");
}

#[test]
fn st3_2499() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v25.B16 * 3}, [x17], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 42, 9F, 4C", "st3 {v25.B16 * 3}, [x17], 48");
}

#[test]
fn st3_2500() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v10.H8 * 3}, [XSP(11)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, 45, 9F, 4C", "st3 {v10.H8 * 3}, [XSP(11)], 48");
}

#[test]
fn st3_2501() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v13.S4 * 3}, [XSP(19)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 4A, 9F, 4C", "st3 {v13.S4 * 3}, [XSP(19)], 48");
}

#[test]
fn st3_2502() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v4.D2 * 3}, [x2], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, 4C, 9F, 4C", "st3 {v4.D2 * 3}, [x2], 48");
}

#[test]
fn st3_2503() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v0.B16 * 3}, [XSP(19)], x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 42, 85, 4C", "st3 {v0.B16 * 3}, [XSP(19)], x5");
}

#[test]
fn st3_2504() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(23).B8 * 3}, [x30], x15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 43, 8F, 0C", "st3 {V(23).B8 * 3}, [x30], x15");
}

#[test]
fn st3_2505() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(11).H8 * 3}, [x16], x30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 46, 9E, 4C", "st3 {V(11).H8 * 3}, [x16], x30");
}

#[test]
fn st3_2506() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v8.H4 * 3}, [XSP(15)], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 45, 9C, 0C", "st3 {v8.H4 * 3}, [XSP(15)], X(28)");
}

#[test]
fn st3_2507() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v5.S4 * 3}, [x4], x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 48, 8E, 4C", "st3 {v5.S4 * 3}, [x4], x14");
}

#[test]
fn st3_2508() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(9).S2 * 3}, [x12], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 49, 84, 0C", "st3 {V(9).S2 * 3}, [x12], x4");
}

#[test]
fn st3_2509() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v22.D2 * 3}, [XSP(3)], x0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 4C, 80, 4C", "st3 {v22.D2 * 3}, [XSP(3)], x0");
}

#[test]
fn st3_2510() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v19.B * 3}[9], [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 25, 00, 4D", "st3 {v19.B * 3}[9], [x11]");
}

#[test]
fn st3_2511() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(12).H * 3}[7], [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 78, 00, 4D", "st3 {V(12).H * 3}[7], [x5]");
}

#[test]
fn st3_2512() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v27.S * 3}[0], [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, A0, 00, 0D", "st3 {v27.S * 3}[0], [XSP(6)]");
}

#[test]
fn st3_2513() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v31.D * 3}[0], [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, A4, 00, 0D", "st3 {v31.D * 3}[0], [XSP(7)]");
}

#[test]
fn st3_2514() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(3).B * 3}[13], [XSP(22)], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 36, 9F, 4D", "st3 {V(3).B * 3}[13], [XSP(22)], 3");
}

#[test]
fn st3_2515() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(1).B * 3}[1], [XSP(29)], x29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, 27, 9D, 0D", "st3 {V(1).B * 3}[1], [XSP(29)], x29");
}

#[test]
fn st3_2516() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(3).H * 3}[1], [XSP(13)], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, 69, 9F, 0D", "st3 {V(3).H * 3}[1], [XSP(13)], 6");
}

#[test]
fn st3_2517() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v13.H * 3}[6], [x19], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 72, 84, 4D", "st3 {v13.H * 3}[6], [x19], x4");
}

#[test]
fn st3_2518() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v16.S * 3}[1], [x21], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B0, B2, 9F, 0D", "st3 {v16.S * 3}[1], [x21], 12");
}

#[test]
fn st3_2519() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v23.S * 3}[2], [XSP(10)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, A1, 99, 4D", "st3 {v23.S * 3}[2], [XSP(10)], X(25)");
}

#[test]
fn st3_2520() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(10).D * 3}[0], [x25], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, A7, 9F, 0D", "st3 {V(10).D * 3}[0], [x25], 24");
}

#[test]
fn st3_2521() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v20.D * 3}[1], [XSP(25)], X(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, A7, 81, 4D", "st3 {v20.D * 3}[1], [XSP(25)], X(1)");
}

#[test]
fn st4_2522() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v27.B16 * 4}, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 02, 00, 4C", "st4 {v27.B16 * 4}, [x23]");
}

#[test]
fn st4_2523() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v23.B8 * 4}, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, 01, 00, 0C", "st4 {v23.B8 * 4}, [XSP(8)]");
}

#[test]
fn st4_2524() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v25.H8 * 4}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 07, 00, 4C", "st4 {v25.H8 * 4}, [x30]");
}

#[test]
fn st4_2525() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v21.H4 * 4}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 05, 00, 0C", "st4 {v21.H4 * 4}, [XSP(13)]");
}

#[test]
fn st4_2526() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(0).S4 * 4}, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, 08, 00, 4C", "st4 {V(0).S4 * 4}, [x0]");
}

#[test]
fn st4_2527() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v19.S2 * 4}, [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, 09, 00, 0C", "st4 {v19.S2 * 4}, [XSP(12)]");
}

#[test]
fn st4_2528() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(7).D2 * 4}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 0F, 00, 4C", "st4 {V(7).D2 * 4}, [x30]");
}

#[test]
fn st4_2529() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v21.B8 * 4}, [XSP(5)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 00, 9F, 0C", "st4 {v21.B8 * 4}, [XSP(5)], 32");
}

#[test]
fn st4_2530() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v29.H4 * 4}, [x24], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 07, 9F, 0C", "st4 {v29.H4 * 4}, [x24], 32");
}

#[test]
fn st4_2531() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(1).S2 * 4}, [x14], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C1, 09, 9F, 0C", "st4 {V(1).S2 * 4}, [x14], 32");
}

#[test]
fn st4_2532() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(11).B16 * 4}, [x4], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 00, 9F, 4C", "st4 {V(11).B16 * 4}, [x4], 64");
}

#[test]
fn st4_2533() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v9.H8 * 4}, [x18], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, 06, 9F, 4C", "st4 {v9.H8 * 4}, [x18], 64");
}

#[test]
fn st4_2534() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(12).S4 * 4}, [x10], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 09, 9F, 4C", "st4 {V(12).S4 * 4}, [x10], 64");
}

#[test]
fn st4_2535() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v9.D2 * 4}, [x0], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 0C, 9F, 4C", "st4 {v9.D2 * 4}, [x0], 64");
}

#[test]
fn st4_2536() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(11).B16 * 4}, [XSP(25)], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 03, 84, 4C", "st4 {V(11).B16 * 4}, [XSP(25)], X(4)");
}

#[test]
fn st4_2537() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v19.B8 * 4}, [x28], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, 03, 88, 0C", "st4 {v19.B8 * 4}, [x28], x8");
}

#[test]
fn st4_2538() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v1.H8 * 4}, [XSP(16)], X(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 06, 97, 4C", "st4 {v1.H8 * 4}, [XSP(16)], X(23)");
}

#[test]
fn st4_2539() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v22.H4 * 4}, [x8], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, 05, 84, 0C", "st4 {v22.H4 * 4}, [x8], x4");
}

#[test]
fn st4_2540() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(28).S4 * 4}, [x7], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 08, 97, 4C", "st4 {V(28).S4 * 4}, [x7], x23");
}

#[test]
fn st4_2541() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(23).S2 * 4}, [sp], x30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 0B, 9E, 0C", "st4 {V(23).S2 * 4}, [sp], x30");
}

#[test]
fn st4_2542() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(16).D2 * 4}, [x5], X(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B0, 0C, 8A, 4C", "st4 {V(16).D2 * 4}, [x5], X(10)");
}

#[test]
fn st4_2543() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v5.B * 4}[14], [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 39, 20, 4D", "st4 {v5.B * 4}[14], [x11]");
}

#[test]
fn st4_2544() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v27.H * 4}[3], [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 7A, 20, 0D", "st4 {v27.H * 4}[3], [x23]");
}

#[test]
fn st4_2545() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v1.S * 4}[2], [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, A3, 20, 4D", "st4 {v1.S * 4}[2], [XSP(24)]");
}

#[test]
fn st4_2546() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(10).D * 4}[1], [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, A5, 20, 4D", "st4 {V(10).D * 4}[1], [x11]");
}

#[test]
fn st4_2547() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v17.B * 4}[11], [XSP(11)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, 2D, BF, 4D", "st4 {v17.B * 4}[11], [XSP(11)], 4");
}

#[test]
fn st4_2548() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v18.B * 4}[4], [XSP(14)], X(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 31, A7, 0D", "st4 {v18.B * 4}[4], [XSP(14)], X(7)");
}

#[test]
fn st4_2549() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(26).H * 4}[6], [XSP(20)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 72, BF, 4D", "st4 {V(26).H * 4}[6], [XSP(20)], 8");
}

#[test]
fn st4_2550() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v6.H * 4}[6], [XSP(2)], X(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 70, A6, 4D", "st4 {v6.H * 4}[6], [XSP(2)], X(6)");
}

#[test]
fn st4_2551() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v16.S * 4}[1], [XSP(31)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, B3, BF, 0D", "st4 {v16.S * 4}[1], [XSP(31)], 16");
}

#[test]
fn st4_2552() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(7).S * 4}[1], [x8], x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, B1, A9, 0D", "st4 {V(7).S * 4}[1], [x8], x9");
}

#[test]
fn st4_2553() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v10.D * 4}[1], [XSP(29)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, A7, BF, 4D", "st4 {v10.D * 4}[1], [XSP(29)], 32");
}

#[test]
fn st4_2554() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(13).D * 4}[1], [x29], x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, A7, BB, 4D", "st4 {V(13).D * 4}[1], [x29], x27");
}

#[test]
fn stadd_2555() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stadd W(5), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 00, 25, B8", "stadd W(5), [x2]");
}

#[test]
fn stadd_2556() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stadd X(30), [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 03, 3E, F8", "stadd X(30), [XSP(28)]");
}

#[test]
fn staddb_2557() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddb w17, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 02, 31, 38", "staddb w17, [x16]");
}

#[test]
fn staddh_2558() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddh w16, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 02, 30, 78", "staddh w16, [x16]");
}

#[test]
fn staddl_2559() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddl w9, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 00, 69, B8", "staddl w9, [XSP(7)]");
}

#[test]
fn staddl_2560() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddl X(31), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 02, 7F, F8", "staddl X(31), [x21]");
}

#[test]
fn staddlb_2561() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddlb w20, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 02, 74, 38", "staddlb w20, [x16]");
}

#[test]
fn staddlh_2562() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddlh W(1), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 01, 61, 78", "staddlh W(1), [XSP(14)]");
}

#[test]
fn stclr_2563() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclr w10, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 13, 2A, B8", "stclr w10, [x27]");
}

#[test]
fn stclr_2564() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclr X(1), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 12, 21, F8", "stclr X(1), [XSP(16)]");
}

#[test]
fn stclrb_2565() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrb W(4), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 12, 24, 38", "stclrb W(4), [XSP(23)]");
}

#[test]
fn stclrh_2566() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrh W(8), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 11, 28, 78", "stclrh W(8), [x13]");
}

#[test]
fn stclrl_2567() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrl W(0), [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 11, 60, B8", "stclrl W(0), [XSP(15)]");
}

#[test]
fn stclrl_2568() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrl X(5), [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 13, 65, F8", "stclrl X(5), [XSP(29)]");
}

#[test]
fn stclrlb_2569() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrlb w7, [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 11, 67, 38", "stclrlb w7, [XSP(14)]");
}

#[test]
fn stclrlh_2570() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrlh W(9), [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 13, 69, 78", "stclrlh W(9), [XSP(24)]");
}

#[test]
fn steor_2571() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steor W(1), [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 22, 21, B8", "steor W(1), [x23]");
}

#[test]
fn steor_2572() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steor X(29), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 22, 3D, F8", "steor X(29), [XSP(20)]");
}

#[test]
fn steorb_2573() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorb w17, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 23, 31, 38", "steorb w17, [x24]");
}

#[test]
fn steorh_2574() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorh w16, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 23, 30, 78", "steorh w16, [x30]");
}

#[test]
fn steorl_2575() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorl W(2), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 21, 62, B8", "steorl W(2), [XSP(14)]");
}

#[test]
fn steorl_2576() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorl x8, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 22, 68, F8", "steorl x8, [XSP(23)]");
}

#[test]
fn steorlb_2577() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorlb W(9), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 21, 69, 38", "steorlb W(9), [x8]");
}

#[test]
fn steorlh_2578() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorlh w29, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 23, 7D, 78", "steorlh w29, [XSP(25)]");
}

#[test]
fn stllr_2579() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllr w20, [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 7D, 9F, 88", "stllr w20, [XSP(12)]");
}

#[test]
fn stllr_2580() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllr x18, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 7C, 9F, C8", "stllr x18, [x1]");
}

#[test]
fn stllrb_2581() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllrb W(3), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 7E, 9F, 08", "stllrb W(3), [XSP(16)]");
}

#[test]
fn stllrh_2582() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllrh W(8), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 7C, 9F, 48", "stllrh W(8), [x7]");
}

#[test]
fn stlr_2583() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlr W(16), [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, FE, 9F, 88", "stlr W(16), [XSP(22)]");
}

#[test]
fn stlr_2584() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlr X(22), [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D6, FE, 9F, C8", "stlr X(22), [XSP(22)]");
}

#[test]
fn stlrb_2585() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlrb W(16), [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, FC, 9F, 08", "stlrb W(16), [XSP(7)]");
}

#[test]
fn stlrh_2586() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlrh W(3), [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, FC, 9F, 48", "stlrh W(3), [XSP(1)]");
}

#[test]
fn stlur_2587() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlur wzr, [XSP(7)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 00, 00, 99", "stlur wzr, [XSP(7)  ]");
}

#[test]
fn stlur_2588() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlur x16, [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 00, 00, D9", "stlur x16, [XSP(3)  ]");
}

#[test]
fn stlurb_2589() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlurb w9, [XSP(16) , 77  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, D2, 04, 19", "stlurb w9, [XSP(16) , 77  ]");
}

#[test]
fn stlurh_2590() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlurh W(26), [x24 , -14  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 23, 1F, 59", "stlurh W(26), [x24 , -14  ]");
}

#[test]
fn stlxp_2591() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxp W(23), w15, W(26), [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CF, EB, 37, 88", "stlxp W(23), w15, W(26), [x30]");
}

#[test]
fn stlxp_2592() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxp W(19), X(11), X(6), [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 98, 33, C8", "stlxp W(19), X(11), X(6), [XSP(6)]");
}

#[test]
fn stlxr_2593() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxr W(11), W(4), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, FE, 0B, 88", "stlxr W(11), W(4), [x20]");
}

#[test]
fn stlxr_2594() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxr W(27), x11, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, FF, 1B, C8", "stlxr W(27), x11, [XSP(30)]");
}

#[test]
fn stlxrb_2595() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxrb w13, w7, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, FE, 0D, 08", "stlxrb w13, w7, [XSP(19)]");
}

#[test]
fn stlxrh_2596() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxrh W(10), W(19), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, FD, 0A, 48", "stlxrh W(10), W(19), [x8]");
}

#[test]
fn stnp_2597() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp S(31), s31, [x3  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 7C, 00, 2C", "stnp S(31), s31, [x3  ]");
}

#[test]
fn stnp_2598() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp d26, D(8), [x9 , -512  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 21, 20, 6C", "stnp d26, D(8), [x9 , -512  ]");
}

#[test]
fn stnp_2599() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp q20, Q(12), [x0 , -800  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 30, 27, AC", "stnp q20, Q(12), [x0 , -800  ]");
}

#[test]
fn stnp_2600() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp W(21), w10, [XSP(5) , -28  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, A8, 3C, 28", "stnp W(21), w10, [XSP(5) , -28  ]");
}

#[test]
fn stnp_2601() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp X(0), x2, [x17  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 0A, 00, A8", "stnp X(0), x2, [x17  ]");
}

#[test]
fn stp_2602() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp s30, S(5), [XSP(29)], -216
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, 17, A5, 2C", "stp s30, S(5), [XSP(29)], -216");
}

#[test]
fn stp_2603() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp D(23), d7, [XSP(28)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "97, 1F, 83, 6C", "stp D(23), d7, [XSP(28)], 48");
}

#[test]
fn stp_2604() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp q5, q9, [x17], -1008
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, A6, A0, AC", "stp q5, q9, [x17], -1008");
}

#[test]
fn stp_2605() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp s15, S(5), [x7, -208]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 14, A6, 2D", "stp s15, S(5), [x7, -208]!");
}

#[test]
fn stp_2606() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp D(7), D(11), [x7, 224]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 2C, 8E, 6D", "stp D(7), D(11), [x7, 224]!");
}

#[test]
fn stp_2607() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp Q(10), Q(1), [XSP(17), 864]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 06, 9B, AD", "stp Q(10), Q(1), [XSP(17), 864]!");
}

#[test]
fn stp_2608() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp s25, s7, [XSP(23)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, 1E, 00, 2D", "stp s25, s7, [XSP(23)  ]");
}

#[test]
fn stp_2609() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp D(31), D(24), [sp  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 63, 00, 6D", "stp D(31), D(24), [sp  ]");
}

#[test]
fn stp_2610() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp Q(24), Q(11), [XSP(16) , 704  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 2E, 16, AD", "stp Q(24), Q(11), [XSP(16) , 704  ]");
}

#[test]
fn stp_2611() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp w16, W(4), [x26], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 13, 86, 28", "stp w16, W(4), [x26], 48");
}

#[test]
fn stp_2612() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp X(14), x17, [XSP(26)], -176
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 47, B5, A8", "stp X(14), x17, [XSP(26)], -176");
}

#[test]
fn stp_2613() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp W(14), W(28), [x6, -240]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 70, A2, 29", "stp W(14), W(28), [x6, -240]!");
}

#[test]
fn stp_2614() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp x12, X(21), [x19, 320]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, 56, 94, A9", "stp x12, X(21), [x19, 320]!");
}

#[test]
fn stp_2615() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp w19, W(22), [XSP(25)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, 5B, 00, 29", "stp w19, W(22), [XSP(25)  ]");
}

#[test]
fn stp_2616() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp x29, x5, [XSP(24) , 352  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 17, 16, A9", "stp x29, x5, [XSP(24) , 352  ]");
}

#[test]
fn str_2617() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str b26, [XSP(13)], -242
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, E5, 10, 3C", "str b26, [XSP(13)], -242");
}

#[test]
fn str_2618() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str H(23), [x19], 117
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 56, 07, 7C", "str H(23), [x19], 117");
}

#[test]
fn str_2619() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s5, [XSP(22)], -171
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 56, 15, BC", "str s5, [XSP(22)], -171");
}

#[test]
fn str_2620() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str D(6), [XSP(15)], 86
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 65, 05, FC", "str D(6), [XSP(15)], 86");
}

#[test]
fn str_2621() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str q8, [x17], -237
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 36, 91, 3C", "str q8, [x17], -237");
}

#[test]
fn str_2622() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str B(29), [x23, 129]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FD, 1E, 08, 3C", "str B(29), [x23, 129]!");
}

#[test]
fn str_2623() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str h29, [XSP(25), -41]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 7F, 1D, 7C", "str h29, [XSP(25), -41]!");
}

#[test]
fn str_2624() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s4, [x4, -129]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, FC, 17, BC", "str s4, [x4, -129]!");
}

#[test]
fn str_2625() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str d3, [XSP(25), 20]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 4F, 01, FC", "str d3, [XSP(25), 20]!");
}

#[test]
fn str_2626() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str q1, [x9, -106]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 6D, 99, 3C", "str q1, [x9, -106]!");
}

#[test]
fn str_2627() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str b14, [x8 , 460  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, 31, 07, 3D", "str b14, [x8 , 460  ]");
}

#[test]
fn str_2628() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str H(15), [x0  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 00, 00, 7D", "str H(15), [x0  ]");
}

#[test]
fn str_2629() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s8, [x23 , 13240  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, BA, 33, BD", "str s8, [x23 , 13240  ]");
}

#[test]
fn str_2630() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str d14, [XSP(1) , 18624  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 60, 24, FD", "str d14, [XSP(1) , 18624  ]");
}

#[test]
fn str_2631() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str Q(22), [XSP(24)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, 03, 80, 3D", "str Q(22), [XSP(24)  ]");
}

#[test]
fn str_2632() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str W(22), [XSP(19)], -7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 96, 1F, B8", "str W(22), [XSP(19)], -7");
}

#[test]
fn str_2633() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(11), [XSP(28)], -55
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 97, 1C, F8", "str X(11), [XSP(28)], -55");
}

#[test]
fn str_2634() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str w24, [x7, 30]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, EC, 01, B8", "str w24, [x7, 30]!");
}

#[test]
fn str_2635() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(14), [x17, -56]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 8E, 1C, F8", "str X(14), [x17, -56]!");
}

#[test]
fn str_2636() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str w27, [x17 , 15676  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 3E, 3D, B9", "str w27, [x17 , 15676  ]");
}

#[test]
fn str_2637() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(1), [XSP(19)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 02, 00, F9", "str X(1), [XSP(19)  ]");
}

#[test]
fn str_2638() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str b10, [x24, w12  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, DB, 2C, 3C", "str b10, [x24, w12  , SXTW  0   ]");
}

#[test]
fn str_2639() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str h26, [XSP(31), w6  , SXTW  1   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, DB, 26, 7C", "str h26, [XSP(31), w6  , SXTW  1   ]");
}

#[test]
fn str_2640() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s13, [x9, x26  , SXTX  2   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, F9, 3A, BC", "str s13, [x9, x26  , SXTX  2   ]");
}

#[test]
fn str_2641() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str d27, [x25, X(3)  , LSL  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 6B, 23, FC", "str d27, [x25, X(3)  , LSL  0   ]");
}

#[test]
fn str_2642() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str q23, [XSP(22), X(10)   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 6A, AA, 3C", "str q23, [XSP(22), X(10)   ]");
}

#[test]
fn str_2643() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str W(27), [XSP(29), X(2)  , LSL  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 6B, 22, B8", "str W(27), [XSP(29), X(2)  , LSL  0   ]");
}

#[test]
fn str_2644() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(19), [x8, x24   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, 69, 38, F8", "str X(19), [x8, x24   ]");
}

#[test]
fn strb_2645() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb w8, [XSP(9)], -141
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 35, 17, 38", "strb w8, [XSP(9)], -141");
}

#[test]
fn strb_2646() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb w26, [x12, 244]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 4D, 0F, 38", "strb w26, [x12, 244]!");
}

#[test]
fn strb_2647() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb W(13), [XSP(4)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 00, 00, 39", "strb W(13), [XSP(4)  ]");
}

#[test]
fn strb_2648() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb w9, [XSP(29), w19  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 5B, 33, 38", "strb w9, [XSP(29), w19  , UXTW  0   ]");
}

#[test]
fn strh_2649() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(25), [x5], 165
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 54, 0A, 78", "strh W(25), [x5], 165");
}

#[test]
fn strh_2650() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(31), [x1, 2]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 2C, 00, 78", "strh W(31), [x1, 2]!");
}

#[test]
fn strh_2651() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(31), [x6  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 00, 00, 79", "strh W(31), [x6  ]");
}

#[test]
fn strh_2652() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(18), [x1, w20  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, C8, 34, 78", "strh W(18), [x1, w20  , SXTW  0   ]");
}

#[test]
fn stset_2653() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stset W(7), [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 32, 27, B8", "stset W(7), [XSP(19)]");
}

#[test]
fn stset_2654() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stset X(18), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 32, 32, F8", "stset X(18), [x16]");
}

#[test]
fn stsetb_2655() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetb W(17), [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 32, 31, 38", "stsetb W(17), [XSP(18)]");
}

#[test]
fn stseth_2656() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stseth W(16), [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 30, 30, 78", "stseth W(16), [x1]");
}

#[test]
fn stsetl_2657() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetl w2, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 32, 62, B8", "stsetl w2, [XSP(22)]");
}

#[test]
fn stsetl_2658() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetl x14, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 33, 6E, F8", "stsetl x14, [x26]");
}

#[test]
fn stsetlb_2659() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetlb w23, [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 33, 77, 38", "stsetlb w23, [XSP(29)]");
}

#[test]
fn stsetlh_2660() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetlh w12, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 32, 6C, 78", "stsetlh w12, [x23]");
}

#[test]
fn stsmax_2661() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmax W(6), [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 43, 26, B8", "stsmax W(6), [XSP(28)]");
}

#[test]
fn stsmax_2662() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmax X(20), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 40, 34, F8", "stsmax X(20), [x7]");
}

#[test]
fn stsmaxb_2663() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxb W(20), [XSP(11)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 41, 34, 38", "stsmaxb W(20), [XSP(11)]");
}

#[test]
fn stsmaxh_2664() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxh w23, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 40, 37, 78", "stsmaxh w23, [x4]");
}

#[test]
fn stsmaxl_2665() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxl W(13), [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 43, 6D, B8", "stsmaxl W(13), [XSP(27)]");
}

#[test]
fn stsmaxl_2666() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxl X(14), [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 40, 6E, F8", "stsmaxl X(14), [x5]");
}

#[test]
fn stsmaxlb_2667() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxlb W(12), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 41, 6C, 38", "stsmaxlb W(12), [XSP(14)]");
}

#[test]
fn stsmaxlh_2668() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxlh W(9), [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 40, 69, 78", "stsmaxlh W(9), [XSP(4)]");
}

#[test]
fn stsmin_2669() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmin W(28), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 50, 3C, B8", "stsmin W(28), [x7]");
}

#[test]
fn stsmin_2670() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmin x30, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 50, 3E, F8", "stsmin x30, [x0]");
}

#[test]
fn stsminb_2671() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminb w2, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 50, 22, 38", "stsminb w2, [x5]");
}

#[test]
fn stsminh_2672() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminh w13, [XSP(11)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 51, 2D, 78", "stsminh w13, [XSP(11)]");
}

#[test]
fn stsminl_2673() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminl w25, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 52, 79, B8", "stsminl w25, [XSP(18)]");
}

#[test]
fn stsminl_2674() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminl X(13), [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 53, 6D, F8", "stsminl X(13), [XSP(24)]");
}

#[test]
fn stsminlb_2675() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminlb W(28), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 53, 7C, 38", "stsminlb W(28), [x27]");
}

#[test]
fn stsminlh_2676() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminlh w19, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 50, 73, 78", "stsminlh w19, [x1]");
}

#[test]
fn sttr_2677() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttr w10, [x7  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 08, 00, B8", "sttr w10, [x7  ]");
}

#[test]
fn sttr_2678() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttr X(9), [x29 , -91  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 5B, 1A, F8", "sttr X(9), [x29 , -91  ]");
}

#[test]
fn sttrb_2679() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttrb W(7), [x19  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, 0A, 00, 38", "sttrb W(7), [x19  ]");
}

#[test]
fn sttrh_2680() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttrh w24, [XSP(22)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 0A, 00, 78", "sttrh w24, [XSP(22)  ]");
}

#[test]
fn stumax_2681() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumax w18, [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 60, 32, B8", "stumax w18, [x7]");
}

#[test]
fn stumax_2682() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumax X(10), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 61, 2A, F8", "stumax X(10), [x13]");
}

#[test]
fn stumaxb_2683() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxb w7, [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 63, 27, 38", "stumaxb w7, [x29]");
}

#[test]
fn stumaxh_2684() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxh w27, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 62, 3B, 78", "stumaxh w27, [XSP(18)]");
}

#[test]
fn stumaxl_2685() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxl W(17), [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 61, 71, B8", "stumaxl W(17), [x12]");
}

#[test]
fn stumaxl_2686() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxl x30, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 61, 7E, F8", "stumaxl x30, [x10]");
}

#[test]
fn stumaxlb_2687() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxlb w26, [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 60, 7A, 38", "stumaxlb w26, [x7]");
}

#[test]
fn stumaxlh_2688() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxlh w12, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 61, 6C, 78", "stumaxlh w12, [XSP(8)]");
}

#[test]
fn stumin_2689() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumin W(11), [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 72, 2B, B8", "stumin W(11), [x17]");
}

#[test]
fn stumin_2690() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumin x18, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 72, 32, F8", "stumin x18, [x23]");
}

#[test]
fn stuminb_2691() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminb w16, [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 72, 30, 38", "stuminb w16, [x20]");
}

#[test]
fn stuminh_2692() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminh W(28), [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 70, 3C, 78", "stuminh W(28), [x4]");
}

#[test]
fn stuminl_2693() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminl W(11), [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 70, 6B, B8", "stuminl W(11), [x1]");
}

#[test]
fn stuminl_2694() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminl X(7), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 70, 67, F8", "stuminl X(7), [x7]");
}

#[test]
fn stuminlb_2695() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminlb W(5), [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 73, 65, 38", "stuminlb W(5), [x26]");
}

#[test]
fn stuminlh_2696() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminlh w19, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 73, 73, 78", "stuminlh w19, [x25]");
}

#[test]
fn stur_2697() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur b14, [XSP(12)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, 01, 00, 3C", "stur b14, [XSP(12)  ]");
}

#[test]
fn stur_2698() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur h17, [XSP(17) , 30  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, E2, 01, 7C", "stur h17, [XSP(17) , 30  ]");
}

#[test]
fn stur_2699() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur s1, [x15  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 01, 00, BC", "stur s1, [x15  ]");
}

#[test]
fn stur_2700() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur d21, [XSP(7)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 00, 00, FC", "stur d21, [XSP(7)  ]");
}

#[test]
fn stur_2701() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur q24, [x11 , 37  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 51, 82, 3C", "stur q24, [x11 , 37  ]");
}

#[test]
fn stur_2702() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur W(27), [x20 , 130  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 22, 08, B8", "stur W(27), [x20 , 130  ]");
}

#[test]
fn stur_2703() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur x3, [x4  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, 00, 00, F8", "stur x3, [x4  ]");
}

#[test]
fn sturb_2704() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sturb w25, [x20  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 02, 00, 38", "sturb w25, [x20  ]");
}

#[test]
fn sturh_2705() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sturh W(22), [XSP(20)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 02, 00, 78", "sturh W(22), [XSP(20)  ]");
}

#[test]
fn stxp_2706() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxp W(25), W(18), W(21), [x18]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 56, 39, 88", "stxp W(25), W(18), W(21), [x18]");
}

#[test]
fn stxp_2707() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxp W(17), x7, X(19), [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, 4D, 31, C8", "stxp W(17), x7, X(19), [x11]");
}

#[test]
fn stxr_2708() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxr w15, w4, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 7F, 0F, 88", "stxr w15, w4, [x24]");
}

#[test]
fn stxr_2709() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxr w29, X(1), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 7E, 1D, C8", "stxr w29, X(1), [XSP(23)]");
}

#[test]
fn stxrb_2710() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxrb w7, w24, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 7D, 07, 08", "stxrb w7, w24, [x10]");
}

#[test]
fn stxrh_2711() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxrh W(16), W(6), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 7E, 10, 48", "stxrh W(16), W(6), [x16]");
}

#[test]
fn sub_2712() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub w5, w21, w7 , LSR 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 06, 47, 4B", "sub w5, w21, w7 , LSR 1");
}

#[test]
fn sub_2713() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub X(17), x28, x22 , LSL 31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "91, 7F, 16, CB", "sub X(17), x28, x22 , LSL 31");
}

#[test]
fn sub_2714() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub WSP(5), w19, w12 , SXTW 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, CE, 2C, 4B", "sub WSP(5), w19, w12 , SXTW 3");
}

#[test]
fn sub_2715() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub XSP(23), XSP(29), W(0) , SXTB  0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 83, 20, CB", "sub XSP(23), XSP(29), W(0) , SXTB  0");
}

#[test]
fn sub_2716() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub XSP(13), XSP(26), x19 , SXTX 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, E3, 33, CB", "sub XSP(13), XSP(26), x19 , SXTX 0");
}

#[test]
fn sub_2717() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub w29, WSP(5), 3504
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BD, C0, 36, 51", "sub w29, WSP(5), 3504");
}

#[test]
fn sub_2718() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub XSP(27), XSP(31), 1665
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 07, 1A, D1", "sub XSP(27), XSP(31), 1665");
}

#[test]
fn sub_2719() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub D(0), d5, D(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 84, FD, 7E", "sub D(0), d5, D(29)");
}

#[test]
fn sub_2720() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub V(26).B16, V(4).B16, V(7).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 84, 27, 6E", "sub V(26).B16, V(4).B16, V(7).B16");
}

#[test]
fn sub_2721() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v1.B8, v23.B8, v10.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 86, 2A, 2E", "sub v1.B8, v23.B8, v10.B8");
}

#[test]
fn sub_2722() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub V(13).H8, V(19).H8, v18.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, 86, 72, 6E", "sub V(13).H8, V(19).H8, v18.H8");
}

#[test]
fn sub_2723() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v9.H4, v8.H4, V(1).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 85, 61, 2E", "sub v9.H4, v8.H4, V(1).H4");
}

#[test]
fn sub_2724() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v9.S4, v27.S4, V(10).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 87, AA, 6E", "sub v9.S4, v27.S4, V(10).S4");
}

#[test]
fn sub_2725() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v20.S2, V(9).S2, v25.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 85, B9, 2E", "sub v20.S2, V(9).S2, v25.S2");
}

#[test]
fn sub_2726() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v3.D2, V(5).D2, v24.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, 84, F8, 6E", "sub v3.D2, V(5).D2, v24.D2");
}

#[test]
fn subhn_2727() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn v5.B8, V(16).H8, V(27).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 62, 3B, 0E", "subhn v5.B8, V(16).H8, V(27).H8");
}

#[test]
fn subhn_2728() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn V(9).H4, v4.S4, v19.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 60, 73, 0E", "subhn V(9).H4, v4.S4, v19.S4");
}

#[test]
fn subhn_2729() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn V(1).S2, v31.D2, v3.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 63, A3, 0E", "subhn V(1).S2, v31.D2, v3.D2");
}

#[test]
fn subhn2_2730() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn2 V(24).B16, v14.H8, V(4).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 61, 24, 4E", "subhn2 V(24).B16, v14.H8, V(4).H8");
}

#[test]
fn subhn2_2731() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn2 V(8).H8, v11.S4, V(25).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 61, 79, 4E", "subhn2 V(8).H8, v11.S4, V(25).S4");
}

#[test]
fn subhn2_2732() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn2 v8.S4, v19.D2, V(29).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 62, BD, 4E", "subhn2 v8.S4, v19.D2, V(29).D2");
}

#[test]
fn subs_2733() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs W(16), W(0), w5 , LSL 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 70, 05, 6B", "subs W(16), W(0), w5 , LSL 28");
}

#[test]
fn subs_2734() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs X(16), x24, x25 , LSL 58
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, EB, 19, EB", "subs X(16), x24, x25 , LSL 58");
}

#[test]
fn subs_2735() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs W(20), w4, W(29) , LSL 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 08, 1D, 6B", "subs W(20), w4, W(29) , LSL 2");
}

#[test]
fn subs_2736() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs x20, x14, w30 , UXTH  3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, 2D, 3E, EB", "subs x20, x14, w30 , UXTH  3");
}

#[test]
fn subs_2737() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs x25, XSP(29), x26 , LSL 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 0F, 1A, EB", "subs x25, XSP(29), x26 , LSL 3");
}

#[test]
fn subs_2738() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs w11, w9, 2401 , LSL 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 85, 65, 71", "subs w11, w9, 2401 , LSL 12");
}

#[test]
fn subs_2739() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs X(30), x27, 2037 , LSL 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, D7, 5F, F1", "subs X(30), x27, 2037 , LSL 12");
}

#[test]
fn suqadd_2740() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd B(23), B(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "17, 3A, 20, 5E", "suqadd B(23), B(16)");
}

#[test]
fn suqadd_2741() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd h8, H(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 38, 60, 5E", "suqadd h8, H(7)");
}

#[test]
fn suqadd_2742() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd S(11), S(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 3B, A0, 5E", "suqadd S(11), S(30)");
}

#[test]
fn suqadd_2743() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd D(12), d16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, 3A, E0, 5E", "suqadd D(12), d16");
}

#[test]
fn suqadd_2744() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(21).B16, v28.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 3B, 20, 4E", "suqadd V(21).B16, v28.B16");
}

#[test]
fn suqadd_2745() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(22).B8, V(14).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D6, 39, 20, 0E", "suqadd V(22).B8, V(14).B8");
}

#[test]
fn suqadd_2746() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd v2.H8, V(7).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 38, 60, 4E", "suqadd v2.H8, V(7).H8");
}

#[test]
fn suqadd_2747() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd v2.H4, v13.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, 39, 60, 0E", "suqadd v2.H4, v13.H4");
}

#[test]
fn suqadd_2748() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(23).S4, V(11).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 39, A0, 4E", "suqadd V(23).S4, V(11).S4");
}

#[test]
fn suqadd_2749() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(4).S2, V(14).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 39, A0, 0E", "suqadd V(4).S2, V(14).S2");
}

#[test]
fn suqadd_2750() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(6).D2, V(15).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 39, E0, 4E", "suqadd V(6).D2, V(15).D2");
}

#[test]
fn svc_2751() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; svc 25171
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 4A, 0C, D4", "svc 25171");
}

#[test]
fn swp_2752() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swp W(2), W(13), [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 80, 22, B8", "swp W(2), W(13), [XSP(2)]");
}

#[test]
fn swp_2753() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swp X(18), X(8), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 82, 32, F8", "swp X(18), X(8), [x21]");
}

#[test]
fn swpa_2754() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpa W(10), w18, [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 83, AA, B8", "swpa W(10), w18, [x29]");
}

#[test]
fn swpa_2755() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpa X(27), x17, [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 83, BB, F8", "swpa X(27), x17, [XSP(29)]");
}

#[test]
fn swpab_2756() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpab W(15), w26, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, 80, AF, 38", "swpab W(15), w26, [XSP(5)]");
}

#[test]
fn swpah_2757() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpah w16, W(14), [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, 83, B0, 78", "swpah w16, W(14), [x24]");
}

#[test]
fn swpal_2758() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpal wzr, W(7), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 82, FF, B8", "swpal wzr, W(7), [x16]");
}

#[test]
fn swpal_2759() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpal X(12), X(4), [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 81, EC, F8", "swpal X(12), X(4), [XSP(9)]");
}

#[test]
fn swpalb_2760() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpalb W(17), w14, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, 82, F1, 38", "swpalb W(17), w14, [x19]");
}

#[test]
fn swpalh_2761() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpalh W(12), W(18), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 81, EC, 78", "swpalh W(12), W(18), [XSP(14)]");
}

#[test]
fn swpb_2762() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpb W(21), w7, [x9]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 81, 35, 38", "swpb W(21), w7, [x9]");
}

#[test]
fn swph_2763() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swph w9, w12, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 81, 29, 78", "swph w9, w12, [x10]");
}

#[test]
fn swpl_2764() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpl W(18), W(9), [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 83, 72, B8", "swpl W(18), W(9), [XSP(28)]");
}

#[test]
fn swpl_2765() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpl x23, x15, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2F, 83, 77, F8", "swpl x23, x15, [XSP(25)]");
}

#[test]
fn swplb_2766() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swplb w16, W(15), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 80, 70, 38", "swplb w16, W(15), [x7]");
}

#[test]
fn swplh_2767() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swplh w16, W(6), [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 83, 70, 78", "swplh w16, W(6), [sp]");
}

#[test]
fn sxtb_2768() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtb W(27), w6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 1C, 00, 13", "sxtb W(27), w6");
}

#[test]
fn sxtb_2769() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtb X(31), w5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 1C, 40, 93", "sxtb X(31), w5");
}

#[test]
fn sxth_2770() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxth w19, w6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 3C, 00, 13", "sxth w19, w6");
}

#[test]
fn sxth_2771() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxth x26, W(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 3E, 40, 93", "sxth x26, W(18)");
}

#[test]
fn sxtl_2772() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl v4.H8, v11.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, A5, 08, 0F", "sxtl v4.H8, v11.B8");
}

#[test]
fn sxtl_2773() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl V(2).S4, V(19).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, A6, 10, 0F", "sxtl V(2).S4, V(19).H4");
}

#[test]
fn sxtl_2774() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl v9.D2, V(21).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, A6, 20, 0F", "sxtl v9.D2, V(21).S2");
}

#[test]
fn sxtl2_2775() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl2 v28.H8, V(15).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, A5, 08, 4F", "sxtl2 v28.H8, V(15).B16");
}

#[test]
fn sxtl2_2776() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl2 v23.S4, V(31).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, A7, 10, 4F", "sxtl2 v23.S4, V(31).H8");
}

#[test]
fn sxtl2_2777() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl2 V(2).D2, v29.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, A7, 20, 4F", "sxtl2 V(2).D2, v29.S4");
}

#[test]
fn sxtw_2778() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtw X(17), W(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, 7D, 40, 93", "sxtw X(17), W(15)");
}

#[test]
fn sys_2779() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sys 1, c9, c8, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 98, 09, D5", "sys 1, c9, c8, 4");
}

#[test]
fn sysl_2780() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sysl X(9), 4, c7, c12, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 7C, 2C, D5", "sysl X(9), 4, c7, c12, 0");
}

#[test]
fn tbl_2781() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v20.B16, {V(18).B16 * 2}, v16.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "54, 22, 10, 4E", "tbl v20.B16, {V(18).B16 * 2}, v16.B16");
}

#[test]
fn tbl_2782() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(17).B8, {v0.B16 * 2}, v26.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 20, 1A, 0E", "tbl V(17).B8, {v0.B16 * 2}, v26.B8");
}

#[test]
fn tbl_2783() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(25).B16, {v7.B16 * 3}, v10.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, 40, 0A, 4E", "tbl V(25).B16, {v7.B16 * 3}, v10.B16");
}

#[test]
fn tbl_2784() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v27.B8, {V(24).B16 * 3}, V(23).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 43, 17, 0E", "tbl v27.B8, {V(24).B16 * 3}, V(23).B8");
}

#[test]
fn tbl_2785() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(21).B16, {V(31).B16 * 4}, v26.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 63, 1A, 4E", "tbl V(21).B16, {V(31).B16 * 4}, v26.B16");
}

#[test]
fn tbl_2786() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(18).B8, {v25.B16 * 4}, v24.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 63, 18, 0E", "tbl V(18).B8, {v25.B16 * 4}, v24.B8");
}

#[test]
fn tbl_2787() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v5.B16, {v26.B16 * 1}, v6.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, 03, 06, 4E", "tbl v5.B16, {v26.B16 * 1}, v6.B16");
}

#[test]
fn tbl_2788() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v4.B8, {v0.B16 * 1}, V(7).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 00, 07, 0E", "tbl v4.B8, {v0.B16 * 1}, V(7).B8");
}

#[test]
fn tbnz_2789() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbnz W(23), 26, 10524
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 48, D1, 37", "tbnz W(23), 26, 10524");
}

#[test]
fn tbnz_2790() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbnz x24, 46, 728
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 16, 70, B7", "tbnz x24, 46, 728");
}

#[test]
fn tbx_2791() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx V(7).B16, {V(3).B16 * 2}, v5.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, 30, 05, 4E", "tbx V(7).B16, {V(3).B16 * 2}, v5.B16");
}

#[test]
fn tbx_2792() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v19.B8, {v18.B16 * 2}, v22.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 32, 16, 0E", "tbx v19.B8, {v18.B16 * 2}, v22.B8");
}

#[test]
fn tbx_2793() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v14.B16, {V(31).B16 * 3}, V(14).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, 53, 0E, 4E", "tbx v14.B16, {V(31).B16 * 3}, V(14).B16");
}

#[test]
fn tbx_2794() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v17.B8, {v31.B16 * 3}, V(2).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, 53, 02, 0E", "tbx v17.B8, {v31.B16 * 3}, V(2).B8");
}

#[test]
fn tbx_2795() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx V(4).B16, {v21.B16 * 4}, v11.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 72, 0B, 4E", "tbx V(4).B16, {v21.B16 * 4}, v11.B16");
}

#[test]
fn tbx_2796() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v1.B8, {v19.B16 * 4}, V(30).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 72, 1E, 0E", "tbx v1.B8, {v19.B16 * 4}, V(30).B8");
}

#[test]
fn tbx_2797() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v24.B16, {V(16).B16 * 1}, V(12).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 12, 0C, 4E", "tbx v24.B16, {V(16).B16 * 1}, V(12).B16");
}

#[test]
fn tbx_2798() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v2.B8, {v24.B16 * 1}, V(28).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 13, 1C, 0E", "tbx v2.B8, {v24.B16 * 1}, V(28).B8");
}

#[test]
fn tbz_2799() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbz w30, 19, 11948
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 75, 99, 36", "tbz w30, 19, 11948");
}

#[test]
fn tbz_2800() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbz x9, 6, -30212
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 4F, 34, 36", "tbz x9, 6, -30212");
}

#[test]
fn trn1_2801() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(7).B16, V(16).B16, v25.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 2A, 19, 4E", "trn1 V(7).B16, V(16).B16, v25.B16");
}

#[test]
fn trn1_2802() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(17).B8, v14.B8, V(29).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 29, 1D, 0E", "trn1 V(17).B8, v14.B8, V(29).B8");
}

#[test]
fn trn1_2803() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(25).H8, v26.H8, v24.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 2B, 58, 4E", "trn1 V(25).H8, v26.H8, v24.H8");
}

#[test]
fn trn1_2804() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v6.H4, v2.H4, v8.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 28, 48, 0E", "trn1 v6.H4, v2.H4, v8.H4");
}

#[test]
fn trn1_2805() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(9).S4, v24.S4, V(27).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 2B, 9B, 4E", "trn1 V(9).S4, v24.S4, V(27).S4");
}

#[test]
fn trn1_2806() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v20.S2, v22.S2, V(26).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, 2A, 9A, 0E", "trn1 v20.S2, v22.S2, V(26).S2");
}

#[test]
fn trn1_2807() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v1.D2, v7.D2, V(11).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 28, CB, 4E", "trn1 v1.D2, v7.D2, V(11).D2");
}

#[test]
fn trn2_2808() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(10).B16, v2.B16, v31.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 68, 1F, 4E", "trn2 V(10).B16, v2.B16, v31.B16");
}

#[test]
fn trn2_2809() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(25).B8, v21.B8, v31.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 6A, 1F, 0E", "trn2 V(25).B8, v21.B8, v31.B8");
}

#[test]
fn trn2_2810() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v7.H8, v30.H8, v5.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 6B, 45, 4E", "trn2 v7.H8, v30.H8, v5.H8");
}

#[test]
fn trn2_2811() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v31.H4, v17.H4, V(29).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 6A, 5D, 0E", "trn2 v31.H4, v17.H4, V(29).H4");
}

#[test]
fn trn2_2812() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(28).S4, v2.S4, V(17).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, 68, 91, 4E", "trn2 V(28).S4, v2.S4, V(17).S4");
}

#[test]
fn trn2_2813() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v1.S2, V(1).S2, v13.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 68, 8D, 0E", "trn2 v1.S2, V(1).S2, v13.S2");
}

#[test]
fn trn2_2814() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v15.D2, V(30).D2, V(25).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CF, 6B, D9, 4E", "trn2 v15.D2, V(30).D2, V(25).D2");
}

#[test]
fn tst_2815() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tst w30, 8126464
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 13, 0E, 72", "tst w30, 8126464");
}

#[test]
fn tst_2816() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tst x29, 6148914691236517205
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, F3, 00, F2", "tst x29, 6148914691236517205");
}

#[test]
fn tst_2817() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tst w27, W(29) , LSL 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 0F, 1D, 6A", "tst w27, W(29) , LSL 3");
}

#[test]
fn tst_2818() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tst X(31), x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 03, 09, EA", "tst X(31), x9");
}

#[test]
fn uaba_2819() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v3.B16, v24.B16, V(13).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 7F, 2D, 6E", "uaba v3.B16, v24.B16, V(13).B16");
}

#[test]
fn uaba_2820() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaba V(15).B8, v23.B8, v2.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 7E, 22, 2E", "uaba V(15).B8, v23.B8, v2.B8");
}

#[test]
fn uaba_2821() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v0.H8, v30.H8, V(28).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 7F, 7C, 6E", "uaba v0.H8, v30.H8, V(28).H8");
}

#[test]
fn uaba_2822() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v28.H4, V(7).H4, v13.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 7C, 6D, 2E", "uaba v28.H4, V(7).H4, v13.H4");
}

#[test]
fn uaba_2823() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaba V(1).S4, V(30).S4, V(18).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C1, 7F, B2, 6E", "uaba V(1).S4, V(30).S4, V(18).S4");
}

#[test]
fn uaba_2824() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaba V(26).S2, V(14).S2, V(15).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 7D, AF, 2E", "uaba V(26).S2, V(14).S2, V(15).S2");
}

#[test]
fn uabal_2825() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabal v12.H8, v23.B8, V(22).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 52, 36, 2E", "uabal v12.H8, v23.B8, V(22).B8");
}

#[test]
fn uabal_2826() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabal V(27).S4, V(10).H4, V(0).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 51, 60, 2E", "uabal V(27).S4, V(10).H4, V(0).H4");
}

#[test]
fn uabal_2827() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabal V(24).D2, V(20).S2, v21.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 52, B5, 2E", "uabal V(24).D2, V(20).S2, v21.S2");
}

#[test]
fn uabal2_2828() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 v8.H8, v0.B16, V(7).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 50, 27, 6E", "uabal2 v8.H8, v0.B16, V(7).B16");
}

#[test]
fn uabal2_2829() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 v15.S4, v23.H8, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 52, 61, 6E", "uabal2 v15.S4, v23.H8, v1.H8");
}

#[test]
fn uabal2_2830() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 V(16).D2, v19.S4, v18.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 52, B2, 6E", "uabal2 V(16).D2, v19.S4, v18.S4");
}

#[test]
fn uabd_2831() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v10.B16, V(2).B16, V(19).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 74, 33, 6E", "uabd v10.B16, V(2).B16, V(19).B16");
}

#[test]
fn uabd_2832() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(9).B8, v12.B8, V(0).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 75, 20, 2E", "uabd V(9).B8, v12.B8, V(0).B8");
}

#[test]
fn uabd_2833() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(14).H8, v22.H8, v2.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 76, 62, 6E", "uabd V(14).H8, v22.H8, v2.H8");
}

#[test]
fn uabd_2834() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v5.H4, V(29).H4, v29.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 77, 7D, 2E", "uabd v5.H4, V(29).H4, v29.H4");
}

#[test]
fn uabd_2835() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(21).S4, v17.S4, V(15).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 76, AF, 6E", "uabd V(21).S4, v17.S4, V(15).S4");
}

#[test]
fn uabd_2836() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(19).S2, V(20).S2, v8.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, 76, A8, 2E", "uabd V(19).S2, V(20).S2, v8.S2");
}

#[test]
fn uabdl_2837() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v5.H8, v22.B8, V(18).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 72, 32, 2E", "uabdl v5.H8, v22.B8, V(18).B8");
}

#[test]
fn uabdl_2838() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl V(19).S4, V(11).H4, v25.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 71, 79, 2E", "uabdl V(19).S4, V(11).H4, v25.H4");
}

#[test]
fn uabdl_2839() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v12.D2, V(18).S2, V(11).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 72, AB, 2E", "uabdl v12.D2, V(18).S2, V(11).S2");
}

#[test]
fn uabdl2_2840() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 v15.H8, V(25).B16, v30.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2F, 73, 3E, 6E", "uabdl2 v15.H8, V(25).B16, v30.B16");
}

#[test]
fn uabdl2_2841() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 v8.S4, V(19).H8, v13.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 72, 6D, 6E", "uabdl2 v8.S4, V(19).H8, v13.H8");
}

#[test]
fn uabdl2_2842() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 V(4).D2, V(9).S4, v9.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, 71, A9, 6E", "uabdl2 V(4).D2, V(9).S4, v9.S4");
}

#[test]
fn uadalp_2843() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp v24.H8, V(28).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 6B, 20, 6E", "uadalp v24.H8, V(28).B16");
}

#[test]
fn uadalp_2844() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(30).H4, V(23).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 6A, 20, 2E", "uadalp V(30).H4, V(23).B8");
}

#[test]
fn uadalp_2845() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(5).S4, v7.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 68, 60, 6E", "uadalp V(5).S4, v7.H8");
}

#[test]
fn uadalp_2846() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(8).S2, V(22).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 6A, 60, 2E", "uadalp V(8).S2, V(22).H4");
}

#[test]
fn uadalp_2847() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp v18.D2, V(22).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 6A, A0, 6E", "uadalp v18.D2, V(22).S4");
}

#[test]
fn uadalp_2848() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp v9.D1, v30.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 6B, A0, 2E", "uadalp v9.D1, v30.S2");
}

#[test]
fn uaddl_2849() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl V(27).H8, v18.B8, V(5).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 02, 25, 2E", "uaddl V(27).H8, v18.B8, V(5).B8");
}

#[test]
fn uaddl_2850() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl V(9).S4, v25.H4, V(18).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, 03, 72, 2E", "uaddl V(9).S4, v25.H4, V(18).H4");
}

#[test]
fn uaddl_2851() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl V(22).D2, V(16).S2, v26.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, 02, BA, 2E", "uaddl V(22).D2, V(16).S2, v26.S2");
}

#[test]
fn uaddl2_2852() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 v15.H8, v24.B16, v18.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 03, 32, 6E", "uaddl2 v15.H8, v24.B16, v18.B16");
}

#[test]
fn uaddl2_2853() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 V(27).S4, v4.H8, v31.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 00, 7F, 6E", "uaddl2 V(27).S4, v4.H8, v31.H8");
}

#[test]
fn uaddl2_2854() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 v16.D2, V(12).S4, V(24).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, 01, B8, 6E", "uaddl2 v16.D2, V(12).S4, V(24).S4");
}

#[test]
fn uaddlp_2855() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v18.H8, V(12).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 29, 20, 6E", "uaddlp v18.H8, V(12).B16");
}

#[test]
fn uaddlp_2856() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v15.H4, V(18).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 2A, 20, 2E", "uaddlp v15.H4, V(18).B8");
}

#[test]
fn uaddlp_2857() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v4.S4, v30.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 2B, 60, 6E", "uaddlp v4.S4, v30.H8");
}

#[test]
fn uaddlp_2858() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v3.S2, v10.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, 29, 60, 2E", "uaddlp v3.S2, v10.H4");
}

#[test]
fn uaddlp_2859() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v5.D2, v12.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 29, A0, 6E", "uaddlp v5.D2, v12.S4");
}

#[test]
fn uaddlp_2860() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v18.D1, v23.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 2A, A0, 2E", "uaddlp v18.D1, v23.S2");
}

#[test]
fn uaddlv_2861() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv h18, v12.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 39, 30, 6E", "uaddlv h18, v12.B16");
}

#[test]
fn uaddlv_2862() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv H(21), V(19).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 3A, 30, 2E", "uaddlv H(21), V(19).B8");
}

#[test]
fn uaddlv_2863() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv s3, v17.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 3A, 70, 6E", "uaddlv s3, v17.H8");
}

#[test]
fn uaddlv_2864() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv s11, V(17).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 3A, 70, 2E", "uaddlv s11, V(17).H4");
}

#[test]
fn uaddlv_2865() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv d5, V(16).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 3A, B0, 6E", "uaddlv d5, V(16).S4");
}

#[test]
fn uaddw_2866() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw V(31).H8, V(24).H8, v25.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 13, 39, 2E", "uaddw V(31).H8, V(24).H8, v25.B8");
}

#[test]
fn uaddw_2867() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw V(31).S4, v14.S4, v16.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 11, 70, 2E", "uaddw V(31).S4, v14.S4, v16.H4");
}

#[test]
fn uaddw_2868() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw v23.D2, v27.D2, v27.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 13, BB, 2E", "uaddw v23.D2, v27.D2, v27.S2");
}

#[test]
fn uaddw2_2869() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 v28.H8, v19.H8, V(27).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 12, 3B, 6E", "uaddw2 v28.H8, v19.H8, V(27).B16");
}

#[test]
fn uaddw2_2870() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 v11.S4, v26.S4, V(14).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 13, 6E, 6E", "uaddw2 v11.S4, v26.S4, V(14).H8");
}

#[test]
fn uaddw2_2871() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 v29.D2, V(22).D2, V(23).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 12, B7, 6E", "uaddw2 v29.D2, V(22).D2, V(23).S4");
}

#[test]
fn ubfiz_2872() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ubfiz W(25), W(11), 9, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 19, 17, 53", "ubfiz W(25), W(11), 9, 7");
}

#[test]
fn ubfiz_2873() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ubfiz X(17), x12, 6, 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "91, BD, 7A, D3", "ubfiz X(17), x12, 6, 48");
}

#[test]
fn ubfm_2874() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ubfm W(28), w12, 2, 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 6D, 02, 53", "ubfm W(28), w12, 2, 27");
}

#[test]
fn ubfm_2875() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ubfm x24, x16, 36, 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 2A, 64, D3", "ubfm x24, x16, 36, 10");
}

#[test]
fn ubfx_2876() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ubfx W(30), w30, 21, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, 6F, 15, 53", "ubfx W(30), w30, 21, 7");
}

#[test]
fn ubfx_2877() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ubfx x5, X(9), 12, 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, AD, 4C, D3", "ubfx x5, X(9), 12, 32");
}

#[test]
fn ucvtf_2878() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(26), H(29), 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, E7, 16, 7F", "ucvtf H(26), H(29), 10");
}

#[test]
fn ucvtf_2879() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s16, S(15), 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, E5, 34, 7F", "ucvtf s16, S(15), 12");
}

#[test]
fn ucvtf_2880() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(16), D(17), 26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, E6, 66, 7F", "ucvtf D(16), D(17), 26");
}

#[test]
fn ucvtf_2881() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(3).H8, V(28).H8, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, E7, 1F, 6F", "ucvtf V(3).H8, V(28).H8, 1");
}

#[test]
fn ucvtf_2882() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(30).H4, v13.H4, 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, E5, 14, 2F", "ucvtf V(30).H4, v13.H4, 12");
}

#[test]
fn ucvtf_2883() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(27).S4, v28.S4, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, E7, 3C, 6F", "ucvtf V(27).S4, v28.S4, 4");
}

#[test]
fn ucvtf_2884() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(23).S2, V(1).S2, 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, E4, 24, 2F", "ucvtf V(23).S2, V(1).S2, 28");
}

#[test]
fn ucvtf_2885() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v10.D2, v17.D2, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, E6, 7C, 6F", "ucvtf v10.D2, v17.D2, 4");
}

#[test]
fn ucvtf_2886() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h25, H(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, DB, 79, 7E", "ucvtf h25, H(28)");
}

#[test]
fn ucvtf_2887() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s8, S(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, DB, 21, 7E", "ucvtf s8, S(26)");
}

#[test]
fn ucvtf_2888() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d22, d26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, DB, 61, 7E", "ucvtf d22, d26");
}

#[test]
fn ucvtf_2889() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(27).H8, v23.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, DA, 79, 6E", "ucvtf V(27).H8, v23.H8");
}

#[test]
fn ucvtf_2890() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v16.H4, V(0).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, D8, 79, 2E", "ucvtf v16.H4, V(0).H4");
}

#[test]
fn ucvtf_2891() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(9).S4, V(25).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, DB, 21, 6E", "ucvtf V(9).S4, V(25).S4");
}

#[test]
fn ucvtf_2892() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v24.S2, v2.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, D8, 21, 2E", "ucvtf v24.S2, v2.S2");
}

#[test]
fn ucvtf_2893() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(4).D2, V(1).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, D8, 61, 6E", "ucvtf V(4).D2, V(1).D2");
}

#[test]
fn ucvtf_2894() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(14), W(15), 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, A9, C3, 1E", "ucvtf H(14), W(15), 22");
}

#[test]
fn ucvtf_2895() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(13), w24, 19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, B7, 03, 1E", "ucvtf S(13), w24, 19");
}

#[test]
fn ucvtf_2896() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d27, w15, 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, A1, 43, 1E", "ucvtf d27, w15, 24");
}

#[test]
fn ucvtf_2897() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h12, x30, 35
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 77, C3, 9E", "ucvtf h12, x30, 35");
}

#[test]
fn ucvtf_2898() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s12, X(21), 43
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 56, 03, 9E", "ucvtf s12, X(21), 43");
}

#[test]
fn ucvtf_2899() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(14), X(16), 21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, AE, 43, 9E", "ucvtf D(14), X(16), 21");
}

#[test]
fn ucvtf_2900() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h19, W(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, 00, E3, 1E", "ucvtf h19, W(1)");
}

#[test]
fn ucvtf_2901() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(27), w19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, 02, 23, 1E", "ucvtf S(27), w19");
}

#[test]
fn ucvtf_2902() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d3, W(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 00, 63, 1E", "ucvtf d3, W(1)");
}

#[test]
fn ucvtf_2903() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h21, X(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 01, E3, 9E", "ucvtf h21, X(12)");
}

#[test]
fn ucvtf_2904() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s21, X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 00, 23, 9E", "ucvtf s21, X(4)");
}

#[test]
fn ucvtf_2905() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(0), X(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 03, 63, 9E", "ucvtf D(0), X(30)");
}

#[test]
fn udiv_2906() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; udiv W(25), W(13), W(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 09, C5, 1A", "udiv W(25), W(13), W(5)");
}

#[test]
fn udiv_2907() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; udiv X(31), X(9), X(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 09, C3, 9A", "udiv X(31), X(9), X(3)");
}

#[test]
fn udot_2908() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; udot v27.S2, V(3).B8, v6.B4[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, E0, A6, 2F", "udot v27.S2, V(3).B8, v6.B4[1]");
}

#[test]
fn udot_2909() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; udot V(27).S4, V(5).B16, V(18).B4[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, E8, 92, 6F", "udot V(27).S4, V(5).B16, V(18).B4[2]");
}

#[test]
fn udot_2910() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; udot V(3).S2, V(24).B8, v4.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 97, 84, 2E", "udot V(3).S2, V(24).B8, v4.B8");
}

#[test]
fn udot_2911() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; udot v25.S4, v24.B16, v0.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, 97, 80, 6E", "udot v25.S4, v24.B16, v0.B16");
}

#[test]
fn uhadd_2912() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v4.B16, V(27).B16, V(20).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, 07, 34, 6E", "uhadd v4.B16, V(27).B16, V(20).B16");
}

#[test]
fn uhadd_2913() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v23.B8, v23.B8, V(2).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 06, 22, 2E", "uhadd v23.B8, v23.B8, V(2).B8");
}

#[test]
fn uhadd_2914() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(4).H8, v15.H8, v11.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E4, 05, 6B, 6E", "uhadd V(4).H8, v15.H8, v11.H8");
}

#[test]
fn uhadd_2915() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(18).H4, v0.H4, v12.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, 04, 6C, 2E", "uhadd V(18).H4, v0.H4, v12.H4");
}

#[test]
fn uhadd_2916() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(7).S4, v6.S4, v30.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 04, BE, 6E", "uhadd V(7).S4, v6.S4, v30.S4");
}

#[test]
fn uhadd_2917() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(1).S2, V(26).S2, v2.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, 07, A2, 2E", "uhadd V(1).S2, V(26).S2, v2.S2");
}

#[test]
fn uhsub_2918() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(13).B16, V(10).B16, V(8).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 25, 28, 6E", "uhsub V(13).B16, V(10).B16, V(8).B16");
}

#[test]
fn uhsub_2919() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v26.B8, V(8).B8, V(7).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 25, 27, 2E", "uhsub v26.B8, V(8).B8, V(7).B8");
}

#[test]
fn uhsub_2920() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v7.H8, V(23).H8, v16.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 26, 70, 6E", "uhsub v7.H8, V(23).H8, v16.H8");
}

#[test]
fn uhsub_2921() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(4).H4, v21.H4, v1.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 26, 61, 2E", "uhsub V(4).H4, v21.H4, v1.H4");
}

#[test]
fn uhsub_2922() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v9.S4, V(31).S4, V(28).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 27, BC, 6E", "uhsub v9.S4, V(31).S4, V(28).S4");
}

#[test]
fn uhsub_2923() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v3.S2, V(14).S2, V(16).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 25, B0, 2E", "uhsub v3.S2, V(14).S2, V(16).S2");
}

#[test]
fn umaddl_2924() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaddl x29, W(27), W(1), x18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 4B, A1, 9B", "umaddl x29, W(27), W(1), x18");
}

#[test]
fn umax_2925() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umax v28.B16, v28.B16, v30.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 67, 3E, 6E", "umax v28.B16, v28.B16, v30.B16");
}

#[test]
fn umax_2926() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umax v2.B8, V(26).B8, V(0).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, 67, 20, 2E", "umax v2.B8, V(26).B8, V(0).B8");
}

#[test]
fn umax_2927() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umax v30.H8, V(24).H8, v20.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 67, 74, 6E", "umax v30.H8, V(24).H8, v20.H8");
}

#[test]
fn umax_2928() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umax v2.H4, v16.H4, V(15).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 66, 6F, 2E", "umax v2.H4, v16.H4, V(15).H4");
}

#[test]
fn umax_2929() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umax v10.S4, v7.S4, v17.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 64, B1, 6E", "umax v10.S4, v7.S4, v17.S4");
}

#[test]
fn umax_2930() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umax v16.S2, v16.S2, V(14).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 66, AE, 2E", "umax v16.S2, v16.S2, V(14).S2");
}

#[test]
fn umaxp_2931() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v19.B16, V(14).B16, v23.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, A5, 37, 6E", "umaxp v19.B16, V(14).B16, v23.B16");
}

#[test]
fn umaxp_2932() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v10.B8, v29.B8, V(27).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, A7, 3B, 2E", "umaxp v10.B8, v29.B8, V(27).B8");
}

#[test]
fn umaxp_2933() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v15.H8, V(5).H8, v6.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, A4, 66, 6E", "umaxp v15.H8, V(5).H8, v6.H8");
}

#[test]
fn umaxp_2934() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(25).H4, v16.H4, V(6).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, A6, 66, 2E", "umaxp V(25).H4, v16.H4, V(6).H4");
}

#[test]
fn umaxp_2935() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v2.S4, v31.S4, v17.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, A7, B1, 6E", "umaxp v2.S4, v31.S4, v17.S4");
}

#[test]
fn umaxp_2936() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v28.S2, v18.S2, v7.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, A6, A7, 2E", "umaxp v28.S2, v18.S2, v7.S2");
}

#[test]
fn umaxv_2937() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv b21, v11.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, A9, 30, 6E", "umaxv b21, v11.B16");
}

#[test]
fn umaxv_2938() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv b30, V(16).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, AA, 30, 2E", "umaxv b30, V(16).B8");
}

#[test]
fn umaxv_2939() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv h26, V(13).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, A9, 70, 6E", "umaxv h26, V(13).H8");
}

#[test]
fn umaxv_2940() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv H(10), V(4).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, A8, 70, 2E", "umaxv H(10), V(4).H4");
}

#[test]
fn umaxv_2941() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv S(4), V(1).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "24, A8, B0, 6E", "umaxv S(4), V(1).S4");
}

#[test]
fn umin_2942() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umin v23.B16, v29.B16, v13.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 6F, 2D, 6E", "umin v23.B16, v29.B16, v13.B16");
}

#[test]
fn umin_2943() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umin v9.B8, V(5).B8, v24.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 6C, 38, 2E", "umin v9.B8, V(5).B8, v24.B8");
}

#[test]
fn umin_2944() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umin v31.H8, V(0).H8, v8.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 6C, 68, 6E", "umin v31.H8, V(0).H8, v8.H8");
}

#[test]
fn umin_2945() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(31).H4, V(4).H4, v13.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 6C, 6D, 2E", "umin V(31).H4, V(4).H4, v13.H4");
}

#[test]
fn umin_2946() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(16).S4, v14.S4, v26.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, 6D, BA, 6E", "umin V(16).S4, v14.S4, v26.S4");
}

#[test]
fn umin_2947() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(14).S2, v31.S2, V(23).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, 6F, B7, 2E", "umin V(14).S2, v31.S2, V(23).S2");
}

#[test]
fn uminp_2948() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(19).B16, v0.B16, V(25).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, AC, 39, 6E", "uminp V(19).B16, v0.B16, V(25).B16");
}

#[test]
fn uminp_2949() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v15.B8, v8.B8, v9.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, AD, 29, 2E", "uminp v15.B8, v8.B8, v9.B8");
}

#[test]
fn uminp_2950() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v26.H8, V(20).H8, v8.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, AE, 68, 6E", "uminp v26.H8, V(20).H8, v8.H8");
}

#[test]
fn uminp_2951() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(26).H4, V(31).H4, V(29).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, AF, 7D, 2E", "uminp V(26).H4, V(31).H4, V(29).H4");
}

#[test]
fn uminp_2952() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(16).S4, v8.S4, V(0).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, AD, A0, 6E", "uminp V(16).S4, v8.S4, V(0).S4");
}

#[test]
fn uminp_2953() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v8.S2, v18.S2, v9.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, AE, A9, 2E", "uminp v8.S2, v18.S2, v9.S2");
}

#[test]
fn uminv_2954() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminv B(11), v16.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, AA, 31, 6E", "uminv B(11), v16.B16");
}

#[test]
fn uminv_2955() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminv b15, v19.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6F, AA, 31, 2E", "uminv b15, v19.B8");
}

#[test]
fn uminv_2956() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminv h8, V(5).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, A8, 71, 6E", "uminv h8, V(5).H8");
}

#[test]
fn uminv_2957() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminv h23, V(23).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, AA, 71, 2E", "uminv h23, V(23).H4");
}

#[test]
fn uminv_2958() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uminv s4, V(3).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, A8, B1, 6E", "uminv s4, V(3).S4");
}

#[test]
fn umlal_2959() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(31).S4, V(25).H4, V(14).H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 2B, 5E, 2F", "umlal V(31).S4, V(25).H4, V(14).H[5]");
}

#[test]
fn umlal_2960() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(11).D2, v23.S2, v26.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, 22, 9A, 2F", "umlal V(11).D2, v23.S2, v26.S[0]");
}

#[test]
fn umlal_2961() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal v22.H8, v16.B8, v9.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, 82, 29, 2E", "umlal v22.H8, v16.B8, v9.B8");
}

#[test]
fn umlal_2962() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(8).S4, V(3).H4, v23.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 80, 77, 2E", "umlal V(8).S4, V(3).H4, v23.H4");
}

#[test]
fn umlal_2963() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(21).D2, V(30).S2, v2.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 83, A2, 2E", "umlal V(21).D2, V(30).S2, v2.S2");
}

#[test]
fn umlal2_2964() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v5.S4, v29.H8, V(15).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 2B, 7F, 6F", "umlal2 v5.S4, v29.H8, V(15).H[7]");
}

#[test]
fn umlal2_2965() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v9.D2, V(4).S4, v29.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 28, BD, 6F", "umlal2 v9.D2, V(4).S4, v29.S[3]");
}

#[test]
fn umlal2_2966() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v0.H8, v11.B16, V(12).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 81, 2C, 6E", "umlal2 v0.H8, v11.B16, V(12).B16");
}

#[test]
fn umlal2_2967() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(5).S4, v12.H8, v22.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 81, 76, 6E", "umlal2 V(5).S4, v12.H8, v22.H8");
}

#[test]
fn umlal2_2968() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v31.D2, V(21).S4, V(29).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 82, BD, 6E", "umlal2 v31.D2, V(21).S4, V(29).S4");
}

#[test]
fn umlsl_2969() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v25.S4, v1.H4, V(3).H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 68, 53, 2F", "umlsl v25.S4, v1.H4, V(3).H[5]");
}

#[test]
fn umlsl_2970() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl V(7).D2, v22.S2, V(21).S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, 6A, B5, 2F", "umlsl V(7).D2, v22.S2, V(21).S[3]");
}

#[test]
fn umlsl_2971() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v20.H8, V(13).B8, V(2).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B4, A1, 22, 2E", "umlsl v20.H8, V(13).B8, V(2).B8");
}

#[test]
fn umlsl_2972() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v3.S4, v1.H4, V(8).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, A0, 68, 2E", "umlsl v3.S4, v1.H4, V(8).H4");
}

#[test]
fn umlsl_2973() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl V(0).D2, V(6).S2, V(23).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, A0, B7, 2E", "umlsl V(0).D2, V(6).S2, V(23).S2");
}

#[test]
fn umlsl2_2974() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v28.S4, v13.H8, V(0).H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 61, 40, 6F", "umlsl2 v28.S4, v13.H8, V(0).H[0]");
}

#[test]
fn umlsl2_2975() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 V(8).D2, v26.S4, v26.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, 63, 9A, 6F", "umlsl2 V(8).D2, v26.S4, v26.S[0]");
}

#[test]
fn umlsl2_2976() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v6.H8, V(28).B16, v27.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, A3, 3B, 6E", "umlsl2 v6.H8, V(28).B16, v27.B16");
}

#[test]
fn umlsl2_2977() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 V(6).S4, v23.H8, v0.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, A2, 60, 6E", "umlsl2 V(6).S4, v23.H8, v0.H8");
}

#[test]
fn umlsl2_2978() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v25.D2, v26.S4, V(21).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, A3, B5, 6E", "umlsl2 v25.D2, v26.S4, V(21).S4");
}

#[test]
fn umnegl_2979() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umnegl x26, w4, w4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, FC, A4, 9B", "umnegl x26, w4, w4");
}

#[test]
fn umov_2980() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(18), V(16).B[15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, 3E, 1F, 0E", "umov W(18), V(16).B[15]");
}

#[test]
fn umov_2981() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(12), V(25).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, 3F, 06, 0E", "umov W(12), V(25).H[1]");
}

#[test]
fn umov_2982() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(19), v20.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, 3E, 1C, 0E", "umov W(19), v20.S[3]");
}

#[test]
fn umov_2983() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umov X(12), V(23).D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 3E, 18, 4E", "umov X(12), V(23).D[1]");
}

#[test]
fn umsubl_2984() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umsubl x26, w29, w3, x15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, BF, A3, 9B", "umsubl x26, w29, w3, x15");
}

#[test]
fn umulh_2985() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umulh X(0), X(20), X(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 7E, C2, 9B", "umulh X(0), X(20), X(2)");
}

#[test]
fn umull_2986() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull v5.S4, v12.H4, v12.H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, A9, 5C, 2F", "umull v5.S4, v12.H4, v12.H[5]");
}

#[test]
fn umull_2987() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(7).D2, V(8).S2, v30.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, A9, BE, 2F", "umull V(7).D2, V(8).S2, v30.S[3]");
}

#[test]
fn umull_2988() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(14).H8, V(18).B8, V(20).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, C2, 34, 2E", "umull V(14).H8, V(18).B8, V(20).B8");
}

#[test]
fn umull_2989() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(9).S4, V(17).H4, V(12).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, C2, 6C, 2E", "umull V(9).S4, V(17).H4, V(12).H4");
}

#[test]
fn umull_2990() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull v29.D2, v9.S2, v3.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, C1, A3, 2E", "umull v29.D2, v9.S2, v3.S2");
}

#[test]
fn umull_2991() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull x21, W(19), W(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 7E, B8, 9B", "umull x21, W(19), W(24)");
}

#[test]
fn umull2_2992() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v15.S4, V(16).H8, v12.H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, A2, 5C, 6F", "umull2 v15.S4, V(16).H8, v12.H[1]");
}

#[test]
fn umull2_2993() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 V(19).D2, V(1).S4, v7.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, A8, 87, 6F", "umull2 V(19).D2, V(1).S4, v7.S[2]");
}

#[test]
fn umull2_2994() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 V(11).H8, V(9).B16, V(17).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, C1, 31, 6E", "umull2 V(11).H8, V(9).B16, V(17).B16");
}

#[test]
fn umull2_2995() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 V(19).S4, V(23).H8, V(13).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F3, C2, 6D, 6E", "umull2 V(19).S4, V(23).H8, V(13).H8");
}

#[test]
fn umull2_2996() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v8.D2, v13.S4, V(7).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, C1, A7, 6E", "umull2 v8.D2, v13.S4, V(7).S4");
}

#[test]
fn uqadd_2997() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd b18, b2, b8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, 0C, 28, 7E", "uqadd b18, b2, b8");
}

#[test]
fn uqadd_2998() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd h30, H(17), H(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 0E, 70, 7E", "uqadd h30, H(17), H(16)");
}

#[test]
fn uqadd_2999() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd S(14), s3, S(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, 0C, A0, 7E", "uqadd S(14), s3, S(0)");
}
