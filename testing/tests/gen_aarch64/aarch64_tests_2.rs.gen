
#[test]
fn fmls_1600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(20).H4, v12.H4, V(3).H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 51, 13, 0F", "fmls V(20).H4, v12.H4, V(3).H[1]");
}

#[test]
fn fmls_1601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v26.H4, v7.H4, V(0).H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 50, 20, 0F", "fmls v26.H4, v7.H4, V(0).H[2]");
}

#[test]
fn fmls_1602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(2).S4, V(9).S4, V(28).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 59, 9C, 4F", "fmls V(2).S4, V(9).S4, V(28).S[2]");
}

#[test]
fn fmls_1603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(31).S4, v2.S4, v31.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 58, 9F, 4F", "fmls V(31).S4, v2.S4, v31.S[2]");
}

#[test]
fn fmls_1604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(15).S2, v10.S2, V(1).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 59, A1, 0F", "fmls V(15).S2, v10.S2, V(1).S[3]");
}

#[test]
fn fmls_1605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v27.S2, V(1).S2, v22.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 50, 96, 0F", "fmls v27.S2, V(1).S2, v22.S[0]");
}

#[test]
fn fmls_1606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(9).D2, v16.D2, V(1).D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 52, C1, 4F", "fmls V(9).D2, v16.D2, V(1).D[0]");
}

#[test]
fn fmls_1607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(17).D2, V(27).D2, v3.D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 53, C3, 4F", "fmls V(17).D2, V(27).D2, v3.D[0]");
}

#[test]
fn fmls_1608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v11.H8, v3.H8, V(7).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 0C, C7, 4E", "fmls v11.H8, v3.H8, V(7).H8");
}

#[test]
fn fmls_1609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(31).H8, V(12).H8, v9.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 0D, C9, 4E", "fmls V(31).H8, V(12).H8, v9.H8");
}

#[test]
fn fmls_1610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v11.H4, V(23).H4, v15.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 0E, CF, 0E", "fmls v11.H4, V(23).H4, v15.H4");
}

#[test]
fn fmls_1611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v20.H4, V(8).H4, v9.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 0D, C9, 0E", "fmls v20.H4, V(8).H4, v9.H4");
}

#[test]
fn fmls_1612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v29.S4, V(4).S4, v3.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, CC, A3, 4E", "fmls v29.S4, V(4).S4, v3.S4");
}

#[test]
fn fmls_1613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v27.S4, v21.S4, V(30).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, CE, BE, 4E", "fmls v27.S4, v21.S4, V(30).S4");
}

#[test]
fn fmls_1614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(4).S2, v31.S2, V(2).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, CF, A2, 0E", "fmls V(4).S2, v31.S2, V(2).S2");
}

#[test]
fn fmls_1615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(12).S2, V(1).S2, v26.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, CC, BA, 0E", "fmls V(12).S2, V(1).S2, v26.S2");
}

#[test]
fn fmls_1616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v22.D2, v24.D2, v3.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, CF, E3, 4E", "fmls v22.D2, v24.D2, v3.D2");
}

#[test]
fn fmls_1617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(21).D2, V(19).D2, v22.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, CE, F6, 4E", "fmls V(21).D2, V(19).D2, v22.D2");
}

#[test]
fn fmlsl_1618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl V(30).S2, V(31).H2, V(14).H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 4B, 9E, 0F", "fmlsl V(30).S2, V(31).H2, V(14).H[5]");
}

#[test]
fn fmlsl_1619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl v22.S2, v20.H2, v13.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 4A, 8D, 0F", "fmlsl v22.S2, v20.H2, v13.H[4]");
}

#[test]
fn fmlsl_1620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl v6.S4, v24.H4, V(13).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 43, BD, 4F", "fmlsl v6.S4, v24.H4, V(13).H[3]");
}

#[test]
fn fmlsl_1621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl V(13).S4, v28.H4, v12.H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 4B, AC, 4F", "fmlsl V(13).S4, v28.H4, v12.H[6]");
}

#[test]
fn fmlsl_1622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl V(25).S2, v29.H2, V(7).H2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, EF, A7, 0E", "fmlsl V(25).S2, v29.H2, V(7).H2");
}

#[test]
fn fmlsl_1623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl v25.S2, v5.H2, V(29).H2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, EC, BD, 0E", "fmlsl v25.S2, v5.H2, V(29).H2");
}

#[test]
fn fmlsl_1624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl V(28).S4, V(13).H4, v31.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, ED, BF, 4E", "fmlsl V(28).S4, V(13).H4, v31.H4");
}

#[test]
fn fmlsl_1625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl v23.S4, v2.H4, v20.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, EC, B4, 4E", "fmlsl v23.S4, v2.H4, v20.H4");
}

#[test]
fn fmlsl2_1626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 v24.S2, v29.H2, V(11).H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, C3, 9B, 2F", "fmlsl2 v24.S2, v29.H2, V(11).H[1]");
}

#[test]
fn fmlsl2_1627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(7).S2, V(19).H2, v11.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, CA, 8B, 2F", "fmlsl2 V(7).S2, V(19).H2, v11.H[4]");
}

#[test]
fn fmlsl2_1628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(1).S4, v24.H4, V(6).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, CB, B6, 6F", "fmlsl2 V(1).S4, v24.H4, V(6).H[7]");
}

#[test]
fn fmlsl2_1629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(21).S4, v14.H4, v3.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, C9, 93, 6F", "fmlsl2 V(21).S4, v14.H4, v3.H[5]");
}

#[test]
fn fmlsl2_1630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(5).S2, V(5).H2, v19.H2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, CC, B3, 2E", "fmlsl2 V(5).S2, V(5).H2, v19.H2");
}

#[test]
fn fmlsl2_1631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(11).S2, V(13).H2, v1.H2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, CD, A1, 2E", "fmlsl2 V(11).S2, V(13).H2, v1.H2");
}

#[test]
fn fmlsl2_1632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(22).S4, v25.H4, v31.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, CF, BF, 6E", "fmlsl2 V(22).S4, v25.H4, v31.H4");
}

#[test]
fn fmlsl2_1633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(21).S4, V(22).H4, V(16).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, CE, B0, 6E", "fmlsl2 V(21).S4, V(22).H4, V(16).H4");
}

#[test]
fn fmov_1634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(23).H8, -20.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, FE, 05, 4F", "fmov V(23).H8, -20.0");
}

#[test]
fn fmov_1635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v5.H8, 20.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, FE, 01, 4F", "fmov v5.H8, 20.0");
}

#[test]
fn fmov_1636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v16.H4, -29.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, FF, 05, 0F", "fmov v16.H4, -29.0");
}

#[test]
fn fmov_1637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v27.H4, 3.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, FD, 00, 0F", "fmov v27.H4, 3.0");
}

#[test]
fn fmov_1638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(1).S4, -15.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, F5, 05, 4F", "fmov V(1).S4, -15.0");
}

#[test]
fn fmov_1639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v10.S4, 0.75
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, F5, 03, 4F", "fmov v10.S4, 0.75");
}

#[test]
fn fmov_1640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(20).S2, -0.265625
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, F6, 06, 0F", "fmov V(20).S2, -0.265625");
}

#[test]
fn fmov_1641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v24.S2, 1.875
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, F7, 03, 0F", "fmov v24.S2, 1.875");
}

#[test]
fn fmov_1642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v27.D2, -9.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, F4, 05, 6F", "fmov v27.D2, -9.5");
}

#[test]
fn fmov_1643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v10.D2, -4.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, F6, 04, 6F", "fmov v10.D2, -4.0");
}

#[test]
fn fmov_1644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov H(21), h6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 40, E0, 1E", "fmov H(21), h6");
}

#[test]
fn fmov_1645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h14, h21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 42, E0, 1E", "fmov h14, h21");
}

#[test]
fn fmov_1646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov S(13), s21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 42, 20, 1E", "fmov S(13), s21");
}

#[test]
fn fmov_1647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov s24, S(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 40, 20, 1E", "fmov s24, S(3)");
}

#[test]
fn fmov_1648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov d29, d20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 42, 60, 1E", "fmov d29, d20");
}

#[test]
fn fmov_1649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov D(23), D(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 41, 60, 1E", "fmov D(23), D(15)");
}

#[test]
fn fmov_1650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov W(12), H(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 02, E6, 1E", "fmov W(12), H(16)");
}

#[test]
fn fmov_1651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov w24, H(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 00, E6, 1E", "fmov w24, H(3)");
}

#[test]
fn fmov_1652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov x27, h7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 00, E6, 9E", "fmov x27, h7");
}

#[test]
fn fmov_1653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov X(15), h9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 01, E6, 9E", "fmov X(15), h9");
}

#[test]
fn fmov_1654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h9, W(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 01, E7, 1E", "fmov h9, W(15)");
}

#[test]
fn fmov_1655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h18, W(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 00, E7, 1E", "fmov h18, W(7)");
}

#[test]
fn fmov_1656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov s0, w29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 03, 27, 1E", "fmov s0, w29");
}

#[test]
fn fmov_1657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov S(1), W(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 01, 27, 1E", "fmov S(1), W(12)");
}

#[test]
fn fmov_1658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov w11, s13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 01, 26, 1E", "fmov w11, s13");
}

#[test]
fn fmov_1659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov w5, S(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 02, 26, 1E", "fmov w5, S(16)");
}

#[test]
fn fmov_1660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h1, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 00, E7, 9E", "fmov h1, x5");
}

#[test]
fn fmov_1661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov H(13), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 02, E7, 9E", "fmov H(13), x18");
}

#[test]
fn fmov_1662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov d24, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 02, 67, 9E", "fmov d24, X(18)");
}

#[test]
fn fmov_1663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov D(10), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 01, 67, 9E", "fmov D(10), x12");
}

#[test]
fn fmov_1664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(14).D[1], X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 01, AF, 9E", "fmov V(14).D[1], X(14)");
}

#[test]
fn fmov_1665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(25).D[1], X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 03, AF, 9E", "fmov V(25).D[1], X(28)");
}

#[test]
fn fmov_1666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov X(3), D(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 00, 66, 9E", "fmov X(3), D(0)");
}

#[test]
fn fmov_1667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov X(5), D(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 03, 66, 9E", "fmov X(5), D(26)");
}

#[test]
fn fmov_1668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov x5, V(31).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 03, AE, 9E", "fmov x5, V(31).D[1]");
}

#[test]
fn fmov_1669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov x15, V(18).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 02, AE, 9E", "fmov x15, V(18).D[1]");
}

#[test]
fn fmov_1670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov H(27), 26.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 50, E7, 1E", "fmov H(27), 26.0");
}

#[test]
fn fmov_1671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h9, -0.375
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 10, FB, 1E", "fmov h9, -0.375");
}

#[test]
fn fmov_1672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov s0, 1.8125
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, B0, 2F, 1E", "fmov s0, 1.8125");
}

#[test]
fn fmov_1673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov S(17), 3.875
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, F0, 21, 1E", "fmov S(17), 3.875");
}

#[test]
fn fmov_1674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov d4, 21.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, B0, 66, 1E", "fmov d4, 21.0");
}

#[test]
fn fmov_1675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmov D(2), -0.9375
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, D0, 7D, 1E", "fmov D(2), -0.9375");
}

#[test]
fn fmsub_1676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub h11, H(11), H(29), H(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, E5, DD, 1F", "fmsub h11, H(11), H(29), H(25)");
}

#[test]
fn fmsub_1677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub H(2), h21, h23, h10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, AA, D7, 1F", "fmsub H(2), h21, h23, h10");
}

#[test]
fn fmsub_1678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub S(9), s27, s26, s11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, AF, 1A, 1F", "fmsub S(9), s27, s26, s11");
}

#[test]
fn fmsub_1679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub s9, S(17), s7, S(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, D2, 07, 1F", "fmsub s9, S(17), s7, S(20)");
}

#[test]
fn fmsub_1680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub D(30), D(24), D(3), D(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, AF, 43, 1F", "fmsub D(30), D(24), D(3), D(11)");
}

#[test]
fn fmsub_1681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub d28, D(16), D(23), D(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, B2, 57, 1F", "fmsub d28, D(16), D(23), D(12)");
}

#[test]
fn fmul_1682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul h24, H(25), v7.H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 93, 27, 5F", "fmul h24, H(25), v7.H[2]");
}

#[test]
fn fmul_1683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul H(16), H(23), V(14).H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 9A, 2E, 5F", "fmul H(16), H(23), V(14).H[6]");
}

#[test]
fn fmul_1684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul s17, s26, v3.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 9B, 83, 5F", "fmul s17, s26, v3.S[2]");
}

#[test]
fn fmul_1685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul S(4), s8, v9.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 99, A9, 5F", "fmul S(4), s8, v9.S[3]");
}

#[test]
fn fmul_1686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul D(8), d30, v13.D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 9B, CD, 5F", "fmul D(8), d30, v13.D[1]");
}

#[test]
fn fmul_1687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul d14, d20, V(24).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 9A, D8, 5F", "fmul d14, d20, V(24).D[1]");
}

#[test]
fn fmul_1688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(19).H8, v7.H8, V(7).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 90, 37, 4F", "fmul V(19).H8, v7.H8, V(7).H[3]");
}

#[test]
fn fmul_1689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(16).H8, V(1).H8, V(15).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 98, 3F, 4F", "fmul V(16).H8, V(1).H8, V(15).H[7]");
}

#[test]
fn fmul_1690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(11).H4, v10.H4, v9.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 99, 09, 0F", "fmul V(11).H4, v10.H4, v9.H[4]");
}

#[test]
fn fmul_1691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(27).H4, V(23).H4, V(3).H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 9A, 13, 0F", "fmul V(27).H4, V(23).H4, V(3).H[5]");
}

#[test]
fn fmul_1692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(16).S4, V(23).S4, v4.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 92, A4, 4F", "fmul V(16).S4, V(23).S4, v4.S[1]");
}

#[test]
fn fmul_1693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v29.S4, V(31).S4, V(14).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 9B, AE, 4F", "fmul v29.S4, V(31).S4, V(14).S[3]");
}

#[test]
fn fmul_1694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(21).S2, V(14).S2, v13.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 99, 8D, 0F", "fmul V(21).S2, V(14).S2, v13.S[2]");
}

#[test]
fn fmul_1695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(22).S2, v6.S2, V(4).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 98, 84, 0F", "fmul V(22).S2, v6.S2, V(4).S[2]");
}

#[test]
fn fmul_1696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v19.D2, v22.D2, V(14).D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 92, CE, 4F", "fmul v19.D2, v22.D2, V(14).D[0]");
}

#[test]
fn fmul_1697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v23.D2, V(16).D2, V(12).D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 92, CC, 4F", "fmul v23.D2, V(16).D2, V(12).D[0]");
}

#[test]
fn fmul_1698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v10.H8, V(1).H8, v4.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 1C, 44, 6E", "fmul v10.H8, V(1).H8, v4.H8");
}

#[test]
fn fmul_1699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v23.H8, v18.H8, v3.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 1E, 43, 6E", "fmul v23.H8, v18.H8, v3.H8");
}

#[test]
fn fmul_1700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(17).H4, V(13).H4, V(31).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 1D, 5F, 2E", "fmul V(17).H4, V(13).H4, V(31).H4");
}

#[test]
fn fmul_1701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(27).H4, V(12).H4, V(10).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 1D, 4A, 2E", "fmul V(27).H4, V(12).H4, V(10).H4");
}

#[test]
fn fmul_1702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(19).S4, V(19).S4, v2.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, DE, 22, 6E", "fmul V(19).S4, V(19).S4, v2.S4");
}

#[test]
fn fmul_1703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(8).S4, v17.S4, V(5).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, DE, 25, 6E", "fmul V(8).S4, v17.S4, V(5).S4");
}

#[test]
fn fmul_1704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v25.S2, v9.S2, V(25).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, DD, 39, 2E", "fmul v25.S2, v9.S2, V(25).S2");
}

#[test]
fn fmul_1705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(30).S2, v31.S2, V(10).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, DF, 2A, 2E", "fmul V(30).S2, v31.S2, V(10).S2");
}

#[test]
fn fmul_1706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v13.D2, V(3).D2, v14.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, DC, 6E, 6E", "fmul v13.D2, V(3).D2, v14.D2");
}

#[test]
fn fmul_1707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(15).D2, V(18).D2, V(0).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, DE, 60, 6E", "fmul V(15).D2, V(18).D2, V(0).D2");
}

#[test]
fn fmul_1708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul H(15), H(12), H(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 09, F9, 1E", "fmul H(15), H(12), H(25)");
}

#[test]
fn fmul_1709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul H(6), H(19), H(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 0A, E8, 1E", "fmul H(6), H(19), H(8)");
}

#[test]
fn fmul_1710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul s27, s17, s27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 0A, 3B, 1E", "fmul s27, s17, s27");
}

#[test]
fn fmul_1711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul s5, S(5), S(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 08, 2C, 1E", "fmul s5, S(5), S(12)");
}

#[test]
fn fmul_1712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul D(8), D(4), d13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 08, 6D, 1E", "fmul D(8), D(4), d13");
}

#[test]
fn fmul_1713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmul d20, d2, d22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 08, 76, 1E", "fmul d20, d2, d22");
}

#[test]
fn fmulx_1714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx h18, h24, V(8).H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 93, 08, 7F", "fmulx h18, h24, V(8).H[0]");
}

#[test]
fn fmulx_1715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx h25, h24, v0.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 9B, 30, 7F", "fmulx h25, h24, v0.H[7]");
}

#[test]
fn fmulx_1716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx s6, S(9), v22.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 99, B6, 7F", "fmulx s6, S(9), v22.S[3]");
}

#[test]
fn fmulx_1717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx s18, S(18), V(5).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 92, 85, 7F", "fmulx s18, S(18), V(5).S[0]");
}

#[test]
fn fmulx_1718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx D(31), D(26), v14.D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 93, CE, 7F", "fmulx D(31), D(26), v14.D[0]");
}

#[test]
fn fmulx_1719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx d24, d3, v24.D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 90, D8, 7F", "fmulx d24, d3, v24.D[0]");
}

#[test]
fn fmulx_1720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v5.H8, V(22).H8, v0.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 9A, 10, 6F", "fmulx v5.H8, V(22).H8, v0.H[5]");
}

#[test]
fn fmulx_1721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v27.H8, v5.H8, v6.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 98, 16, 6F", "fmulx v27.H8, v5.H8, v6.H[5]");
}

#[test]
fn fmulx_1722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v13.H4, v4.H4, v11.H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 90, 0B, 2F", "fmulx v13.H4, v4.H4, v11.H[0]");
}

#[test]
fn fmulx_1723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(24).H4, V(22).H4, v6.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 92, 16, 2F", "fmulx V(24).H4, V(22).H4, v6.H[1]");
}

#[test]
fn fmulx_1724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v22.S4, v6.S4, v15.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 90, AF, 6F", "fmulx v22.S4, v6.S4, v15.S[1]");
}

#[test]
fn fmulx_1725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v10.S4, V(24).S4, V(27).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 93, BB, 6F", "fmulx v10.S4, V(24).S4, V(27).S[1]");
}

#[test]
fn fmulx_1726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v29.S2, V(2).S2, V(21).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 90, 95, 2F", "fmulx v29.S2, V(2).S2, V(21).S[0]");
}

#[test]
fn fmulx_1727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v11.S2, V(0).S2, v8.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 98, 88, 2F", "fmulx v11.S2, V(0).S2, v8.S[2]");
}

#[test]
fn fmulx_1728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(17).D2, v3.D2, V(16).D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 90, D0, 6F", "fmulx V(17).D2, v3.D2, V(16).D[0]");
}

#[test]
fn fmulx_1729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(8).D2, V(19).D2, V(31).D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 92, DF, 6F", "fmulx V(8).D2, V(19).D2, V(31).D[0]");
}

#[test]
fn fmulx_1730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx H(6), h4, H(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 1C, 46, 5E", "fmulx H(6), h4, H(6)");
}

#[test]
fn fmulx_1731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx H(22), h0, h26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 1C, 5A, 5E", "fmulx H(22), h0, h26");
}

#[test]
fn fmulx_1732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx s10, S(21), S(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, DE, 3A, 5E", "fmulx s10, S(21), S(26)");
}

#[test]
fn fmulx_1733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx S(4), s25, S(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, DF, 31, 5E", "fmulx S(4), s25, S(17)");
}

#[test]
fn fmulx_1734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx d10, d6, D(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, DC, 6A, 5E", "fmulx d10, d6, D(10)");
}

#[test]
fn fmulx_1735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx d10, d19, D(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, DE, 7A, 5E", "fmulx d10, d19, D(26)");
}

#[test]
fn fmulx_1736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(3).H8, v16.H8, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 1E, 53, 4E", "fmulx V(3).H8, v16.H8, V(19).H8");
}

#[test]
fn fmulx_1737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v29.H8, v16.H8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 1E, 5E, 4E", "fmulx v29.H8, v16.H8, V(30).H8");
}

#[test]
fn fmulx_1738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(0).H4, v10.H4, v6.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 1D, 46, 0E", "fmulx V(0).H4, v10.H4, v6.H4");
}

#[test]
fn fmulx_1739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v4.H4, v19.H4, V(0).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 1E, 40, 0E", "fmulx v4.H4, v19.H4, V(0).H4");
}

#[test]
fn fmulx_1740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v23.S4, v19.S4, v22.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, DE, 36, 4E", "fmulx v23.S4, v19.S4, v22.S4");
}

#[test]
fn fmulx_1741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(13).S4, v3.S4, V(8).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, DC, 28, 4E", "fmulx V(13).S4, v3.S4, V(8).S4");
}

#[test]
fn fmulx_1742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v17.S2, V(12).S2, v29.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, DD, 3D, 0E", "fmulx v17.S2, V(12).S2, v29.S2");
}

#[test]
fn fmulx_1743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(21).S2, v30.S2, V(5).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, DF, 25, 0E", "fmulx V(21).S2, v30.S2, V(5).S2");
}

#[test]
fn fmulx_1744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(30).D2, V(1).D2, v19.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, DC, 73, 4E", "fmulx V(30).D2, V(1).D2, v19.D2");
}

#[test]
fn fmulx_1745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(28).D2, v10.D2, V(3).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, DD, 63, 4E", "fmulx V(28).D2, v10.D2, V(3).D2");
}

#[test]
fn fneg_1746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v11.H8, v15.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, F9, F8, 6E", "fneg v11.H8, v15.H8");
}

#[test]
fn fneg_1747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v12.H8, V(16).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, FA, F8, 6E", "fneg v12.H8, V(16).H8");
}

#[test]
fn fneg_1748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v20.H4, v6.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, F8, F8, 2E", "fneg v20.H4, v6.H4");
}

#[test]
fn fneg_1749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v2.H4, V(8).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, F9, F8, 2E", "fneg v2.H4, V(8).H4");
}

#[test]
fn fneg_1750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(1).S4, v8.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, F9, A0, 6E", "fneg V(1).S4, v8.S4");
}

#[test]
fn fneg_1751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(12).S4, V(7).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, F8, A0, 6E", "fneg V(12).S4, V(7).S4");
}

#[test]
fn fneg_1752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(4).S2, v19.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, FA, A0, 2E", "fneg V(4).S2, v19.S2");
}

#[test]
fn fneg_1753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(8).S2, V(16).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, FA, A0, 2E", "fneg V(8).S2, V(16).S2");
}

#[test]
fn fneg_1754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v23.D2, V(12).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, F9, E0, 6E", "fneg v23.D2, V(12).D2");
}

#[test]
fn fneg_1755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v9.D2, v29.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, FB, E0, 6E", "fneg v9.D2, v29.D2");
}

#[test]
fn fneg_1756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg H(22), h24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 43, E1, 1E", "fneg H(22), h24");
}

#[test]
fn fneg_1757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg H(6), H(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 42, E1, 1E", "fneg H(6), H(22)");
}

#[test]
fn fneg_1758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg s15, S(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 42, 21, 1E", "fneg s15, S(21)");
}

#[test]
fn fneg_1759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg S(6), S(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 41, 21, 1E", "fneg S(6), S(13)");
}

#[test]
fn fneg_1760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg d16, d10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 41, 61, 1E", "fneg d16, d10");
}

#[test]
fn fneg_1761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fneg d21, d5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 40, 61, 1E", "fneg d21, d5");
}

#[test]
fn fnmadd_1762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd H(8), H(15), h29, H(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 2D, FD, 1F", "fnmadd H(8), H(15), h29, H(11)");
}

#[test]
fn fnmadd_1763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd H(2), h3, H(3), H(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 4C, E3, 1F", "fnmadd H(2), h3, H(3), H(19)");
}

#[test]
fn fnmadd_1764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd s9, s16, s26, S(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 0A, 3A, 1F", "fnmadd s9, s16, s26, S(2)");
}

#[test]
fn fnmadd_1765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd S(9), s20, S(19), s19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 4E, 33, 1F", "fnmadd S(9), s20, S(19), s19");
}

#[test]
fn fnmadd_1766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd D(7), D(18), d11, D(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 2E, 6B, 1F", "fnmadd D(7), D(18), d11, D(11)");
}

#[test]
fn fnmadd_1767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd D(28), D(14), d24, d2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 09, 78, 1F", "fnmadd D(28), D(14), d24, d2");
}

#[test]
fn fnmsub_1768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub H(14), H(12), h25, h4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 91, F9, 1F", "fnmsub H(14), H(12), h25, h4");
}

#[test]
fn fnmsub_1769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub h16, H(1), H(5), h8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, A0, E5, 1F", "fnmsub h16, H(1), H(5), h8");
}

#[test]
fn fnmsub_1770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub s0, s26, S(18), S(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 8B, 32, 1F", "fnmsub s0, s26, S(18), S(2)");
}

#[test]
fn fnmsub_1771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub S(19), S(21), s16, s13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, B6, 30, 1F", "fnmsub S(19), S(21), s16, s13");
}

#[test]
fn fnmsub_1772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub D(25), D(20), d24, D(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, E6, 78, 1F", "fnmsub D(25), D(20), d24, D(25)");
}

#[test]
fn fnmsub_1773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub D(6), d3, D(10), d16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, C0, 6A, 1F", "fnmsub D(6), d3, D(10), d16");
}

#[test]
fn fnmul_1774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul H(4), h31, h10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 8B, EA, 1E", "fnmul H(4), h31, h10");
}

#[test]
fn fnmul_1775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul h8, H(27), h31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 8B, FF, 1E", "fnmul h8, H(27), h31");
}

#[test]
fn fnmul_1776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul s8, S(30), S(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 8B, 2A, 1E", "fnmul s8, S(30), S(10)");
}

#[test]
fn fnmul_1777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul s11, s3, s31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 88, 3F, 1E", "fnmul s11, s3, s31");
}

#[test]
fn fnmul_1778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul d26, d25, d10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 8B, 6A, 1E", "fnmul d26, d25, d10");
}

#[test]
fn fnmul_1779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul d14, d8, D(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 89, 7E, 1E", "fnmul d14, d8, D(30)");
}

#[test]
fn frecpe_1780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe H(26), H(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, DA, F9, 5E", "frecpe H(26), H(19)");
}

#[test]
fn frecpe_1781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe H(25), H(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, D9, F9, 5E", "frecpe H(25), H(14)");
}

#[test]
fn frecpe_1782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe S(18), s2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, D8, A1, 5E", "frecpe S(18), s2");
}

#[test]
fn frecpe_1783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe s2, S(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, DB, A1, 5E", "frecpe s2, S(26)");
}

#[test]
fn frecpe_1784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe d5, D(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, DA, E1, 5E", "frecpe d5, D(16)");
}

#[test]
fn frecpe_1785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe D(23), D(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, D9, E1, 5E", "frecpe D(23), D(9)");
}

#[test]
fn frecpe_1786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(0).H8, v0.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, D8, F9, 4E", "frecpe V(0).H8, v0.H8");
}

#[test]
fn frecpe_1787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(10).H8, v14.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, D9, F9, 4E", "frecpe V(10).H8, v14.H8");
}

#[test]
fn frecpe_1788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(14).H4, v22.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, DA, F9, 0E", "frecpe V(14).H4, v22.H4");
}

#[test]
fn frecpe_1789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v30.H4, v23.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, DA, F9, 0E", "frecpe v30.H4, v23.H4");
}

#[test]
fn frecpe_1790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v15.S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, D9, A1, 4E", "frecpe v15.S4, v11.S4");
}

#[test]
fn frecpe_1791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(22).S4, v28.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, DB, A1, 4E", "frecpe V(22).S4, v28.S4");
}

#[test]
fn frecpe_1792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v4.S2, v13.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, D9, A1, 0E", "frecpe v4.S2, v13.S2");
}

#[test]
fn frecpe_1793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v5.S2, v20.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, DA, A1, 0E", "frecpe v5.S2, v20.S2");
}

#[test]
fn frecpe_1794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v14.D2, v11.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, D9, E1, 4E", "frecpe v14.D2, v11.D2");
}

#[test]
fn frecpe_1795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v7.D2, V(25).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, DB, E1, 4E", "frecpe v7.D2, V(25).D2");
}

#[test]
fn frecps_1796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps H(29), H(8), H(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 3D, 48, 5E", "frecps H(29), H(8), H(8)");
}

#[test]
fn frecps_1797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps H(31), h27, h7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 3F, 47, 5E", "frecps H(31), h27, h7");
}

#[test]
fn frecps_1798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps S(7), s8, s23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, FD, 37, 5E", "frecps S(7), s8, s23");
}

#[test]
fn frecps_1799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps s28, S(9), s0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, FD, 20, 5E", "frecps s28, S(9), s0");
}

#[test]
fn frecps_1800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps d16, D(29), d9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, FF, 69, 5E", "frecps d16, D(29), d9");
}

#[test]
fn frecps_1801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps D(10), d21, d16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, FE, 70, 5E", "frecps D(10), d21, d16");
}

#[test]
fn frecps_1802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps V(0).H8, v30.H8, v23.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 3F, 57, 4E", "frecps V(0).H8, v30.H8, v23.H8");
}

#[test]
fn frecps_1803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps V(19).H8, V(1).H8, V(9).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 3C, 49, 4E", "frecps V(19).H8, V(1).H8, V(9).H8");
}

#[test]
fn frecps_1804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v8.H4, v23.H4, v10.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 3E, 4A, 0E", "frecps v8.H4, v23.H4, v10.H4");
}

#[test]
fn frecps_1805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v19.H4, v31.H4, V(19).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 3F, 53, 0E", "frecps v19.H4, v31.H4, V(19).H4");
}

#[test]
fn frecps_1806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v6.S4, V(12).S4, v1.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, FD, 21, 4E", "frecps v6.S4, V(12).S4, v1.S4");
}

#[test]
fn frecps_1807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps V(29).S4, V(13).S4, v26.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, FD, 3A, 4E", "frecps V(29).S4, V(13).S4, v26.S4");
}

#[test]
fn frecps_1808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps V(26).S2, V(29).S2, v24.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, FF, 38, 0E", "frecps V(26).S2, V(29).S2, v24.S2");
}

#[test]
fn frecps_1809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v31.S2, v4.S2, v18.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, FC, 32, 0E", "frecps v31.S2, v4.S2, v18.S2");
}

#[test]
fn frecps_1810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v4.D2, V(20).D2, v3.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, FE, 63, 4E", "frecps v4.D2, V(20).D2, v3.D2");
}

#[test]
fn frecps_1811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v11.D2, V(17).D2, V(3).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, FE, 63, 4E", "frecps v11.D2, V(17).D2, V(3).D2");
}

#[test]
fn frecpx_1812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx H(12), H(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, FA, F9, 5E", "frecpx H(12), H(20)");
}

#[test]
fn frecpx_1813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx H(28), h17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, FA, F9, 5E", "frecpx H(28), h17");
}

#[test]
fn frecpx_1814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx S(12), S(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, FA, A1, 5E", "frecpx S(12), S(17)");
}

#[test]
fn frecpx_1815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx S(0), s29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, FB, A1, 5E", "frecpx S(0), s29");
}

#[test]
fn frecpx_1816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx D(6), d28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, FB, E1, 5E", "frecpx D(6), d28");
}

#[test]
fn frecpx_1817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx d16, d11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, F9, E1, 5E", "frecpx d16, d11");
}

#[test]
fn frinta_1818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v2.H8, V(11).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 89, 79, 6E", "frinta v2.H8, V(11).H8");
}

#[test]
fn frinta_1819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(8).H8, v12.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 89, 79, 6E", "frinta V(8).H8, v12.H8");
}

#[test]
fn frinta_1820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v22.H4, V(22).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 8A, 79, 2E", "frinta v22.H4, V(22).H4");
}

#[test]
fn frinta_1821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v28.H4, v22.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 8A, 79, 2E", "frinta v28.H4, v22.H4");
}

#[test]
fn frinta_1822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v26.S4, v13.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 89, 21, 6E", "frinta v26.S4, v13.S4");
}

#[test]
fn frinta_1823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(4).S4, V(27).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 8B, 21, 6E", "frinta V(4).S4, V(27).S4");
}

#[test]
fn frinta_1824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(17).S2, V(1).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 88, 21, 2E", "frinta V(17).S2, V(1).S2");
}

#[test]
fn frinta_1825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v1.S2, v3.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 88, 21, 2E", "frinta v1.S2, v3.S2");
}

#[test]
fn frinta_1826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(13).D2, V(15).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 89, 61, 6E", "frinta V(13).D2, V(15).D2");
}

#[test]
fn frinta_1827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v27.D2, V(21).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 8A, 61, 6E", "frinta v27.D2, V(21).D2");
}

#[test]
fn frinta_1828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta h0, H(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 41, E6, 1E", "frinta h0, H(13)");
}

#[test]
fn frinta_1829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta h25, H(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 40, E6, 1E", "frinta h25, H(0)");
}

#[test]
fn frinta_1830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta s19, S(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 42, 26, 1E", "frinta s19, S(20)");
}

#[test]
fn frinta_1831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta s23, S(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 41, 26, 1E", "frinta s23, S(13)");
}

#[test]
fn frinta_1832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta d12, D(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 43, 66, 1E", "frinta d12, D(29)");
}

#[test]
fn frinta_1833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinta d25, d24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 43, 66, 1E", "frinta d25, d24");
}

#[test]
fn frinti_1834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(11).H8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 9B, F9, 6E", "frinti V(11).H8, V(30).H8");
}

#[test]
fn frinti_1835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(16).H8, v10.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 99, F9, 6E", "frinti V(16).H8, v10.H8");
}

#[test]
fn frinti_1836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(24).H4, v19.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 9A, F9, 2E", "frinti V(24).H4, v19.H4");
}

#[test]
fn frinti_1837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(19).H4, V(23).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 9A, F9, 2E", "frinti V(19).H4, V(23).H4");
}

#[test]
fn frinti_1838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti v2.S4, V(12).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 99, A1, 6E", "frinti v2.S4, V(12).S4");
}

#[test]
fn frinti_1839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(27).S4, V(31).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 9B, A1, 6E", "frinti V(27).S4, V(31).S4");
}

#[test]
fn frinti_1840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(27).S2, V(25).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 9B, A1, 2E", "frinti V(27).S2, V(25).S2");
}

#[test]
fn frinti_1841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(30).S2, v29.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 9B, A1, 2E", "frinti V(30).S2, v29.S2");
}

#[test]
fn frinti_1842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(19).D2, V(17).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 9A, E1, 6E", "frinti V(19).D2, V(17).D2");
}

#[test]
fn frinti_1843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(18).D2, v23.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 9A, E1, 6E", "frinti V(18).D2, v23.D2");
}

#[test]
fn frinti_1844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti H(9), H(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, C3, E7, 1E", "frinti H(9), H(27)");
}

#[test]
fn frinti_1845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti h2, H(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, C1, E7, 1E", "frinti h2, H(15)");
}

#[test]
fn frinti_1846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti S(27), s8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, C1, 27, 1E", "frinti S(27), s8");
}

#[test]
fn frinti_1847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti s10, S(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, C0, 27, 1E", "frinti s10, S(7)");
}

#[test]
fn frinti_1848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti d5, D(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, C0, 67, 1E", "frinti d5, D(3)");
}

#[test]
fn frinti_1849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frinti D(9), d29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, C3, 67, 1E", "frinti D(9), d29");
}

#[test]
fn frintm_1850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm V(12).H8, v30.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 9B, 79, 4E", "frintm V(12).H8, v30.H8");
}

#[test]
fn frintm_1851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v24.H8, v0.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 98, 79, 4E", "frintm v24.H8, v0.H8");
}

#[test]
fn frintm_1852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v14.H4, v10.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 99, 79, 0E", "frintm v14.H4, v10.H4");
}

#[test]
fn frintm_1853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm V(3).H4, V(13).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 99, 79, 0E", "frintm V(3).H4, V(13).H4");
}

#[test]
fn frintm_1854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm V(9).S4, V(29).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 9B, 21, 4E", "frintm V(9).S4, V(29).S4");
}

#[test]
fn frintm_1855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm V(28).S4, V(28).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 9B, 21, 4E", "frintm V(28).S4, V(28).S4");
}

#[test]
fn frintm_1856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v2.S2, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 98, 21, 0E", "frintm v2.S2, v5.S2");
}

#[test]
fn frintm_1857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v1.S2, V(19).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 9A, 21, 0E", "frintm v1.S2, V(19).S2");
}

#[test]
fn frintm_1858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v22.D2, v21.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 9A, 61, 4E", "frintm v22.D2, v21.D2");
}

#[test]
fn frintm_1859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v17.D2, V(20).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 9A, 61, 4E", "frintm v17.D2, V(20).D2");
}

#[test]
fn frintm_1860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm H(10), h13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 41, E5, 1E", "frintm H(10), h13");
}

#[test]
fn frintm_1861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm H(26), H(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 40, E5, 1E", "frintm H(26), H(2)");
}

#[test]
fn frintm_1862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm S(5), s20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 42, 25, 1E", "frintm S(5), s20");
}

#[test]
fn frintm_1863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm s5, s19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 42, 25, 1E", "frintm s5, s19");
}

#[test]
fn frintm_1864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm D(21), D(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 42, 65, 1E", "frintm D(21), D(19)");
}

#[test]
fn frintm_1865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintm d11, D(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 42, 65, 1E", "frintm d11, D(21)");
}

#[test]
fn frintn_1866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(23).H8, v3.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 88, 79, 4E", "frintn V(23).H8, v3.H8");
}

#[test]
fn frintn_1867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v0.H8, V(18).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 8A, 79, 4E", "frintn v0.H8, V(18).H8");
}

#[test]
fn frintn_1868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(10).H4, v19.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 8A, 79, 0E", "frintn V(10).H4, v19.H4");
}

#[test]
fn frintn_1869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(19).H4, V(12).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 89, 79, 0E", "frintn V(19).H4, V(12).H4");
}

#[test]
fn frintn_1870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v10.S4, v2.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 88, 21, 4E", "frintn v10.S4, v2.S4");
}

#[test]
fn frintn_1871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v18.S4, v27.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 8B, 21, 4E", "frintn v18.S4, v27.S4");
}

#[test]
fn frintn_1872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v27.S2, V(9).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 89, 21, 0E", "frintn v27.S2, V(9).S2");
}

#[test]
fn frintn_1873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(8).S2, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 88, 21, 0E", "frintn V(8).S2, v5.S2");
}

#[test]
fn frintn_1874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(26).D2, V(18).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 8A, 61, 4E", "frintn V(26).D2, V(18).D2");
}

#[test]
fn frintn_1875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(5).D2, V(30).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 8B, 61, 4E", "frintn V(5).D2, V(30).D2");
}

#[test]
fn frintn_1876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn h0, H(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 43, E4, 1E", "frintn h0, H(31)");
}

#[test]
fn frintn_1877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn h13, H(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 41, E4, 1E", "frintn h13, H(14)");
}

#[test]
fn frintn_1878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn s27, s8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 41, 24, 1E", "frintn s27, s8");
}

#[test]
fn frintn_1879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn s4, s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 40, 24, 1E", "frintn s4, s1");
}

#[test]
fn frintn_1880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn d12, d18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 42, 64, 1E", "frintn d12, d18");
}

#[test]
fn frintn_1881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintn d23, d22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 42, 64, 1E", "frintn d23, d22");
}

#[test]
fn frintp_1882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v30.H8, V(1).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 88, F9, 4E", "frintp v30.H8, V(1).H8");
}

#[test]
fn frintp_1883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v14.H8, v2.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 88, F9, 4E", "frintp v14.H8, v2.H8");
}

#[test]
fn frintp_1884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(23).H4, V(24).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 8B, F9, 0E", "frintp V(23).H4, V(24).H4");
}

#[test]
fn frintp_1885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v1.H4, v4.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 88, F9, 0E", "frintp v1.H4, v4.H4");
}

#[test]
fn frintp_1886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v22.S4, V(13).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 89, A1, 4E", "frintp v22.S4, V(13).S4");
}

#[test]
fn frintp_1887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(28).S4, V(12).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 89, A1, 4E", "frintp V(28).S4, V(12).S4");
}

#[test]
fn frintp_1888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v6.S2, V(10).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 89, A1, 0E", "frintp v6.S2, V(10).S2");
}

#[test]
fn frintp_1889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(26).S2, v18.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 8A, A1, 0E", "frintp V(26).S2, v18.S2");
}

#[test]
fn frintp_1890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(16).D2, v28.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 8B, E1, 4E", "frintp V(16).D2, v28.D2");
}

#[test]
fn frintp_1891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(21).D2, V(29).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 8B, E1, 4E", "frintp V(21).D2, V(29).D2");
}

#[test]
fn frintp_1892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp h18, h16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, C2, E4, 1E", "frintp h18, h16");
}

#[test]
fn frintp_1893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp h7, H(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, C1, E4, 1E", "frintp h7, H(9)");
}

#[test]
fn frintp_1894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp s20, S(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, C1, 24, 1E", "frintp s20, S(15)");
}

#[test]
fn frintp_1895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp S(14), S(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, C2, 24, 1E", "frintp S(14), S(22)");
}

#[test]
fn frintp_1896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp D(24), d14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, C1, 64, 1E", "frintp D(24), d14");
}

#[test]
fn frintp_1897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintp d7, d3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, C0, 64, 1E", "frintp d7, d3");
}

#[test]
fn frintx_1898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(14).H8, v6.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 98, 79, 6E", "frintx V(14).H8, v6.H8");
}

#[test]
fn frintx_1899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(5).H8, v23.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 9A, 79, 6E", "frintx V(5).H8, v23.H8");
}

#[test]
fn frintx_1900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(29).H4, V(10).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 99, 79, 2E", "frintx V(29).H4, V(10).H4");
}

#[test]
fn frintx_1901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(1).H4, V(0).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 98, 79, 2E", "frintx V(1).H4, V(0).H4");
}

#[test]
fn frintx_1902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx v29.S4, v0.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 98, 21, 6E", "frintx v29.S4, v0.S4");
}

#[test]
fn frintx_1903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx v24.S4, V(28).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 9B, 21, 6E", "frintx v24.S4, V(28).S4");
}

#[test]
fn frintx_1904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(24).S2, v23.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 9A, 21, 2E", "frintx V(24).S2, v23.S2");
}

#[test]
fn frintx_1905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(17).S2, V(16).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 9A, 21, 2E", "frintx V(17).S2, V(16).S2");
}

#[test]
fn frintx_1906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(16).D2, v27.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 9B, 61, 6E", "frintx V(16).D2, v27.D2");
}

#[test]
fn frintx_1907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx v28.D2, V(20).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 9A, 61, 6E", "frintx v28.D2, V(20).D2");
}

#[test]
fn frintx_1908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx H(8), h3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 40, E7, 1E", "frintx H(8), h3");
}

#[test]
fn frintx_1909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx h31, h4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 40, E7, 1E", "frintx h31, h4");
}

#[test]
fn frintx_1910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx S(15), S(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 43, 27, 1E", "frintx S(15), S(24)");
}

#[test]
fn frintx_1911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx s16, S(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 42, 27, 1E", "frintx s16, S(20)");
}

#[test]
fn frintx_1912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx d5, D(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 42, 67, 1E", "frintx d5, D(19)");
}

#[test]
fn frintx_1913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintx D(31), d3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 40, 67, 1E", "frintx D(31), d3");
}

#[test]
fn frintz_1914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v6.H8, v23.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 9A, F9, 4E", "frintz v6.H8, v23.H8");
}

#[test]
fn frintz_1915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(31).H8, v28.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 9B, F9, 4E", "frintz V(31).H8, v28.H8");
}

#[test]
fn frintz_1916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v23.H4, v11.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 99, F9, 0E", "frintz v23.H4, v11.H4");
}

#[test]
fn frintz_1917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(16).H4, V(1).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 98, F9, 0E", "frintz V(16).H4, V(1).H4");
}

#[test]
fn frintz_1918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v11.S4, v4.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 98, A1, 4E", "frintz v11.S4, v4.S4");
}

#[test]
fn frintz_1919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(6).S4, V(10).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 99, A1, 4E", "frintz V(6).S4, V(10).S4");
}

#[test]
fn frintz_1920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v11.S2, v17.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 9A, A1, 0E", "frintz v11.S2, v17.S2");
}

#[test]
fn frintz_1921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(30).S2, V(10).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 99, A1, 0E", "frintz V(30).S2, V(10).S2");
}

#[test]
fn frintz_1922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(21).D2, v3.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 98, E1, 4E", "frintz V(21).D2, v3.D2");
}

#[test]
fn frintz_1923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(3).D2, v9.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 99, E1, 4E", "frintz V(3).D2, v9.D2");
}

#[test]
fn frintz_1924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz h9, H(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, C2, E5, 1E", "frintz h9, H(19)");
}

#[test]
fn frintz_1925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz H(25), h29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, C3, E5, 1E", "frintz H(25), h29");
}

#[test]
fn frintz_1926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz S(9), s4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, C0, 25, 1E", "frintz S(9), s4");
}

#[test]
fn frintz_1927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz S(25), s11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, C1, 25, 1E", "frintz S(25), s11");
}

#[test]
fn frintz_1928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz d28, D(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, C2, 65, 1E", "frintz d28, D(20)");
}

#[test]
fn frintz_1929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frintz d17, D(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, C0, 65, 1E", "frintz d17, D(2)");
}

#[test]
fn frsqrte_1930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte H(30), h13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, D9, F9, 7E", "frsqrte H(30), h13");
}

#[test]
fn frsqrte_1931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte H(18), H(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, D8, F9, 7E", "frsqrte H(18), H(0)");
}

#[test]
fn frsqrte_1932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte s5, s22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, DA, A1, 7E", "frsqrte s5, s22");
}

#[test]
fn frsqrte_1933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte s1, S(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, DB, A1, 7E", "frsqrte s1, S(26)");
}

#[test]
fn frsqrte_1934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte D(1), d21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, DA, E1, 7E", "frsqrte D(1), d21");
}

#[test]
fn frsqrte_1935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte D(20), D(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, D9, E1, 7E", "frsqrte D(20), D(13)");
}

#[test]
fn frsqrte_1936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(31).H8, v22.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, DA, F9, 6E", "frsqrte V(31).H8, v22.H8");
}

#[test]
fn frsqrte_1937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte v14.H8, v17.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, DA, F9, 6E", "frsqrte v14.H8, v17.H8");
}

#[test]
fn frsqrte_1938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte v12.H4, v9.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, D9, F9, 2E", "frsqrte v12.H4, v9.H4");
}

#[test]
fn frsqrte_1939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte v1.H4, v3.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, D8, F9, 2E", "frsqrte v1.H4, v3.H4");
}

#[test]
fn frsqrte_1940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(11).S4, V(20).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, DA, A1, 6E", "frsqrte V(11).S4, V(20).S4");
}

#[test]
fn frsqrte_1941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte v31.S4, V(20).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, DA, A1, 6E", "frsqrte v31.S4, V(20).S4");
}

#[test]
fn frsqrte_1942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte v6.S2, V(2).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, D8, A1, 2E", "frsqrte v6.S2, V(2).S2");
}

#[test]
fn frsqrte_1943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(15).S2, V(6).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, D8, A1, 2E", "frsqrte V(15).S2, V(6).S2");
}

#[test]
fn frsqrte_1944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(29).D2, V(1).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, D8, E1, 6E", "frsqrte V(29).D2, V(1).D2");
}

#[test]
fn frsqrte_1945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(3).D2, v28.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, DB, E1, 6E", "frsqrte V(3).D2, v28.D2");
}

#[test]
fn frsqrts_1946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts H(17), H(1), h2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 3C, C2, 5E", "frsqrts H(17), H(1), h2");
}

#[test]
fn frsqrts_1947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts H(21), h22, H(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 3E, DA, 5E", "frsqrts H(21), h22, H(26)");
}

#[test]
fn frsqrts_1948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts s23, S(10), s7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, FD, A7, 5E", "frsqrts s23, S(10), s7");
}

#[test]
fn frsqrts_1949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts s25, s31, s10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, FF, AA, 5E", "frsqrts s25, s31, s10");
}

#[test]
fn frsqrts_1950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts D(21), D(30), d2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, FF, E2, 5E", "frsqrts D(21), D(30), d2");
}

#[test]
fn frsqrts_1951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts d2, d10, d3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, FD, E3, 5E", "frsqrts d2, d10, d3");
}

#[test]
fn frsqrts_1952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v8.H8, v12.H8, v15.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 3D, CF, 4E", "frsqrts v8.H8, v12.H8, v15.H8");
}

#[test]
fn frsqrts_1953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(29).H8, v26.H8, V(3).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 3F, C3, 4E", "frsqrts V(29).H8, v26.H8, V(3).H8");
}

#[test]
fn frsqrts_1954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v12.H4, v22.H4, V(29).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 3E, DD, 0E", "frsqrts v12.H4, v22.H4, V(29).H4");
}

#[test]
fn frsqrts_1955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(19).H4, V(11).H4, V(3).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 3D, C3, 0E", "frsqrts V(19).H4, V(11).H4, V(3).H4");
}

#[test]
fn frsqrts_1956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v0.S4, v10.S4, v22.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, FD, B6, 4E", "frsqrts v0.S4, v10.S4, v22.S4");
}

#[test]
fn frsqrts_1957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(24).S4, v31.S4, V(1).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, FF, A1, 4E", "frsqrts V(24).S4, v31.S4, V(1).S4");
}

#[test]
fn frsqrts_1958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v16.S2, V(31).S2, v17.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, FF, B1, 0E", "frsqrts v16.S2, V(31).S2, v17.S2");
}

#[test]
fn frsqrts_1959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v24.S2, V(22).S2, v0.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, FE, A0, 0E", "frsqrts v24.S2, V(22).S2, v0.S2");
}

#[test]
fn frsqrts_1960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(7).D2, V(0).D2, V(30).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, FC, FE, 4E", "frsqrts V(7).D2, V(0).D2, V(30).D2");
}

#[test]
fn frsqrts_1961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v3.D2, V(16).D2, V(11).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, FE, EB, 4E", "frsqrts v3.D2, V(16).D2, V(11).D2");
}

#[test]
fn fsqrt_1962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v7.H8, V(1).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, F8, F9, 6E", "fsqrt v7.H8, V(1).H8");
}

#[test]
fn fsqrt_1963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt V(3).H8, V(21).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, FA, F9, 6E", "fsqrt V(3).H8, V(21).H8");
}

#[test]
fn fsqrt_1964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v21.H4, V(24).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, FB, F9, 2E", "fsqrt v21.H4, V(24).H4");
}

#[test]
fn fsqrt_1965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v22.H4, V(16).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, FA, F9, 2E", "fsqrt v22.H4, V(16).H4");
}

#[test]
fn fsqrt_1966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt V(23).S4, v14.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, F9, A1, 6E", "fsqrt V(23).S4, v14.S4");
}

#[test]
fn fsqrt_1967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v14.S4, V(14).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, F9, A1, 6E", "fsqrt v14.S4, V(14).S4");
}

#[test]
fn fsqrt_1968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v6.S2, V(29).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, FB, A1, 2E", "fsqrt v6.S2, V(29).S2");
}

#[test]
fn fsqrt_1969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt V(10).S2, V(12).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, F9, A1, 2E", "fsqrt V(10).S2, V(12).S2");
}

#[test]
fn fsqrt_1970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt V(31).D2, v30.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, FB, E1, 6E", "fsqrt V(31).D2, v30.D2");
}

#[test]
fn fsqrt_1971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v14.D2, v20.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, FA, E1, 6E", "fsqrt v14.D2, v20.D2");
}

#[test]
fn fsqrt_1972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt h23, h18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, C2, E1, 1E", "fsqrt h23, h18");
}

#[test]
fn fsqrt_1973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt h7, H(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, C2, E1, 1E", "fsqrt h7, H(20)");
}

#[test]
fn fsqrt_1974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt s13, s22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, C2, 21, 1E", "fsqrt s13, s22");
}

#[test]
fn fsqrt_1975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt S(6), s24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, C3, 21, 1E", "fsqrt S(6), s24");
}

#[test]
fn fsqrt_1976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt D(24), d8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, C1, 61, 1E", "fsqrt D(24), d8");
}

#[test]
fn fsqrt_1977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt d29, d8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, C1, 61, 1E", "fsqrt d29, d8");
}

#[test]
fn fsub_1978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v21.H8, V(2).H8, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 14, DD, 4E", "fsub v21.H8, V(2).H8, v29.H8");
}

#[test]
fn fsub_1979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v19.H8, V(26).H8, V(5).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, C5, 4E", "fsub v19.H8, V(26).H8, V(5).H8");
}

#[test]
fn fsub_1980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(7).H4, V(15).H4, v13.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 15, CD, 0E", "fsub V(7).H4, V(15).H4, v13.H4");
}

#[test]
fn fsub_1981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v8.H4, v14.H4, V(24).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 15, D8, 0E", "fsub v8.H4, v14.H4, V(24).H4");
}

#[test]
fn fsub_1982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v19.S4, V(23).S4, v23.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, D6, B7, 4E", "fsub v19.S4, V(23).S4, v23.S4");
}

#[test]
fn fsub_1983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(13).S4, v11.S4, v8.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, D5, A8, 4E", "fsub V(13).S4, v11.S4, v8.S4");
}

#[test]
fn fsub_1984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v18.S2, V(9).S2, V(15).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, D5, AF, 0E", "fsub v18.S2, V(9).S2, V(15).S2");
}

#[test]
fn fsub_1985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v20.S2, V(26).S2, v15.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, D7, AF, 0E", "fsub v20.S2, V(26).S2, v15.S2");
}

#[test]
fn fsub_1986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(16).D2, V(20).D2, V(8).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, D6, E8, 4E", "fsub V(16).D2, V(20).D2, V(8).D2");
}

#[test]
fn fsub_1987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v17.D2, V(4).D2, V(20).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, D4, F4, 4E", "fsub v17.D2, V(4).D2, V(20).D2");
}

#[test]
fn fsub_1988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub H(1), h15, h19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 39, F3, 1E", "fsub H(1), h15, h19");
}

#[test]
fn fsub_1989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub H(20), h12, h10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 39, EA, 1E", "fsub H(20), h12, h10");
}

#[test]
fn fsub_1990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub S(18), S(17), S(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 3A, 32, 1E", "fsub S(18), S(17), S(18)");
}

#[test]
fn fsub_1991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub s31, s17, s30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 3A, 3E, 1E", "fsub s31, s17, s30");
}

#[test]
fn fsub_1992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub D(4), d24, d23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 3B, 77, 1E", "fsub D(4), d24, d23");
}

#[test]
fn fsub_1993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fsub d23, D(25), D(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 3B, 65, 1E", "fsub d23, D(25), D(5)");
}

#[test]
fn hint_1994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; hint 95
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 2B, 03, D5", "hint 95");
}

#[test]
fn hint_1995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; hint 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 21, 03, D5", "hint 10");
}

#[test]
fn hlt_1996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; hlt 6958
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 65, 43, D4", "hlt 6958");
}

#[test]
fn hlt_1997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; hlt 21189
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 58, 4A, D4", "hlt 21189");
}

#[test]
fn hvc_1998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; hvc 54074
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 67, 1A, D4", "hvc 54074");
}

#[test]
fn hvc_1999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; hvc 44394
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, AD, 15, D4", "hvc 44394");
}

#[test]
fn ic_2000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ic ivau, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 75, 0B, D5", "ic ivau, x25");
}

#[test]
fn ic_2001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ic ivau, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 75, 0B, D5", "ic ivau, x18");
}

#[test]
fn ic_2002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ic iallu
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 75, 08, D5", "ic iallu");
}

#[test]
fn ic_2003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ic iallu
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 75, 08, D5", "ic iallu");
}

#[test]
fn ins_2004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v13.B[6], V(28).B[15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 7F, 0D, 6E", "ins v13.B[6], V(28).B[15]");
}

#[test]
fn ins_2005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v6.B[6], v20.B[8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 46, 0D, 6E", "ins v6.B[6], v20.B[8]");
}

#[test]
fn ins_2006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v12.H[4], v0.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 74, 12, 6E", "ins v12.H[4], v0.H[7]");
}

#[test]
fn ins_2007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(3).H[4], v8.H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 35, 12, 6E", "ins V(3).H[4], v8.H[3]");
}

#[test]
fn ins_2008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v7.S[2], v31.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 67, 14, 6E", "ins v7.S[2], v31.S[3]");
}

#[test]
fn ins_2009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(29).S[1], v6.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 64, 0C, 6E", "ins V(29).S[1], v6.S[3]");
}

#[test]
fn ins_2010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(3).D[0], v5.D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 04, 08, 6E", "ins V(3).D[0], v5.D[0]");
}

#[test]
fn ins_2011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(23).D[0], V(31).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 47, 08, 6E", "ins V(23).D[0], V(31).D[1]");
}

#[test]
fn ins_2012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(18).B[2], w25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 1F, 05, 4E", "ins V(18).B[2], w25");
}

#[test]
fn ins_2013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(4).B[1], w14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 1D, 03, 4E", "ins V(4).B[1], w14");
}

#[test]
fn ins_2014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(5).H[4], W(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 1C, 12, 4E", "ins V(5).H[4], W(6)");
}

#[test]
fn ins_2015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v21.H[2], w4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 1C, 0A, 4E", "ins v21.H[2], w4");
}

#[test]
fn ins_2016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(3).S[1], W(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 1F, 0C, 4E", "ins V(3).S[1], W(25)");
}

#[test]
fn ins_2017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v16.S[3], W(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 1F, 1C, 4E", "ins v16.S[3], W(25)");
}

#[test]
fn ins_2018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins v3.D[0], X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 1F, 08, 4E", "ins v3.D[0], X(30)");
}

#[test]
fn ins_2019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ins V(19).D[0], x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 1C, 08, 4E", "ins V(19).D[0], x3");
}

#[test]
fn isb_2020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; isb sy
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 3F, 03, D5", "isb sy");
}

#[test]
fn isb_2021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; isb sy
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 3F, 03, D5", "isb sy");
}

#[test]
fn isb_2022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; isb 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 31, 03, D5", "isb 1");
}

#[test]
fn isb_2023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; isb 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 33, 03, D5", "isb 3");
}

#[test]
fn isb_2024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; isb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 3F, 03, D5", "isb");
}

#[test]
fn isb_2025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; isb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 3F, 03, D5", "isb");
}

#[test]
fn ld1_2026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(1).B16 * 1}, [XSP(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 73, 40, 4C", "ld1 {{V(1).B16 * 1}}, [XSP(31)]");
}

#[test]
fn ld1_2027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(8).B16 * 1}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 73, 40, 4C", "ld1 {{V(8).B16 * 1}}, [x27]");
}

#[test]
fn ld1_2028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(28).B8 * 1}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 72, 40, 0C", "ld1 {{V(28).B8 * 1}}, [x19]");
}

#[test]
fn ld1_2029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v26.B8 * 1}, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 70, 40, 0C", "ld1 {{v26.B8 * 1}}, [x2]");
}

#[test]
fn ld1_2030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).H8 * 1}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 75, 40, 4C", "ld1 {{V(6).H8 * 1}}, [x11]");
}

#[test]
fn ld1_2031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(21).H8 * 1}, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 74, 40, 4C", "ld1 {{V(21).H8 * 1}}, [x3]");
}

#[test]
fn ld1_2032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(18).H4 * 1}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 76, 40, 0C", "ld1 {{V(18).H4 * 1}}, [x19]");
}

#[test]
fn ld1_2033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v10.H4 * 1}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 76, 40, 0C", "ld1 {{v10.H4 * 1}}, [x19]");
}

#[test]
fn ld1_2034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(11).S4 * 1}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 7B, 40, 4C", "ld1 {{V(11).S4 * 1}}, [x29]");
}

#[test]
fn ld1_2035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).S4 * 1}, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 7B, 40, 4C", "ld1 {{V(2).S4 * 1}}, [x25]");
}

#[test]
fn ld1_2036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).S2 * 1}, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 78, 40, 0C", "ld1 {{V(23).S2 * 1}}, [x1]");
}

#[test]
fn ld1_2037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v5.S2 * 1}, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 79, 40, 0C", "ld1 {{v5.S2 * 1}}, [x10]");
}

#[test]
fn ld1_2038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(21).D2 * 1}, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 7E, 40, 4C", "ld1 {{V(21).D2 * 1}}, [x20]");
}

#[test]
fn ld1_2039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.D2 * 1}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 7E, 40, 4C", "ld1 {{v16.D2 * 1}}, [x16]");
}

#[test]
fn ld1_2040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.D1 * 1}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 7D, 40, 0C", "ld1 {{v9.D1 * 1}}, [x12]");
}

#[test]
fn ld1_2041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(7).D1 * 1}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 7D, 40, 0C", "ld1 {{V(7).D1 * 1}}, [x9]");
}

#[test]
fn ld1_2042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(5).B16 * 2}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, A0, 40, 4C", "ld1 {{V(5).B16 * 2}}, [x6]");
}

#[test]
fn ld1_2043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(26).B16 * 2}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, A2, 40, 4C", "ld1 {{V(26).B16 * 2}}, [x16]");
}

#[test]
fn ld1_2044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).B8 * 2}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, A0, 40, 0C", "ld1 {{V(3).B8 * 2}}, [x0]");
}

#[test]
fn ld1_2045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(13).B8 * 2}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, A0, 40, 0C", "ld1 {{V(13).B8 * 2}}, [x6]");
}

#[test]
fn ld1_2046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.H8 * 2}, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, A7, 40, 4C", "ld1 {{v19.H8 * 2}}, [x28]");
}

#[test]
fn ld1_2047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.H8 * 2}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, A6, 40, 4C", "ld1 {{v20.H8 * 2}}, [x18]");
}

#[test]
fn ld1_2048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).H4 * 2}, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, A4, 40, 0C", "ld1 {{V(2).H4 * 2}}, [x7]");
}

#[test]
fn ld1_2049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v4.H4 * 2}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, A4, 40, 0C", "ld1 {{v4.H4 * 2}}, [x6]");
}

#[test]
fn ld1_2050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v7.S4 * 2}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, A9, 40, 4C", "ld1 {{v7.S4 * 2}}, [x14]");
}

#[test]
fn ld1_2051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(21).S4 * 2}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, AB, 40, 4C", "ld1 {{V(21).S4 * 2}}, [x30]");
}

#[test]
fn ld1_2052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).S2 * 2}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, AA, 40, 0C", "ld1 {{V(3).S2 * 2}}, [x16]");
}

#[test]
fn ld1_2053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).S2 * 2}, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, A8, 40, 0C", "ld1 {{V(14).S2 * 2}}, [x5]");
}

#[test]
fn ld1_2054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v1.D2 * 2}, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, AE, 40, 4C", "ld1 {{v1.D2 * 2}}, [x21]");
}

#[test]
fn ld1_2055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v4.D2 * 2}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, AD, 40, 4C", "ld1 {{v4.D2 * 2}}, [x9]");
}

#[test]
fn ld1_2056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v17.D1 * 2}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, AC, 40, 0C", "ld1 {{v17.D1 * 2}}, [x0]");
}

#[test]
fn ld1_2057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v17.D1 * 2}, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, AF, 40, 0C", "ld1 {{v17.D1 * 2}}, [x26]");
}

#[test]
fn ld1_2058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(8).B16 * 3}, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 60, 40, 4C", "ld1 {{V(8).B16 * 3}}, [x7]");
}

#[test]
fn ld1_2059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v6.B16 * 3}, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 60, 40, 4C", "ld1 {{v6.B16 * 3}}, [x1]");
}

#[test]
fn ld1_2060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v8.B8 * 3}, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 61, 40, 0C", "ld1 {{v8.B8 * 3}}, [x10]");
}

#[test]
fn ld1_2061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(18).B8 * 3}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 62, 40, 0C", "ld1 {{V(18).B8 * 3}}, [x18]");
}

#[test]
fn ld1_2062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.H8 * 3}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 66, 40, 4C", "ld1 {{v15.H8 * 3}}, [x18]");
}

#[test]
fn ld1_2063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(4).H8 * 3}, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 67, 40, 4C", "ld1 {{V(4).H8 * 3}}, [x24]");
}

#[test]
fn ld1_2064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(16).H4 * 3}, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 67, 40, 0C", "ld1 {{V(16).H4 * 3}}, [x26]");
}

#[test]
fn ld1_2065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(9).H4 * 3}, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 65, 40, 0C", "ld1 {{V(9).H4 * 3}}, [x8]");
}

#[test]
fn ld1_2066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.S4 * 3}, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 68, 40, 4C", "ld1 {{v16.S4 * 3}}, [x2]");
}

#[test]
fn ld1_2067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v21.S4 * 3}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 69, 40, 4C", "ld1 {{v21.S4 * 3}}, [x11]");
}

#[test]
fn ld1_2068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.S2 * 3}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 6A, 40, 0C", "ld1 {{v15.S2 * 3}}, [x19]");
}

#[test]
fn ld1_2069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).S2 * 3}, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 68, 40, 0C", "ld1 {{V(20).S2 * 3}}, [x7]");
}

#[test]
fn ld1_2070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v2.D2 * 3}, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 6C, 40, 4C", "ld1 {{v2.D2 * 3}}, [x5]");
}

#[test]
fn ld1_2071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(24).D2 * 3}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 6E, 40, 4C", "ld1 {{V(24).D2 * 3}}, [x19]");
}

#[test]
fn ld1_2072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).D1 * 3}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 6E, 40, 0C", "ld1 {{V(31).D1 * 3}}, [x16]");
}

#[test]
fn ld1_2073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.D1 * 3}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 6D, 40, 0C", "ld1 {{v9.D1 * 3}}, [x11]");
}

#[test]
fn ld1_2074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).B16 * 4}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 21, 40, 4C", "ld1 {{V(31).B16 * 4}}, [x12]");
}

#[test]
fn ld1_2075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(11).B16 * 4}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 23, 40, 4C", "ld1 {{V(11).B16 * 4}}, [x30]");
}

#[test]
fn ld1_2076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v23.B8 * 4}, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 22, 40, 0C", "ld1 {{v23.B8 * 4}}, [x17]");
}

#[test]
fn ld1_2077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v11.B8 * 4}, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 21, 40, 0C", "ld1 {{v11.B8 * 4}}, [x13]");
}

#[test]
fn ld1_2078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).H8 * 4}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 27, 40, 4C", "ld1 {{V(3).H8 * 4}}, [x27]");
}

#[test]
fn ld1_2079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(7).H8 * 4}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 27, 40, 4C", "ld1 {{V(7).H8 * 4}}, [x30]");
}

#[test]
fn ld1_2080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v24.H4 * 4}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 24, 40, 0C", "ld1 {{v24.H4 * 4}}, [x0]");
}

#[test]
fn ld1_2081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(10).H4 * 4}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 25, 40, 0C", "ld1 {{V(10).H4 * 4}}, [x14]");
}

#[test]
fn ld1_2082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v11.S4 * 4}, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 28, 40, 4C", "ld1 {{v11.S4 * 4}}, [x2]");
}

#[test]
fn ld1_2083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).S4 * 4}, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 28, 40, 4C", "ld1 {{V(6).S4 * 4}}, [x7]");
}

#[test]
fn ld1_2084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).S2 * 4}, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 29, 40, 0C", "ld1 {{V(2).S2 * 4}}, [x13]");
}

#[test]
fn ld1_2085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).S2 * 4}, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 2A, 40, 0C", "ld1 {{V(31).S2 * 4}}, [x23]");
}

#[test]
fn ld1_2086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.D2 * 4}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 2E, 40, 4C", "ld1 {{v28.D2 * 4}}, [x19]");
}

#[test]
fn ld1_2087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(9).D2 * 4}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 2F, 40, 4C", "ld1 {{V(9).D2 * 4}}, [x29]");
}

#[test]
fn ld1_2088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v29.D1 * 4}, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 2E, 40, 0C", "ld1 {{v29.D1 * 4}}, [x21]");
}

#[test]
fn ld1_2089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v27.D1 * 4}, [XSP(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 2F, 40, 0C", "ld1 {{v27.D1 * 4}}, [XSP(31)]");
}

#[test]
fn ld1_2090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(19).B8 * 1}, [x2], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, DF, 0C", "ld1 {{V(19).B8 * 1}}, [x2], 8");
}

#[test]
fn ld1_2091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(16).B8 * 1}, [x9], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 71, DF, 0C", "ld1 {{V(16).B8 * 1}}, [x9], 8");
}

#[test]
fn ld1_2092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(13).H4 * 1}, [x2], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 74, DF, 0C", "ld1 {{V(13).H4 * 1}}, [x2], 8");
}

#[test]
fn ld1_2093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.H4 * 1}, [x14], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 75, DF, 0C", "ld1 {{v22.H4 * 1}}, [x14], 8");
}

#[test]
fn ld1_2094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v13.S2 * 1}, [x0], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 78, DF, 0C", "ld1 {{v13.S2 * 1}}, [x0], 8");
}

#[test]
fn ld1_2095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).S2 * 1}, [x28], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 7B, DF, 0C", "ld1 {{V(14).S2 * 1}}, [x28], 8");
}

#[test]
fn ld1_2096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(27).D1 * 1}, [x5], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 7C, DF, 0C", "ld1 {{V(27).D1 * 1}}, [x5], 8");
}

#[test]
fn ld1_2097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).D1 * 1}, [x15], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 7D, DF, 0C", "ld1 {{V(23).D1 * 1}}, [x15], 8");
}

#[test]
fn ld1_2098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.B16 * 1}, [x16], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 72, DF, 4C", "ld1 {{v19.B16 * 1}}, [x16], 16");
}

#[test]
fn ld1_2099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).B16 * 1}, [x23], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 72, DF, 4C", "ld1 {{V(3).B16 * 1}}, [x23], 16");
}

#[test]
fn ld1_2100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(11).H8 * 1}, [x16], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 76, DF, 4C", "ld1 {{V(11).H8 * 1}}, [x16], 16");
}

#[test]
fn ld1_2101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.H8 * 1}, [x13], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 75, DF, 4C", "ld1 {{v15.H8 * 1}}, [x13], 16");
}

#[test]
fn ld1_2102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v8.S4 * 1}, [x30], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 7B, DF, 4C", "ld1 {{v8.S4 * 1}}, [x30], 16");
}

#[test]
fn ld1_2103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).S4 * 1}, [x27], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 7B, DF, 4C", "ld1 {{V(23).S4 * 1}}, [x27], 16");
}

#[test]
fn ld1_2104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v14.D2 * 1}, [x1], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 7C, DF, 4C", "ld1 {{v14.D2 * 1}}, [x1], 16");
}

#[test]
fn ld1_2105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).D2 * 1}, [x26], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 7F, DF, 4C", "ld1 {{V(2).D2 * 1}}, [x26], 16");
}

#[test]
fn ld1_2106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.B16 * 1}, [x2], x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 70, C2, 4C", "ld1 {{v9.B16 * 1}}, [x2], x2");
}

#[test]
fn ld1_2107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.B16 * 1}, [x0], X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 70, CD, 4C", "ld1 {{v28.B16 * 1}}, [x0], X(13)");
}

#[test]
fn ld1_2108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).B8 * 1}, [x16], X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 72, DA, 0C", "ld1 {{V(12).B8 * 1}}, [x16], X(26)");
}

#[test]
fn ld1_2109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.B8 * 1}, [x8], X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 71, C1, 0C", "ld1 {{v16.B8 * 1}}, [x8], X(1)");
}

#[test]
fn ld1_2110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.H8 * 1}, [x9], x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 75, DA, 4C", "ld1 {{v15.H8 * 1}}, [x9], x26");
}

#[test]
fn ld1_2111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).H8 * 1}, [x9], x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 75, C3, 4C", "ld1 {{V(6).H8 * 1}}, [x9], x3");
}

#[test]
fn ld1_2112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(7).H4 * 1}, [x28], X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 77, D0, 0C", "ld1 {{V(7).H4 * 1}}, [x28], X(16)");
}

#[test]
fn ld1_2113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v7.H4 * 1}, [x0], X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 74, C0, 0C", "ld1 {{v7.H4 * 1}}, [x0], X(0)");
}

#[test]
fn ld1_2114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v0.S4 * 1}, [x16], X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 7A, DB, 4C", "ld1 {{v0.S4 * 1}}, [x16], X(27)");
}

#[test]
fn ld1_2115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v2.S4 * 1}, [x24], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 7B, D9, 4C", "ld1 {{v2.S4 * 1}}, [x24], x25");
}

#[test]
fn ld1_2116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).S2 * 1}, [x30], x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 7B, DA, 0C", "ld1 {{V(31).S2 * 1}}, [x30], x26");
}

#[test]
fn ld1_2117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v30.S2 * 1}, [x6], X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 78, DA, 0C", "ld1 {{v30.S2 * 1}}, [x6], X(26)");
}

#[test]
fn ld1_2118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v21.D2 * 1}, [x13], x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 7D, D2, 4C", "ld1 {{v21.D2 * 1}}, [x13], x18");
}

#[test]
fn ld1_2119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v2.D2 * 1}, [x2], X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 7C, C4, 4C", "ld1 {{v2.D2 * 1}}, [x2], X(4)");
}

#[test]
fn ld1_2120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(16).D1 * 1}, [x23], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 7E, D9, 0C", "ld1 {{V(16).D1 * 1}}, [x23], x25");
}

#[test]
fn ld1_2121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.D1 * 1}, [x6], x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, C5, 0C", "ld1 {{v19.D1 * 1}}, [x6], x5");
}

#[test]
fn ld1_2122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(31).B8 * 2}, [x13], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, A1, DF, 0C", "ld1 {{V(31).B8 * 2}}, [x13], 16");
}

#[test]
fn ld1_2123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(24).B8 * 2}, [x11], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, A1, DF, 0C", "ld1 {{V(24).B8 * 2}}, [x11], 16");
}

#[test]
fn ld1_2124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.H4 * 2}, [x1], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A4, DF, 0C", "ld1 {{v15.H4 * 2}}, [x1], 16");
}

#[test]
fn ld1_2125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(10).H4 * 2}, [x5], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, A4, DF, 0C", "ld1 {{V(10).H4 * 2}}, [x5], 16");
}

#[test]
fn ld1_2126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v2.S2 * 2}, [x8], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, A9, DF, 0C", "ld1 {{v2.S2 * 2}}, [x8], 16");
}

#[test]
fn ld1_2127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v11.S2 * 2}, [x14], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, A9, DF, 0C", "ld1 {{v11.S2 * 2}}, [x14], 16");
}

#[test]
fn ld1_2128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).D1 * 2}, [x4], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, AC, DF, 0C", "ld1 {{V(20).D1 * 2}}, [x4], 16");
}

#[test]
fn ld1_2129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(28).D1 * 2}, [x17], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, AE, DF, 0C", "ld1 {{V(28).D1 * 2}}, [x17], 16");
}

#[test]
fn ld1_2130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).B16 * 2}, [x30], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, A3, DF, 4C", "ld1 {{V(23).B16 * 2}}, [x30], 32");
}

#[test]
fn ld1_2131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v23.B16 * 2}, [x29], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, A3, DF, 4C", "ld1 {{v23.B16 * 2}}, [x29], 32");
}

#[test]
fn ld1_2132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).H8 * 2}, [x10], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, A5, DF, 4C", "ld1 {{V(12).H8 * 2}}, [x10], 32");
}

#[test]
fn ld1_2133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).H8 * 2}, [x9], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, A5, DF, 4C", "ld1 {{V(6).H8 * 2}}, [x9], 32");
}

#[test]
fn ld1_2134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v8.S4 * 2}, [x27], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, AB, DF, 4C", "ld1 {{v8.S4 * 2}}, [x27], 32");
}

#[test]
fn ld1_2135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v19.S4 * 2}, [x30], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, DF, 4C", "ld1 {{v19.S4 * 2}}, [x30], 32");
}

#[test]
fn ld1_2136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(13).D2 * 2}, [x6], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, AC, DF, 4C", "ld1 {{V(13).D2 * 2}}, [x6], 32");
}

#[test]
fn ld1_2137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.D2 * 2}, [x24], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, AF, DF, 4C", "ld1 {{v22.D2 * 2}}, [x24], 32");
}

#[test]
fn ld1_2138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v17.B16 * 2}, [x27], X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, A3, C3, 4C", "ld1 {{v17.B16 * 2}}, [x27], X(3)");
}

#[test]
fn ld1_2139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(17).B16 * 2}, [x17], X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, A2, CF, 4C", "ld1 {{V(17).B16 * 2}}, [x17], X(15)");
}

#[test]
fn ld1_2140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(17).B8 * 2}, [x29], X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, A3, CD, 0C", "ld1 {{V(17).B8 * 2}}, [x29], X(13)");
}

#[test]
fn ld1_2141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.B8 * 2}, [x2], X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, A0, D3, 0C", "ld1 {{v22.B8 * 2}}, [x2], X(19)");
}

#[test]
fn ld1_2142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v12.H8 * 2}, [x22], x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, A6, DD, 4C", "ld1 {{v12.H8 * 2}}, [x22], x29");
}

#[test]
fn ld1_2143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(22).H8 * 2}, [XSP(31)], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, A7, D9, 4C", "ld1 {{V(22).H8 * 2}}, [XSP(31)], x25");
}

#[test]
fn ld1_2144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v21.H4 * 2}, [x2], x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, A4, D1, 0C", "ld1 {{v21.H4 * 2}}, [x2], x17");
}

#[test]
fn ld1_2145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).H4 * 2}, [x10], x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, A5, C9, 0C", "ld1 {{V(20).H4 * 2}}, [x10], x9");
}

#[test]
fn ld1_2146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(27).S4 * 2}, [x5], X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, A8, DE, 4C", "ld1 {{V(27).S4 * 2}}, [x5], X(30)");
}

#[test]
fn ld1_2147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v25.S4 * 2}, [x17], X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, AA, C1, 4C", "ld1 {{v25.S4 * 2}}, [x17], X(1)");
}

#[test]
fn ld1_2148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).S2 * 2}, [x27], X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, AB, C7, 0C", "ld1 {{V(14).S2 * 2}}, [x27], X(7)");
}

#[test]
fn ld1_2149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v0.S2 * 2}, [x8], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, A9, D4, 0C", "ld1 {{v0.S2 * 2}}, [x8], x20");
}

#[test]
fn ld1_2150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).D2 * 2}, [x3], X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, AC, CA, 4C", "ld1 {{V(6).D2 * 2}}, [x3], X(10)");
}

#[test]
fn ld1_2151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).D2 * 2}, [x12], x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, AD, DD, 4C", "ld1 {{V(23).D2 * 2}}, [x12], x29");
}

#[test]
fn ld1_2152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v17.D1 * 2}, [x6], x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, AC, C6, 0C", "ld1 {{v17.D1 * 2}}, [x6], x6");
}

#[test]
fn ld1_2153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(26).D1 * 2}, [x2], X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, AC, C1, 0C", "ld1 {{V(26).D1 * 2}}, [x2], X(1)");
}

#[test]
fn ld1_2154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(16).B8 * 3}, [XSP(31)], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 63, DF, 0C", "ld1 {{V(16).B8 * 3}}, [XSP(31)], 24");
}

#[test]
fn ld1_2155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.B8 * 3}, [x29], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 63, DF, 0C", "ld1 {{v15.B8 * 3}}, [x29], 24");
}

#[test]
fn ld1_2156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v12.H4 * 3}, [x18], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 66, DF, 0C", "ld1 {{v12.H4 * 3}}, [x18], 24");
}

#[test]
fn ld1_2157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(1).H4 * 3}, [x28], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67, DF, 0C", "ld1 {{V(1).H4 * 3}}, [x28], 24");
}

#[test]
fn ld1_2158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(18).S2 * 3}, [x6], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 68, DF, 0C", "ld1 {{V(18).S2 * 3}}, [x6], 24");
}

#[test]
fn ld1_2159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.S2 * 3}, [x17], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 6A, DF, 0C", "ld1 {{v28.S2 * 3}}, [x17], 24");
}

#[test]
fn ld1_2160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v28.D1 * 3}, [x9], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 6D, DF, 0C", "ld1 {{v28.D1 * 3}}, [x9], 24");
}

#[test]
fn ld1_2161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v5.D1 * 3}, [x25], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 6F, DF, 0C", "ld1 {{v5.D1 * 3}}, [x25], 24");
}

#[test]
fn ld1_2162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v3.B16 * 3}, [x17], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 62, DF, 4C", "ld1 {{v3.B16 * 3}}, [x17], 48");
}

#[test]
fn ld1_2163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(11).B16 * 3}, [x27], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 63, DF, 4C", "ld1 {{V(11).B16 * 3}}, [x27], 48");
}

#[test]
fn ld1_2164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v3.H8 * 3}, [x16], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 66, DF, 4C", "ld1 {{v3.H8 * 3}}, [x16], 48");
}

#[test]
fn ld1_2165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).H8 * 3}, [x25], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 67, DF, 4C", "ld1 {{V(12).H8 * 3}}, [x25], 48");
}

#[test]
fn ld1_2166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(27).S4 * 3}, [x4], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 68, DF, 4C", "ld1 {{V(27).S4 * 3}}, [x4], 48");
}

#[test]
fn ld1_2167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(19).S4 * 3}, [x6], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 68, DF, 4C", "ld1 {{V(19).S4 * 3}}, [x6], 48");
}

#[test]
fn ld1_2168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(24).D2 * 3}, [x4], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 6C, DF, 4C", "ld1 {{V(24).D2 * 3}}, [x4], 48");
}

#[test]
fn ld1_2169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(7).D2 * 3}, [x6], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 6C, DF, 4C", "ld1 {{V(7).D2 * 3}}, [x6], 48");
}

#[test]
fn ld1_2170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(21).B16 * 3}, [x15], x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 61, C0, 4C", "ld1 {{V(21).B16 * 3}}, [x15], x0");
}

#[test]
fn ld1_2171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v17.B16 * 3}, [x26], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 63, D7, 4C", "ld1 {{v17.B16 * 3}}, [x26], x23");
}

#[test]
fn ld1_2172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v15.B8 * 3}, [x0], X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 60, C0, 0C", "ld1 {{v15.B8 * 3}}, [x0], X(0)");
}

#[test]
fn ld1_2173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v25.B8 * 3}, [x15], x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 61, D6, 0C", "ld1 {{v25.B8 * 3}}, [x15], x22");
}

#[test]
fn ld1_2174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).H8 * 3}, [x12], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 65, CF, 4C", "ld1 {{V(2).H8 * 3}}, [x12], x15");
}

#[test]
fn ld1_2175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v31.H8 * 3}, [x4], x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 64, CD, 4C", "ld1 {{v31.H8 * 3}}, [x4], x13");
}

#[test]
fn ld1_2176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(29).H4 * 3}, [x20], X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 66, CB, 0C", "ld1 {{V(29).H4 * 3}}, [x20], X(11)");
}

#[test]
fn ld1_2177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(18).H4 * 3}, [x21], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 66, D4, 0C", "ld1 {{V(18).H4 * 3}}, [x21], x20");
}

#[test]
fn ld1_2178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).S4 * 3}, [x17], x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 6A, C7, 4C", "ld1 {{V(12).S4 * 3}}, [x17], x7");
}

#[test]
fn ld1_2179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v8.S4 * 3}, [x27], X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 6B, C6, 4C", "ld1 {{v8.S4 * 3}}, [x27], X(6)");
}

#[test]
fn ld1_2180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v30.S2 * 3}, [x27], X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 6B, C6, 0C", "ld1 {{v30.S2 * 3}}, [x27], X(6)");
}

#[test]
fn ld1_2181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(1).S2 * 3}, [x20], X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 6A, C2, 0C", "ld1 {{V(1).S2 * 3}}, [x20], X(2)");
}

#[test]
fn ld1_2182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.D2 * 3}, [x23], X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 6E, C7, 4C", "ld1 {{v20.D2 * 3}}, [x23], X(7)");
}

#[test]
fn ld1_2183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(28).D2 * 3}, [x21], x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 6E, CD, 4C", "ld1 {{V(28).D2 * 3}}, [x21], x13");
}

#[test]
fn ld1_2184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).D1 * 3}, [x7], X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 6C, D9, 0C", "ld1 {{V(20).D1 * 3}}, [x7], X(25)");
}

#[test]
fn ld1_2185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v5.D1 * 3}, [x22], x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 6E, D2, 0C", "ld1 {{v5.D1 * 3}}, [x22], x18");
}

#[test]
fn ld1_2186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.B8 * 4}, [x30], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 23, DF, 0C", "ld1 {{v20.B8 * 4}}, [x30], 32");
}

#[test]
fn ld1_2187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.B8 * 4}, [x1], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 20, DF, 0C", "ld1 {{v20.B8 * 4}}, [x1], 32");
}

#[test]
fn ld1_2188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(15).H4 * 4}, [x18], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 26, DF, 0C", "ld1 {{V(15).H4 * 4}}, [x18], 32");
}

#[test]
fn ld1_2189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).H4 * 4}, [x30], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 27, DF, 0C", "ld1 {{V(23).H4 * 4}}, [x30], 32");
}

#[test]
fn ld1_2190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v30.S2 * 4}, [x17], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 2A, DF, 0C", "ld1 {{v30.S2 * 4}}, [x17], 32");
}

#[test]
fn ld1_2191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).S2 * 4}, [x0], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 28, DF, 0C", "ld1 {{V(20).S2 * 4}}, [x0], 32");
}

#[test]
fn ld1_2192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(26).D1 * 4}, [x1], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 2C, DF, 0C", "ld1 {{V(26).D1 * 4}}, [x1], 32");
}

#[test]
fn ld1_2193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v5.D1 * 4}, [XSP(31)], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 2F, DF, 0C", "ld1 {{v5.D1 * 4}}, [XSP(31)], 32");
}

#[test]
fn ld1_2194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v11.B16 * 4}, [x24], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 23, DF, 4C", "ld1 {{v11.B16 * 4}}, [x24], 64");
}

#[test]
fn ld1_2195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(9).B16 * 4}, [x2], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 20, DF, 4C", "ld1 {{V(9).B16 * 4}}, [x2], 64");
}

#[test]
fn ld1_2196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(23).H8 * 4}, [x13], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 25, DF, 4C", "ld1 {{V(23).H8 * 4}}, [x13], 64");
}

#[test]
fn ld1_2197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v27.H8 * 4}, [x3], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 24, DF, 4C", "ld1 {{v27.H8 * 4}}, [x3], 64");
}

#[test]
fn ld1_2198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).S4 * 4}, [x5], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 28, DF, 4C", "ld1 {{V(3).S4 * 4}}, [x5], 64");
}

#[test]
fn ld1_2199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(3).S4 * 4}, [x23], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 2A, DF, 4C", "ld1 {{V(3).S4 * 4}}, [x23], 64");
}

#[test]
fn ld1_2200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v8.D2 * 4}, [x19], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 2E, DF, 4C", "ld1 {{v8.D2 * 4}}, [x19], 64");
}

#[test]
fn ld1_2201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v26.D2 * 4}, [x13], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 2D, DF, 4C", "ld1 {{v26.D2 * 4}}, [x13], 64");
}

#[test]
fn ld1_2202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).B16 * 4}, [x17], X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 22, D5, 4C", "ld1 {{V(6).B16 * 4}}, [x17], X(21)");
}

#[test]
fn ld1_2203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v10.B16 * 4}, [x15], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 21, D7, 4C", "ld1 {{v10.B16 * 4}}, [x15], x23");
}

#[test]
fn ld1_2204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).B8 * 4}, [x30], x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 23, D5, 0C", "ld1 {{V(14).B8 * 4}}, [x30], x21");
}

#[test]
fn ld1_2205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(5).B8 * 4}, [x28], x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 23, DD, 0C", "ld1 {{V(5).B8 * 4}}, [x28], x29");
}

#[test]
fn ld1_2206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v23.H8 * 4}, [x20], x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 26, DC, 4C", "ld1 {{v23.H8 * 4}}, [x20], x28");
}

#[test]
fn ld1_2207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v9.H8 * 4}, [x15], X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 25, C2, 4C", "ld1 {{v9.H8 * 4}}, [x15], X(2)");
}

#[test]
fn ld1_2208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).H4 * 4}, [XSP(31)], x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 27, CE, 0C", "ld1 {{V(20).H4 * 4}}, [XSP(31)], x14");
}

#[test]
fn ld1_2209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(26).H4 * 4}, [x13], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 25, D6, 0C", "ld1 {{V(26).H4 * 4}}, [x13], X(22)");
}

#[test]
fn ld1_2210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).S4 * 4}, [x3], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 28, D7, 4C", "ld1 {{V(14).S4 * 4}}, [x3], x23");
}

#[test]
fn ld1_2211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(10).S4 * 4}, [x26], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 2B, D3, 4C", "ld1 {{V(10).S4 * 4}}, [x26], x19");
}

#[test]
fn ld1_2212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(30).S2 * 4}, [x12], x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 29, C0, 0C", "ld1 {{V(30).S2 * 4}}, [x12], x0");
}

#[test]
fn ld1_2213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).S2 * 4}, [x9], x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 29, CA, 0C", "ld1 {{V(14).S2 * 4}}, [x9], x10");
}

#[test]
fn ld1_2214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v2.D2 * 4}, [x7], x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 2C, CB, 4C", "ld1 {{v2.D2 * 4}}, [x7], x11");
}

#[test]
fn ld1_2215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v27.D2 * 4}, [x0], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 2C, D4, 4C", "ld1 {{v27.D2 * 4}}, [x0], x20");
}

#[test]
fn ld1_2216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(22).D1 * 4}, [x10], X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 2D, D1, 0C", "ld1 {{V(22).D1 * 4}}, [x10], X(17)");
}

#[test]
fn ld1_2217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.D1 * 4}, [x23], x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 2E, DE, 0C", "ld1 {{v16.D1 * 4}}, [x23], x30");
}

#[test]
fn ld1_2218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(16).B * 1}[15], [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 1D, 40, 4D", "ld1 {{V(16).B * 1}}[15], [x8]");
}

#[test]
fn ld1_2219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(12).B * 1}[11], [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 0E, 40, 4D", "ld1 {{V(12).B * 1}}[11], [x21]");
}

#[test]
fn ld1_2220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(6).H * 1}[4], [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 42, 40, 4D", "ld1 {{V(6).H * 1}}[4], [x16]");
}

#[test]
fn ld1_2221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v18.H * 1}[4], [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 43, 40, 4D", "ld1 {{v18.H * 1}}[4], [x25]");
}

#[test]
fn ld1_2222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(11).S * 1}[3], [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 93, 40, 4D", "ld1 {{V(11).S * 1}}[3], [sp]");
}

#[test]
fn ld1_2223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v20.S * 1}[0], [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 80, 40, 0D", "ld1 {{v20.S * 1}}[0], [x7]");
}

#[test]
fn ld1_2224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(14).D * 1}[1], [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 87, 40, 4D", "ld1 {{V(14).D * 1}}[1], [x24]");
}

#[test]
fn ld1_2225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v31.D * 1}[0], [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 86, 40, 0D", "ld1 {{v31.D * 1}}[0], [x20]");
}

#[test]
fn ld1_2226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v24.B * 1}[13], [x23], 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 16, DF, 4D", "ld1 {{v24.B * 1}}[13], [x23], 1");
}

#[test]
fn ld1_2227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(13).B * 1}[6], [x9], 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 19, DF, 0D", "ld1 {{V(13).B * 1}}[6], [x9], 1");
}

#[test]
fn ld1_2228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(4).B * 1}[6], [x24], x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 1B, DB, 0D", "ld1 {{V(4).B * 1}}[6], [x24], x27");
}

#[test]
fn ld1_2229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(1).B * 1}[5], [x28], x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 17, D1, 0D", "ld1 {{V(1).B * 1}}[5], [x28], x17");
}

#[test]
fn ld1_2230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(27).H * 1}[7], [x23], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 5A, DF, 4D", "ld1 {{V(27).H * 1}}[7], [x23], 2");
}

#[test]
fn ld1_2231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v22.H * 1}[7], [x17], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 5A, DF, 4D", "ld1 {{v22.H * 1}}[7], [x17], 2");
}

#[test]
fn ld1_2232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v14.H * 1}[6], [x14], x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 51, C9, 4D", "ld1 {{v14.H * 1}}[6], [x14], x9");
}

#[test]
fn ld1_2233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(20).H * 1}[3], [x14], X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 59, D7, 0D", "ld1 {{V(20).H * 1}}[3], [x14], X(23)");
}

#[test]
fn ld1_2234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(24).S * 1}[0], [x7], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 80, DF, 0D", "ld1 {{V(24).S * 1}}[0], [x7], 4");
}

#[test]
fn ld1_2235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(10).S * 1}[2], [x1], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 80, DF, 4D", "ld1 {{V(10).S * 1}}[2], [x1], 4");
}

#[test]
fn ld1_2236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v3.S * 1}[1], [x9], x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 91, C0, 0D", "ld1 {{v3.S * 1}}[1], [x9], x0");
}

#[test]
fn ld1_2237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(2).S * 1}[3], [x3], x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 90, C7, 4D", "ld1 {{V(2).S * 1}}[3], [x3], x7");
}

#[test]
fn ld1_2238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v16.D * 1}[1], [x25], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 87, DF, 4D", "ld1 {{v16.D * 1}}[1], [x25], 8");
}

#[test]
fn ld1_2239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {V(15).D * 1}[0], [x21], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 86, DF, 0D", "ld1 {{V(15).D * 1}}[0], [x21], 8");
}

#[test]
fn ld1_2240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v11.D * 1}[1], [x29], X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 87, CB, 4D", "ld1 {{v11.D * 1}}[1], [x29], X(11)");
}

#[test]
fn ld1_2241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1 {v14.D * 1}[1], [x10], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 85, D4, 4D", "ld1 {{v14.D * 1}}[1], [x10], x20");
}

#[test]
fn ld1r_2242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(3).B16 * 1}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, C0, 40, 4D", "ld1r {{V(3).B16 * 1}}, [x6]");
}

#[test]
fn ld1r_2243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(13).B16 * 1}, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, C0, 40, 4D", "ld1r {{V(13).B16 * 1}}, [x3]");
}

#[test]
fn ld1r_2244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(27).B8 * 1}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, C3, 40, 0D", "ld1r {{V(27).B8 * 1}}, [x29]");
}

#[test]
fn ld1r_2245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v29.B8 * 1}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, C1, 40, 0D", "ld1r {{v29.B8 * 1}}, [x14]");
}

#[test]
fn ld1r_2246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v23.H8 * 1}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, C4, 40, 4D", "ld1r {{v23.H8 * 1}}, [x6]");
}

#[test]
fn ld1r_2247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(0).H8 * 1}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, C7, 40, 4D", "ld1r {{V(0).H8 * 1}}, [x29]");
}

#[test]
fn ld1r_2248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(16).H4 * 1}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, C7, 40, 0D", "ld1r {{V(16).H4 * 1}}, [x27]");
}

#[test]
fn ld1r_2249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v15.H4 * 1}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, C7, 40, 0D", "ld1r {{v15.H4 * 1}}, [x29]");
}

#[test]
fn ld1r_2250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v5.S4 * 1}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, C8, 40, 4D", "ld1r {{v5.S4 * 1}}, [x6]");
}

#[test]
fn ld1r_2251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(0).S4 * 1}, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, CA, 40, 4D", "ld1r {{V(0).S4 * 1}}, [x21]");
}

#[test]
fn ld1r_2252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(2).S2 * 1}, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, CB, 40, 0D", "ld1r {{V(2).S2 * 1}}, [x24]");
}

#[test]
fn ld1r_2253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v15.S2 * 1}, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, CA, 40, 0D", "ld1r {{v15.S2 * 1}}, [x20]");
}

#[test]
fn ld1r_2254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v2.D2 * 1}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, CF, 40, 4D", "ld1r {{v2.D2 * 1}}, [x29]");
}

#[test]
fn ld1r_2255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(1).D2 * 1}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, CE, 40, 4D", "ld1r {{V(1).D2 * 1}}, [x18]");
}

#[test]
fn ld1r_2256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v27.D1 * 1}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, CC, 40, 0D", "ld1r {{v27.D1 * 1}}, [x0]");
}

#[test]
fn ld1r_2257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(22).D1 * 1}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, CE, 40, 0D", "ld1r {{V(22).D1 * 1}}, [x22]");
}

#[test]
fn ld1r_2258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(30).B16 * 1}, [x27], 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, C3, DF, 4D", "ld1r {{V(30).B16 * 1}}, [x27], 1");
}

#[test]
fn ld1r_2259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v12.B16 * 1}, [x0], 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, C0, DF, 4D", "ld1r {{v12.B16 * 1}}, [x0], 1");
}

#[test]
fn ld1r_2260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(31).B8 * 1}, [x20], 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, C2, DF, 0D", "ld1r {{V(31).B8 * 1}}, [x20], 1");
}

#[test]
fn ld1r_2261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v0.B8 * 1}, [x28], 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, C3, DF, 0D", "ld1r {{v0.B8 * 1}}, [x28], 1");
}

#[test]
fn ld1r_2262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(27).H8 * 1}, [x12], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, C5, DF, 4D", "ld1r {{V(27).H8 * 1}}, [x12], 2");
}

#[test]
fn ld1r_2263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(29).H8 * 1}, [x30], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, C7, DF, 4D", "ld1r {{V(29).H8 * 1}}, [x30], 2");
}

#[test]
fn ld1r_2264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(23).H4 * 1}, [x21], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, C6, DF, 0D", "ld1r {{V(23).H4 * 1}}, [x21], 2");
}

#[test]
fn ld1r_2265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v9.H4 * 1}, [x23], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, C6, DF, 0D", "ld1r {{v9.H4 * 1}}, [x23], 2");
}

#[test]
fn ld1r_2266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(13).S4 * 1}, [x27], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, CB, DF, 4D", "ld1r {{V(13).S4 * 1}}, [x27], 4");
}

#[test]
fn ld1r_2267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(22).S4 * 1}, [x23], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, CA, DF, 4D", "ld1r {{V(22).S4 * 1}}, [x23], 4");
}

#[test]
fn ld1r_2268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(19).S2 * 1}, [x20], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, CA, DF, 0D", "ld1r {{V(19).S2 * 1}}, [x20], 4");
}

#[test]
fn ld1r_2269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v14.S2 * 1}, [x11], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, C9, DF, 0D", "ld1r {{v14.S2 * 1}}, [x11], 4");
}

#[test]
fn ld1r_2270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v26.D2 * 1}, [x25], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, CF, DF, 4D", "ld1r {{v26.D2 * 1}}, [x25], 8");
}

#[test]
fn ld1r_2271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v10.D2 * 1}, [x28], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, CF, DF, 4D", "ld1r {{v10.D2 * 1}}, [x28], 8");
}

#[test]
fn ld1r_2272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(15).D1 * 1}, [x16], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, CE, DF, 0D", "ld1r {{V(15).D1 * 1}}, [x16], 8");
}

#[test]
fn ld1r_2273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(16).D1 * 1}, [x29], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, CF, DF, 0D", "ld1r {{V(16).D1 * 1}}, [x29], 8");
}

#[test]
fn ld1r_2274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(13).B16 * 1}, [x2], x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, C0, DC, 4D", "ld1r {{V(13).B16 * 1}}, [x2], x28");
}

#[test]
fn ld1r_2275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(21).B16 * 1}, [x5], x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, C0, CC, 4D", "ld1r {{V(21).B16 * 1}}, [x5], x12");
}

#[test]
fn ld1r_2276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(4).B8 * 1}, [x17], X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, C2, D9, 0D", "ld1r {{V(4).B8 * 1}}, [x17], X(25)");
}

#[test]
fn ld1r_2277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(7).B8 * 1}, [x8], x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, C1, C6, 0D", "ld1r {{V(7).B8 * 1}}, [x8], x6");
}

#[test]
fn ld1r_2278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v8.H8 * 1}, [x30], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, C7, D4, 4D", "ld1r {{v8.H8 * 1}}, [x30], x20");
}

#[test]
fn ld1r_2279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(17).H8 * 1}, [x25], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, C7, D6, 4D", "ld1r {{V(17).H8 * 1}}, [x25], X(22)");
}

#[test]
fn ld1r_2280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(2).H4 * 1}, [x1], x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, C4, D5, 0D", "ld1r {{V(2).H4 * 1}}, [x1], x21");
}

#[test]
fn ld1r_2281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(16).H4 * 1}, [x14], X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, C5, DC, 0D", "ld1r {{V(16).H4 * 1}}, [x14], X(28)");
}

#[test]
fn ld1r_2282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v4.S4 * 1}, [x13], X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, C9, DE, 4D", "ld1r {{v4.S4 * 1}}, [x13], X(30)");
}

#[test]
fn ld1r_2283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v29.S4 * 1}, [x18], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, CA, D6, 4D", "ld1r {{v29.S4 * 1}}, [x18], X(22)");
}

#[test]
fn ld1r_2284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(17).S2 * 1}, [sp], X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, CB, C8, 0D", "ld1r {{V(17).S2 * 1}}, [sp], X(8)");
}

#[test]
fn ld1r_2285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(13).S2 * 1}, [x3], X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, C8, D7, 0D", "ld1r {{V(13).S2 * 1}}, [x3], X(23)");
}

#[test]
fn ld1r_2286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(3).D2 * 1}, [x22], X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, CE, C6, 4D", "ld1r {{V(3).D2 * 1}}, [x22], X(6)");
}

#[test]
fn ld1r_2287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {v15.D2 * 1}, [x5], X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, CC, DC, 4D", "ld1r {{v15.D2 * 1}}, [x5], X(28)");
}

#[test]
fn ld1r_2288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(16).D1 * 1}, [x19], x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, CE, D2, 0D", "ld1r {{V(16).D1 * 1}}, [x19], x18");
}

#[test]
fn ld1r_2289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld1r {V(10).D1 * 1}, [x29], x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, CF, C5, 0D", "ld1r {{V(10).D1 * 1}}, [x29], x5");
}

#[test]
fn ld2_2290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v24.B16 * 2}, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 82, 40, 4C", "ld2 {{v24.B16 * 2}}, [x17]");
}

#[test]
fn ld2_2291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v6.B16 * 2}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 81, 40, 4C", "ld2 {{v6.B16 * 2}}, [x12]");
}

#[test]
fn ld2_2292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v27.B8 * 2}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 82, 40, 0C", "ld2 {{v27.B8 * 2}}, [x22]");
}

#[test]
fn ld2_2293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v3.B8 * 2}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 82, 40, 0C", "ld2 {{v3.B8 * 2}}, [x18]");
}

#[test]
fn ld2_2294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v17.H8 * 2}, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 87, 40, 4C", "ld2 {{v17.H8 * 2}}, [x26]");
}

#[test]
fn ld2_2295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v30.H8 * 2}, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 84, 40, 4C", "ld2 {{v30.H8 * 2}}, [x4]");
}

#[test]
fn ld2_2296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v10.H4 * 2}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 86, 40, 0C", "ld2 {{v10.H4 * 2}}, [x18]");
}

#[test]
fn ld2_2297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(2).H4 * 2}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 85, 40, 0C", "ld2 {{V(2).H4 * 2}}, [x12]");
}

#[test]
fn ld2_2298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(5).S4 * 2}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 89, 40, 4C", "ld2 {{V(5).S4 * 2}}, [x14]");
}

#[test]
fn ld2_2299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v19.S4 * 2}, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 8B, 40, 4C", "ld2 {{v19.S4 * 2}}, [x28]");
}

#[test]
fn ld2_2300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v18.S2 * 2}, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 88, 40, 0C", "ld2 {{v18.S2 * 2}}, [x5]");
}

#[test]
fn ld2_2301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(21).S2 * 2}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 8A, 40, 0C", "ld2 {{V(21).S2 * 2}}, [x16]");
}

#[test]
fn ld2_2302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v2.D2 * 2}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 8D, 40, 4C", "ld2 {{v2.D2 * 2}}, [x15]");
}

#[test]
fn ld2_2303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(18).D2 * 2}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 8D, 40, 4C", "ld2 {{V(18).D2 * 2}}, [x15]");
}

#[test]
fn ld2_2304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(15).B8 * 2}, [x29], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, DF, 0C", "ld2 {{V(15).B8 * 2}}, [x29], 16");
}

#[test]
fn ld2_2305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v17.B8 * 2}, [x22], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 82, DF, 0C", "ld2 {{v17.B8 * 2}}, [x22], 16");
}

#[test]
fn ld2_2306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(26).H4 * 2}, [x15], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 85, DF, 0C", "ld2 {{V(26).H4 * 2}}, [x15], 16");
}

#[test]
fn ld2_2307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(0).H4 * 2}, [x23], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 86, DF, 0C", "ld2 {{V(0).H4 * 2}}, [x23], 16");
}

#[test]
fn ld2_2308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(30).S2 * 2}, [x17], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 8A, DF, 0C", "ld2 {{V(30).S2 * 2}}, [x17], 16");
}

#[test]
fn ld2_2309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(30).S2 * 2}, [x13], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 89, DF, 0C", "ld2 {{V(30).S2 * 2}}, [x13], 16");
}

#[test]
fn ld2_2310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(4).B16 * 2}, [x9], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 81, DF, 4C", "ld2 {{V(4).B16 * 2}}, [x9], 32");
}

#[test]
fn ld2_2311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(30).B16 * 2}, [x6], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 80, DF, 4C", "ld2 {{V(30).B16 * 2}}, [x6], 32");
}

#[test]
fn ld2_2312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(19).H8 * 2}, [x28], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 87, DF, 4C", "ld2 {{V(19).H8 * 2}}, [x28], 32");
}

#[test]
fn ld2_2313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v23.H8 * 2}, [x13], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 85, DF, 4C", "ld2 {{v23.H8 * 2}}, [x13], 32");
}

#[test]
fn ld2_2314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(12).S4 * 2}, [x14], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 89, DF, 4C", "ld2 {{V(12).S4 * 2}}, [x14], 32");
}

#[test]
fn ld2_2315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v21.S4 * 2}, [x25], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 8B, DF, 4C", "ld2 {{v21.S4 * 2}}, [x25], 32");
}

#[test]
fn ld2_2316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(31).D2 * 2}, [x9], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 8D, DF, 4C", "ld2 {{V(31).D2 * 2}}, [x9], 32");
}

#[test]
fn ld2_2317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v31.D2 * 2}, [x16], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 8E, DF, 4C", "ld2 {{v31.D2 * 2}}, [x16], 32");
}

#[test]
fn ld2_2318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v29.B16 * 2}, [x11], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 81, CF, 4C", "ld2 {{v29.B16 * 2}}, [x11], x15");
}

#[test]
fn ld2_2319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v5.B16 * 2}, [x0], X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 80, D4, 4C", "ld2 {{v5.B16 * 2}}, [x0], X(20)");
}

#[test]
fn ld2_2320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v1.B8 * 2}, [x16], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 82, CF, 0C", "ld2 {{v1.B8 * 2}}, [x16], x15");
}

#[test]
fn ld2_2321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v11.B8 * 2}, [x4], x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 80, DA, 0C", "ld2 {{v11.B8 * 2}}, [x4], x26");
}

#[test]
fn ld2_2322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(21).H8 * 2}, [x27], X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 87, C5, 4C", "ld2 {{V(21).H8 * 2}}, [x27], X(5)");
}

#[test]
fn ld2_2323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v8.H8 * 2}, [x4], X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 84, D4, 4C", "ld2 {{v8.H8 * 2}}, [x4], X(20)");
}

#[test]
fn ld2_2324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v11.H4 * 2}, [x19], x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 86, C6, 0C", "ld2 {{v11.H4 * 2}}, [x19], x6");
}

#[test]
fn ld2_2325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v23.H4 * 2}, [x12], X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 85, CF, 0C", "ld2 {{v23.H4 * 2}}, [x12], X(15)");
}

#[test]
fn ld2_2326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(18).S4 * 2}, [x24], x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 8B, C9, 4C", "ld2 {{V(18).S4 * 2}}, [x24], x9");
}

#[test]
fn ld2_2327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(28).S4 * 2}, [x10], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 89, D9, 4C", "ld2 {{V(28).S4 * 2}}, [x10], x25");
}

#[test]
fn ld2_2328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(30).S2 * 2}, [x3], x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 88, C0, 0C", "ld2 {{V(30).S2 * 2}}, [x3], x0");
}

#[test]
fn ld2_2329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v27.S2 * 2}, [x2], x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 88, D1, 0C", "ld2 {{v27.S2 * 2}}, [x2], x17");
}

#[test]
fn ld2_2330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v8.D2 * 2}, [XSP(31)], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 8F, D7, 4C", "ld2 {{v8.D2 * 2}}, [XSP(31)], x23");
}

#[test]
fn ld2_2331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v24.D2 * 2}, [x7], x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 8C, D1, 4C", "ld2 {{v24.D2 * 2}}, [x7], x17");
}

#[test]
fn ld2_2332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(8).B * 2}[7], [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 1D, 60, 0D", "ld2 {{V(8).B * 2}}[7], [x15]");
}

#[test]
fn ld2_2333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v28.B * 2}[8], [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 03, 60, 4D", "ld2 {{v28.B * 2}}[8], [x28]");
}

#[test]
fn ld2_2334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(31).H * 2}[4], [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 41, 60, 4D", "ld2 {{V(31).H * 2}}[4], [x14]");
}

#[test]
fn ld2_2335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v30.H * 2}[4], [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 40, 60, 4D", "ld2 {{v30.H * 2}}[4], [x0]");
}

#[test]
fn ld2_2336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v7.S * 2}[0], [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 81, 60, 0D", "ld2 {{v7.S * 2}}[0], [x9]");
}

#[test]
fn ld2_2337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(30).S * 2}[3], [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 92, 60, 4D", "ld2 {{V(30).S * 2}}[3], [x18]");
}

#[test]
fn ld2_2338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(31).D * 2}[0], [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 87, 60, 0D", "ld2 {{V(31).D * 2}}[0], [x27]");
}

#[test]
fn ld2_2339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v1.D * 2}[0], [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 86, 60, 0D", "ld2 {{v1.D * 2}}[0], [x19]");
}

#[test]
fn ld2_2340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(29).B * 2}[7], [x12], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 1D, FF, 0D", "ld2 {{V(29).B * 2}}[7], [x12], 2");
}

#[test]
fn ld2_2341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v19.B * 2}[6], [x13], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 19, FF, 0D", "ld2 {{v19.B * 2}}[6], [x13], 2");
}

#[test]
fn ld2_2342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(1).B * 2}[12], [x14], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 11, EF, 4D", "ld2 {{V(1).B * 2}}[12], [x14], x15");
}

#[test]
fn ld2_2343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(15).B * 2}[14], [x13], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, F3, 4D", "ld2 {{V(15).B * 2}}[14], [x13], x19");
}

#[test]
fn ld2_2344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v16.H * 2}[5], [x2], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 48, FF, 4D", "ld2 {{v16.H * 2}}[5], [x2], 4");
}

#[test]
fn ld2_2345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(5).H * 2}[3], [x24], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 5B, FF, 0D", "ld2 {{V(5).H * 2}}[3], [x24], 4");
}

#[test]
fn ld2_2346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v14.H * 2}[4], [x26], X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 43, E3, 4D", "ld2 {{v14.H * 2}}[4], [x26], X(3)");
}

#[test]
fn ld2_2347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v2.H * 2}[2], [x12], X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 51, EC, 0D", "ld2 {{v2.H * 2}}[2], [x12], X(12)");
}

#[test]
fn ld2_2348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(2).S * 2}[0], [x7], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 80, FF, 0D", "ld2 {{V(2).S * 2}}[0], [x7], 8");
}

#[test]
fn ld2_2349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v21.S * 2}[1], [x7], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 90, FF, 0D", "ld2 {{v21.S * 2}}[1], [x7], 8");
}

#[test]
fn ld2_2350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v19.S * 2}[3], [x6], x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 90, F5, 4D", "ld2 {{v19.S * 2}}[3], [x6], x21");
}

#[test]
fn ld2_2351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(8).S * 2}[2], [x29], x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 83, E5, 4D", "ld2 {{V(8).S * 2}}[2], [x29], x5");
}

#[test]
fn ld2_2352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {V(7).D * 2}[1], [x1], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 84, FF, 4D", "ld2 {{V(7).D * 2}}[1], [x1], 16");
}

#[test]
fn ld2_2353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v17.D * 2}[1], [x2], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 84, FF, 4D", "ld2 {{v17.D * 2}}[1], [x2], 16");
}

#[test]
fn ld2_2354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v10.D * 2}[0], [x28], X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 87, E2, 0D", "ld2 {{v10.D * 2}}[0], [x28], X(2)");
}

#[test]
fn ld2_2355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2 {v8.D * 2}[0], [x30], X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 87, EB, 0D", "ld2 {{v8.D * 2}}[0], [x30], X(11)");
}

#[test]
fn ld2r_2356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(16).B16 * 2}, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, C2, 60, 4D", "ld2r {{V(16).B16 * 2}}, [x17]");
}

#[test]
fn ld2r_2357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(20).B16 * 2}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, C3, 60, 4D", "ld2r {{V(20).B16 * 2}}, [sp]");
}

#[test]
fn ld2r_2358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(6).B8 * 2}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, C3, 60, 0D", "ld2r {{V(6).B8 * 2}}, [x30]");
}

#[test]
fn ld2r_2359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v21.B8 * 2}, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, C2, 60, 0D", "ld2r {{v21.B8 * 2}}, [x20]");
}

#[test]
fn ld2r_2360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v11.H8 * 2}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, C7, 60, 4D", "ld2r {{v11.H8 * 2}}, [sp]");
}

#[test]
fn ld2r_2361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(22).H8 * 2}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, C4, 60, 4D", "ld2r {{V(22).H8 * 2}}, [x0]");
}

#[test]
fn ld2r_2362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(28).H4 * 2}, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, C7, 60, 0D", "ld2r {{V(28).H4 * 2}}, [x24]");
}

#[test]
fn ld2r_2363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(31).H4 * 2}, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, C5, 60, 0D", "ld2r {{V(31).H4 * 2}}, [x8]");
}

#[test]
fn ld2r_2364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v31.S4 * 2}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, C9, 60, 4D", "ld2r {{v31.S4 * 2}}, [x11]");
}

#[test]
fn ld2r_2365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(11).S4 * 2}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, CA, 60, 4D", "ld2r {{V(11).S4 * 2}}, [x22]");
}

#[test]
fn ld2r_2366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v29.S2 * 2}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, CA, 60, 0D", "ld2r {{v29.S2 * 2}}, [x16]");
}

#[test]
fn ld2r_2367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v11.S2 * 2}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, C9, 60, 0D", "ld2r {{v11.S2 * 2}}, [x12]");
}

#[test]
fn ld2r_2368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v31.D2 * 2}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, CD, 60, 4D", "ld2r {{v31.D2 * 2}}, [x9]");
}

#[test]
fn ld2r_2369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(24).D2 * 2}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, CC, 60, 4D", "ld2r {{V(24).D2 * 2}}, [x6]");
}

#[test]
fn ld2r_2370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(3).D1 * 2}, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, CF, 60, 0D", "ld2r {{V(3).D1 * 2}}, [x28]");
}

#[test]
fn ld2r_2371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(23).D1 * 2}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, CF, 60, 0D", "ld2r {{V(23).D1 * 2}}, [sp]");
}

#[test]
fn ld2r_2372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v29.B16 * 2}, [x24], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, C3, FF, 4D", "ld2r {{v29.B16 * 2}}, [x24], 2");
}

#[test]
fn ld2r_2373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v25.B16 * 2}, [x12], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, C1, FF, 4D", "ld2r {{v25.B16 * 2}}, [x12], 2");
}

#[test]
fn ld2r_2374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(20).B8 * 2}, [x25], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, C3, FF, 0D", "ld2r {{V(20).B8 * 2}}, [x25], 2");
}

#[test]
fn ld2r_2375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(29).B8 * 2}, [x14], 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, C1, FF, 0D", "ld2r {{V(29).B8 * 2}}, [x14], 2");
}

#[test]
fn ld2r_2376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v19.H8 * 2}, [x19], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C6, FF, 4D", "ld2r {{v19.H8 * 2}}, [x19], 4");
}

#[test]
fn ld2r_2377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v18.H8 * 2}, [x22], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, C6, FF, 4D", "ld2r {{v18.H8 * 2}}, [x22], 4");
}

#[test]
fn ld2r_2378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(29).H4 * 2}, [x10], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, C5, FF, 0D", "ld2r {{V(29).H4 * 2}}, [x10], 4");
}

#[test]
fn ld2r_2379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v19.H4 * 2}, [x18], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C6, FF, 0D", "ld2r {{v19.H4 * 2}}, [x18], 4");
}

#[test]
fn ld2r_2380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v28.S4 * 2}, [x2], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, C8, FF, 4D", "ld2r {{v28.S4 * 2}}, [x2], 8");
}

#[test]
fn ld2r_2381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v17.S4 * 2}, [x4], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, C8, FF, 4D", "ld2r {{v17.S4 * 2}}, [x4], 8");
}

#[test]
fn ld2r_2382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(26).S2 * 2}, [x23], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, CA, FF, 0D", "ld2r {{V(26).S2 * 2}}, [x23], 8");
}

#[test]
fn ld2r_2383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(17).S2 * 2}, [x5], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, C8, FF, 0D", "ld2r {{V(17).S2 * 2}}, [x5], 8");
}

#[test]
fn ld2r_2384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(30).D2 * 2}, [x27], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, CF, FF, 4D", "ld2r {{V(30).D2 * 2}}, [x27], 16");
}

#[test]
fn ld2r_2385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v25.D2 * 2}, [x11], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, CD, FF, 4D", "ld2r {{v25.D2 * 2}}, [x11], 16");
}

#[test]
fn ld2r_2386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(22).D1 * 2}, [x21], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, CE, FF, 0D", "ld2r {{V(22).D1 * 2}}, [x21], 16");
}

#[test]
fn ld2r_2387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v31.D1 * 2}, [x5], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, CC, FF, 0D", "ld2r {{v31.D1 * 2}}, [x5], 16");
}

#[test]
fn ld2r_2388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v30.B16 * 2}, [x13], x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, C1, F6, 4D", "ld2r {{v30.B16 * 2}}, [x13], x22");
}

#[test]
fn ld2r_2389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(19).B16 * 2}, [x5], X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, C0, EE, 4D", "ld2r {{V(19).B16 * 2}}, [x5], X(14)");
}

#[test]
fn ld2r_2390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(4).B8 * 2}, [x28], X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, C3, FC, 0D", "ld2r {{V(4).B8 * 2}}, [x28], X(28)");
}

#[test]
fn ld2r_2391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v4.B8 * 2}, [x27], x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, C3, F6, 0D", "ld2r {{v4.B8 * 2}}, [x27], x22");
}

#[test]
fn ld2r_2392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(13).H8 * 2}, [x13], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, C5, EF, 4D", "ld2r {{V(13).H8 * 2}}, [x13], x15");
}

#[test]
fn ld2r_2393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v5.H8 * 2}, [x5], X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, C4, EA, 4D", "ld2r {{v5.H8 * 2}}, [x5], X(10)");
}

#[test]
fn ld2r_2394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v15.H4 * 2}, [x13], x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, C5, F0, 0D", "ld2r {{v15.H4 * 2}}, [x13], x16");
}

#[test]
fn ld2r_2395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v5.H4 * 2}, [x8], X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, C5, F1, 0D", "ld2r {{v5.H4 * 2}}, [x8], X(17)");
}

#[test]
fn ld2r_2396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v12.S4 * 2}, [x9], x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, C9, F5, 4D", "ld2r {{v12.S4 * 2}}, [x9], x21");
}

#[test]
fn ld2r_2397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v8.S4 * 2}, [x20], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, CA, EF, 4D", "ld2r {{v8.S4 * 2}}, [x20], x15");
}

#[test]
fn ld2r_2398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(9).S2 * 2}, [x18], X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, CA, FD, 0D", "ld2r {{V(9).S2 * 2}}, [x18], X(29)");
}

#[test]
fn ld2r_2399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v5.S2 * 2}, [x13], x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, C9, E3, 0D", "ld2r {{v5.S2 * 2}}, [x13], x3");
}
