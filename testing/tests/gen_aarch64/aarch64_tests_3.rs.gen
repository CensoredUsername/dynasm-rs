
#[test]
fn ld2r_2400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v0.D2 * 2}, [x23], x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, CE, EE, 4D", "ld2r {{v0.D2 * 2}}, [x23], x14");
}

#[test]
fn ld2r_2401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(24).D2 * 2}, [x27], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, CF, F9, 4D", "ld2r {{V(24).D2 * 2}}, [x27], x25");
}

#[test]
fn ld2r_2402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v28.D1 * 2}, [x4], x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, CC, E1, 0D", "ld2r {{v28.D1 * 2}}, [x4], x1");
}

#[test]
fn ld2r_2403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v19.D1 * 2}, [x5], X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, CC, EC, 0D", "ld2r {{v19.D1 * 2}}, [x5], X(12)");
}

#[test]
fn ld3_2404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v10.B16 * 3}, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 40, 40, 4C", "ld3 {{v10.B16 * 3}}, [x5]");
}

#[test]
fn ld3_2405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(7).B16 * 3}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 42, 40, 4C", "ld3 {{V(7).B16 * 3}}, [x18]");
}

#[test]
fn ld3_2406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v14.B8 * 3}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 41, 40, 0C", "ld3 {{v14.B8 * 3}}, [x14]");
}

#[test]
fn ld3_2407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v28.B8 * 3}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 43, 40, 0C", "ld3 {{v28.B8 * 3}}, [sp]");
}

#[test]
fn ld3_2408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(20).H8 * 3}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 47, 40, 4C", "ld3 {{V(20).H8 * 3}}, [x29]");
}

#[test]
fn ld3_2409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v1.H8 * 3}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 47, 40, 4C", "ld3 {{v1.H8 * 3}}, [x29]");
}

#[test]
fn ld3_2410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v29.H4 * 3}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 46, 40, 0C", "ld3 {{v29.H4 * 3}}, [x22]");
}

#[test]
fn ld3_2411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v12.H4 * 3}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 44, 40, 0C", "ld3 {{v12.H4 * 3}}, [x6]");
}

#[test]
fn ld3_2412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v15.S4 * 3}, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 4A, 40, 4C", "ld3 {{v15.S4 * 3}}, [x17]");
}

#[test]
fn ld3_2413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v26.S4 * 3}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 49, 40, 4C", "ld3 {{v26.S4 * 3}}, [x11]");
}

#[test]
fn ld3_2414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(12).S2 * 3}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 49, 40, 0C", "ld3 {{V(12).S2 * 3}}, [x9]");
}

#[test]
fn ld3_2415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v25.S2 * 3}, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 48, 40, 0C", "ld3 {{v25.S2 * 3}}, [x4]");
}

#[test]
fn ld3_2416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(28).D2 * 3}, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 4C, 40, 4C", "ld3 {{V(28).D2 * 3}}, [x1]");
}

#[test]
fn ld3_2417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v22.D2 * 3}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 4D, 40, 4C", "ld3 {{v22.D2 * 3}}, [x9]");
}

#[test]
fn ld3_2418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(13).B8 * 3}, [x22], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 42, DF, 0C", "ld3 {{V(13).B8 * 3}}, [x22], 24");
}

#[test]
fn ld3_2419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(15).B8 * 3}, [x18], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 42, DF, 0C", "ld3 {{V(15).B8 * 3}}, [x18], 24");
}

#[test]
fn ld3_2420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v25.H4 * 3}, [x25], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 47, DF, 0C", "ld3 {{v25.H4 * 3}}, [x25], 24");
}

#[test]
fn ld3_2421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(7).H4 * 3}, [x23], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 46, DF, 0C", "ld3 {{V(7).H4 * 3}}, [x23], 24");
}

#[test]
fn ld3_2422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v1.S2 * 3}, [x21], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 4A, DF, 0C", "ld3 {{v1.S2 * 3}}, [x21], 24");
}

#[test]
fn ld3_2423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(23).S2 * 3}, [x23], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 4A, DF, 0C", "ld3 {{V(23).S2 * 3}}, [x23], 24");
}

#[test]
fn ld3_2424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(8).B16 * 3}, [x15], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 41, DF, 4C", "ld3 {{V(8).B16 * 3}}, [x15], 48");
}

#[test]
fn ld3_2425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v19.B16 * 3}, [x19], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 42, DF, 4C", "ld3 {{v19.B16 * 3}}, [x19], 48");
}

#[test]
fn ld3_2426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(25).H8 * 3}, [x11], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 45, DF, 4C", "ld3 {{V(25).H8 * 3}}, [x11], 48");
}

#[test]
fn ld3_2427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(15).H8 * 3}, [x11], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 45, DF, 4C", "ld3 {{V(15).H8 * 3}}, [x11], 48");
}

#[test]
fn ld3_2428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(21).S4 * 3}, [sp], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 4B, DF, 4C", "ld3 {{V(21).S4 * 3}}, [sp], 48");
}

#[test]
fn ld3_2429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(15).S4 * 3}, [x20], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 4A, DF, 4C", "ld3 {{V(15).S4 * 3}}, [x20], 48");
}

#[test]
fn ld3_2430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(30).D2 * 3}, [x5], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 4C, DF, 4C", "ld3 {{V(30).D2 * 3}}, [x5], 48");
}

#[test]
fn ld3_2431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(23).D2 * 3}, [x7], 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 4C, DF, 4C", "ld3 {{V(23).D2 * 3}}, [x7], 48");
}

#[test]
fn ld3_2432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v11.B16 * 3}, [x16], X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 42, DB, 4C", "ld3 {{v11.B16 * 3}}, [x16], X(27)");
}

#[test]
fn ld3_2433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v1.B16 * 3}, [x30], X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 43, D5, 4C", "ld3 {{v1.B16 * 3}}, [x30], X(21)");
}

#[test]
fn ld3_2434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v19.B8 * 3}, [x30], X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 43, C3, 0C", "ld3 {{v19.B8 * 3}}, [x30], X(3)");
}

#[test]
fn ld3_2435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v16.B8 * 3}, [x1], X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 40, C7, 0C", "ld3 {{v16.B8 * 3}}, [x1], X(7)");
}

#[test]
fn ld3_2436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v6.H8 * 3}, [x0], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 44, D6, 4C", "ld3 {{v6.H8 * 3}}, [x0], X(22)");
}

#[test]
fn ld3_2437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(17).H8 * 3}, [x22], X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 46, D3, 4C", "ld3 {{V(17).H8 * 3}}, [x22], X(19)");
}

#[test]
fn ld3_2438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v17.H4 * 3}, [x30], X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 47, C2, 0C", "ld3 {{v17.H4 * 3}}, [x30], X(2)");
}

#[test]
fn ld3_2439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v27.H4 * 3}, [x24], x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 47, C4, 0C", "ld3 {{v27.H4 * 3}}, [x24], x4");
}

#[test]
fn ld3_2440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(15).S4 * 3}, [x8], X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 49, D9, 4C", "ld3 {{V(15).S4 * 3}}, [x8], X(25)");
}

#[test]
fn ld3_2441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(7).S4 * 3}, [x18], X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 4A, CC, 4C", "ld3 {{V(7).S4 * 3}}, [x18], X(12)");
}

#[test]
fn ld3_2442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(7).S2 * 3}, [x25], X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 4B, DD, 0C", "ld3 {{V(7).S2 * 3}}, [x25], X(29)");
}

#[test]
fn ld3_2443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(10).S2 * 3}, [x30], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 4B, D3, 0C", "ld3 {{V(10).S2 * 3}}, [x30], x19");
}

#[test]
fn ld3_2444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v9.D2 * 3}, [x21], x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 4E, D1, 4C", "ld3 {{v9.D2 * 3}}, [x21], x17");
}

#[test]
fn ld3_2445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(21).D2 * 3}, [x5], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 4C, D6, 4C", "ld3 {{V(21).D2 * 3}}, [x5], X(22)");
}

#[test]
fn ld3_2446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(10).B * 3}[8], [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 21, 40, 4D", "ld3 {{V(10).B * 3}}[8], [x10]");
}

#[test]
fn ld3_2447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v3.B * 3}[12], [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 32, 40, 4D", "ld3 {{v3.B * 3}}[12], [x19]");
}

#[test]
fn ld3_2448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(22).H * 3}[1], [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 69, 40, 0D", "ld3 {{V(22).H * 3}}[1], [x14]");
}

#[test]
fn ld3_2449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v16.H * 3}[7], [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 79, 40, 4D", "ld3 {{v16.H * 3}}[7], [x15]");
}

#[test]
fn ld3_2450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(5).S * 3}[1], [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, B3, 40, 0D", "ld3 {{V(5).S * 3}}[1], [x27]");
}

#[test]
fn ld3_2451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v25.S * 3}[3], [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, B2, 40, 4D", "ld3 {{v25.S * 3}}[3], [x22]");
}

#[test]
fn ld3_2452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(9).D * 3}[1], [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, A4, 40, 4D", "ld3 {{V(9).D * 3}}[1], [x1]");
}

#[test]
fn ld3_2453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(6).D * 3}[1], [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, A7, 40, 4D", "ld3 {{V(6).D * 3}}[1], [sp]");
}

#[test]
fn ld3_2454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(31).B * 3}[14], [x8], 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 39, DF, 4D", "ld3 {{V(31).B * 3}}[14], [x8], 3");
}

#[test]
fn ld3_2455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v31.B * 3}[5], [x18], 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 36, DF, 0D", "ld3 {{v31.B * 3}}[5], [x18], 3");
}

#[test]
fn ld3_2456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(10).B * 3}[3], [x22], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 2E, D6, 0D", "ld3 {{V(10).B * 3}}[3], [x22], X(22)");
}

#[test]
fn ld3_2457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(11).B * 3}[8], [x0], x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 20, DC, 4D", "ld3 {{V(11).B * 3}}[8], [x0], x28");
}

#[test]
fn ld3_2458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(6).H * 3}[7], [x16], 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 7A, DF, 4D", "ld3 {{V(6).H * 3}}[7], [x16], 6");
}

#[test]
fn ld3_2459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(16).H * 3}[2], [x3], 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 70, DF, 0D", "ld3 {{V(16).H * 3}}[2], [x3], 6");
}

#[test]
fn ld3_2460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(27).H * 3}[2], [x12], X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 71, D7, 0D", "ld3 {{V(27).H * 3}}[2], [x12], X(23)");
}

#[test]
fn ld3_2461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v10.H * 3}[2], [x29], X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 73, C9, 0D", "ld3 {{v10.H * 3}}[2], [x29], X(9)");
}

#[test]
fn ld3_2462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(20).S * 3}[2], [x23], 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, A2, DF, 4D", "ld3 {{V(20).S * 3}}[2], [x23], 12");
}

#[test]
fn ld3_2463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v26.S * 3}[2], [x29], 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, A3, DF, 4D", "ld3 {{v26.S * 3}}[2], [x29], 12");
}

#[test]
fn ld3_2464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(7).S * 3}[2], [x14], x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, A1, C5, 4D", "ld3 {{V(7).S * 3}}[2], [x14], x5");
}

#[test]
fn ld3_2465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v11.S * 3}[3], [x25], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, B3, D4, 4D", "ld3 {{v11.S * 3}}[3], [x25], x20");
}

#[test]
fn ld3_2466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v14.D * 3}[1], [x4], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, A4, DF, 4D", "ld3 {{v14.D * 3}}[1], [x4], 24");
}

#[test]
fn ld3_2467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(13).D * 3}[1], [x18], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, A6, DF, 4D", "ld3 {{V(13).D * 3}}[1], [x18], 24");
}

#[test]
fn ld3_2468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(25).D * 3}[0], [x1], x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, A4, C3, 0D", "ld3 {{V(25).D * 3}}[0], [x1], x3");
}

#[test]
fn ld3_2469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v27.D * 3}[1], [x3], X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, A4, D4, 4D", "ld3 {{v27.D * 3}}[1], [x3], X(20)");
}

#[test]
fn ld3r_2470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(22).B16 * 3}, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, E2, 40, 4D", "ld3r {{V(22).B16 * 3}}, [x17]");
}

#[test]
fn ld3r_2471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v11.B16 * 3}, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, E1, 40, 4D", "ld3r {{v11.B16 * 3}}, [x8]");
}

#[test]
fn ld3r_2472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(29).B8 * 3}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, E1, 40, 0D", "ld3r {{V(29).B8 * 3}}, [x11]");
}

#[test]
fn ld3r_2473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(6).B8 * 3}, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, E1, 40, 0D", "ld3r {{V(6).B8 * 3}}, [x10]");
}

#[test]
fn ld3r_2474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(15).H8 * 3}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, E7, 40, 4D", "ld3r {{V(15).H8 * 3}}, [sp]");
}

#[test]
fn ld3r_2475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(11).H8 * 3}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, E5, 40, 4D", "ld3r {{V(11).H8 * 3}}, [x15]");
}

#[test]
fn ld3r_2476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(15).H4 * 3}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, E7, 40, 0D", "ld3r {{V(15).H4 * 3}}, [x30]");
}

#[test]
fn ld3r_2477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v7.H4 * 3}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, E5, 40, 0D", "ld3r {{v7.H4 * 3}}, [x11]");
}

#[test]
fn ld3r_2478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(15).S4 * 3}, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, EA, 40, 4D", "ld3r {{V(15).S4 * 3}}, [x21]");
}

#[test]
fn ld3r_2479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(12).S4 * 3}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, E9, 40, 4D", "ld3r {{V(12).S4 * 3}}, [x15]");
}

#[test]
fn ld3r_2480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(13).S2 * 3}, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, E9, 40, 0D", "ld3r {{V(13).S2 * 3}}, [x10]");
}

#[test]
fn ld3r_2481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(5).S2 * 3}, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, E8, 40, 0D", "ld3r {{V(5).S2 * 3}}, [x5]");
}

#[test]
fn ld3r_2482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v16.D2 * 3}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, EE, 40, 4D", "ld3r {{v16.D2 * 3}}, [x16]");
}

#[test]
fn ld3r_2483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(22).D2 * 3}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, ED, 40, 4D", "ld3r {{V(22).D2 * 3}}, [x12]");
}

#[test]
fn ld3r_2484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v1.D1 * 3}, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, ED, 40, 0D", "ld3r {{v1.D1 * 3}}, [x13]");
}

#[test]
fn ld3r_2485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v10.D1 * 3}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, EE, 40, 0D", "ld3r {{v10.D1 * 3}}, [x16]");
}

#[test]
fn ld3r_2486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(1).B16 * 3}, [x0], 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, E0, DF, 4D", "ld3r {{V(1).B16 * 3}}, [x0], 3");
}

#[test]
fn ld3r_2487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(24).B16 * 3}, [x9], 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, E1, DF, 4D", "ld3r {{V(24).B16 * 3}}, [x9], 3");
}

#[test]
fn ld3r_2488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(8).B8 * 3}, [x9], 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, E1, DF, 0D", "ld3r {{V(8).B8 * 3}}, [x9], 3");
}

#[test]
fn ld3r_2489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).B8 * 3}, [x21], 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, E2, DF, 0D", "ld3r {{V(3).B8 * 3}}, [x21], 3");
}

#[test]
fn ld3r_2490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v0.H8 * 3}, [x6], 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, E4, DF, 4D", "ld3r {{v0.H8 * 3}}, [x6], 6");
}

#[test]
fn ld3r_2491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v22.H8 * 3}, [x8], 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, E5, DF, 4D", "ld3r {{v22.H8 * 3}}, [x8], 6");
}

#[test]
fn ld3r_2492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v21.H4 * 3}, [x30], 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, E7, DF, 0D", "ld3r {{v21.H4 * 3}}, [x30], 6");
}

#[test]
fn ld3r_2493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(2).H4 * 3}, [x15], 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, E5, DF, 0D", "ld3r {{V(2).H4 * 3}}, [x15], 6");
}

#[test]
fn ld3r_2494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(31).S4 * 3}, [x16], 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, EA, DF, 4D", "ld3r {{V(31).S4 * 3}}, [x16], 12");
}

#[test]
fn ld3r_2495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v31.S4 * 3}, [x24], 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, EB, DF, 4D", "ld3r {{v31.S4 * 3}}, [x24], 12");
}

#[test]
fn ld3r_2496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(1).S2 * 3}, [x18], 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, EA, DF, 0D", "ld3r {{V(1).S2 * 3}}, [x18], 12");
}

#[test]
fn ld3r_2497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(12).S2 * 3}, [x19], 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, EA, DF, 0D", "ld3r {{V(12).S2 * 3}}, [x19], 12");
}

#[test]
fn ld3r_2498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v29.D2 * 3}, [sp], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, EF, DF, 4D", "ld3r {{v29.D2 * 3}}, [sp], 24");
}

#[test]
fn ld3r_2499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v9.D2 * 3}, [x23], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, EE, DF, 4D", "ld3r {{v9.D2 * 3}}, [x23], 24");
}

#[test]
fn ld3r_2500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v16.D1 * 3}, [XSP(31)], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, EF, DF, 0D", "ld3r {{v16.D1 * 3}}, [XSP(31)], 24");
}

#[test]
fn ld3r_2501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v31.D1 * 3}, [x28], 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, EF, DF, 0D", "ld3r {{v31.D1 * 3}}, [x28], 24");
}

#[test]
fn ld3r_2502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v15.B16 * 3}, [x30], X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, E3, DA, 4D", "ld3r {{v15.B16 * 3}}, [x30], X(26)");
}

#[test]
fn ld3r_2503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(24).B16 * 3}, [x18], x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, E2, DD, 4D", "ld3r {{V(24).B16 * 3}}, [x18], x29");
}

#[test]
fn ld3r_2504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v19.B8 * 3}, [x12], X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, E1, C8, 0D", "ld3r {{v19.B8 * 3}}, [x12], X(8)");
}

#[test]
fn ld3r_2505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v23.B8 * 3}, [x26], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, E3, D7, 0D", "ld3r {{v23.B8 * 3}}, [x26], x23");
}

#[test]
fn ld3r_2506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v13.H8 * 3}, [x21], x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, E6, CB, 4D", "ld3r {{v13.H8 * 3}}, [x21], x11");
}

#[test]
fn ld3r_2507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v7.H8 * 3}, [x23], X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, E6, C7, 4D", "ld3r {{v7.H8 * 3}}, [x23], X(7)");
}

#[test]
fn ld3r_2508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v20.H4 * 3}, [x12], x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, E5, C5, 0D", "ld3r {{v20.H4 * 3}}, [x12], x5");
}

#[test]
fn ld3r_2509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(15).H4 * 3}, [x1], x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, E4, CD, 0D", "ld3r {{V(15).H4 * 3}}, [x1], x13");
}

#[test]
fn ld3r_2510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(29).S4 * 3}, [XSP(31)], x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, EB, D4, 4D", "ld3r {{V(29).S4 * 3}}, [XSP(31)], x20");
}

#[test]
fn ld3r_2511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.S4 * 3}, [x30], x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, EB, DC, 4D", "ld3r {{v26.S4 * 3}}, [x30], x28");
}

#[test]
fn ld3r_2512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(22).S2 * 3}, [x23], x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, EA, C7, 0D", "ld3r {{V(22).S2 * 3}}, [x23], x7");
}

#[test]
fn ld3r_2513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(23).S2 * 3}, [x19], X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, EA, D5, 0D", "ld3r {{V(23).S2 * 3}}, [x19], X(21)");
}

#[test]
fn ld3r_2514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v7.D2 * 3}, [x28], X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, EF, CD, 4D", "ld3r {{v7.D2 * 3}}, [x28], X(13)");
}

#[test]
fn ld3r_2515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(10).D2 * 3}, [x29], x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, EF, CB, 4D", "ld3r {{V(10).D2 * 3}}, [x29], x11");
}

#[test]
fn ld3r_2516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v5.D1 * 3}, [x12], x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, ED, C8, 0D", "ld3r {{v5.D1 * 3}}, [x12], x8");
}

#[test]
fn ld3r_2517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(8).D1 * 3}, [x14], X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, ED, D8, 0D", "ld3r {{V(8).D1 * 3}}, [x14], X(24)");
}

#[test]
fn ld4_2518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v21.B16 * 4}, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 03, 40, 4C", "ld4 {{v21.B16 * 4}}, [x24]");
}

#[test]
fn ld4_2519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v26.B16 * 4}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 01, 40, 4C", "ld4 {{v26.B16 * 4}}, [x12]");
}

#[test]
fn ld4_2520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(23).B8 * 4}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 00, 40, 0C", "ld4 {{V(23).B8 * 4}}, [x6]");
}

#[test]
fn ld4_2521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).B8 * 4}, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 02, 40, 0C", "ld4 {{V(24).B8 * 4}}, [x23]");
}

#[test]
fn ld4_2522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(2).H8 * 4}, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 04, 40, 4C", "ld4 {{V(2).H8 * 4}}, [x1]");
}

#[test]
fn ld4_2523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(7).H8 * 4}, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 06, 40, 4C", "ld4 {{V(7).H8 * 4}}, [x21]");
}

#[test]
fn ld4_2524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v11.H4 * 4}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 06, 40, 0C", "ld4 {{v11.H4 * 4}}, [x22]");
}

#[test]
fn ld4_2525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v13.H4 * 4}, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 07, 40, 0C", "ld4 {{v13.H4 * 4}}, [x26]");
}

#[test]
fn ld4_2526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(20).S4 * 4}, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 0A, 40, 4C", "ld4 {{V(20).S4 * 4}}, [x21]");
}

#[test]
fn ld4_2527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(29).S4 * 4}, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 09, 40, 4C", "ld4 {{V(29).S4 * 4}}, [x8]");
}

#[test]
fn ld4_2528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v14.S2 * 4}, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 09, 40, 0C", "ld4 {{v14.S2 * 4}}, [x10]");
}

#[test]
fn ld4_2529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v4.S2 * 4}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 0B, 40, 0C", "ld4 {{v4.S2 * 4}}, [x30]");
}

#[test]
fn ld4_2530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v29.D2 * 4}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 0F, 40, 4C", "ld4 {{v29.D2 * 4}}, [sp]");
}

#[test]
fn ld4_2531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(0).D2 * 4}, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 0D, 40, 4C", "ld4 {{V(0).D2 * 4}}, [x11]");
}

#[test]
fn ld4_2532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(14).B8 * 4}, [x11], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 01, DF, 0C", "ld4 {{V(14).B8 * 4}}, [x11], 32");
}

#[test]
fn ld4_2533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v7.B8 * 4}, [XSP(31)], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 03, DF, 0C", "ld4 {{v7.B8 * 4}}, [XSP(31)], 32");
}

#[test]
fn ld4_2534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v17.H4 * 4}, [x28], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 07, DF, 0C", "ld4 {{v17.H4 * 4}}, [x28], 32");
}

#[test]
fn ld4_2535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.H4 * 4}, [x0], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 04, DF, 0C", "ld4 {{v25.H4 * 4}}, [x0], 32");
}

#[test]
fn ld4_2536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v2.S2 * 4}, [x21], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 0A, DF, 0C", "ld4 {{v2.S2 * 4}}, [x21], 32");
}

#[test]
fn ld4_2537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v8.S2 * 4}, [x9], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 09, DF, 0C", "ld4 {{v8.S2 * 4}}, [x9], 32");
}

#[test]
fn ld4_2538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(23).B16 * 4}, [x26], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 03, DF, 4C", "ld4 {{V(23).B16 * 4}}, [x26], 64");
}

#[test]
fn ld4_2539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(10).B16 * 4}, [x30], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 03, DF, 4C", "ld4 {{V(10).B16 * 4}}, [x30], 64");
}

#[test]
fn ld4_2540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(29).H8 * 4}, [XSP(31)], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 07, DF, 4C", "ld4 {{V(29).H8 * 4}}, [XSP(31)], 64");
}

#[test]
fn ld4_2541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v6.H8 * 4}, [x28], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 07, DF, 4C", "ld4 {{v6.H8 * 4}}, [x28], 64");
}

#[test]
fn ld4_2542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v6.S4 * 4}, [x9], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 09, DF, 4C", "ld4 {{v6.S4 * 4}}, [x9], 64");
}

#[test]
fn ld4_2543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(26).S4 * 4}, [XSP(31)], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 0B, DF, 4C", "ld4 {{V(26).S4 * 4}}, [XSP(31)], 64");
}

#[test]
fn ld4_2544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(28).D2 * 4}, [x20], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 0E, DF, 4C", "ld4 {{V(28).D2 * 4}}, [x20], 64");
}

#[test]
fn ld4_2545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v19.D2 * 4}, [x30], 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0F, DF, 4C", "ld4 {{v19.D2 * 4}}, [x30], 64");
}

#[test]
fn ld4_2546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v31.B16 * 4}, [x19], X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 02, D4, 4C", "ld4 {{v31.B16 * 4}}, [x19], X(20)");
}

#[test]
fn ld4_2547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v28.B16 * 4}, [x29], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 03, D6, 4C", "ld4 {{v28.B16 * 4}}, [x29], X(22)");
}

#[test]
fn ld4_2548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(28).B8 * 4}, [x8], x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 01, C8, 0C", "ld4 {{V(28).B8 * 4}}, [x8], x8");
}

#[test]
fn ld4_2549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v2.B8 * 4}, [x16], x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 02, C4, 0C", "ld4 {{v2.B8 * 4}}, [x16], x4");
}

#[test]
fn ld4_2550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v31.H8 * 4}, [x14], X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 05, C9, 4C", "ld4 {{v31.H8 * 4}}, [x14], X(9)");
}

#[test]
fn ld4_2551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v26.H8 * 4}, [x22], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 06, D9, 4C", "ld4 {{v26.H8 * 4}}, [x22], x25");
}

#[test]
fn ld4_2552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v3.H4 * 4}, [x7], x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 04, C8, 0C", "ld4 {{v3.H4 * 4}}, [x7], x8");
}

#[test]
fn ld4_2553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v7.H4 * 4}, [x7], X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 04, CD, 0C", "ld4 {{v7.H4 * 4}}, [x7], X(13)");
}

#[test]
fn ld4_2554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(19).S4 * 4}, [x6], x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, C7, 4C", "ld4 {{V(19).S4 * 4}}, [x6], x7");
}

#[test]
fn ld4_2555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(28).S4 * 4}, [XSP(31)], X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 0B, D5, 4C", "ld4 {{V(28).S4 * 4}}, [XSP(31)], X(21)");
}

#[test]
fn ld4_2556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(20).S2 * 4}, [x24], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 0B, CF, 0C", "ld4 {{V(20).S2 * 4}}, [x24], x15");
}

#[test]
fn ld4_2557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v26.S2 * 4}, [x30], X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 0B, D9, 0C", "ld4 {{v26.S2 * 4}}, [x30], X(25)");
}

#[test]
fn ld4_2558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.D2 * 4}, [x12], X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 0D, DC, 4C", "ld4 {{v20.D2 * 4}}, [x12], X(28)");
}

#[test]
fn ld4_2559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(14).D2 * 4}, [x8], x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 0D, CE, 4C", "ld4 {{V(14).D2 * 4}}, [x8], x14");
}

#[test]
fn ld4_2560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v10.B * 4}[14], [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 3B, 60, 4D", "ld4 {{v10.B * 4}}[14], [x29]");
}

#[test]
fn ld4_2561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v1.B * 4}[10], [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 29, 60, 4D", "ld4 {{v1.B * 4}}[10], [x9]");
}

#[test]
fn ld4_2562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v27.H * 4}[4], [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 61, 60, 4D", "ld4 {{v27.H * 4}}[4], [x10]");
}

#[test]
fn ld4_2563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v18.H * 4}[3], [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 78, 60, 0D", "ld4 {{v18.H * 4}}[3], [x4]");
}

#[test]
fn ld4_2564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(0).S * 4}[3], [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, B3, 60, 4D", "ld4 {{V(0).S * 4}}[3], [x24]");
}

#[test]
fn ld4_2565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(17).S * 4}[3], [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, B2, 60, 4D", "ld4 {{V(17).S * 4}}[3], [x17]");
}

#[test]
fn ld4_2566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(29).D * 4}[0], [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, A7, 60, 0D", "ld4 {{V(29).D * 4}}[0], [x26]");
}

#[test]
fn ld4_2567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v11.D * 4}[1], [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, A5, 60, 4D", "ld4 {{v11.D * 4}}[1], [x14]");
}

#[test]
fn ld4_2568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v7.B * 4}[2], [x28], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 2B, FF, 0D", "ld4 {{v7.B * 4}}[2], [x28], 4");
}

#[test]
fn ld4_2569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(4).B * 4}[10], [x23], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 2A, FF, 4D", "ld4 {{V(4).B * 4}}[10], [x23], 4");
}

#[test]
fn ld4_2570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v19.B * 4}[3], [x14], X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2D, F2, 0D", "ld4 {{v19.B * 4}}[3], [x14], X(18)");
}

#[test]
fn ld4_2571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(18).B * 4}[14], [x28], X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 3B, F7, 4D", "ld4 {{V(18).B * 4}}[14], [x28], X(23)");
}

#[test]
fn ld4_2572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v9.H * 4}[2], [x25], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 73, FF, 0D", "ld4 {{v9.H * 4}}[2], [x25], 8");
}

#[test]
fn ld4_2573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(20).H * 4}[4], [x10], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 61, FF, 4D", "ld4 {{V(20).H * 4}}[4], [x10], 8");
}

#[test]
fn ld4_2574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v30.H * 4}[7], [x6], x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 78, E8, 4D", "ld4 {{v30.H * 4}}[7], [x6], x8");
}

#[test]
fn ld4_2575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v26.H * 4}[4], [x27], X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 63, F7, 4D", "ld4 {{v26.H * 4}}[4], [x27], X(23)");
}

#[test]
fn ld4_2576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v9.S * 4}[2], [x28], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, A3, FF, 4D", "ld4 {{v9.S * 4}}[2], [x28], 16");
}

#[test]
fn ld4_2577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v29.S * 4}[3], [x18], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, B2, FF, 4D", "ld4 {{v29.S * 4}}[3], [x18], 16");
}

#[test]
fn ld4_2578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(2).S * 4}[0], [x4], X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, A0, F3, 0D", "ld4 {{V(2).S * 4}}[0], [x4], X(19)");
}

#[test]
fn ld4_2579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v4.S * 4}[0], [x13], x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, A1, FB, 0D", "ld4 {{v4.S * 4}}[0], [x13], x27");
}

#[test]
fn ld4_2580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(16).D * 4}[1], [x30], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, A7, FF, 4D", "ld4 {{V(16).D * 4}}[1], [x30], 32");
}

#[test]
fn ld4_2581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(1).D * 4}[0], [x3], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, A4, FF, 0D", "ld4 {{V(1).D * 4}}[0], [x3], 32");
}

#[test]
fn ld4_2582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(6).D * 4}[0], [x9], X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, A5, F6, 0D", "ld4 {{V(6).D * 4}}[0], [x9], X(22)");
}

#[test]
fn ld4_2583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(7).D * 4}[0], [x25], x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, A7, EB, 0D", "ld4 {{V(7).D * 4}}[0], [x25], x11");
}

#[test]
fn ld4r_2584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v9.B16 * 4}, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, E0, 60, 4D", "ld4r {{v9.B16 * 4}}, [x3]");
}

#[test]
fn ld4r_2585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v12.B16 * 4}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, E0, 60, 4D", "ld4r {{v12.B16 * 4}}, [x0]");
}

#[test]
fn ld4r_2586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v18.B8 * 4}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, E1, 60, 0D", "ld4r {{v18.B8 * 4}}, [x12]");
}

#[test]
fn ld4r_2587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(15).B8 * 4}, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, E0, 60, 0D", "ld4r {{V(15).B8 * 4}}, [x4]");
}

#[test]
fn ld4r_2588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v21.H8 * 4}, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, E5, 60, 4D", "ld4r {{v21.H8 * 4}}, [x8]");
}

#[test]
fn ld4r_2589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(0).H8 * 4}, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, E6, 60, 4D", "ld4r {{V(0).H8 * 4}}, [x20]");
}

#[test]
fn ld4r_2590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v17.H4 * 4}, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, E4, 60, 0D", "ld4r {{v17.H4 * 4}}, [x5]");
}

#[test]
fn ld4r_2591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(1).H4 * 4}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, E6, 60, 0D", "ld4r {{V(1).H4 * 4}}, [x18]");
}

#[test]
fn ld4r_2592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(19).S4 * 4}, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, E8, 60, 4D", "ld4r {{V(19).S4 * 4}}, [x7]");
}

#[test]
fn ld4r_2593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(20).S4 * 4}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, E9, 60, 4D", "ld4r {{V(20).S4 * 4}}, [x9]");
}

#[test]
fn ld4r_2594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v21.S2 * 4}, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, E8, 60, 0D", "ld4r {{v21.S2 * 4}}, [x1]");
}

#[test]
fn ld4r_2595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(28).S2 * 4}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, E9, 60, 0D", "ld4r {{V(28).S2 * 4}}, [x15]");
}

#[test]
fn ld4r_2596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(20).D2 * 4}, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, EF, 60, 4D", "ld4r {{V(20).D2 * 4}}, [x25]");
}

#[test]
fn ld4r_2597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v30.D2 * 4}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, EF, 60, 4D", "ld4r {{v30.D2 * 4}}, [x27]");
}

#[test]
fn ld4r_2598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v19.D1 * 4}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, ED, 60, 0D", "ld4r {{v19.D1 * 4}}, [x12]");
}

#[test]
fn ld4r_2599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v4.D1 * 4}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, EF, 60, 0D", "ld4r {{v4.D1 * 4}}, [sp]");
}

#[test]
fn ld4r_2600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v19.B16 * 4}, [x0], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, FF, 4D", "ld4r {{v19.B16 * 4}}, [x0], 4");
}

#[test]
fn ld4r_2601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v30.B16 * 4}, [x8], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, E1, FF, 4D", "ld4r {{v30.B16 * 4}}, [x8], 4");
}

#[test]
fn ld4r_2602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(20).B8 * 4}, [x30], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, E3, FF, 0D", "ld4r {{V(20).B8 * 4}}, [x30], 4");
}

#[test]
fn ld4r_2603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v21.B8 * 4}, [XSP(31)], 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, E3, FF, 0D", "ld4r {{v21.B8 * 4}}, [XSP(31)], 4");
}

#[test]
fn ld4r_2604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(5).H8 * 4}, [x19], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, E6, FF, 4D", "ld4r {{V(5).H8 * 4}}, [x19], 8");
}

#[test]
fn ld4r_2605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(3).H8 * 4}, [x20], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, E6, FF, 4D", "ld4r {{V(3).H8 * 4}}, [x20], 8");
}

#[test]
fn ld4r_2606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v25.H4 * 4}, [x29], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, E7, FF, 0D", "ld4r {{v25.H4 * 4}}, [x29], 8");
}

#[test]
fn ld4r_2607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(1).H4 * 4}, [x6], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, E4, FF, 0D", "ld4r {{V(1).H4 * 4}}, [x6], 8");
}

#[test]
fn ld4r_2608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v29.S4 * 4}, [x0], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, E8, FF, 4D", "ld4r {{v29.S4 * 4}}, [x0], 16");
}

#[test]
fn ld4r_2609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(22).S4 * 4}, [x24], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, EB, FF, 4D", "ld4r {{V(22).S4 * 4}}, [x24], 16");
}

#[test]
fn ld4r_2610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v2.S2 * 4}, [XSP(31)], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, EB, FF, 0D", "ld4r {{v2.S2 * 4}}, [XSP(31)], 16");
}

#[test]
fn ld4r_2611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v11.S2 * 4}, [x4], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, E8, FF, 0D", "ld4r {{v11.S2 * 4}}, [x4], 16");
}

#[test]
fn ld4r_2612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v0.D2 * 4}, [x30], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, EF, FF, 4D", "ld4r {{v0.D2 * 4}}, [x30], 32");
}

#[test]
fn ld4r_2613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v11.D2 * 4}, [x21], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, EE, FF, 4D", "ld4r {{v11.D2 * 4}}, [x21], 32");
}

#[test]
fn ld4r_2614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v25.D1 * 4}, [x2], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, EC, FF, 0D", "ld4r {{v25.D1 * 4}}, [x2], 32");
}

#[test]
fn ld4r_2615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v29.D1 * 4}, [x0], 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, EC, FF, 0D", "ld4r {{v29.D1 * 4}}, [x0], 32");
}

#[test]
fn ld4r_2616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v26.B16 * 4}, [x16], X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, E2, EA, 4D", "ld4r {{v26.B16 * 4}}, [x16], X(10)");
}

#[test]
fn ld4r_2617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v1.B16 * 4}, [x10], x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, E1, E0, 4D", "ld4r {{v1.B16 * 4}}, [x10], x0");
}

#[test]
fn ld4r_2618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(10).B8 * 4}, [x20], x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, E2, F8, 0D", "ld4r {{V(10).B8 * 4}}, [x20], x24");
}

#[test]
fn ld4r_2619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(28).B8 * 4}, [x24], X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, E3, FA, 0D", "ld4r {{V(28).B8 * 4}}, [x24], X(26)");
}

#[test]
fn ld4r_2620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v20.H8 * 4}, [x19], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, E6, F3, 4D", "ld4r {{v20.H8 * 4}}, [x19], x19");
}

#[test]
fn ld4r_2621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v13.H8 * 4}, [x10], X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, E5, EE, 4D", "ld4r {{v13.H8 * 4}}, [x10], X(14)");
}

#[test]
fn ld4r_2622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(20).H4 * 4}, [XSP(31)], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, E7, F3, 0D", "ld4r {{V(20).H4 * 4}}, [XSP(31)], x19");
}

#[test]
fn ld4r_2623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v22.H4 * 4}, [x17], x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, E6, FC, 0D", "ld4r {{v22.H4 * 4}}, [x17], x28");
}

#[test]
fn ld4r_2624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v23.S4 * 4}, [x0], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E8, F7, 4D", "ld4r {{v23.S4 * 4}}, [x0], x23");
}

#[test]
fn ld4r_2625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v7.S4 * 4}, [x2], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, E8, F3, 4D", "ld4r {{v7.S4 * 4}}, [x2], x19");
}

#[test]
fn ld4r_2626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(30).S2 * 4}, [x4], X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, E8, F7, 0D", "ld4r {{V(30).S2 * 4}}, [x4], X(23)");
}

#[test]
fn ld4r_2627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(29).S2 * 4}, [x30], X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, EB, EB, 0D", "ld4r {{V(29).S2 * 4}}, [x30], X(11)");
}

#[test]
fn ld4r_2628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v25.D2 * 4}, [x23], x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, EE, F8, 4D", "ld4r {{v25.D2 * 4}}, [x23], x24");
}

#[test]
fn ld4r_2629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v30.D2 * 4}, [x13], X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, ED, EA, 4D", "ld4r {{v30.D2 * 4}}, [x13], X(10)");
}

#[test]
fn ld4r_2630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(16).D1 * 4}, [x1], X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, EC, E8, 0D", "ld4r {{V(16).D1 * 4}}, [x1], X(8)");
}

#[test]
fn ld4r_2631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v13.D1 * 4}, [x21], x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, EE, F8, 0D", "ld4r {{v13.D1 * 4}}, [x21], x24");
}

#[test]
fn ldadd_2632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd W(18), w23, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 03, 32, B8", "ldadd W(18), w23, [x30]");
}

#[test]
fn ldadd_2633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd w3, w22, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 00, 23, B8", "ldadd w3, w22, [x5]");
}

#[test]
fn ldadd_2634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd X(11), x15, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 03, 2B, F8", "ldadd X(11), x15, [x30]");
}

#[test]
fn ldadd_2635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd X(9), X(0), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 01, 29, F8", "ldadd X(9), X(0), [x15]");
}

#[test]
fn ldadda_2636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda w22, W(20), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 00, B6, B8", "ldadda w22, W(20), [x7]");
}

#[test]
fn ldadda_2637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda w20, w10, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 00, B4, B8", "ldadda w20, w10, [x7]");
}

#[test]
fn ldadda_2638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda x25, X(27), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 03, B9, F8", "ldadda x25, X(27), [x27]");
}

#[test]
fn ldadda_2639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda x17, X(7), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 00, B1, F8", "ldadda x17, X(7), [x3]");
}

#[test]
fn ldaddab_2640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddab w12, w27, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 01, AC, 38", "ldaddab w12, w27, [x12]");
}

#[test]
fn ldaddab_2641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddab w26, W(22), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 02, BA, 38", "ldaddab w26, W(22), [x21]");
}

#[test]
fn ldaddah_2642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddah W(5), W(29), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 01, A5, 78", "ldaddah W(5), W(29), [x12]");
}

#[test]
fn ldaddah_2643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddah w24, W(13), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 03, B8, 78", "ldaddah w24, W(13), [x24]");
}

#[test]
fn ldaddal_2644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal w7, W(12), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 03, E7, B8", "ldaddal w7, W(12), [x28]");
}

#[test]
fn ldaddal_2645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal W(3), w17, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 00, E3, B8", "ldaddal W(3), w17, [x0]");
}

#[test]
fn ldaddal_2646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal X(24), X(23), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 00, F8, F8", "ldaddal X(24), X(23), [x1]");
}

#[test]
fn ldaddal_2647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal x0, X(8), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 02, E0, F8", "ldaddal x0, X(8), [x16]");
}

#[test]
fn ldaddalb_2648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalb w27, w18, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 02, FB, 38", "ldaddalb w27, w18, [x19]");
}

#[test]
fn ldaddalb_2649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalb W(29), w11, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 02, FD, 38", "ldaddalb W(29), w11, [x23]");
}

#[test]
fn ldaddalh_2650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalh w30, w29, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 02, FE, 78", "ldaddalh w30, w29, [x17]");
}

#[test]
fn ldaddalh_2651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalh w14, W(3), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 02, EE, 78", "ldaddalh w14, W(3), [x17]");
}

#[test]
fn ldaddb_2652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddb w4, W(15), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 24, 38", "ldaddb w4, W(15), [x1]");
}

#[test]
fn ldaddb_2653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddb w18, W(27), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 00, 32, 38", "ldaddb w18, W(27), [x4]");
}

#[test]
fn ldaddh_2654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddh W(2), W(3), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 00, 22, 78", "ldaddh W(2), W(3), [x0]");
}

#[test]
fn ldaddh_2655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddh W(15), W(8), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 01, 2F, 78", "ldaddh W(15), W(8), [x11]");
}

#[test]
fn ldaddl_2656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl w12, w20, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 03, 6C, B8", "ldaddl w12, w20, [x25]");
}

#[test]
fn ldaddl_2657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl w25, w18, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 02, 79, B8", "ldaddl w25, w18, [x19]");
}

#[test]
fn ldaddl_2658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl x21, X(31), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 02, 75, F8", "ldaddl x21, X(31), [x19]");
}

#[test]
fn ldaddl_2659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl X(19), x13, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 02, 73, F8", "ldaddl X(19), x13, [x22]");
}

#[test]
fn ldaddlb_2660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlb w4, W(1), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 02, 64, 38", "ldaddlb w4, W(1), [x20]");
}

#[test]
fn ldaddlb_2661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlb W(27), w24, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 02, 7B, 38", "ldaddlb W(27), w24, [x21]");
}

#[test]
fn ldaddlh_2662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlh w8, W(24), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 02, 68, 78", "ldaddlh w8, W(24), [x18]");
}

#[test]
fn ldaddlh_2663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlh w25, W(13), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 00, 79, 78", "ldaddlh w25, W(13), [x5]");
}

#[test]
fn ldapr_2664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr W(31), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, C0, BF, B8", "ldapr W(31), [x0]");
}

#[test]
fn ldapr_2665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr W(15), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, C3, BF, B8", "ldapr W(15), [x30]");
}

#[test]
fn ldapr_2666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr x17, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, C1, BF, F8", "ldapr x17, [x13]");
}

#[test]
fn ldapr_2667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr x7, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, C0, BF, F8", "ldapr x7, [x5]");
}

#[test]
fn ldaprb_2668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprb w12, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, C3, BF, 38", "ldaprb w12, [x26]");
}

#[test]
fn ldaprb_2669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprb w17, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, C1, BF, 38", "ldaprb w17, [x12]");
}

#[test]
fn ldaprh_2670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprh w14, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, C2, BF, 78", "ldaprh w14, [x17]");
}

#[test]
fn ldaprh_2671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprh w13, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, C0, BF, 78", "ldaprh w13, [x3]");
}

#[test]
fn ldapur_2672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur w28, [x12  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 01, 40, 99", "ldapur w28, [x12  ]");
}

#[test]
fn ldapur_2673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur w26, [x15  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 01, 40, 99", "ldapur w26, [x15  ]");
}

#[test]
fn ldapur_2674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur x3, [x11 , 58  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, A1, 43, D9", "ldapur x3, [x11 , 58  ]");
}

#[test]
fn ldapur_2675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur X(15), [x21 , -149  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B2, 56, D9", "ldapur X(15), [x21 , -149  ]");
}

#[test]
fn ldapurb_2676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurb w5, [x22 , 90  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, A2, 45, 19", "ldapurb w5, [x22 , 90  ]");
}

#[test]
fn ldapurb_2677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurb w8, [x20 , -196  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, C2, 53, 19", "ldapurb w8, [x20 , -196  ]");
}

#[test]
fn ldapurh_2678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurh W(14), [x16 , -21  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, B2, 5E, 59", "ldapurh W(14), [x16 , -21  ]");
}

#[test]
fn ldapurh_2679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurh w13, [sp  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 03, 40, 59", "ldapurh w13, [sp  ]");
}

#[test]
fn ldapursb_2680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb w22, [x17 , 99  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 32, C6, 19", "ldapursb w22, [x17 , 99  ]");
}

#[test]
fn ldapursb_2681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb w6, [x13  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 01, C0, 19", "ldapursb w6, [x13  ]");
}

#[test]
fn ldapursb_2682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb X(3), [x17  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 02, 80, 19", "ldapursb X(3), [x17  ]");
}

#[test]
fn ldapursb_2683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb X(28), [x1 , -226  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, E0, 91, 19", "ldapursb X(28), [x1 , -226  ]");
}

#[test]
fn ldapursh_2684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh W(10), [x22 , 13  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, D2, C0, 59", "ldapursh W(10), [x22 , 13  ]");
}

#[test]
fn ldapursh_2685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh w24, [x23  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 02, C0, 59", "ldapursh w24, [x23  ]");
}

#[test]
fn ldapursh_2686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh x11, [x8  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 01, 80, 59", "ldapursh x11, [x8  ]");
}

#[test]
fn ldapursh_2687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh X(8), [x19  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 02, 80, 59", "ldapursh X(8), [x19  ]");
}

#[test]
fn ldapursw_2688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursw X(22), [x4 , 57  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 90, 83, 99", "ldapursw X(22), [x4 , 57  ]");
}

#[test]
fn ldapursw_2689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursw x26, [x18  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 02, 80, 99", "ldapursw x26, [x18  ]");
}

#[test]
fn ldar_2690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldar w28, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, FF, DF, 88", "ldar w28, [x26]");
}

#[test]
fn ldar_2691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldar w7, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, FF, DF, 88", "ldar w7, [x30]");
}

#[test]
fn ldar_2692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldar X(4), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, FE, DF, C8", "ldar X(4), [x21]");
}

#[test]
fn ldar_2693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldar X(7), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, FF, DF, C8", "ldar X(7), [x27]");
}

#[test]
fn ldarb_2694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldarb W(28), [XSP(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, FF, DF, 08", "ldarb W(28), [XSP(31)]");
}

#[test]
fn ldarb_2695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldarb W(6), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, FF, DF, 08", "ldarb W(6), [x25]");
}

#[test]
fn ldarh_2696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldarh W(24), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, FC, DF, 48", "ldarh W(24), [x7]");
}

#[test]
fn ldarh_2697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldarh W(21), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, FC, DF, 48", "ldarh W(21), [x4]");
}

#[test]
fn ldaxp_2698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp w5, W(18), [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, CB, 7F, 88", "ldaxp w5, W(18), [sp]");
}

#[test]
fn ldaxp_2699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp W(26), w27, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, EC, 7F, 88", "ldaxp W(26), w27, [x3]");
}

#[test]
fn ldaxp_2700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp X(20), x0, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 81, 7F, C8", "ldaxp X(20), x0, [x9]");
}

#[test]
fn ldaxp_2701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp x0, X(31), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, FE, 7F, C8", "ldaxp x0, X(31), [x19]");
}

#[test]
fn ldaxr_2702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr w8, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, FD, 5F, 88", "ldaxr w8, [x14]");
}

#[test]
fn ldaxr_2703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr W(10), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, FE, 5F, 88", "ldaxr W(10), [x16]");
}

#[test]
fn ldaxr_2704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr X(0), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, FC, 5F, C8", "ldaxr X(0), [x2]");
}

#[test]
fn ldaxr_2705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr X(13), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, FF, 5F, C8", "ldaxr X(13), [x29]");
}

#[test]
fn ldaxrb_2706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrb w7, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, FE, 5F, 08", "ldaxrb w7, [x17]");
}

#[test]
fn ldaxrb_2707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrb w16, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, FE, 5F, 08", "ldaxrb w16, [x18]");
}

#[test]
fn ldaxrh_2708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrh W(14), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, FD, 5F, 48", "ldaxrh W(14), [x11]");
}

#[test]
fn ldaxrh_2709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrh W(8), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, FF, 5F, 48", "ldaxrh W(8), [x26]");
}

#[test]
fn ldclr_2710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr W(0), W(25), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 10, 20, B8", "ldclr W(0), W(25), [x2]");
}

#[test]
fn ldclr_2711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr w15, W(8), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 13, 2F, B8", "ldclr w15, W(8), [x30]");
}

#[test]
fn ldclr_2712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr x15, X(21), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 13, 2F, F8", "ldclr x15, X(21), [x25]");
}

#[test]
fn ldclr_2713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr x14, X(15), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, 2E, F8", "ldclr x14, X(15), [x25]");
}

#[test]
fn ldclra_2714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra w15, W(5), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 10, AF, B8", "ldclra w15, W(5), [x5]");
}

#[test]
fn ldclra_2715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra wzr, w14, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 10, BF, B8", "ldclra wzr, w14, [x1]");
}

#[test]
fn ldclra_2716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra X(7), x12, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 12, A7, F8", "ldclra X(7), x12, [x18]");
}

#[test]
fn ldclra_2717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra X(14), x16, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 12, AE, F8", "ldclra X(14), x16, [x18]");
}

#[test]
fn ldclrab_2718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrab w21, W(25), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 10, B5, 38", "ldclrab w21, W(25), [x3]");
}

#[test]
fn ldclrab_2719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrab W(1), W(15), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, A1, 38", "ldclrab W(1), W(15), [x5]");
}

#[test]
fn ldclrah_2720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrah W(4), w24, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 13, A4, 78", "ldclrah W(4), w24, [x26]");
}

#[test]
fn ldclrah_2721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrah W(5), w12, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 11, A5, 78", "ldclrah W(5), w12, [x11]");
}

#[test]
fn ldclral_2722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral W(11), W(0), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 11, EB, B8", "ldclral W(11), W(0), [x15]");
}

#[test]
fn ldclral_2723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral W(13), w10, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 12, ED, B8", "ldclral W(13), w10, [x20]");
}

#[test]
fn ldclral_2724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral x23, X(11), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 10, F7, F8", "ldclral x23, X(11), [x6]");
}

#[test]
fn ldclral_2725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral x26, x0, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 11, FA, F8", "ldclral x26, x0, [x9]");
}

#[test]
fn ldclralb_2726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralb w19, w30, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 12, F3, 38", "ldclralb w19, w30, [x16]");
}

#[test]
fn ldclralb_2727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralb w15, w24, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 10, EF, 38", "ldclralb w15, w24, [x1]");
}

#[test]
fn ldclralh_2728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralh W(11), W(20), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 13, EB, 78", "ldclralh W(11), W(20), [x30]");
}

#[test]
fn ldclralh_2729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralh w29, W(25), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 13, FD, 78", "ldclralh w29, W(25), [x28]");
}

#[test]
fn ldclrb_2730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrb w25, w21, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 12, 39, 38", "ldclrb w25, w21, [x23]");
}

#[test]
fn ldclrb_2731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrb W(28), W(18), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 10, 3C, 38", "ldclrb W(28), W(18), [x7]");
}

#[test]
fn ldclrh_2732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrh w6, w14, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 13, 26, 78", "ldclrh w6, w14, [x25]");
}

#[test]
fn ldclrh_2733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrh W(1), W(20), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 13, 21, 78", "ldclrh W(1), W(20), [x24]");
}

#[test]
fn ldclrl_2734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl W(12), w17, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 12, 6C, B8", "ldclrl W(12), w17, [x22]");
}

#[test]
fn ldclrl_2735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl W(10), W(27), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 13, 6A, B8", "ldclrl W(10), W(27), [x29]");
}

#[test]
fn ldclrl_2736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl X(29), X(25), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 11, 7D, F8", "ldclrl X(29), X(25), [x12]");
}

#[test]
fn ldclrl_2737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl X(21), X(12), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 11, 75, F8", "ldclrl X(21), X(12), [x14]");
}

#[test]
fn ldclrlb_2738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlb w16, w27, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 10, 70, 38", "ldclrlb w16, w27, [x2]");
}

#[test]
fn ldclrlb_2739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlb w29, w5, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 10, 7D, 38", "ldclrlb w29, w5, [x0]");
}

#[test]
fn ldclrlh_2740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlh W(18), w13, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 11, 72, 78", "ldclrlh W(18), w13, [x8]");
}

#[test]
fn ldclrlh_2741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlh W(6), W(4), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 13, 66, 78", "ldclrlh W(6), W(4), [x26]");
}

#[test]
fn ldeor_2742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor w20, W(22), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 22, 34, B8", "ldeor w20, W(22), [x16]");
}

#[test]
fn ldeor_2743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor W(4), W(28), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 22, 24, B8", "ldeor W(4), W(28), [x17]");
}

#[test]
fn ldeor_2744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor X(24), x29, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 23, 38, F8", "ldeor X(24), x29, [x29]");
}

#[test]
fn ldeor_2745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor X(29), x13, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 22, 3D, F8", "ldeor X(29), x13, [x22]");
}

#[test]
fn ldeora_2746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora W(31), w10, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 21, BF, B8", "ldeora W(31), w10, [x9]");
}

#[test]
fn ldeora_2747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora w3, W(9), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 22, A3, B8", "ldeora w3, W(9), [x23]");
}

#[test]
fn ldeora_2748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora X(14), x16, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 23, AE, F8", "ldeora X(14), x16, [x24]");
}

#[test]
fn ldeora_2749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora X(6), X(21), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 21, A6, F8", "ldeora X(6), X(21), [x13]");
}

#[test]
fn ldeorab_2750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorab w19, W(16), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 20, B3, 38", "ldeorab w19, W(16), [x5]");
}

#[test]
fn ldeorab_2751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorab W(21), w18, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 20, B5, 38", "ldeorab W(21), w18, [x3]");
}

#[test]
fn ldeorah_2752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorah w4, w26, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 23, A4, 78", "ldeorah w4, w26, [x28]");
}

#[test]
fn ldeorah_2753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorah W(2), w11, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 22, A2, 78", "ldeorah W(2), w11, [x16]");
}

#[test]
fn ldeoral_2754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral w30, w1, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 22, FE, B8", "ldeoral w30, w1, [x18]");
}

#[test]
fn ldeoral_2755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral W(20), w4, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 22, F4, B8", "ldeoral W(20), w4, [x18]");
}

#[test]
fn ldeoral_2756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral x8, x26, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 20, E8, F8", "ldeoral x8, x26, [x6]");
}

#[test]
fn ldeoral_2757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral x29, X(23), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 20, FD, F8", "ldeoral x29, X(23), [x2]");
}

#[test]
fn ldeoralb_2758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralb w14, W(27), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 23, EE, 38", "ldeoralb w14, W(27), [x27]");
}

#[test]
fn ldeoralb_2759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralb W(1), w7, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 20, E1, 38", "ldeoralb W(1), w7, [x5]");
}

#[test]
fn ldeoralh_2760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralh W(6), W(0), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 20, E6, 78", "ldeoralh W(6), W(0), [x5]");
}

#[test]
fn ldeoralh_2761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralh W(16), W(16), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 22, F0, 78", "ldeoralh W(16), W(16), [x16]");
}

#[test]
fn ldeorb_2762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorb W(23), W(29), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 21, 37, 38", "ldeorb W(23), W(29), [x9]");
}

#[test]
fn ldeorb_2763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorb W(3), W(15), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 22, 23, 38", "ldeorb W(3), W(15), [x22]");
}

#[test]
fn ldeorh_2764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorh w10, W(14), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 20, 2A, 78", "ldeorh w10, W(14), [x2]");
}

#[test]
fn ldeorh_2765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorh W(25), w24, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 22, 39, 78", "ldeorh W(25), w24, [x23]");
}

#[test]
fn ldeorl_2766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl w27, W(7), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 22, 7B, B8", "ldeorl w27, W(7), [x22]");
}

#[test]
fn ldeorl_2767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl w24, w25, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 22, 78, B8", "ldeorl w24, w25, [x18]");
}

#[test]
fn ldeorl_2768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl x9, x6, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 22, 69, F8", "ldeorl x9, x6, [x17]");
}

#[test]
fn ldeorl_2769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl X(26), X(27), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 21, 7A, F8", "ldeorl X(26), X(27), [x9]");
}

#[test]
fn ldeorlb_2770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlb w10, W(9), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 22, 6A, 38", "ldeorlb w10, W(9), [x21]");
}

#[test]
fn ldeorlb_2771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlb w5, w24, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 21, 65, 38", "ldeorlb w5, w24, [x15]");
}

#[test]
fn ldeorlh_2772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlh w23, W(15), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 20, 77, 78", "ldeorlh w23, W(15), [x7]");
}

#[test]
fn ldeorlh_2773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlh W(20), W(10), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 22, 74, 78", "ldeorlh W(20), W(10), [x16]");
}

#[test]
fn ldlar_2774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar w30, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 7D, DF, 88", "ldlar w30, [x14]");
}

#[test]
fn ldlar_2775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar W(11), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 7E, DF, 88", "ldlar W(11), [x21]");
}

#[test]
fn ldlar_2776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar X(10), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 7C, DF, C8", "ldlar X(10), [x2]");
}

#[test]
fn ldlar_2777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar x23, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 7C, DF, C8", "ldlar x23, [x7]");
}

#[test]
fn ldlarb_2778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarb W(19), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 7C, DF, 08", "ldlarb W(19), [x0]");
}

#[test]
fn ldlarb_2779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarb W(30), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 7F, DF, 08", "ldlarb W(30), [x29]");
}

#[test]
fn ldlarh_2780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarh w8, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 7E, DF, 48", "ldlarh w8, [x21]");
}

#[test]
fn ldlarh_2781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarh w30, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 7C, DF, 48", "ldlarh w30, [x3]");
}

#[test]
fn ldnp_2782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp S(23), S(20), [x25  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 53, 40, 2C", "ldnp S(23), S(20), [x25  ]");
}

#[test]
fn ldnp_2783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp S(22), s9, [x15 , 200  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 25, 59, 2C", "ldnp S(22), s9, [x15 , 200  ]");
}

#[test]
fn ldnp_2784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp D(21), d27, [x3 , 264  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, EC, 50, 6C", "ldnp D(21), d27, [x3 , 264  ]");
}

#[test]
fn ldnp_2785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp D(2), D(12), [x15  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 31, 40, 6C", "ldnp D(2), D(12), [x15  ]");
}

#[test]
fn ldnp_2786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp Q(6), Q(10), [x3 , -400  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, A8, 73, AC", "ldnp Q(6), Q(10), [x3 , -400  ]");
}

#[test]
fn ldnp_2787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp q17, q18, [x30 , -224  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 4B, 79, AC", "ldnp q17, q18, [x30 , -224  ]");
}

#[test]
fn ldnp_2788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp W(20), W(24), [XSP(31)  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 63, 40, 28", "ldnp W(20), W(24), [XSP(31)  ]");
}

#[test]
fn ldnp_2789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp W(25), W(11), [x9  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 2D, 40, 28", "ldnp W(25), W(11), [x9  ]");
}

#[test]
fn ldnp_2790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp x23, x16, [x26  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 43, 40, A8", "ldnp x23, x16, [x26  ]");
}

#[test]
fn ldnp_2791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp X(17), x10, [x3  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 28, 40, A8", "ldnp X(17), x10, [x3  ]");
}

#[test]
fn ldp_2792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(30), s2, [x9], 200
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 09, D9, 2C", "ldp S(30), s2, [x9], 200");
}

#[test]
fn ldp_2793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(27), s20, [x23], 44
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, D2, C5, 2C", "ldp S(27), s20, [x23], 44");
}

#[test]
fn ldp_2794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp D(27), d5, [x6], 88
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 94, C5, 6C", "ldp D(27), d5, [x6], 88");
}

#[test]
fn ldp_2795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d4, D(27), [x7], -432
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 6C, E5, 6C", "ldp d4, D(27), [x7], -432");
}

#[test]
fn ldp_2796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q28, q8, [x25], -480
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 23, F1, AC", "ldp q28, q8, [x25], -480");
}

#[test]
fn ldp_2797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q0, q11, [x28], 688
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, AF, D5, AC", "ldp q0, q11, [x28], 688");
}

#[test]
fn ldp_2798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(17), S(7), [x0, -16]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 1C, FE, 2D", "ldp S(17), S(7), [x0, -16]!");
}

#[test]
fn ldp_2799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp s1, S(7), [x7, -80]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 1C, F6, 2D", "ldp s1, S(7), [x7, -80]!");
}

#[test]
fn ldp_2800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp D(17), D(12), [x4, -208]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 30, F3, 6D", "ldp D(17), D(12), [x4, -208]!");
}

#[test]
fn ldp_2801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp D(0), D(19), [x5, 96]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 4C, C6, 6D", "ldp D(0), D(19), [x5, 96]!");
}

#[test]
fn ldp_2802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q23, q14, [x3, -464]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, B8, F1, AD", "ldp q23, q14, [x3, -464]!");
}

#[test]
fn ldp_2803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp Q(27), Q(14), [x21, 720]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, BA, D6, AD", "ldp Q(27), Q(14), [x21, 720]!");
}

#[test]
fn ldp_2804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp s6, s27, [sp , -220  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, EF, 64, 2D", "ldp s6, s27, [sp , -220  ]");
}

#[test]
fn ldp_2805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp s18, s2, [x26  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 0B, 40, 2D", "ldp s18, s2, [x26  ]");
}

#[test]
fn ldp_2806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp D(22), D(27), [x19  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 6E, 40, 6D", "ldp D(22), D(27), [x19  ]");
}

#[test]
fn ldp_2807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp D(6), d21, [x7  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 54, 40, 6D", "ldp D(6), d21, [x7  ]");
}

#[test]
fn ldp_2808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q16, Q(17), [x22 , -368  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, C6, 74, AD", "ldp q16, Q(17), [x22 , -368  ]");
}

#[test]
fn ldp_2809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q7, q15, [x24 , 960  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 3F, 5E, AD", "ldp q7, q15, [x24 , 960  ]");
}

#[test]
fn ldp_2810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp W(18), w17, [x16], -160
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 46, EC, 28", "ldp W(18), w17, [x16], -160");
}

#[test]
fn ldp_2811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp w29, w23, [x6], -176
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 5C, EA, 28", "ldp w29, w23, [x6], -176");
}

#[test]
fn ldp_2812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp x25, x21, [x10], 224
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 55, CE, A8", "ldp x25, x21, [x10], 224");
}

#[test]
fn ldp_2813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp x2, x19, [x29], 168
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, CF, CA, A8", "ldp x2, x19, [x29], 168");
}

#[test]
fn ldp_2814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp w18, w23, [x8, 128]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 5D, D0, 29", "ldp w18, w23, [x8, 128]!");
}

#[test]
fn ldp_2815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp w3, w15, [x3, 228]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, BC, DC, 29", "ldp w3, w15, [x3, 228]!");
}

#[test]
fn ldp_2816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp x29, x4, [x4, -288]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 10, EE, A9", "ldp x29, x4, [x4, -288]!");
}

#[test]
fn ldp_2817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(30), x28, [x23, 488]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, F2, DE, A9", "ldp X(30), x28, [x23, 488]!");
}

#[test]
fn ldp_2818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp W(17), W(30), [x29  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 7B, 40, 29", "ldp W(17), W(30), [x29  ]");
}

#[test]
fn ldp_2819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp w19, w7, [x27  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 1F, 40, 29", "ldp w19, w7, [x27  ]");
}

#[test]
fn ldp_2820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(10), x0, [x8 , -184  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 81, 74, A9", "ldp X(10), x0, [x8 , -184  ]");
}

#[test]
fn ldp_2821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldp x8, x11, [x5  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 2C, 40, A9", "ldp x8, x11, [x5  ]");
}

#[test]
fn ldpsw_2822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw x10, X(19), [x2], 192
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 4C, D8, 68", "ldpsw x10, X(19), [x2], 192");
}

#[test]
fn ldpsw_2823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(19), X(3), [x9], 152
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0D, D3, 68", "ldpsw X(19), X(3), [x9], 152");
}

#[test]
fn ldpsw_2824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw x29, x27, [x8, -32]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 6D, FC, 69", "ldpsw x29, x27, [x8, -32]!");
}

#[test]
fn ldpsw_2825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(25), x28, [x29, -248]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 73, E1, 69", "ldpsw X(25), x28, [x29, -248]!");
}

#[test]
fn ldpsw_2826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(27), x11, [x3 , 116  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, AC, 4E, 69", "ldpsw X(27), x11, [x3 , 116  ]");
}

#[test]
fn ldpsw_2827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(17), x7, [x8  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 1D, 40, 69", "ldpsw X(17), x7, [x8  ]");
}

#[test]
fn ldr_2828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b14, [x18], 109
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, D6, 46, 3C", "ldr b14, [x18], 109");
}

#[test]
fn ldr_2829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(24), [x14], 191
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, F5, 4B, 3C", "ldr B(24), [x14], 191");
}

#[test]
fn ldr_2830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr H(20), [x12], -118
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, A5, 58, 7C", "ldr H(20), [x12], -118");
}

#[test]
fn ldr_2831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr H(14), [x27], 171
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, B7, 4A, 7C", "ldr H(14), [x27], 171");
}

#[test]
fn ldr_2832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(0), [x16], -99
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, D6, 59, BC", "ldr S(0), [x16], -99");
}

#[test]
fn ldr_2833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(22), [x15], 209
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 15, 4D, BC", "ldr S(22), [x15], 209");
}

#[test]
fn ldr_2834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d10, [x15], -202
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 65, 53, FC", "ldr d10, [x15], -202");
}

#[test]
fn ldr_2835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d18, [x26], -207
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 17, 53, FC", "ldr d18, [x26], -207");
}

#[test]
fn ldr_2836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(14), [x2], 151
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 74, C9, 3C", "ldr Q(14), [x2], 151");
}

#[test]
fn ldr_2837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(21), [x4], 127
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, F4, C7, 3C", "ldr Q(21), [x4], 127");
}

#[test]
fn ldr_2838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b31, [x5, 17]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 1C, 41, 3C", "ldr b31, [x5, 17]!");
}

#[test]
fn ldr_2839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b31, [x25, -17]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, FF, 5E, 3C", "ldr b31, [x25, -17]!");
}

#[test]
fn ldr_2840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h2, [sp, -75]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 5F, 5B, 7C", "ldr h2, [sp, -75]!");
}

#[test]
fn ldr_2841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr H(10), [x19, -164]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, CE, 55, 7C", "ldr H(10), [x19, -164]!");
}

#[test]
fn ldr_2842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(2), [x11, -12]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 4D, 5F, BC", "ldr S(2), [x11, -12]!");
}

#[test]
fn ldr_2843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s17, [sp, -34]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, EF, 5D, BC", "ldr s17, [sp, -34]!");
}

#[test]
fn ldr_2844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d24, [x10, -199]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 9D, 53, FC", "ldr d24, [x10, -199]!");
}

#[test]
fn ldr_2845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(27), [x16, 159]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, FE, 49, FC", "ldr D(27), [x16, 159]!");
}

#[test]
fn ldr_2846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(21), [x1, 209]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 1C, CD, 3C", "ldr Q(21), [x1, 209]!");
}

#[test]
fn ldr_2847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q13, [x10, 217]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 9D, CD, 3C", "ldr q13, [x10, 217]!");
}

#[test]
fn ldr_2848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b30, [x4  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 00, 40, 3D", "ldr b30, [x4  ]");
}

#[test]
fn ldr_2849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(31), [x14 , 1608  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 21, 59, 3D", "ldr B(31), [x14 , 1608  ]");
}

#[test]
fn ldr_2850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h5, [x17  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 02, 40, 7D", "ldr h5, [x17  ]");
}

#[test]
fn ldr_2851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h10, [sp , 7536  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, E3, 7A, 7D", "ldr h10, [sp , 7536  ]");
}

#[test]
fn ldr_2852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s1, [x15 , 6064  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, B1, 57, BD", "ldr s1, [x15 , 6064  ]");
}

#[test]
fn ldr_2853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(16), [x3 , 13112  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 38, 73, BD", "ldr S(16), [x3 , 13112  ]");
}

#[test]
fn ldr_2854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(1), [x11 , 2640  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 29, 45, FD", "ldr D(1), [x11 , 2640  ]");
}

#[test]
fn ldr_2855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(19), [x16  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 02, 40, FD", "ldr D(19), [x16  ]");
}

#[test]
fn ldr_2856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(20), [x0 , 23536  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, FC, D6, 3D", "ldr Q(20), [x0 , 23536  ]");
}

#[test]
fn ldr_2857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q7, [x14 , 58496  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 21, F9, 3D", "ldr q7, [x14 , 58496  ]");
}

#[test]
fn ldr_2858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(24), [x27], -233
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 77, 51, B8", "ldr W(24), [x27], -233");
}

#[test]
fn ldr_2859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(3), [x10], -172
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 45, 55, B8", "ldr W(3), [x10], -172");
}

#[test]
fn ldr_2860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(20), [x14], -84
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, C5, 5A, F8", "ldr X(20), [x14], -84");
}

#[test]
fn ldr_2861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x25, [x3], -242
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, E4, 50, F8", "ldr x25, [x3], -242");
}

#[test]
fn ldr_2862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr w2, [x16, -183]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 9E, 54, B8", "ldr w2, [x16, -183]!");
}

#[test]
fn ldr_2863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(31), [x26, -106]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 6F, 59, B8", "ldr W(31), [x26, -106]!");
}

#[test]
fn ldr_2864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x5, [x3, -148]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, CC, 56, F8", "ldr x5, [x3, -148]!");
}

#[test]
fn ldr_2865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x3, [x26, -204]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 4F, 53, F8", "ldr x3, [x26, -204]!");
}

#[test]
fn ldr_2866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr w14, [x28 , 14248  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, AB, 77, B9", "ldr w14, [x28 , 14248  ]");
}

#[test]
fn ldr_2867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr w26, [x3  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 00, 40, B9", "ldr w26, [x3  ]");
}

#[test]
fn ldr_2868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(31), [x21 , 12968  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 56, 59, F9", "ldr X(31), [x21 , 12968  ]");
}

#[test]
fn ldr_2869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(19), [x11  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 01, 40, F9", "ldr X(19), [x11  ]");
}

#[test]
fn ldr_2870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s27, -89020
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 22, F5, 1C", "ldr s27, -89020");
}

#[test]
fn ldr_2871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s30, -67644
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, BE, F7, 1C", "ldr s30, -67644");
}

#[test]
fn ldr_2872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d22, -248092
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, B7, E1, 5C", "ldr d22, -248092");
}

#[test]
fn ldr_2873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(2), 72940
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, E7, 08, 5C", "ldr D(2), 72940");
}

#[test]
fn ldr_2874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q4, 86044
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 80, 0A, 9C", "ldr q4, 86044");
}

#[test]
fn ldr_2875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(9), 5116
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 9F, 00, 9C", "ldr Q(9), 5116");
}

#[test]
fn ldr_2876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr w12, -224480
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 99, E4, 18", "ldr w12, -224480");
}

#[test]
fn ldr_2877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(23), -160368
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 6C, EC, 18", "ldr W(23), -160368");
}

#[test]
fn ldr_2878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x6, 156520
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 1B, 13, 58", "ldr x6, 156520");
}

#[test]
fn ldr_2879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(7), 241596
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 7D, 1D, 58", "ldr X(7), 241596");
}

#[test]
fn ldr_2880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b11, [x6, W(1)  , UXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 58, 61, 3C", "ldr b11, [x6, W(1)  , UXTW  0   ]");
}

#[test]
fn ldr_2881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(30), [x2, w7  , SXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, D8, 67, 3C", "ldr B(30), [x2, w7  , SXTW  0   ]");
}

#[test]
fn ldr_2882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr H(1), [x14, x12   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 69, 6C, 7C", "ldr H(1), [x14, x12   ]");
}

#[test]
fn ldr_2883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h8, [x20, X(15)  , LSL  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 6A, 6F, 7C", "ldr h8, [x20, X(15)  , LSL  0   ]");
}

#[test]
fn ldr_2884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s3, [x24, W(10)  , UXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 4B, 6A, BC", "ldr s3, [x24, W(10)  , UXTW  0   ]");
}

#[test]
fn ldr_2885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(6), [x8, w12  , SXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, C9, 6C, BC", "ldr S(6), [x8, w12  , SXTW  0   ]");
}

#[test]
fn ldr_2886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d9, [x18, X(30)   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 6A, 7E, FC", "ldr d9, [x18, X(30)   ]");
}

#[test]
fn ldr_2887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(4), [x1, x25   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 68, 79, FC", "ldr D(4), [x1, x25   ]");
}

#[test]
fn ldr_2888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(31), [x12, x4   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 69, E4, 3C", "ldr Q(31), [x12, x4   ]");
}

#[test]
fn ldr_2889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(21), [x9, x20   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 69, F4, 3C", "ldr Q(21), [x9, x20   ]");
}

#[test]
fn ldr_2890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr w8, [x17, W(22)  , SXTW  2   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, DA, 76, B8", "ldr w8, [x17, W(22)  , SXTW  2   ]");
}

#[test]
fn ldr_2891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr w23, [x18, W(26)  , SXTW  2   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, DA, 7A, B8", "ldr w23, [x18, W(26)  , SXTW  2   ]");
}

#[test]
fn ldr_2892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(15), [sp, W(5)  , SXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, CB, 65, F8", "ldr X(15), [sp, W(5)  , SXTW  0   ]");
}

#[test]
fn ldr_2893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(7), [x16, w9  , SXTW  3   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, DA, 69, F8", "ldr X(7), [x16, w9  , SXTW  3   ]");
}

#[test]
fn ldraa_2894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa xzr, [x12  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 05, 20, F8", "ldraa xzr, [x12  ]");
}

#[test]
fn ldraa_2895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa X(10), [x27  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 07, 20, F8", "ldraa X(10), [x27  ]");
}

#[test]
fn ldraa_2896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa x3, [x2, 808]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 5C, 26, F8", "ldraa x3, [x2, 808]!");
}

#[test]
fn ldraa_2897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa x5, [x29, -2528]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 4F, 6C, F8", "ldraa x5, [x29, -2528]!");
}

#[test]
fn ldrab_2898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab X(2), [x16 , -1792  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 06, F2, F8", "ldrab X(2), [x16 , -1792  ]");
}

#[test]
fn ldrab_2899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab X(7), [x15 , 1104  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, A5, A8, F8", "ldrab X(7), [x15 , 1104  ]");
}

#[test]
fn ldrab_2900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab x26, [x11, 2968]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 3D, B7, F8", "ldrab x26, [x11, 2968]!");
}

#[test]
fn ldrab_2901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab X(3), [sp, -1384]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 3F, F5, F8", "ldrab X(3), [sp, -1384]!");
}

#[test]
fn ldrb_2902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(5), [x28], 180
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 47, 4B, 38", "ldrb W(5), [x28], 180");
}

#[test]
fn ldrb_2903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w26, [x11], -22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, A5, 5E, 38", "ldrb w26, [x11], -22");
}

#[test]
fn ldrb_2904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w13, [x24, 244]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 4F, 4F, 38", "ldrb w13, [x24, 244]!");
}

#[test]
fn ldrb_2905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(21), [x0, -29]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 3C, 5E, 38", "ldrb W(21), [x0, -29]!");
}

#[test]
fn ldrb_2906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(27), [sp  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 03, 40, 39", "ldrb W(27), [sp  ]");
}

#[test]
fn ldrb_2907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w7, [x4  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 00, 40, 39", "ldrb w7, [x4  ]");
}

#[test]
fn ldrb_2908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(18), [x5, W(18)  , UXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 58, 72, 38", "ldrb W(18), [x5, W(18)  , UXTW  0   ]");
}

#[test]
fn ldrb_2909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w17, [x28, W(19)  , SXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, DB, 73, 38", "ldrb w17, [x28, W(19)  , SXTW  0   ]");
}

#[test]
fn ldrh_2910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w18, [x23], 251
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, B6, 4F, 78", "ldrh w18, [x23], 251");
}

#[test]
fn ldrh_2911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w18, [x1], 135
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 74, 48, 78", "ldrh w18, [x1], 135");
}

#[test]
fn ldrh_2912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w16, [x11, 237]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, DD, 4E, 78", "ldrh w16, [x11, 237]!");
}

#[test]
fn ldrh_2913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w2, [x8, 110]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, ED, 46, 78", "ldrh w2, [x8, 110]!");
}

#[test]
fn ldrh_2914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh wzr, [sp , 5582  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 9F, 6B, 79", "ldrh wzr, [sp , 5582  ]");
}

#[test]
fn ldrh_2915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh W(0), [x18 , 2738  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 66, 55, 79", "ldrh W(0), [x18 , 2738  ]");
}

#[test]
fn ldrh_2916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w28, [x17, x14  , SXTX  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, EA, 6E, 78", "ldrh w28, [x17, x14  , SXTX  0   ]");
}

#[test]
fn ldrh_2917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w24, [x26, x0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 6B, 60, 78", "ldrh w24, [x26, x0   ]");
}

#[test]
fn ldrsb_2918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb wzr, [x30], -162
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, E7, D5, 38", "ldrsb wzr, [x30], -162");
}

#[test]
fn ldrsb_2919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(14), [x7], -209
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, F4, D2, 38", "ldrsb W(14), [x7], -209");
}

#[test]
fn ldrsb_2920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(23), [x17], -200
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 86, 93, 38", "ldrsb X(23), [x17], -200");
}

#[test]
fn ldrsb_2921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(11), [x16], 241
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 16, 8F, 38", "ldrsb X(11), [x16], 241");
}

#[test]
fn ldrsb_2922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb w27, [x11, -178]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, ED, D4, 38", "ldrsb w27, [x11, -178]!");
}

#[test]
fn ldrsb_2923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(4), [x15, 93]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, DD, C5, 38", "ldrsb W(4), [x15, 93]!");
}

#[test]
fn ldrsb_2924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb x18, [x22, 91]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, BE, 85, 38", "ldrsb x18, [x22, 91]!");
}

#[test]
fn ldrsb_2925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb x26, [x20, -37]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, BE, 9D, 38", "ldrsb x26, [x20, -37]!");
}

#[test]
fn ldrsb_2926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(30), [x15 , 3805  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 75, FB, 39", "ldrsb W(30), [x15 , 3805  ]");
}

#[test]
fn ldrsb_2927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(8), [x22 , 3968  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 02, FE, 39", "ldrsb W(8), [x22 , 3968  ]");
}

#[test]
fn ldrsb_2928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb x1, [x19 , 1379  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 8E, 95, 39", "ldrsb x1, [x19 , 1379  ]");
}

#[test]
fn ldrsb_2929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(5), [x13  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 01, 80, 39", "ldrsb X(5), [x13  ]");
}

#[test]
fn ldrsb_2930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(6), [x30, X(10)  , LSL  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 7B, EA, 38", "ldrsb W(6), [x30, X(10)  , LSL  0   ]");
}

#[test]
fn ldrsb_2931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb w15, [x23, x30  , SXTX  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, FA, FE, 38", "ldrsb w15, [x23, x30  , SXTX  0   ]");
}

#[test]
fn ldrsb_2932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(1), [x26, w28  , SXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, DB, BC, 38", "ldrsb X(1), [x26, w28  , SXTW  0   ]");
}

#[test]
fn ldrsb_2933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(15), [x24, w4  , UXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 5B, A4, 38", "ldrsb X(15), [x24, w4  , UXTW  0   ]");
}

#[test]
fn ldrsh_2934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(7), [x0], -104
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 84, D9, 78", "ldrsh W(7), [x0], -104");
}

#[test]
fn ldrsh_2935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(21), [x12], 160
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 05, CA, 78", "ldrsh W(21), [x12], 160");
}

#[test]
fn ldrsh_2936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x1, [x8], -29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 35, 9E, 78", "ldrsh x1, [x8], -29");
}

#[test]
fn ldrsh_2937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(30), [x12], 146
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 25, 89, 78", "ldrsh X(30), [x12], 146");
}

#[test]
fn ldrsh_2938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(10), [x1, -154]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 6C, D6, 78", "ldrsh W(10), [x1, -154]!");
}

#[test]
fn ldrsh_2939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w19, [x10, 146]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2D, C9, 78", "ldrsh w19, [x10, 146]!");
}

#[test]
fn ldrsh_2940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(7), [x23, 200]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 8E, 8C, 78", "ldrsh X(7), [x23, 200]!");
}

#[test]
fn ldrsh_2941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(2), [x8, 170]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, AD, 8A, 78", "ldrsh X(2), [x8, 170]!");
}

#[test]
fn ldrsh_2942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w10, [x0  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 00, C0, 79", "ldrsh w10, [x0  ]");
}

#[test]
fn ldrsh_2943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w22, [x25 , 2516  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, AB, D3, 79", "ldrsh w22, [x25 , 2516  ]");
}

#[test]
fn ldrsh_2944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x0, [x0  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00, 80, 79", "ldrsh x0, [x0  ]");
}

#[test]
fn ldrsh_2945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(21), [x13 , 7244  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 99, B8, 79", "ldrsh X(21), [x13 , 7244  ]");
}

#[test]
fn ldrsh_2946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w5, [x6, x14   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 68, EE, 78", "ldrsh w5, [x6, x14   ]");
}

#[test]
fn ldrsh_2947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w28, [x15, X(18)   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 69, F2, 78", "ldrsh w28, [x15, X(18)   ]");
}

#[test]
fn ldrsh_2948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(25), [XSP(31), W(29)  , SXTW  1   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, DB, BD, 78", "ldrsh X(25), [XSP(31), W(29)  , SXTW  1   ]");
}

#[test]
fn ldrsh_2949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(9), [x9, wzr  , SXTW  1   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, D9, BF, 78", "ldrsh X(9), [x9, wzr  , SXTW  1   ]");
}

#[test]
fn ldrsw_2950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x10, [x7], 122
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, A4, 87, B8", "ldrsw x10, [x7], 122");
}

#[test]
fn ldrsw_2951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x10, [x16], 95
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, F6, 85, B8", "ldrsw x10, [x16], 95");
}

#[test]
fn ldrsw_2952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(30), [x13, 87]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 7D, 85, B8", "ldrsw X(30), [x13, 87]!");
}

#[test]
fn ldrsw_2953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(24), [x5, -32]!
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 0C, 9E, B8", "ldrsw X(24), [x5, -32]!");
}

#[test]
fn ldrsw_2954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x14, [x15  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 01, 80, B9", "ldrsw x14, [x15  ]");
}

#[test]
fn ldrsw_2955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x1, [x21  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 02, 80, B9", "ldrsw x1, [x21  ]");
}

#[test]
fn ldrsw_2956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(24), 26660
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 41, 03, 98", "ldrsw X(24), 26660");
}

#[test]
fn ldrsw_2957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(25), -229940
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, EE, E3, 98", "ldrsw X(25), -229940");
}

#[test]
fn ldrsw_2958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x26, [x24, W(28)  , UXTW  0   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 4B, BC, B8", "ldrsw x26, [x24, W(28)  , UXTW  0   ]");
}

#[test]
fn ldrsw_2959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(1), [x17, W(30)  , SXTW  2   ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, DA, BE, B8", "ldrsw X(1), [x17, W(30)  , SXTW  2   ]");
}

#[test]
fn ldset_2960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldset W(27), W(4), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 33, 3B, B8", "ldset W(27), W(4), [x24]");
}

#[test]
fn ldset_2961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldset W(9), W(21), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 31, 29, B8", "ldset W(9), W(21), [x10]");
}

#[test]
fn ldset_2962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldset x4, xzr, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 30, 24, F8", "ldset x4, xzr, [x7]");
}

#[test]
fn ldset_2963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldset x2, x9, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 30, 22, F8", "ldset x2, x9, [x5]");
}

#[test]
fn ldseta_2964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta w26, W(9), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 32, BA, B8", "ldseta w26, W(9), [x17]");
}

#[test]
fn ldseta_2965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta W(13), W(9), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 31, AD, B8", "ldseta W(13), W(9), [x14]");
}

#[test]
fn ldseta_2966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta X(5), X(19), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 31, A5, F8", "ldseta X(5), X(19), [x13]");
}

#[test]
fn ldseta_2967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta X(16), X(8), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 31, B0, F8", "ldseta X(16), X(8), [x14]");
}

#[test]
fn ldsetab_2968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetab w21, W(24), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 31, B5, 38", "ldsetab w21, W(24), [x12]");
}

#[test]
fn ldsetab_2969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetab w17, W(20), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 30, B1, 38", "ldsetab w17, W(20), [x1]");
}

#[test]
fn ldsetah_2970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetah W(14), w5, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 32, AE, 78", "ldsetah W(14), w5, [x17]");
}

#[test]
fn ldsetah_2971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetah w30, W(19), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 33, BE, 78", "ldsetah w30, W(19), [x26]");
}

#[test]
fn ldsetal_2972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal w7, W(8), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 32, E7, B8", "ldsetal w7, W(8), [x19]");
}

#[test]
fn ldsetal_2973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal w23, w23, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 32, F7, B8", "ldsetal w23, w23, [x22]");
}

#[test]
fn ldsetal_2974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal X(21), X(5), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 31, F5, F8", "ldsetal X(21), X(5), [x12]");
}

#[test]
fn ldsetal_2975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal X(11), x22, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 31, EB, F8", "ldsetal X(11), x22, [x15]");
}

#[test]
fn ldsetalb_2976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalb W(0), W(8), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 31, E0, 38", "ldsetalb W(0), W(8), [x9]");
}

#[test]
fn ldsetalb_2977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalb W(17), W(19), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 31, F1, 38", "ldsetalb W(17), W(19), [x11]");
}

#[test]
fn ldsetalh_2978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalh w16, W(8), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 31, F0, 78", "ldsetalh w16, W(8), [x9]");
}

#[test]
fn ldsetalh_2979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalh w8, w3, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 31, E8, 78", "ldsetalh w8, w3, [x15]");
}

#[test]
fn ldsetb_2980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetb w8, w24, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 31, 28, 38", "ldsetb w8, w24, [x11]");
}

#[test]
fn ldsetb_2981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetb W(15), w25, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 33, 2F, 38", "ldsetb W(15), w25, [x28]");
}

#[test]
fn ldseth_2982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldseth w8, W(14), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 33, 28, 78", "ldseth w8, W(14), [x27]");
}

#[test]
fn ldseth_2983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldseth w4, W(12), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 32, 24, 78", "ldseth w4, W(12), [x18]");
}

#[test]
fn ldsetl_2984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl W(20), W(15), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 31, 74, B8", "ldsetl W(20), W(15), [x8]");
}

#[test]
fn ldsetl_2985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl w19, W(31), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 31, 73, B8", "ldsetl w19, W(31), [x9]");
}

#[test]
fn ldsetl_2986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl x17, x6, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 30, 71, F8", "ldsetl x17, x6, [x7]");
}

#[test]
fn ldsetl_2987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl X(12), x24, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 33, 6C, F8", "ldsetl X(12), x24, [x26]");
}

#[test]
fn ldsetlb_2988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlb w4, W(0), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 30, 64, 38", "ldsetlb w4, W(0), [x0]");
}

#[test]
fn ldsetlb_2989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlb W(15), W(22), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 30, 6F, 38", "ldsetlb W(15), W(22), [x6]");
}

#[test]
fn ldsetlh_2990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlh w1, W(27), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 32, 61, 78", "ldsetlh w1, W(27), [x19]");
}

#[test]
fn ldsetlh_2991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlh W(10), W(22), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 33, 6A, 78", "ldsetlh W(10), W(22), [x27]");
}

#[test]
fn ldsmax_2992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax w3, w3, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 42, 23, B8", "ldsmax w3, w3, [x20]");
}

#[test]
fn ldsmax_2993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax w25, w19, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 41, 39, B8", "ldsmax w25, w19, [x13]");
}

#[test]
fn ldsmax_2994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax x24, x12, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 42, 38, F8", "ldsmax x24, x12, [x17]");
}

#[test]
fn ldsmax_2995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax x16, X(31), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 40, 30, F8", "ldsmax x16, X(31), [x5]");
}

#[test]
fn ldsmaxa_2996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa w19, w8, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 42, B3, B8", "ldsmaxa w19, w8, [x19]");
}

#[test]
fn ldsmaxa_2997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa w30, w22, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 40, BE, B8", "ldsmaxa w30, w22, [x3]");
}

#[test]
fn ldsmaxa_2998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa X(9), x5, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 40, A9, F8", "ldsmaxa X(9), x5, [x1]");
}

#[test]
fn ldsmaxa_2999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa x8, x28, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 40, A8, F8", "ldsmaxa x8, x28, [x0]");
}

#[test]
fn ldsmaxab_3000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxab W(19), w17, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 43, B3, 38", "ldsmaxab W(19), w17, [x30]");
}

#[test]
fn ldsmaxab_3001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxab w11, w30, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 41, AB, 38", "ldsmaxab w11, w30, [x8]");
}

#[test]
fn ldsmaxah_3002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxah W(20), W(30), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 43, B4, 78", "ldsmaxah W(20), W(30), [x29]");
}

#[test]
fn ldsmaxah_3003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxah W(8), w8, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 41, A8, 78", "ldsmaxah W(8), w8, [x14]");
}

#[test]
fn ldsmaxal_3004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal W(0), W(4), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 42, E0, B8", "ldsmaxal W(0), W(4), [x17]");
}

#[test]
fn ldsmaxal_3005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal W(1), w24, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 40, E1, B8", "ldsmaxal W(1), w24, [x4]");
}

#[test]
fn ldsmaxal_3006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal x21, X(27), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 43, F5, F8", "ldsmaxal x21, X(27), [x28]");
}

#[test]
fn ldsmaxal_3007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal X(11), X(21), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 41, EB, F8", "ldsmaxal X(11), X(21), [x11]");
}

#[test]
fn ldsmaxalb_3008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalb w9, W(4), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 41, E9, 38", "ldsmaxalb w9, W(4), [x9]");
}

#[test]
fn ldsmaxalb_3009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalb W(18), w18, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 40, F2, 38", "ldsmaxalb W(18), w18, [x2]");
}

#[test]
fn ldsmaxalh_3010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalh w17, w20, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 42, F1, 78", "ldsmaxalh w17, w20, [x22]");
}

#[test]
fn ldsmaxalh_3011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalh w2, w2, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 40, E2, 78", "ldsmaxalh w2, w2, [x2]");
}

#[test]
fn ldsmaxb_3012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxb w30, W(20), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 40, 3E, 38", "ldsmaxb w30, W(20), [x0]");
}

#[test]
fn ldsmaxb_3013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxb W(5), W(17), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 43, 25, 38", "ldsmaxb W(5), W(17), [x25]");
}

#[test]
fn ldsmaxh_3014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxh W(16), w21, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 43, 30, 78", "ldsmaxh W(16), w21, [x28]");
}

#[test]
fn ldsmaxh_3015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxh w14, w15, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 41, 2E, 78", "ldsmaxh w14, w15, [x9]");
}

#[test]
fn ldsmaxl_3016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl W(8), w0, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 41, 68, B8", "ldsmaxl W(8), w0, [x9]");
}

#[test]
fn ldsmaxl_3017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl W(7), w3, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 41, 67, B8", "ldsmaxl W(7), w3, [x11]");
}

#[test]
fn ldsmaxl_3018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl x8, X(10), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 41, 68, F8", "ldsmaxl x8, X(10), [x14]");
}

#[test]
fn ldsmaxl_3019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl x14, x13, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 41, 6E, F8", "ldsmaxl x14, x13, [x8]");
}

#[test]
fn ldsmaxlb_3020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlb W(19), W(15), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 40, 73, 38", "ldsmaxlb W(19), W(15), [x0]");
}

#[test]
fn ldsmaxlb_3021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlb w10, w1, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 41, 6A, 38", "ldsmaxlb w10, w1, [x8]");
}

#[test]
fn ldsmaxlh_3022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlh W(29), w25, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 40, 7D, 78", "ldsmaxlh W(29), w25, [x5]");
}

#[test]
fn ldsmaxlh_3023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlh wzr, w23, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 41, 7F, 78", "ldsmaxlh wzr, w23, [x9]");
}

#[test]
fn ldsmin_3024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin w19, w16, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 50, 33, B8", "ldsmin w19, w16, [x2]");
}

#[test]
fn ldsmin_3025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin W(28), w12, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 51, 3C, B8", "ldsmin W(28), w12, [x12]");
}

#[test]
fn ldsmin_3026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin x4, x15, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 51, 24, F8", "ldsmin x4, x15, [x13]");
}

#[test]
fn ldsmin_3027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin x20, X(3), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 52, 34, F8", "ldsmin x20, X(3), [x21]");
}

#[test]
fn ldsmina_3028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina w13, W(8), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 50, AD, B8", "ldsmina w13, W(8), [x7]");
}

#[test]
fn ldsmina_3029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina w28, w14, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 51, BC, B8", "ldsmina w28, w14, [x10]");
}

#[test]
fn ldsmina_3030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina X(24), X(13), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 52, B8, F8", "ldsmina X(24), X(13), [x18]");
}

#[test]
fn ldsmina_3031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina x9, X(30), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 53, A9, F8", "ldsmina x9, X(30), [x29]");
}

#[test]
fn ldsminab_3032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminab w29, w9, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 50, BD, 38", "ldsminab w29, w9, [x3]");
}

#[test]
fn ldsminab_3033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminab W(17), W(8), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 53, B1, 38", "ldsminab W(17), W(8), [x28]");
}

#[test]
fn ldsminah_3034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminah W(21), W(21), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 51, B5, 78", "ldsminah W(21), W(21), [x9]");
}

#[test]
fn ldsminah_3035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminah W(4), w27, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 53, A4, 78", "ldsminah W(4), w27, [x26]");
}

#[test]
fn ldsminal_3036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal W(3), w14, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 53, E3, B8", "ldsminal W(3), w14, [x27]");
}

#[test]
fn ldsminal_3037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal W(1), W(3), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 52, E1, B8", "ldsminal W(1), W(3), [x21]");
}

#[test]
fn ldsminal_3038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal x21, X(23), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 50, F5, F8", "ldsminal x21, X(23), [x4]");
}

#[test]
fn ldsminal_3039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal X(7), x15, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 51, E7, F8", "ldsminal X(7), x15, [x9]");
}

#[test]
fn ldsminalb_3040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalb W(6), w30, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 51, E6, 38", "ldsminalb W(6), w30, [x15]");
}

#[test]
fn ldsminalb_3041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalb W(29), W(7), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 53, FD, 38", "ldsminalb W(29), W(7), [x27]");
}

#[test]
fn ldsminalh_3042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalh W(27), w2, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 53, FB, 78", "ldsminalh W(27), w2, [x30]");
}

#[test]
fn ldsminalh_3043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalh w18, w15, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 52, F2, 78", "ldsminalh w18, w15, [x19]");
}

#[test]
fn ldsminb_3044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminb w2, W(24), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 53, 22, 38", "ldsminb w2, W(24), [x25]");
}

#[test]
fn ldsminb_3045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminb W(6), w19, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 53, 26, 38", "ldsminb W(6), w19, [x24]");
}

#[test]
fn ldsminh_3046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminh W(30), W(31), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 52, 3E, 78", "ldsminh W(30), W(31), [x20]");
}

#[test]
fn ldsminh_3047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminh w10, W(12), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 50, 2A, 78", "ldsminh w10, W(12), [x5]");
}

#[test]
fn ldsminl_3048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl W(31), W(2), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 53, 7F, B8", "ldsminl W(31), W(2), [x30]");
}

#[test]
fn ldsminl_3049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl W(21), W(14), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 51, 75, B8", "ldsminl W(21), W(14), [x9]");
}

#[test]
fn ldsminl_3050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl X(24), x24, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 50, 78, F8", "ldsminl X(24), x24, [x4]");
}

#[test]
fn ldsminl_3051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl x10, X(18), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 53, 6A, F8", "ldsminl x10, X(18), [x30]");
}

#[test]
fn ldsminlb_3052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlb W(22), w29, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 50, 76, 38", "ldsminlb W(22), w29, [x2]");
}

#[test]
fn ldsminlb_3053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlb w10, W(25), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 50, 6A, 38", "ldsminlb w10, W(25), [x0]");
}

#[test]
fn ldsminlh_3054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlh w9, W(20), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 53, 69, 78", "ldsminlh w9, W(20), [x28]");
}

#[test]
fn ldsminlh_3055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlh W(29), w8, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 53, 7D, 78", "ldsminlh W(29), w8, [sp]");
}

#[test]
fn ldtr_3056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr W(5), [x20 , 11  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, BA, 40, B8", "ldtr W(5), [x20 , 11  ]");
}

#[test]
fn ldtr_3057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr W(5), [x18 , 95  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, FA, 45, B8", "ldtr W(5), [x18 , 95  ]");
}

#[test]
fn ldtr_3058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr x2, [x28  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 0B, 40, F8", "ldtr x2, [x28  ]");
}

#[test]
fn ldtr_3059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr x29, [x28  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 0B, 40, F8", "ldtr x29, [x28  ]");
}

#[test]
fn ldtrb_3060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrb w5, [x21  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 0A, 40, 38", "ldtrb w5, [x21  ]");
}

#[test]
fn ldtrb_3061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrb W(17), [x23  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 0A, 40, 38", "ldtrb W(17), [x23  ]");
}

#[test]
fn ldtrh_3062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrh W(0), [x6 , -105  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 78, 59, 78", "ldtrh W(0), [x6 , -105  ]");
}

#[test]
fn ldtrh_3063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrh w20, [x25 , -138  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 6B, 57, 78", "ldtrh w20, [x25 , -138  ]");
}

#[test]
fn ldtrsb_3064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb W(0), [x24 , 231  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 7B, CE, 38", "ldtrsb W(0), [x24 , 231  ]");
}

#[test]
fn ldtrsb_3065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb w12, [x17  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 0A, C0, 38", "ldtrsb w12, [x17  ]");
}

#[test]
fn ldtrsb_3066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb X(6), [x0  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 08, 80, 38", "ldtrsb X(6), [x0  ]");
}

#[test]
fn ldtrsb_3067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb X(9), [x20 , -166  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, AA, 95, 38", "ldtrsb X(9), [x20 , -166  ]");
}

#[test]
fn ldtrsh_3068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh wzr, [x29  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 0B, C0, 78", "ldtrsh wzr, [x29  ]");
}

#[test]
fn ldtrsh_3069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh W(17), [x11 , -16  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 09, DF, 78", "ldtrsh W(17), [x11 , -16  ]");
}

#[test]
fn ldtrsh_3070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh X(22), [x10 , 34  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 29, 82, 78", "ldtrsh X(22), [x10 , 34  ]");
}

#[test]
fn ldtrsh_3071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh X(22), [x16  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 0A, 80, 78", "ldtrsh X(22), [x16  ]");
}

#[test]
fn ldtrsw_3072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsw X(5), [x8  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 09, 80, B8", "ldtrsw X(5), [x8  ]");
}

#[test]
fn ldtrsw_3073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsw x26, [x19  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 0A, 80, B8", "ldtrsw x26, [x19  ]");
}

#[test]
fn ldumax_3074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax W(24), W(7), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 61, 38, B8", "ldumax W(24), W(7), [x12]");
}

#[test]
fn ldumax_3075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax W(17), W(0), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 60, 31, B8", "ldumax W(17), W(0), [x0]");
}

#[test]
fn ldumax_3076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax x11, X(28), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 60, 2B, F8", "ldumax x11, X(28), [x5]");
}

#[test]
fn ldumax_3077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax x7, x4, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 62, 27, F8", "ldumax x7, x4, [x18]");
}

#[test]
fn ldumaxa_3078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa w25, W(8), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 63, B9, B8", "ldumaxa w25, W(8), [x30]");
}

#[test]
fn ldumaxa_3079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa w8, W(11), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 63, A8, B8", "ldumaxa w8, W(11), [x25]");
}

#[test]
fn ldumaxa_3080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa X(31), x7, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 61, BF, F8", "ldumaxa X(31), x7, [x9]");
}

#[test]
fn ldumaxa_3081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa X(27), x10, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 60, BB, F8", "ldumaxa X(27), x10, [x1]");
}

#[test]
fn ldumaxab_3082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxab w29, w19, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 62, BD, 38", "ldumaxab w29, w19, [x18]");
}

#[test]
fn ldumaxab_3083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxab w30, W(4), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 60, BE, 38", "ldumaxab w30, W(4), [x1]");
}

#[test]
fn ldumaxah_3084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxah W(10), w1, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 62, AA, 78", "ldumaxah W(10), w1, [x21]");
}

#[test]
fn ldumaxah_3085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxah W(3), W(23), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 61, A3, 78", "ldumaxah W(3), W(23), [x13]");
}

#[test]
fn ldumaxal_3086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal W(11), w19, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 61, EB, B8", "ldumaxal W(11), w19, [x12]");
}

#[test]
fn ldumaxal_3087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal W(24), w0, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 63, F8, B8", "ldumaxal W(24), w0, [sp]");
}

#[test]
fn ldumaxal_3088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal x23, X(11), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 61, F7, F8", "ldumaxal x23, X(11), [x15]");
}

#[test]
fn ldumaxal_3089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal x0, X(16), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 60, E0, F8", "ldumaxal x0, X(16), [x4]");
}

#[test]
fn ldumaxalb_3090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalb W(3), W(17), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 61, E3, 38", "ldumaxalb W(3), W(17), [x11]");
}

#[test]
fn ldumaxalb_3091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalb w0, w20, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 62, E0, 38", "ldumaxalb w0, w20, [x20]");
}

#[test]
fn ldumaxalh_3092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalh w18, w5, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 63, F2, 78", "ldumaxalh w18, w5, [x26]");
}

#[test]
fn ldumaxalh_3093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalh W(22), W(16), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 63, F6, 78", "ldumaxalh W(22), W(16), [x25]");
}

#[test]
fn ldumaxb_3094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxb w8, W(3), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 61, 28, 38", "ldumaxb w8, W(3), [x8]");
}

#[test]
fn ldumaxb_3095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxb w21, w16, [XSP(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 63, 35, 38", "ldumaxb w21, w16, [XSP(31)]");
}

#[test]
fn ldumaxh_3096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxh W(24), W(3), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 60, 38, 78", "ldumaxh W(24), W(3), [x3]");
}

#[test]
fn ldumaxh_3097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxh W(7), w19, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 61, 27, 78", "ldumaxh W(7), w19, [x9]");
}

#[test]
fn ldumaxl_3098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl w7, W(0), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 62, 67, B8", "ldumaxl w7, W(0), [x19]");
}

#[test]
fn ldumaxl_3099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl w23, W(10), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 61, 77, B8", "ldumaxl w23, W(10), [x15]");
}

#[test]
fn ldumaxl_3100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl x9, X(19), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 61, 69, F8", "ldumaxl x9, X(19), [x9]");
}

#[test]
fn ldumaxl_3101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl x3, x9, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 62, 63, F8", "ldumaxl x3, x9, [x21]");
}

#[test]
fn ldumaxlb_3102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlb W(27), w18, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 61, 7B, 38", "ldumaxlb W(27), w18, [x13]");
}

#[test]
fn ldumaxlb_3103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlb W(31), w12, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 61, 7F, 38", "ldumaxlb W(31), w12, [x9]");
}

#[test]
fn ldumaxlh_3104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlh w1, W(30), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 63, 61, 78", "ldumaxlh w1, W(30), [x28]");
}

#[test]
fn ldumaxlh_3105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlh w10, w5, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 63, 6A, 78", "ldumaxlh w10, w5, [x30]");
}

#[test]
fn ldumin_3106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin w10, W(18), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 72, 2A, B8", "ldumin w10, W(18), [x22]");
}

#[test]
fn ldumin_3107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin w10, w27, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 71, 2A, B8", "ldumin w10, w27, [x11]");
}

#[test]
fn ldumin_3108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin x26, x29, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 70, 3A, F8", "ldumin x26, x29, [x6]");
}

#[test]
fn ldumin_3109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin X(16), x19, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 71, 30, F8", "ldumin X(16), x19, [x11]");
}

#[test]
fn ldumina_3110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina w27, W(1), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 73, BB, B8", "ldumina w27, W(1), [x24]");
}

#[test]
fn ldumina_3111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina W(15), w24, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 71, AF, B8", "ldumina W(15), w24, [x11]");
}

#[test]
fn ldumina_3112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina x12, X(27), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 72, AC, F8", "ldumina x12, X(27), [x22]");
}

#[test]
fn ldumina_3113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina x30, X(23), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 72, BE, F8", "ldumina x30, X(23), [x20]");
}

#[test]
fn lduminab_3114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminab W(23), w22, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 70, B7, 38", "lduminab W(23), w22, [x6]");
}

#[test]
fn lduminab_3115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminab w8, W(6), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 71, A8, 38", "lduminab w8, W(6), [x14]");
}

#[test]
fn lduminah_3116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminah W(15), W(7), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 72, AF, 78", "lduminah W(15), W(7), [x23]");
}

#[test]
fn lduminah_3117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminah W(28), w17, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 72, BC, 78", "lduminah W(28), w17, [x18]");
}

#[test]
fn lduminal_3118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal W(22), W(27), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 73, F6, B8", "lduminal W(22), W(27), [x26]");
}

#[test]
fn lduminal_3119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal w29, w24, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 71, FD, B8", "lduminal w29, w24, [x12]");
}

#[test]
fn lduminal_3120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal X(9), X(13), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 70, E9, F8", "lduminal X(9), X(13), [x1]");
}

#[test]
fn lduminal_3121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal X(21), X(6), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 72, F5, F8", "lduminal X(21), X(6), [x18]");
}

#[test]
fn lduminalb_3122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalb w24, w8, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 70, F8, 38", "lduminalb w24, w8, [x7]");
}

#[test]
fn lduminalb_3123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalb w12, W(4), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 70, EC, 38", "lduminalb w12, W(4), [x6]");
}

#[test]
fn lduminalh_3124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalh W(1), W(11), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 70, E1, 78", "lduminalh W(1), W(11), [x2]");
}

#[test]
fn lduminalh_3125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalh w18, W(15), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 71, F2, 78", "lduminalh w18, W(15), [x8]");
}

#[test]
fn lduminb_3126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminb W(11), W(31), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 72, 2B, 38", "lduminb W(11), W(31), [x20]");
}

#[test]
fn lduminb_3127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminb w8, w15, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 71, 28, 38", "lduminb w8, w15, [x8]");
}

#[test]
fn lduminh_3128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminh W(15), w26, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 73, 2F, 78", "lduminh W(15), w26, [x29]");
}

#[test]
fn lduminh_3129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminh w22, W(18), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 73, 36, 78", "lduminh w22, W(18), [x29]");
}

#[test]
fn lduminl_3130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl w18, W(21), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 71, 72, B8", "lduminl w18, W(21), [x11]");
}

#[test]
fn lduminl_3131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl W(5), W(11), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 72, 65, B8", "lduminl W(5), W(11), [x23]");
}

#[test]
fn lduminl_3132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl X(21), X(6), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 71, 75, F8", "lduminl X(21), X(6), [x10]");
}

#[test]
fn lduminl_3133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl X(30), X(21), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 70, 7E, F8", "lduminl X(30), X(21), [x2]");
}

#[test]
fn lduminlb_3134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlb w18, W(12), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 71, 72, 38", "lduminlb w18, W(12), [x8]");
}

#[test]
fn lduminlb_3135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlb w30, w5, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 70, 7E, 38", "lduminlb w30, w5, [x4]");
}

#[test]
fn lduminlh_3136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlh w20, W(27), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 70, 74, 78", "lduminlh w20, W(27), [x1]");
}

#[test]
fn lduminlh_3137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlh W(14), w18, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 73, 6E, 78", "lduminlh W(14), w18, [x28]");
}

#[test]
fn ldur_3138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur B(0), [x12  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 01, 40, 3C", "ldur B(0), [x12  ]");
}

#[test]
fn ldur_3139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur B(2), [sp  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 03, 40, 3C", "ldur B(2), [sp  ]");
}

#[test]
fn ldur_3140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur h25, [x6  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 00, 40, 7C", "ldur h25, [x6  ]");
}

#[test]
fn ldur_3141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur H(20), [x8 , -116  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, C1, 58, 7C", "ldur H(20), [x8 , -116  ]");
}

#[test]
fn ldur_3142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur s15, [x8  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 01, 40, BC", "ldur s15, [x8  ]");
}

#[test]
fn ldur_3143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur s8, [XSP(31) , 142  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, E3, 48, BC", "ldur s8, [XSP(31) , 142  ]");
}

#[test]
fn ldur_3144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur D(9), [x23 , -105  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 72, 59, FC", "ldur D(9), [x23 , -105  ]");
}

#[test]
fn ldur_3145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur D(29), [x22 , -219  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 52, 52, FC", "ldur D(29), [x22 , -219  ]");
}

#[test]
fn ldur_3146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur q1, [x19 , 13  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, D2, C0, 3C", "ldur q1, [x19 , 13  ]");
}

#[test]
fn ldur_3147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur Q(29), [x21  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 02, C0, 3C", "ldur Q(29), [x21  ]");
}

#[test]
fn ldur_3148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur W(28), [x23  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 02, 40, B8", "ldur W(28), [x23  ]");
}

#[test]
fn ldur_3149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur w3, [x15 , 75  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, B1, 44, B8", "ldur w3, [x15 , 75  ]");
}

#[test]
fn ldur_3150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur X(11), [x7  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 00, 40, F8", "ldur X(11), [x7  ]");
}

#[test]
fn ldur_3151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldur X(15), [x16 , -76  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 42, 5B, F8", "ldur X(15), [x16 , -76  ]");
}

#[test]
fn ldurb_3152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldurb W(6), [x11  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 01, 40, 38", "ldurb W(6), [x11  ]");
}

#[test]
fn ldurb_3153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldurb W(6), [x30 , -255  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 13, 50, 38", "ldurb W(6), [x30 , -255  ]");
}

#[test]
fn ldurh_3154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldurh W(31), [x9 , 172  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, C1, 4A, 78", "ldurh W(31), [x9 , 172  ]");
}

#[test]
fn ldurh_3155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldurh W(13), [x19 , 235  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, B2, 4E, 78", "ldurh W(13), [x19 , 235  ]");
}

#[test]
fn ldursb_3156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb W(29), [x0  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 00, C0, 38", "ldursb W(29), [x0  ]");
}

#[test]
fn ldursb_3157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb W(21), [x19 , 224  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 02, CE, 38", "ldursb W(21), [x19 , 224  ]");
}

#[test]
fn ldursb_3158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb x3, [x7 , -175  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 10, 95, 38", "ldursb x3, [x7 , -175  ]");
}

#[test]
fn ldursb_3159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb X(2), [x10  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 01, 80, 38", "ldursb X(2), [x10  ]");
}

#[test]
fn ldursh_3160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh w14, [x28 , -243  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, D3, D0, 78", "ldursh w14, [x28 , -243  ]");
}

#[test]
fn ldursh_3161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh w30, [x23 , 255  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, F2, CF, 78", "ldursh w30, [x23 , 255  ]");
}

#[test]
fn ldursh_3162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh x4, [x19 , -30  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 22, 9E, 78", "ldursh x4, [x19 , -30  ]");
}

#[test]
fn ldursh_3163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh X(28), [x2  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 00, 80, 78", "ldursh X(28), [x2  ]");
}

#[test]
fn ldursw_3164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursw x16, [x28 , -127  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 13, 98, B8", "ldursw x16, [x28 , -127  ]");
}

#[test]
fn ldursw_3165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldursw x18, [XSP(31)  ]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 03, 80, B8", "ldursw x18, [XSP(31)  ]");
}

#[test]
fn ldxp_3166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp w16, W(24), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 60, 7F, 88", "ldxp w16, W(24), [x0]");
}

#[test]
fn ldxp_3167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp w1, W(22), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 59, 7F, 88", "ldxp w1, W(22), [x12]");
}

#[test]
fn ldxp_3168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp x17, x12, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 32, 7F, C8", "ldxp x17, x12, [x19]");
}

#[test]
fn ldxp_3169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp x8, x15, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 3D, 7F, C8", "ldxp x8, x15, [x14]");
}

#[test]
fn ldxr_3170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr w1, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 7C, 5F, 88", "ldxr w1, [x4]");
}

#[test]
fn ldxr_3171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr W(25), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 7F, 5F, 88", "ldxr W(25), [x30]");
}

#[test]
fn ldxr_3172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr X(15), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 7D, 5F, C8", "ldxr X(15), [x9]");
}

#[test]
fn ldxr_3173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr x21, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 7D, 5F, C8", "ldxr x21, [x10]");
}

#[test]
fn ldxrb_3174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrb W(30), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 7D, 5F, 08", "ldxrb W(30), [x10]");
}

#[test]
fn ldxrb_3175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrb w12, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 7E, 5F, 08", "ldxrb w12, [x22]");
}

#[test]
fn ldxrh_3176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrh W(13), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 7E, 5F, 48", "ldxrh W(13), [x22]");
}

#[test]
fn ldxrh_3177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrh w28, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 7F, 5F, 48", "ldxrh w28, [x27]");
}

#[test]
fn lsl_3178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl w6, W(27), W(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 23, D6, 1A", "lsl w6, W(27), W(22)");
}

#[test]
fn lsl_3179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl w21, W(2), w17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 20, D1, 1A", "lsl w21, W(2), w17");
}

#[test]
fn lsl_3180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl x23, X(9), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 21, C4, 9A", "lsl x23, X(9), X(4)");
}

#[test]
fn lsl_3181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl X(8), x10, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 21, C0, 9A", "lsl X(8), x10, X(0)");
}

#[test]
fn lsl_3182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl W(18), w13, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 69, 1B, 53", "lsl W(18), w13, 5");
}

#[test]
fn lsl_3183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl W(22), w30, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 2F, 0C, 53", "lsl W(22), w30, 20");
}

#[test]
fn lsl_3184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl x7, x17, 51
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 32, 4D, D3", "lsl x7, x17, 51");
}

#[test]
fn lsl_3185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsl X(21), X(30), 36
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 6F, 5C, D3", "lsl X(21), X(30), 36");
}

#[test]
fn lslv_3186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lslv W(13), w21, W(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 22, C3, 1A", "lslv W(13), w21, W(3)");
}

#[test]
fn lslv_3187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lslv w16, w28, W(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 23, C1, 1A", "lslv w16, w28, W(1)");
}

#[test]
fn lslv_3188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lslv X(15), x7, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 20, D9, 9A", "lslv X(15), x7, x25");
}

#[test]
fn lslv_3189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lslv x24, x17, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 22, CC, 9A", "lslv x24, x17, X(12)");
}

#[test]
fn lsr_3190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr W(26), W(11), w7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 25, C7, 1A", "lsr W(26), W(11), w7");
}

#[test]
fn lsr_3191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr W(31), w24, w12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 27, CC, 1A", "lsr W(31), w24, w12");
}

#[test]
fn lsr_3192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(27), x7, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 24, C0, 9A", "lsr X(27), x7, x0");
}

#[test]
fn lsr_3193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(9), x23, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 26, DF, 9A", "lsr X(9), x23, X(31)");
}

#[test]
fn lsr_3194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr w15, W(28), 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 7F, 1A, 53", "lsr w15, W(28), 26");
}

#[test]
fn lsr_3195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr w30, W(12), 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 7D, 0D, 53", "lsr w30, W(12), 13");
}

#[test]
fn lsr_3196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(4), X(2), 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, FC, 5D, D3", "lsr X(4), X(2), 29");
}

#[test]
fn lsr_3197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsr x24, x30, 33
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, FF, 61, D3", "lsr x24, x30, 33");
}

#[test]
fn lsrv_3198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsrv W(19), w3, w10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 24, CA, 1A", "lsrv W(19), w3, w10");
}

#[test]
fn lsrv_3199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; lsrv w7, w30, w20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 27, D4, 1A", "lsrv w7, w30, w20");
}
