
#[test]
fn ld2r_1200() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {V(31).D2 * 2}, [x4], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, CC, E4, 4D", "ld2r {{V(31).D2 * 2}}, [x4], X(4)");
}

#[test]
fn ld2r_1201() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld2r {v10.D1 * 2}, [x17], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, CE, E4, 0D", "ld2r {{v10.D1 * 2}}, [x17], X(4)");
}

#[test]
fn ld3_1202() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(16).B16 * 3}, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 43, 40, 4C", "ld3 {{V(16).B16 * 3}}, [XSP(26)]");
}

#[test]
fn ld3_1203() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v30.B8 * 3}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 40, 40, 0C", "ld3 {{v30.B8 * 3}}, [x5]");
}

#[test]
fn ld3_1204() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(3).H8 * 3}, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 45, 40, 4C", "ld3 {{V(3).H8 * 3}}, [x8]");
}

#[test]
fn ld3_1205() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v27.H4 * 3}, [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 47, 40, 0C", "ld3 {{v27.H4 * 3}}, [sp]");
}

#[test]
fn ld3_1206() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(14).S4 * 3}, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 48, 40, 4C", "ld3 {{V(14).S4 * 3}}, [x6]");
}

#[test]
fn ld3_1207() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v9.S2 * 3}, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 4B, 40, 0C", "ld3 {{v9.S2 * 3}}, [x25]");
}

#[test]
fn ld3_1208() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v10.D2 * 3}, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 4C, 40, 4C", "ld3 {{v10.D2 * 3}}, [x5]");
}

#[test]
fn ld3_1209() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v0.B8 * 3}, [XSP(18)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 42, DF, 0C", "ld3 {{v0.B8 * 3}}, [XSP(18)], 24");
}

#[test]
fn ld3_1210() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(11).H4 * 3}, [XSP(16)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 46, DF, 0C", "ld3 {{V(11).H4 * 3}}, [XSP(16)], 24");
}

#[test]
fn ld3_1211() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).S2 * 3}, [XSP(19)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 4A, DF, 0C", "ld3 {{V(0).S2 * 3}}, [XSP(19)], 24");
}

#[test]
fn ld3_1212() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(14).B16 * 3}, [XSP(29)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 43, DF, 4C", "ld3 {{V(14).B16 * 3}}, [XSP(29)], 48");
}

#[test]
fn ld3_1213() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(22).H8 * 3}, [XSP(28)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 47, DF, 4C", "ld3 {{V(22).H8 * 3}}, [XSP(28)], 48");
}

#[test]
fn ld3_1214() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(19).S4 * 3}, [XSP(16)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 4A, DF, 4C", "ld3 {{V(19).S4 * 3}}, [XSP(16)], 48");
}

#[test]
fn ld3_1215() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(23).D2 * 3}, [x21], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 4E, DF, 4C", "ld3 {{V(23).D2 * 3}}, [x21], 48");
}

#[test]
fn ld3_1216() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v8.B16 * 3}, [x17], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 42, C4, 4C", "ld3 {{v8.B16 * 3}}, [x17], X(4)");
}

#[test]
fn ld3_1217() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).B8 * 3}, [XSP(17)], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 42, C4, 0C", "ld3 {{V(0).B8 * 3}}, [XSP(17)], x4");
}

#[test]
fn ld3_1218() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v6.H8 * 3}, [x19], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 46, C8, 4C", "ld3 {{v6.H8 * 3}}, [x19], x8");
}

#[test]
fn ld3_1219() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v25.H4 * 3}, [XSP(27)], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 47, DD, 0C", "ld3 {{v25.H4 * 3}}, [XSP(27)], X(29)");
}

#[test]
fn ld3_1220() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v15.S4 * 3}, [XSP(13)], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 49, C8, 4C", "ld3 {{v15.S4 * 3}}, [XSP(13)], x8");
}

#[test]
fn ld3_1221() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(28).S2 * 3}, [XSP(18)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 4A, D9, 0C", "ld3 {{V(28).S2 * 3}}, [XSP(18)], X(25)");
}

#[test]
fn ld3_1222() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(29).D2 * 3}, [x24], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 4F, C2, 4C", "ld3 {{V(29).D2 * 3}}, [x24], x2");
}

#[test]
fn ld3_1223() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).B * 3}[14], [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 39, 40, 4D", "ld3 {{V(0).B * 3}}[14], [x10]");
}

#[test]
fn ld3_1224() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v21.H * 3}[4], [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 61, 40, 4D", "ld3 {{v21.H * 3}}[4], [XSP(13)]");
}

#[test]
fn ld3_1225() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v8.S * 3}[0], [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, A2, 40, 0D", "ld3 {{v8.S * 3}}[0], [XSP(16)]");
}

#[test]
fn ld3_1226() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(0).D * 3}[1], [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, A7, 40, 4D", "ld3 {{V(0).D * 3}}[1], [x26]");
}

#[test]
fn ld3_1227() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {v1.B * 3}[3], [x8], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 2D, DF, 0D", "ld3 {{v1.B * 3}}[3], [x8], 3");
}

#[test]
fn ld3_1228() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(11).B * 3}[4], [XSP(29)], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 33, C2, 0D", "ld3 {{V(11).B * 3}}[4], [XSP(29)], x2");
}

#[test]
fn ld3_1229() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(20).H * 3}[3], [x4], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 78, DF, 0D", "ld3 {{V(20).H * 3}}[3], [x4], 6");
}

#[test]
fn ld3_1230() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(5).H * 3}[5], [XSP(19)], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 6A, C7, 4D", "ld3 {{V(5).H * 3}}[5], [XSP(19)], x7");
}

#[test]
fn ld3_1231() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(3).S * 3}[0], [XSP(19)], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, A2, DF, 0D", "ld3 {{V(3).S * 3}}[0], [XSP(19)], 12");
}

#[test]
fn ld3_1232() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(14).S * 3}[3], [XSP(23)], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, B2, CF, 4D", "ld3 {{V(14).S * 3}}[3], [XSP(23)], X(15)");
}

#[test]
fn ld3_1233() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(22).D * 3}[0], [XSP(25)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, A7, DF, 0D", "ld3 {{V(22).D * 3}}[0], [XSP(25)], 24");
}

#[test]
fn ld3_1234() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3 {V(24).D * 3}[0], [x14], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, A5, CB, 0D", "ld3 {{V(24).D * 3}}[0], [x14], X(11)");
}

#[test]
fn ld3r_1235() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(29).B16 * 3}, [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, E0, 40, 4D", "ld3r {{V(29).B16 * 3}}, [x7]");
}

#[test]
fn ld3r_1236() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v4.B8 * 3}, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, E2, 40, 0D", "ld3r {{v4.B8 * 3}}, [XSP(18)]");
}

#[test]
fn ld3r_1237() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(10).H8 * 3}, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, E4, 40, 4D", "ld3r {{V(10).H8 * 3}}, [XSP(7)]");
}

#[test]
fn ld3r_1238() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(19).H4 * 3}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E5, 40, 0D", "ld3r {{V(19).H4 * 3}}, [XSP(13)]");
}

#[test]
fn ld3r_1239() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v2.S4 * 3}, [XSP(10)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, E9, 40, 4D", "ld3r {{v2.S4 * 3}}, [XSP(10)]");
}

#[test]
fn ld3r_1240() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v3.S2 * 3}, [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, EB, 40, 0D", "ld3r {{v3.S2 * 3}}, [sp]");
}

#[test]
fn ld3r_1241() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).D2 * 3}, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, EF, 40, 4D", "ld3r {{V(3).D2 * 3}}, [XSP(30)]");
}

#[test]
fn ld3r_1242() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.D1 * 3}, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, EE, 40, 0D", "ld3r {{v26.D1 * 3}}, [x21]");
}

#[test]
fn ld3r_1243() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(16).B16 * 3}, [XSP(22)], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, E2, DF, 4D", "ld3r {{V(16).B16 * 3}}, [XSP(22)], 3");
}

#[test]
fn ld3r_1244() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v12.B8 * 3}, [XSP(30)], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, E3, DF, 0D", "ld3r {{v12.B8 * 3}}, [XSP(30)], 3");
}

#[test]
fn ld3r_1245() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.H8 * 3}, [XSP(20)], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, E6, DF, 4D", "ld3r {{v26.H8 * 3}}, [XSP(20)], 6");
}

#[test]
fn ld3r_1246() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).H4 * 3}, [x26], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, E7, DF, 0D", "ld3r {{V(3).H4 * 3}}, [x26], 6");
}

#[test]
fn ld3r_1247() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(3).S4 * 3}, [XSP(29)], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, EB, DF, 4D", "ld3r {{V(3).S4 * 3}}, [XSP(29)], 12");
}

#[test]
fn ld3r_1248() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(14).S2 * 3}, [XSP(21)], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, EA, DF, 0D", "ld3r {{V(14).S2 * 3}}, [XSP(21)], 12");
}

#[test]
fn ld3r_1249() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(19).D2 * 3}, [XSP(22)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, EE, DF, 4D", "ld3r {{V(19).D2 * 3}}, [XSP(22)], 24");
}

#[test]
fn ld3r_1250() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v11.D1 * 3}, [x26], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, EF, DF, 0D", "ld3r {{v11.D1 * 3}}, [x26], 24");
}

#[test]
fn ld3r_1251() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(11).B16 * 3}, [XSP(6)], X(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, E0, D5, 4D", "ld3r {{V(11).B16 * 3}}, [XSP(6)], X(21)");
}

#[test]
fn ld3r_1252() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v2.B8 * 3}, [sp], x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, E3, CE, 0D", "ld3r {{v2.B8 * 3}}, [sp], x14");
}

#[test]
fn ld3r_1253() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(28).H8 * 3}, [x11], x1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, E5, C1, 4D", "ld3r {{V(28).H8 * 3}}, [x11], x1");
}

#[test]
fn ld3r_1254() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v18.H4 * 3}, [XSP(22)], X(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, E6, CC, 0D", "ld3r {{v18.H4 * 3}}, [XSP(22)], X(12)");
}

#[test]
fn ld3r_1255() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(31).S4 * 3}, [XSP(17)], x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, EA, CB, 4D", "ld3r {{V(31).S4 * 3}}, [XSP(17)], x11");
}

#[test]
fn ld3r_1256() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v26.S2 * 3}, [x18], X(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, EA, D7, 0D", "ld3r {{v26.S2 * 3}}, [x18], X(23)");
}

#[test]
fn ld3r_1257() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {v27.D2 * 3}, [x10], x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, ED, D3, 4D", "ld3r {{v27.D2 * 3}}, [x10], x19");
}

#[test]
fn ld3r_1258() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld3r {V(14).D1 * 3}, [XSP(15)], x1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, ED, C1, 0D", "ld3r {{V(14).D1 * 3}}, [XSP(15)], x1");
}

#[test]
fn ld4_1259() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(25).B16 * 4}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 01, 40, 4C", "ld4 {{V(25).B16 * 4}}, [XSP(13)]");
}

#[test]
fn ld4_1260() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(27).B8 * 4}, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 00, 40, 0C", "ld4 {{V(27).B8 * 4}}, [XSP(0)]");
}

#[test]
fn ld4_1261() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.H8 * 4}, [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 06, 40, 4C", "ld4 {{v20.H8 * 4}}, [XSP(16)]");
}

#[test]
fn ld4_1262() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v3.H4 * 4}, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 05, 40, 0C", "ld4 {{v3.H4 * 4}}, [x14]");
}

#[test]
fn ld4_1263() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v17.S4 * 4}, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 08, 40, 4C", "ld4 {{v17.S4 * 4}}, [x3]");
}

#[test]
fn ld4_1264() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(7).S2 * 4}, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 0B, 40, 0C", "ld4 {{V(7).S2 * 4}}, [XSP(25)]");
}

#[test]
fn ld4_1265() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.D2 * 4}, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 0C, 40, 4C", "ld4 {{v20.D2 * 4}}, [XSP(0)]");
}

#[test]
fn ld4_1266() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v8.B8 * 4}, [XSP(16)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 02, DF, 0C", "ld4 {{v8.B8 * 4}}, [XSP(16)], 32");
}

#[test]
fn ld4_1267() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(20).H4 * 4}, [XSP(5)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 04, DF, 0C", "ld4 {{V(20).H4 * 4}}, [XSP(5)], 32");
}

#[test]
fn ld4_1268() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v20.S2 * 4}, [x23], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 0A, DF, 0C", "ld4 {{v20.S2 * 4}}, [x23], 32");
}

#[test]
fn ld4_1269() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(23).B16 * 4}, [XSP(23)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 02, DF, 4C", "ld4 {{V(23).B16 * 4}}, [XSP(23)], 64");
}

#[test]
fn ld4_1270() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(16).H8 * 4}, [XSP(8)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 05, DF, 4C", "ld4 {{V(16).H8 * 4}}, [XSP(8)], 64");
}

#[test]
fn ld4_1271() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(26).S4 * 4}, [XSP(26)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 0B, DF, 4C", "ld4 {{V(26).S4 * 4}}, [XSP(26)], 64");
}

#[test]
fn ld4_1272() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).D2 * 4}, [XSP(12)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 0D, DF, 4C", "ld4 {{V(24).D2 * 4}}, [XSP(12)], 64");
}

#[test]
fn ld4_1273() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(22).B16 * 4}, [x0], x17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 00, D1, 4C", "ld4 {{V(22).B16 * 4}}, [x0], x17");
}

#[test]
fn ld4_1274() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(11).B8 * 4}, [x12], X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 01, DB, 0C", "ld4 {{V(11).B8 * 4}}, [x12], X(27)");
}

#[test]
fn ld4_1275() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).H8 * 4}, [XSP(20)], x12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 06, CC, 4C", "ld4 {{V(24).H8 * 4}}, [XSP(20)], x12");
}

#[test]
fn ld4_1276() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(21).H4 * 4}, [XSP(10)], x21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 05, D5, 0C", "ld4 {{V(21).H4 * 4}}, [XSP(10)], x21");
}

#[test]
fn ld4_1277() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v30.S4 * 4}, [x26], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 0B, C2, 4C", "ld4 {{v30.S4 * 4}}, [x26], x2");
}

#[test]
fn ld4_1278() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(19).S2 * 4}, [XSP(5)], X(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 08, DB, 0C", "ld4 {{V(19).S2 * 4}}, [XSP(5)], X(27)");
}

#[test]
fn ld4_1279() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v21.D2 * 4}, [XSP(0)], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 0C, CA, 4C", "ld4 {{v21.D2 * 4}}, [XSP(0)], x10");
}

#[test]
fn ld4_1280() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(15).B * 4}[9], [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 24, 60, 4D", "ld4 {{V(15).B * 4}}[9], [XSP(0)]");
}

#[test]
fn ld4_1281() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.H * 4}[4], [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 60, 60, 4D", "ld4 {{v25.H * 4}}[4], [XSP(6)]");
}

#[test]
fn ld4_1282() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.S * 4}[0], [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, A2, 60, 0D", "ld4 {{v25.S * 4}}[0], [x17]");
}

#[test]
fn ld4_1283() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(28).D * 4}[0], [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, A5, 60, 0D", "ld4 {{V(28).D * 4}}[0], [XSP(9)]");
}

#[test]
fn ld4_1284() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v25.B * 4}[4], [XSP(23)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 32, FF, 0D", "ld4 {{v25.B * 4}}[4], [XSP(23)], 4");
}

#[test]
fn ld4_1285() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(24).B * 4}[6], [x5], x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 38, F3, 0D", "ld4 {{V(24).B * 4}}[6], [x5], x19");
}

#[test]
fn ld4_1286() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(26).H * 4}[5], [XSP(9)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 69, FF, 4D", "ld4 {{V(26).H * 4}}[5], [XSP(9)], 8");
}

#[test]
fn ld4_1287() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v30.H * 4}[7], [x22], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 7A, F7, 4D", "ld4 {{v30.H * 4}}[7], [x22], x23");
}

#[test]
fn ld4_1288() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v28.S * 4}[3], [XSP(29)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, B3, FF, 4D", "ld4 {{v28.S * 4}}[3], [XSP(29)], 16");
}

#[test]
fn ld4_1289() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {v17.S * 4}[0], [x20], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, A2, F4, 0D", "ld4 {{v17.S * 4}}[0], [x20], x20");
}

#[test]
fn ld4_1290() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(10).D * 4}[1], [XSP(31)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, A7, FF, 4D", "ld4 {{V(10).D * 4}}[1], [XSP(31)], 32");
}

#[test]
fn ld4_1291() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4 {V(31).D * 4}[0], [x27], x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, A7, FC, 0D", "ld4 {{V(31).D * 4}}[0], [x27], x28");
}

#[test]
fn ld4r_1292() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v16.B16 * 4}, [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, E0, 60, 4D", "ld4r {{v16.B16 * 4}}, [XSP(1)]");
}

#[test]
fn ld4r_1293() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(27).B8 * 4}, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, E1, 60, 0D", "ld4r {{V(27).B8 * 4}}, [x15]");
}

#[test]
fn ld4r_1294() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(29).H8 * 4}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, E5, 60, 4D", "ld4r {{V(29).H8 * 4}}, [XSP(9)]");
}

#[test]
fn ld4r_1295() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v23.H4 * 4}, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E4, 60, 0D", "ld4r {{v23.H4 * 4}}, [XSP(0)]");
}

#[test]
fn ld4r_1296() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(23).S4 * 4}, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, E8, 60, 4D", "ld4r {{V(23).S4 * 4}}, [x3]");
}

#[test]
fn ld4r_1297() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v10.S2 * 4}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, E9, 60, 0D", "ld4r {{v10.S2 * 4}}, [XSP(9)]");
}

#[test]
fn ld4r_1298() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v4.D2 * 4}, [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, ED, 60, 4D", "ld4r {{v4.D2 * 4}}, [XSP(14)]");
}

#[test]
fn ld4r_1299() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(11).D1 * 4}, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, EF, 60, 0D", "ld4r {{V(11).D1 * 4}}, [x27]");
}

#[test]
fn ld4r_1300() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v22.B16 * 4}, [x29], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, E3, FF, 4D", "ld4r {{v22.B16 * 4}}, [x29], 4");
}

#[test]
fn ld4r_1301() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v10.B8 * 4}, [XSP(1)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, E0, FF, 0D", "ld4r {{v10.B8 * 4}}, [XSP(1)], 4");
}

#[test]
fn ld4r_1302() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v29.H8 * 4}, [x22], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, E6, FF, 4D", "ld4r {{v29.H8 * 4}}, [x22], 8");
}

#[test]
fn ld4r_1303() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v26.H4 * 4}, [x26], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, E7, FF, 0D", "ld4r {{v26.H4 * 4}}, [x26], 8");
}

#[test]
fn ld4r_1304() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v25.S4 * 4}, [x13], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, E9, FF, 4D", "ld4r {{v25.S4 * 4}}, [x13], 16");
}

#[test]
fn ld4r_1305() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v2.S2 * 4}, [x9], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, E9, FF, 0D", "ld4r {{v2.S2 * 4}}, [x9], 16");
}

#[test]
fn ld4r_1306() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v24.D2 * 4}, [XSP(14)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, ED, FF, 4D", "ld4r {{v24.D2 * 4}}, [XSP(14)], 32");
}

#[test]
fn ld4r_1307() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(17).D1 * 4}, [x27], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, EF, FF, 0D", "ld4r {{V(17).D1 * 4}}, [x27], 32");
}

#[test]
fn ld4r_1308() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(20).B16 * 4}, [XSP(17)], X(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, E2, F5, 4D", "ld4r {{V(20).B16 * 4}}, [XSP(17)], X(21)");
}

#[test]
fn ld4r_1309() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v0.B8 * 4}, [x10], x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, E1, E9, 0D", "ld4r {{v0.B8 * 4}}, [x10], x9");
}

#[test]
fn ld4r_1310() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(9).H8 * 4}, [x27], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, E7, F7, 4D", "ld4r {{V(9).H8 * 4}}, [x27], x23");
}

#[test]
fn ld4r_1311() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {v3.H4 * 4}, [x29], x0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, E7, E0, 0D", "ld4r {{v3.H4 * 4}}, [x29], x0");
}

#[test]
fn ld4r_1312() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(31).S4 * 4}, [XSP(21)], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, EA, F7, 4D", "ld4r {{V(31).S4 * 4}}, [XSP(21)], x23");
}

#[test]
fn ld4r_1313() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(17).S2 * 4}, [x0], x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, E8, E5, 0D", "ld4r {{V(17).S2 * 4}}, [x0], x5");
}

#[test]
fn ld4r_1314() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(23).D2 * 4}, [XSP(13)], X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, ED, FD, 4D", "ld4r {{V(23).D2 * 4}}, [XSP(13)], X(29)");
}

#[test]
fn ld4r_1315() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ld4r {V(2).D1 * 4}, [XSP(19)], x22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, EE, F6, 0D", "ld4r {{V(2).D1 * 4}}, [XSP(19)], x22");
}

#[test]
fn ldadd_1316() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd w0, w9, [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 00, 20, B8", "ldadd w0, w9, [XSP(3)]");
}

#[test]
fn ldadd_1317() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadd X(8), X(18), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 00, 28, F8", "ldadd X(8), X(18), [x7]");
}

#[test]
fn ldadda_1318() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda W(15), W(0), [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 03, AF, B8", "ldadda W(15), W(0), [sp]");
}

#[test]
fn ldadda_1319() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldadda X(24), x9, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 00, B8, F8", "ldadda X(24), x9, [x5]");
}

#[test]
fn ldaddab_1320() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddab w25, W(4), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 01, B9, 38", "ldaddab w25, W(4), [x8]");
}

#[test]
fn ldaddah_1321() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddah w18, W(24), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 02, B2, 78", "ldaddah w18, W(24), [x21]");
}

#[test]
fn ldaddal_1322() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal W(29), w4, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 02, FD, B8", "ldaddal W(29), w4, [x17]");
}

#[test]
fn ldaddal_1323() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddal x22, X(2), [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 01, F6, F8", "ldaddal x22, X(2), [x10]");
}

#[test]
fn ldaddalb_1324() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalb w12, w16, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 01, EC, 38", "ldaddalb w12, w16, [x11]");
}

#[test]
fn ldaddalh_1325() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddalh W(2), W(14), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 02, E2, 78", "ldaddalh W(2), W(14), [x20]");
}

#[test]
fn ldaddb_1326() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddb W(17), w4, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 03, 31, 38", "ldaddb W(17), w4, [x25]");
}

#[test]
fn ldaddh_1327() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddh w9, w2, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 03, 29, 78", "ldaddh w9, w2, [x24]");
}

#[test]
fn ldaddl_1328() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl W(11), w13, [XSP(21)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 02, 6B, B8", "ldaddl W(11), w13, [XSP(21)]");
}

#[test]
fn ldaddl_1329() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddl X(26), X(27), [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 03, 7A, F8", "ldaddl X(26), X(27), [XSP(25)]");
}

#[test]
fn ldaddlb_1330() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlb W(30), W(7), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 02, 7E, 38", "ldaddlb W(30), W(7), [x20]");
}

#[test]
fn ldaddlh_1331() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaddlh w7, W(14), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 02, 67, 78", "ldaddlh w7, W(14), [XSP(23)]");
}

#[test]
fn ldapr_1332() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr W(27), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, C2, BF, B8", "ldapr W(27), [XSP(23)]");
}

#[test]
fn ldapr_1333() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapr X(18), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, C2, BF, F8", "ldapr X(18), [XSP(16)]");
}

#[test]
fn ldaprb_1334() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprb w5, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, C2, BF, 38", "ldaprb w5, [x19]");
}

#[test]
fn ldaprh_1335() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaprh w23, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, C1, BF, 78", "ldaprh w23, [XSP(8)]");
}

#[test]
fn ldapur_1336() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur W(28), [XSP(0)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 00, 40, 99", "ldapur W(28), [XSP(0)  ]");
}

#[test]
fn ldapur_1337() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapur x24, [XSP(4) , -30  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 20, 5E, D9", "ldapur x24, [XSP(4) , -30  ]");
}

#[test]
fn ldapurb_1338() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurb w30, [x4 , -158  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 20, 56, 19", "ldapurb w30, [x4 , -158  ]");
}

#[test]
fn ldapurh_1339() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapurh W(30), [sp , -25  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 73, 5E, 59", "ldapurh W(30), [sp , -25  ]");
}

#[test]
fn ldapursb_1340() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb W(0), [x17  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 02, C0, 19", "ldapursb W(0), [x17  ]");
}

#[test]
fn ldapursb_1341() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursb x28, [XSP(25)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 03, 80, 19", "ldapursb x28, [XSP(25)  ]");
}

#[test]
fn ldapursh_1342() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh w0, [XSP(21)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 02, C0, 59", "ldapursh w0, [XSP(21)  ]");
}

#[test]
fn ldapursh_1343() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursh X(11), [x25  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 03, 80, 59", "ldapursh X(11), [x25  ]");
}

#[test]
fn ldapursw_1344() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldapursw x23, [x30 , -247  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 93, 90, 99", "ldapursw x23, [x30 , -247  ]");
}

#[test]
fn ldar_1345() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldar W(24), [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, FE, DF, 88", "ldar W(24), [x22]");
}

#[test]
fn ldar_1346() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldar X(20), [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, FC, DF, C8", "ldar X(20), [x6]");
}

#[test]
fn ldarb_1347() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldarb w9, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, FD, DF, 08", "ldarb w9, [x14]");
}

#[test]
fn ldarh_1348() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldarh w22, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, FC, DF, 48", "ldarh w22, [x3]");
}

#[test]
fn ldaxp_1349() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp W(15), w16, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, C1, 7F, 88", "ldaxp W(15), w16, [x10]");
}

#[test]
fn ldaxp_1350() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxp X(3), X(29), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, F6, 7F, C8", "ldaxp X(3), X(29), [x16]");
}

#[test]
fn ldaxr_1351() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr w2, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, FE, 5F, 88", "ldaxr w2, [x21]");
}

#[test]
fn ldaxr_1352() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxr x29, [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, FE, 5F, C8", "ldaxr x29, [x22]");
}

#[test]
fn ldaxrb_1353() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrb w18, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, FE, 5F, 08", "ldaxrb w18, [XSP(18)]");
}

#[test]
fn ldaxrh_1354() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldaxrh w2, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, FC, 5F, 48", "ldaxrh w2, [XSP(5)]");
}

#[test]
fn ldclr_1355() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr w16, w20, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 11, 30, B8", "ldclr w16, w20, [x15]");
}

#[test]
fn ldclr_1356() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclr x15, X(30), [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 12, 2F, F8", "ldclr x15, X(30), [XSP(18)]");
}

#[test]
fn ldclra_1357() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra W(18), w19, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 11, B2, B8", "ldclra W(18), w19, [XSP(13)]");
}

#[test]
fn ldclra_1358() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclra X(12), x4, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 12, AC, F8", "ldclra X(12), x4, [XSP(20)]");
}

#[test]
fn ldclrab_1359() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrab w6, W(18), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 10, A6, 38", "ldclrab w6, W(18), [x2]");
}

#[test]
fn ldclrah_1360() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrah W(5), W(17), [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 10, A5, 78", "ldclrah W(5), W(17), [XSP(6)]");
}

#[test]
fn ldclral_1361() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral W(0), w28, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 12, E0, B8", "ldclral W(0), w28, [x21]");
}

#[test]
fn ldclral_1362() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclral X(11), X(31), [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 10, EB, F8", "ldclral X(11), X(31), [XSP(3)]");
}

#[test]
fn ldclralb_1363() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralb w22, w17, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 10, F6, 38", "ldclralb w22, w17, [x0]");
}

#[test]
fn ldclralh_1364() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclralh w11, w16, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 10, EB, 78", "ldclralh w11, w16, [XSP(7)]");
}

#[test]
fn ldclrb_1365() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrb W(6), W(28), [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 12, 26, 38", "ldclrb W(6), W(28), [x17]");
}

#[test]
fn ldclrh_1366() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrh W(7), W(31), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 11, 27, 78", "ldclrh W(7), W(31), [x13]");
}

#[test]
fn ldclrl_1367() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl W(8), W(24), [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 10, 68, B8", "ldclrl W(8), W(24), [XSP(4)]");
}

#[test]
fn ldclrl_1368() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrl x2, x15, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, 62, F8", "ldclrl x2, x15, [x17]");
}

#[test]
fn ldclrlb_1369() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlb W(6), w19, [XSP(17)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 12, 66, 38", "ldclrlb W(6), w19, [XSP(17)]");
}

#[test]
fn ldclrlh_1370() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldclrlh w8, w18, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 11, 68, 78", "ldclrlh w8, w18, [x15]");
}

#[test]
fn ldeor_1371() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor w26, w8, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 21, 3A, B8", "ldeor w26, w8, [x8]");
}

#[test]
fn ldeor_1372() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeor x27, x30, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 22, 3B, F8", "ldeor x27, x30, [XSP(23)]");
}

#[test]
fn ldeora_1373() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora w9, w12, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 21, A9, B8", "ldeora w9, w12, [x14]");
}

#[test]
fn ldeora_1374() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeora x8, x13, [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 20, A8, F8", "ldeora x8, x13, [XSP(0)]");
}

#[test]
fn ldeorab_1375() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorab W(28), w25, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 23, BC, 38", "ldeorab W(28), w25, [x30]");
}

#[test]
fn ldeorah_1376() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorah W(7), w0, [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 21, A7, 78", "ldeorah W(7), w0, [XSP(12)]");
}

#[test]
fn ldeoral_1377() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral W(15), w17, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 21, EF, B8", "ldeoral W(15), w17, [x8]");
}

#[test]
fn ldeoral_1378() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoral X(2), x23, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 20, E2, F8", "ldeoral X(2), x23, [x3]");
}

#[test]
fn ldeoralb_1379() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralb W(25), w25, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 20, F9, 38", "ldeoralb W(25), w25, [XSP(5)]");
}

#[test]
fn ldeoralh_1380() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeoralh w24, W(15), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 22, F8, 78", "ldeoralh w24, W(15), [x21]");
}

#[test]
fn ldeorb_1381() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorb w1, w11, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 22, 21, 38", "ldeorb w1, w11, [x21]");
}

#[test]
fn ldeorh_1382() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorh W(0), W(13), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 23, 20, 78", "ldeorh W(0), W(13), [x27]");
}

#[test]
fn ldeorl_1383() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl w17, W(13), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 22, 71, B8", "ldeorl w17, W(13), [XSP(20)]");
}

#[test]
fn ldeorl_1384() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorl x7, x7, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 23, 67, F8", "ldeorl x7, x7, [XSP(30)]");
}

#[test]
fn ldeorlb_1385() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlb w16, w16, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 23, 70, 38", "ldeorlb w16, w16, [XSP(31)]");
}

#[test]
fn ldeorlh_1386() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldeorlh w5, w13, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 22, 65, 78", "ldeorlh w5, w13, [x19]");
}

#[test]
fn ldlar_1387() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar w23, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 7F, DF, 88", "ldlar w23, [XSP(31)]");
}

#[test]
fn ldlar_1388() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlar x23, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 7D, DF, C8", "ldlar x23, [XSP(15)]");
}

#[test]
fn ldlarb_1389() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarb W(29), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 7F, DF, 08", "ldlarb W(29), [x27]");
}

#[test]
fn ldlarh_1390() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldlarh w17, [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 7C, DF, 48", "ldlarh w17, [XSP(2)]");
}

#[test]
fn ldnp_1391() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp s18, s20, [x17  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 52, 40, 2C", "ldnp s18, s20, [x17  ]");
}

#[test]
fn ldnp_1392() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp D(23), D(14), [x13  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 39, 40, 6C", "ldnp D(23), D(14), [x13  ]");
}

#[test]
fn ldnp_1393() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp q6, q15, [XSP(25)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 3F, 40, AC", "ldnp q6, q15, [XSP(25)  ]");
}

#[test]
fn ldnp_1394() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp W(5), W(26), [x18 , 72  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 6A, 49, 28", "ldnp W(5), W(26), [x18 , 72  ]");
}

#[test]
fn ldnp_1395() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldnp x8, x13, [XSP(16) , 504  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, B6, 5F, A8", "ldnp x8, x13, [XSP(16) , 504  ]");
}

#[test]
fn ldp_1396() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(16), S(25), [XSP(26)], -168
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 67, EB, 2C", "ldp S(16), S(25), [XSP(26)], -168");
}

#[test]
fn ldp_1397() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d2, D(15), [x15], 216
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, BD, CD, 6C", "ldp d2, D(15), [x15], 216");
}

#[test]
fn ldp_1398() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp Q(28), Q(18), [x29], -640
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 4B, EC, AC", "ldp Q(28), Q(18), [x29], -640");
}

#[test]
fn ldp_1399() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(27), s5, [x10, -248]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 15, E1, 2D", "ldp S(27), s5, [x10, -248]!");
}

#[test]
fn ldp_1400() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d0, d9, [XSP(30), 400]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 27, D9, 6D", "ldp d0, d9, [XSP(30), 400]!");
}

#[test]
fn ldp_1401() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q20, Q(6), [XSP(17), -880]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 9A, E4, AD", "ldp q20, Q(6), [XSP(17), -880]!");
}

#[test]
fn ldp_1402() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp S(19), S(21), [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 54, 40, 2D", "ldp S(19), S(21), [XSP(3)  ]");
}

#[test]
fn ldp_1403() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp d22, D(12), [x11  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 31, 40, 6D", "ldp d22, D(12), [x11  ]");
}

#[test]
fn ldp_1404() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp q21, Q(20), [x0  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 50, 40, AD", "ldp q21, Q(20), [x0  ]");
}

#[test]
fn ldp_1405() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp W(22), w1, [x4], -100
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 84, F3, 28", "ldp W(22), w1, [x4], -100");
}

#[test]
fn ldp_1406() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(2), x21, [x15], 120
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, D5, C7, A8", "ldp X(2), x21, [x15], 120");
}

#[test]
fn ldp_1407() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp w25, w28, [x24, -116]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, F3, F1, 29", "ldp w25, w28, [x24, -116]!");
}

#[test]
fn ldp_1408() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(30), X(17), [x8, 168]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, C5, CA, A9", "ldp X(30), X(17), [x8, 168]!");
}

#[test]
fn ldp_1409() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp W(10), W(22), [XSP(12)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 59, 40, 29", "ldp W(10), W(22), [XSP(12)  ]");
}

#[test]
fn ldp_1410() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldp X(31), x2, [x24  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 0B, 40, A9", "ldp X(31), x2, [x24  ]");
}

#[test]
fn ldpsw_1411() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(13), X(7), [XSP(1)], -188
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 9C, E8, 68", "ldpsw X(13), X(7), [XSP(1)], -188");
}

#[test]
fn ldpsw_1412() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(26), x12, [x14, 208]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 31, DA, 69", "ldpsw X(26), x12, [x14, 208]!");
}

#[test]
fn ldpsw_1413() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldpsw X(8), x23, [x4  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 5C, 40, 69", "ldpsw X(8), x23, [x4  ]");
}

#[test]
fn ldr_1414() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b6, [x11], -1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, F5, 5F, 3C", "ldr b6, [x11], -1");
}

#[test]
fn ldr_1415() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr H(25), [x26], 232
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 87, 4E, 7C", "ldr H(25), [x26], 232");
}

#[test]
fn ldr_1416() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s5, [x0], 47
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, F4, 42, BC", "ldr s5, [x0], 47");
}

#[test]
fn ldr_1417() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d19, [XSP(14)], 50
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 25, 43, FC", "ldr d19, [XSP(14)], 50");
}

#[test]
fn ldr_1418() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q10, [x15], -92
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 45, DA, 3C", "ldr q10, [x15], -92");
}

#[test]
fn ldr_1419() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr b23, [sp, -17]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, FF, 5E, 3C", "ldr b23, [sp, -17]!");
}

#[test]
fn ldr_1420() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h17, [XSP(11), -53]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, BD, 5C, 7C", "ldr h17, [XSP(11), -53]!");
}

#[test]
fn ldr_1421() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s15, [XSP(28), 191]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, FF, 4B, BC", "ldr s15, [XSP(28), 191]!");
}

#[test]
fn ldr_1422() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr D(29), [XSP(30), -10]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 6F, 5F, FC", "ldr D(29), [XSP(30), -10]!");
}

#[test]
fn ldr_1423() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q12, [XSP(18), 36]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 4E, C2, 3C", "ldr q12, [XSP(18), 36]!");
}

#[test]
fn ldr_1424() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(12), [XSP(28) , 1498  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 6B, 57, 3D", "ldr B(12), [XSP(28) , 1498  ]");
}

#[test]
fn ldr_1425() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h29, [x24  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 03, 40, 7D", "ldr h29, [x24  ]");
}

#[test]
fn ldr_1426() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s29, [XSP(18)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 02, 40, BD", "ldr s29, [XSP(18)  ]");
}

#[test]
fn ldr_1427() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d9, [XSP(10) , 6960  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 99, 4D, FD", "ldr d9, [XSP(10) , 6960  ]");
}

#[test]
fn ldr_1428() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr Q(3), [XSP(3) , 17120  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, B8, D0, 3D", "ldr Q(3), [XSP(3) , 17120  ]");
}

#[test]
fn ldr_1429() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(8), [XSP(12)], 41
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 95, 42, B8", "ldr W(8), [XSP(12)], 41");
}

#[test]
fn ldr_1430() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x10, [x0], -225
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, F4, 51, F8", "ldr x10, [x0], -225");
}

#[test]
fn ldr_1431() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(24), [x4, -237]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 3C, 51, B8", "ldr W(24), [x4, -237]!");
}

#[test]
fn ldr_1432() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x2, [XSP(8), 239]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, FD, 4E, F8", "ldr x2, [XSP(8), 239]!");
}

#[test]
fn ldr_1433() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(30), [x12 , 14784  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, C1, 79, B9", "ldr W(30), [x12 , 14784  ]");
}

#[test]
fn ldr_1434() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr X(11), [XSP(27)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 03, 40, F9", "ldr X(11), [XSP(27)  ]");
}

#[test]
fn ldr_1435() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr s25, 128292
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, A9, 0F, 1C", "ldr s25, 128292");
}

#[test]
fn ldr_1436() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d6, 76448
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 55, 09, 5C", "ldr d6, 76448");
}

#[test]
fn ldr_1437() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q3, -25072
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, F0, FC, 9C", "ldr q3, -25072");
}

#[test]
fn ldr_1438() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(3), 206112
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 29, 19, 18", "ldr W(3), 206112");
}

#[test]
fn ldr_1439() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x27, -212192
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 19, E6, 58", "ldr x27, -212192");
}

#[test]
fn ldr_1440() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr B(13), [XSP(13), W(3)  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, D9, 63, 3C", "ldr B(13), [XSP(13), W(3)  , SXTW  0   ]");
}

#[test]
fn ldr_1441() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr h21, [XSP(14), W(0)  , SXTW  1   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, D9, 60, 7C", "ldr h21, [XSP(14), W(0)  , SXTW  1   ]");
}

#[test]
fn ldr_1442() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr S(29), [XSP(12), W(21)  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 49, 75, BC", "ldr S(29), [XSP(12), W(21)  , UXTW  0   ]");
}

#[test]
fn ldr_1443() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr d17, [x13, X(15)  , LSL  3   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 79, 6F, FC", "ldr d17, [x13, X(15)  , LSL  3   ]");
}

#[test]
fn ldr_1444() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr q29, [x27, W(21)  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 4B, F5, 3C", "ldr q29, [x27, W(21)  , UXTW  0   ]");
}

#[test]
fn ldr_1445() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr W(21), [x24, w30  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 4B, 7E, B8", "ldr W(21), [x24, w30  , UXTW  0   ]");
}

#[test]
fn ldr_1446() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldr x16, [x16, w18  , UXTW  3   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 5A, 72, F8", "ldr x16, [x16, w18  , UXTW  3   ]");
}

#[test]
fn ldraa_1447() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa x11, [XSP(11) , -280  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, D5, 7D, F8", "ldraa x11, [XSP(11) , -280  ]");
}

#[test]
fn ldraa_1448() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldraa x1, [x2, 2080]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 4C, 30, F8", "ldraa x1, [x2, 2080]!");
}

#[test]
fn ldrab_1449() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab x4, [XSP(8) , 1768  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, D5, AD, F8", "ldrab x4, [XSP(8) , 1768  ]");
}

#[test]
fn ldrab_1450() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrab x14, [XSP(22), 192]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 8E, A1, F8", "ldrab x14, [XSP(22), 192]!");
}

#[test]
fn ldrb_1451() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w8, [XSP(13)], 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, A5, 40, 38", "ldrb w8, [XSP(13)], 10");
}

#[test]
fn ldrb_1452() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(6), [x30, 154]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, AF, 49, 38", "ldrb W(6), [x30, 154]!");
}

#[test]
fn ldrb_1453() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb W(8), [XSP(29)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 03, 40, 39", "ldrb W(8), [XSP(29)  ]");
}

#[test]
fn ldrb_1454() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrb w28, [XSP(20), x24  , SXTX  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, FA, 78, 38", "ldrb w28, [XSP(20), x24  , SXTX  0   ]");
}

#[test]
fn ldrh_1455() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w14, [x1], -27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 54, 5E, 78", "ldrh w14, [x1], -27");
}

#[test]
fn ldrh_1456() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w25, [XSP(10), -26]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 6D, 5E, 78", "ldrh w25, [XSP(10), -26]!");
}

#[test]
fn ldrh_1457() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh w9, [XSP(23)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 02, 40, 79", "ldrh w9, [XSP(23)  ]");
}

#[test]
fn ldrh_1458() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrh W(10), [x1, W(10)  , SXTW  1   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, D8, 6A, 78", "ldrh W(10), [x1, W(10)  , SXTW  1   ]");
}

#[test]
fn ldrsb_1459() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(28), [XSP(3)], -234
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 64, D1, 38", "ldrsb W(28), [XSP(3)], -234");
}

#[test]
fn ldrsb_1460() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(9), [XSP(2)], 133
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 54, 88, 38", "ldrsb X(9), [XSP(2)], 133");
}

#[test]
fn ldrsb_1461() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb w6, [x11, 70]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 6D, C4, 38", "ldrsb w6, [x11, 70]!");
}

#[test]
fn ldrsb_1462() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb x27, [XSP(3), 52]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 4C, 83, 38", "ldrsb x27, [XSP(3), 52]!");
}

#[test]
fn ldrsb_1463() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(9), [XSP(7) , 158  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 78, C2, 39", "ldrsb W(9), [XSP(7) , 158  ]");
}

#[test]
fn ldrsb_1464() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(5), [XSP(21)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 02, 80, 39", "ldrsb X(5), [XSP(21)  ]");
}

#[test]
fn ldrsb_1465() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb W(24), [x22, x8  , SXTX  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, FA, E8, 38", "ldrsb W(24), [x22, x8  , SXTX  0   ]");
}

#[test]
fn ldrsb_1466() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsb X(24), [x29, w20  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 5B, B4, 38", "ldrsb X(24), [x29, w20  , UXTW  0   ]");
}

#[test]
fn ldrsh_1467() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(11), [x0], -140
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 44, D7, 78", "ldrsh W(11), [x0], -140");
}

#[test]
fn ldrsh_1468() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x1, [x20], 234
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, A6, 8E, 78", "ldrsh x1, [x20], 234");
}

#[test]
fn ldrsh_1469() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh W(13), [sp, -232]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 8F, D1, 78", "ldrsh W(13), [sp, -232]!");
}

#[test]
fn ldrsh_1470() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x0, [XSP(13), -72]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 8D, 9B, 78", "ldrsh x0, [XSP(13), -72]!");
}

#[test]
fn ldrsh_1471() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w26, [XSP(0) , 208  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, A0, C1, 79", "ldrsh w26, [XSP(0) , 208  ]");
}

#[test]
fn ldrsh_1472() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh X(21), [XSP(24)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 03, 80, 79", "ldrsh X(21), [XSP(24)  ]");
}

#[test]
fn ldrsh_1473() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh w9, [XSP(12), W(23)  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 49, F7, 78", "ldrsh w9, [XSP(12), W(23)  , UXTW  0   ]");
}

#[test]
fn ldrsh_1474() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsh x28, [XSP(25), W(4)  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, CB, A4, 78", "ldrsh x28, [XSP(25), W(4)  , SXTW  0   ]");
}

#[test]
fn ldrsw_1475() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(31), [XSP(9)], -190
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 25, 94, B8", "ldrsw X(31), [XSP(9)], -190");
}

#[test]
fn ldrsw_1476() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw X(8), [x21, -229]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, BE, 91, B8", "ldrsw X(8), [x21, -229]!");
}

#[test]
fn ldrsw_1477() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x13, [XSP(21)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 02, 80, B9", "ldrsw x13, [XSP(21)  ]");
}

#[test]
fn ldrsw_1478() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x15, -216940
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 84, E5, 98", "ldrsw x15, -216940");
}

#[test]
fn ldrsw_1479() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldrsw x30, [x8, w6  , SXTW  2   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, D9, A6, B8", "ldrsw x30, [x8, w6  , SXTW  2   ]");
}

#[test]
fn ldset_1480() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldset w0, W(1), [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 33, 20, B8", "ldset w0, W(1), [XSP(25)]");
}

#[test]
fn ldset_1481() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldset X(8), x10, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 32, 28, F8", "ldset X(8), x10, [x21]");
}

#[test]
fn ldseta_1482() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta W(2), w11, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 31, A2, B8", "ldseta W(2), w11, [XSP(8)]");
}

#[test]
fn ldseta_1483() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldseta x6, x0, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 33, A6, F8", "ldseta x6, x0, [XSP(26)]");
}

#[test]
fn ldsetab_1484() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetab w20, w5, [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 33, B4, 38", "ldsetab w20, w5, [XSP(24)]");
}

#[test]
fn ldsetah_1485() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetah W(20), W(7), [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 31, B4, 78", "ldsetah W(20), W(7), [XSP(12)]");
}

#[test]
fn ldsetal_1486() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal w25, W(26), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 31, F9, B8", "ldsetal w25, W(26), [x8]");
}

#[test]
fn ldsetal_1487() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetal X(12), X(28), [x22]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 32, EC, F8", "ldsetal X(12), X(28), [x22]");
}

#[test]
fn ldsetalb_1488() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalb w7, W(8), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 33, E7, 38", "ldsetalb w7, W(8), [x27]");
}

#[test]
fn ldsetalh_1489() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetalh W(31), w4, [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 32, FF, 78", "ldsetalh W(31), w4, [XSP(20)]");
}

#[test]
fn ldsetb_1490() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetb W(21), W(1), [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 33, 35, 38", "ldsetb W(21), W(1), [x25]");
}

#[test]
fn ldseth_1491() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldseth w16, w5, [x18]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 32, 30, 78", "ldseth w16, w5, [x18]");
}

#[test]
fn ldsetl_1492() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl w27, W(5), [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 30, 7B, B8", "ldsetl w27, W(5), [x0]");
}

#[test]
fn ldsetl_1493() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetl x8, X(25), [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 32, 68, F8", "ldsetl x8, X(25), [XSP(18)]");
}

#[test]
fn ldsetlb_1494() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlb w5, w24, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 32, 65, 38", "ldsetlb w5, w24, [x19]");
}

#[test]
fn ldsetlh_1495() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsetlh w22, W(11), [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 33, 76, 78", "ldsetlh w22, W(11), [XSP(26)]");
}

#[test]
fn ldsmax_1496() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax w2, W(24), [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 40, 22, B8", "ldsmax w2, W(24), [x3]");
}

#[test]
fn ldsmax_1497() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmax x24, x21, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 42, 38, F8", "ldsmax x24, x21, [XSP(19)]");
}

#[test]
fn ldsmaxa_1498() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa W(4), w26, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 42, A4, B8", "ldsmaxa W(4), w26, [XSP(23)]");
}

#[test]
fn ldsmaxa_1499() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxa x8, X(18), [x9]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 41, A8, F8", "ldsmaxa x8, X(18), [x9]");
}

#[test]
fn ldsmaxab_1500() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxab w24, w7, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 42, B8, 38", "ldsmaxab w24, w7, [XSP(18)]");
}

#[test]
fn ldsmaxah_1501() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxah W(3), W(0), [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 41, A3, 78", "ldsmaxah W(3), W(0), [x14]");
}

#[test]
fn ldsmaxal_1502() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal w22, W(10), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 43, F6, B8", "ldsmaxal w22, W(10), [x27]");
}

#[test]
fn ldsmaxal_1503() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxal x0, x17, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 40, E0, F8", "ldsmaxal x0, x17, [XSP(5)]");
}

#[test]
fn ldsmaxalb_1504() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalb w30, w9, [x28]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 43, FE, 38", "ldsmaxalb w30, w9, [x28]");
}

#[test]
fn ldsmaxalh_1505() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxalh W(29), w26, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 40, FD, 78", "ldsmaxalh W(29), w26, [x1]");
}

#[test]
fn ldsmaxb_1506() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxb w12, W(23), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 41, 2C, 38", "ldsmaxb w12, W(23), [x8]");
}

#[test]
fn ldsmaxh_1507() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxh W(7), w30, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 41, 27, 78", "ldsmaxh W(7), w30, [XSP(15)]");
}

#[test]
fn ldsmaxl_1508() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl W(26), w13, [XSP(26)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 43, 7A, B8", "ldsmaxl W(26), w13, [XSP(26)]");
}

#[test]
fn ldsmaxl_1509() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxl X(7), x7, [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 40, 67, F8", "ldsmaxl X(7), x7, [XSP(2)]");
}

#[test]
fn ldsmaxlb_1510() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlb W(20), w2, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 40, 74, 38", "ldsmaxlb W(20), w2, [x4]");
}

#[test]
fn ldsmaxlh_1511() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmaxlh W(30), w14, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 41, 7E, 78", "ldsmaxlh W(30), w14, [XSP(13)]");
}

#[test]
fn ldsmin_1512() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin W(27), W(2), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 52, 3B, B8", "ldsmin W(27), W(2), [XSP(20)]");
}

#[test]
fn ldsmin_1513() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmin X(19), X(21), [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 53, 33, F8", "ldsmin X(19), X(21), [XSP(24)]");
}

#[test]
fn ldsmina_1514() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina W(2), w20, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 53, A2, B8", "ldsmina W(2), w20, [x30]");
}

#[test]
fn ldsmina_1515() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsmina x20, X(23), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 52, B4, F8", "ldsmina x20, X(23), [x20]");
}

#[test]
fn ldsminab_1516() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminab W(3), W(4), [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 50, A3, 38", "ldsminab W(3), W(4), [x0]");
}

#[test]
fn ldsminah_1517() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminah w30, w20, [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 53, BE, 78", "ldsminah w30, w20, [sp]");
}

#[test]
fn ldsminal_1518() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal W(0), w21, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 52, E0, B8", "ldsminal W(0), w21, [x17]");
}

#[test]
fn ldsminal_1519() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminal X(6), X(26), [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 52, E6, F8", "ldsminal X(6), X(26), [XSP(22)]");
}

#[test]
fn ldsminalb_1520() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalb W(5), W(6), [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 53, E5, 38", "ldsminalb W(5), W(6), [XSP(31)]");
}

#[test]
fn ldsminalh_1521() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminalh w10, w8, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 51, EA, 78", "ldsminalh w10, w8, [x15]");
}

#[test]
fn ldsminb_1522() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminb w26, w12, [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 50, 3A, 38", "ldsminb w26, w12, [x2]");
}

#[test]
fn ldsminh_1523() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminh w28, w2, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 51, 3C, 78", "ldsminh w28, w2, [x8]");
}

#[test]
fn ldsminl_1524() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl W(25), W(5), [XSP(10)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 51, 79, B8", "ldsminl W(25), W(5), [XSP(10)]");
}

#[test]
fn ldsminl_1525() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminl x9, x17, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 51, 69, F8", "ldsminl x9, x17, [x14]");
}

#[test]
fn ldsminlb_1526() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlb w10, w22, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 53, 6A, 38", "ldsminlb w10, w22, [XSP(25)]");
}

#[test]
fn ldsminlh_1527() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldsminlh W(10), w12, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 50, 6A, 78", "ldsminlh W(10), w12, [x4]");
}

#[test]
fn ldtr_1528() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr w11, [x30 , -203  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 5B, 53, B8", "ldtr w11, [x30 , -203  ]");
}

#[test]
fn ldtr_1529() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtr x27, [XSP(4)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 08, 40, F8", "ldtr x27, [XSP(4)  ]");
}

#[test]
fn ldtrb_1530() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrb W(2), [x8 , -88  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 89, 5A, 38", "ldtrb W(2), [x8 , -88  ]");
}

#[test]
fn ldtrh_1531() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrh W(7), [x4 , 77  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, D8, 44, 78", "ldtrh W(7), [x4 , 77  ]");
}

#[test]
fn ldtrsb_1532() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb w20, [XSP(5)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 08, C0, 38", "ldtrsb w20, [XSP(5)  ]");
}

#[test]
fn ldtrsb_1533() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsb X(19), [x26 , -23  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9B, 9E, 38", "ldtrsb X(19), [x26 , -23  ]");
}

#[test]
fn ldtrsh_1534() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh W(16), [XSP(15) , -78  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 29, DB, 78", "ldtrsh W(16), [XSP(15) , -78  ]");
}

#[test]
fn ldtrsh_1535() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsh x16, [x10 , 212  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 49, 8D, 78", "ldtrsh x16, [x10 , 212  ]");
}

#[test]
fn ldtrsw_1536() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldtrsw X(30), [XSP(22) , -78  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 2A, 9B, B8", "ldtrsw X(30), [XSP(22) , -78  ]");
}

#[test]
fn ldumax_1537() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax w22, W(24), [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 63, 36, B8", "ldumax w22, W(24), [x26]");
}

#[test]
fn ldumax_1538() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumax x0, X(0), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 60, 20, F8", "ldumax x0, X(0), [x2]");
}

#[test]
fn ldumaxa_1539() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa w13, W(12), [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 60, AD, B8", "ldumaxa w13, W(12), [XSP(7)]");
}

#[test]
fn ldumaxa_1540() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxa x12, x2, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 61, AC, F8", "ldumaxa x12, x2, [XSP(13)]");
}

#[test]
fn ldumaxab_1541() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxab w17, w2, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 62, B1, 38", "ldumaxab w17, w2, [x23]");
}

#[test]
fn ldumaxah_1542() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxah W(11), W(7), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 62, AB, 78", "ldumaxah W(11), W(7), [x20]");
}

#[test]
fn ldumaxal_1543() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal W(30), W(14), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 60, FE, B8", "ldumaxal W(30), W(14), [x2]");
}

#[test]
fn ldumaxal_1544() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxal X(23), x22, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 63, F7, F8", "ldumaxal X(23), x22, [x27]");
}

#[test]
fn ldumaxalb_1545() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalb W(18), W(24), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 62, F2, 38", "ldumaxalb W(18), W(24), [XSP(20)]");
}

#[test]
fn ldumaxalh_1546() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxalh w18, w0, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 60, F2, 78", "ldumaxalh w18, w0, [XSP(7)]");
}

#[test]
fn ldumaxb_1547() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxb W(9), w0, [x15]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 61, 29, 38", "ldumaxb W(9), w0, [x15]");
}

#[test]
fn ldumaxh_1548() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxh W(13), w13, [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 62, 2D, 78", "ldumaxh W(13), w13, [x17]");
}

#[test]
fn ldumaxl_1549() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl W(28), W(25), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 62, 7C, B8", "ldumaxl W(28), W(25), [XSP(20)]");
}

#[test]
fn ldumaxl_1550() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxl X(26), x1, [XSP(3)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 60, 7A, F8", "ldumaxl X(26), x1, [XSP(3)]");
}

#[test]
fn ldumaxlb_1551() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlb W(5), w18, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 63, 65, 38", "ldumaxlb W(5), w18, [XSP(25)]");
}

#[test]
fn ldumaxlh_1552() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumaxlh W(12), wzr, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 63, 6C, 78", "ldumaxlh W(12), wzr, [x27]");
}

#[test]
fn ldumin_1553() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin W(10), W(10), [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 73, 2A, B8", "ldumin W(10), W(10), [x25]");
}

#[test]
fn ldumin_1554() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumin X(7), x19, [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 73, 27, F8", "ldumin X(7), x19, [XSP(27)]");
}

#[test]
fn ldumina_1555() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina w17, w3, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 73, B1, B8", "ldumina w17, w3, [x24]");
}

#[test]
fn ldumina_1556() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldumina X(18), x13, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 73, B2, F8", "ldumina X(18), x13, [x26]");
}

#[test]
fn lduminab_1557() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminab w6, w30, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 72, A6, 38", "lduminab w6, w30, [XSP(23)]");
}

#[test]
fn lduminah_1558() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminah w14, w17, [x6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 70, AE, 78", "lduminah w14, w17, [x6]");
}

#[test]
fn lduminal_1559() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal w11, w7, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 71, EB, B8", "lduminal w11, w7, [x11]");
}

#[test]
fn lduminal_1560() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminal x1, x12, [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 73, E1, F8", "lduminal x1, x12, [x29]");
}

#[test]
fn lduminalb_1561() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalb W(4), W(6), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 72, E4, 38", "lduminalb W(4), W(6), [XSP(16)]");
}

#[test]
fn lduminalh_1562() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminalh w0, W(20), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 70, E0, 78", "lduminalh w0, W(20), [x2]");
}

#[test]
fn lduminb_1563() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminb W(14), W(9), [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 70, 2E, 38", "lduminb W(14), W(9), [x0]");
}

#[test]
fn lduminh_1564() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminh w28, w15, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 73, 3C, 78", "lduminh w28, w15, [x24]");
}

#[test]
fn lduminl_1565() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl w8, w19, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 68, B8", "lduminl w8, w19, [x26]");
}

#[test]
fn lduminl_1566() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminl X(5), X(25), [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 73, 65, F8", "lduminl X(5), X(25), [x29]");
}

#[test]
fn lduminlb_1567() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlb W(30), W(27), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 71, 7E, 38", "lduminlb W(30), W(27), [XSP(14)]");
}

#[test]
fn lduminlh_1568() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lduminlh w6, w12, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 72, 66, 78", "lduminlh w6, w12, [XSP(22)]");
}

#[test]
fn ldur_1569() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur B(23), [XSP(24) , -145  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, F3, 56, 3C", "ldur B(23), [XSP(24) , -145  ]");
}

#[test]
fn ldur_1570() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur h24, [x1  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 00, 40, 7C", "ldur h24, [x1  ]");
}

#[test]
fn ldur_1571() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur S(28), [XSP(22) , -182  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, A2, 54, BC", "ldur S(28), [XSP(22) , -182  ]");
}

#[test]
fn ldur_1572() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur D(12), [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 00, 40, FC", "ldur D(12), [XSP(3)  ]");
}

#[test]
fn ldur_1573() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur q2, [x11 , 37  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 51, C2, 3C", "ldur q2, [x11 , 37  ]");
}

#[test]
fn ldur_1574() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur W(25), [XSP(27) , -6  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, A3, 5F, B8", "ldur W(25), [XSP(27) , -6  ]");
}

#[test]
fn ldur_1575() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldur X(24), [XSP(18)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 02, 40, F8", "ldur X(24), [XSP(18)  ]");
}

#[test]
fn ldurb_1576() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldurb W(30), [x26  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 03, 40, 38", "ldurb W(30), [x26  ]");
}

#[test]
fn ldurh_1577() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldurh w15, [XSP(8)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 01, 40, 78", "ldurh w15, [XSP(8)  ]");
}

#[test]
fn ldursb_1578() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb w14, [x10  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 01, C0, 38", "ldursb w14, [x10  ]");
}

#[test]
fn ldursb_1579() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursb X(16), [XSP(22) , -247  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 92, 90, 38", "ldursb X(16), [XSP(22) , -247  ]");
}

#[test]
fn ldursh_1580() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh w23, [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 00, C0, 78", "ldursh w23, [XSP(3)  ]");
}

#[test]
fn ldursh_1581() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursh x19, [x17 , 14  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E2, 80, 78", "ldursh x19, [x17 , 14  ]");
}

#[test]
fn ldursw_1582() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldursw X(10), [XSP(30)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 03, 80, B8", "ldursw X(10), [XSP(30)  ]");
}

#[test]
fn ldxp_1583() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp W(1), w26, [XSP(31)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 6B, 7F, 88", "ldxp W(1), w26, [XSP(31)]");
}

#[test]
fn ldxp_1584() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxp X(4), X(1), [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 07, 7F, C8", "ldxp X(4), X(1), [XSP(25)]");
}

#[test]
fn ldxr_1585() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr w29, [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 7D, 5F, 88", "ldxr w29, [x12]");
}

#[test]
fn ldxr_1586() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxr X(27), [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 7F, 5F, C8", "ldxr X(27), [x25]");
}

#[test]
fn ldxrb_1587() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrb w5, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 7E, 5F, 08", "ldxrb w5, [x21]");
}

#[test]
fn ldxrh_1588() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ldxrh W(2), [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 7E, 5F, 48", "ldxrh W(2), [x23]");
}

#[test]
fn lsl_1589() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl w7, w0, w8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 20, C8, 1A", "lsl w7, w0, w8");
}

#[test]
fn lsl_1590() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl x30, x4, x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 20, DC, 9A", "lsl x30, x4, x28");
}

#[test]
fn lsl_1591() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl W(20), w7, 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 70, 1D, 53", "lsl W(20), w7, 3");
}

#[test]
fn lsl_1592() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsl x3, x29, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, EF, 7C, D3", "lsl x3, x29, 4");
}

#[test]
fn lslv_1593() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lslv W(20), W(6), w9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 20, C9, 1A", "lslv W(20), W(6), w9");
}

#[test]
fn lslv_1594() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lslv x8, X(5), x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 20, DA, 9A", "lslv x8, X(5), x26");
}

#[test]
fn lsr_1595() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr w17, w5, w3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 24, C3, 1A", "lsr w17, w5, w3");
}

#[test]
fn lsr_1596() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(1), X(3), X(22)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 24, D6, 9A", "lsr X(1), X(3), X(22)");
}

#[test]
fn lsr_1597() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr W(23), W(14), 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 7D, 18, 53", "lsr W(23), W(14), 24");
}

#[test]
fn lsr_1598() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsr X(0), X(9), 37
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, FD, 65, D3", "lsr X(0), X(9), 37");
}

#[test]
fn lsrv_1599() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; lsrv W(28), W(16), W(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 26, CA, 1A", "lsrv W(28), W(16), W(10)");
}
