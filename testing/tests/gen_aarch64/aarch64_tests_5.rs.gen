
#[test]
fn sminv_4000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sminv h22, V(22).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, AA, 71, 4E", "sminv h22, V(22).H8");
}

#[test]
fn sminv_4001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sminv h1, v16.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, AA, 71, 0E", "sminv h1, v16.H4");
}

#[test]
fn sminv_4002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sminv h7, V(19).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, AA, 71, 0E", "sminv h7, V(19).H4");
}

#[test]
fn sminv_4003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sminv s30, v12.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, A9, B1, 4E", "sminv s30, v12.S4");
}

#[test]
fn sminv_4004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sminv s26, V(8).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, A9, B1, 4E", "sminv s26, V(8).S4");
}

#[test]
fn smlal_4005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(3).S4, V(6).H4, v10.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 28, 7A, 0F", "smlal V(3).S4, V(6).H4, v10.H[7]");
}

#[test]
fn smlal_4006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(8).S4, V(2).H4, v12.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 28, 5C, 0F", "smlal V(8).S4, V(2).H4, v12.H[5]");
}

#[test]
fn smlal_4007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(11).D2, v2.S2, v24.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 28, 98, 0F", "smlal V(11).D2, v2.S2, v24.S[2]");
}

#[test]
fn smlal_4008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal v15.D2, v3.S2, V(1).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 20, A1, 0F", "smlal v15.D2, v3.S2, V(1).S[1]");
}

#[test]
fn smlal_4009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(12).H8, V(28).B8, v1.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 83, 21, 0E", "smlal V(12).H8, V(28).B8, v1.B8");
}

#[test]
fn smlal_4010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(9).H8, V(17).B8, V(21).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 82, 35, 0E", "smlal V(9).H8, V(17).B8, V(21).B8");
}

#[test]
fn smlal_4011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(30).S4, V(22).H4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 82, 6F, 0E", "smlal V(30).S4, V(22).H4, V(15).H4");
}

#[test]
fn smlal_4012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal V(22).S4, v24.H4, V(21).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 83, 75, 0E", "smlal V(22).S4, v24.H4, V(21).H4");
}

#[test]
fn smlal_4013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal v26.D2, v1.S2, v30.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 80, BE, 0E", "smlal v26.D2, v1.S2, v30.S2");
}

#[test]
fn smlal_4014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal v25.D2, v5.S2, v13.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 80, AD, 0E", "smlal v25.D2, v5.S2, v13.S2");
}

#[test]
fn smlal2_4015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(4).S4, v4.H8, V(6).H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 28, 46, 4F", "smlal2 V(4).S4, v4.H8, V(6).H[4]");
}

#[test]
fn smlal2_4016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(31).S4, V(4).H8, V(11).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 20, 7B, 4F", "smlal2 V(31).S4, V(4).H8, V(11).H[3]");
}

#[test]
fn smlal2_4017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v15.D2, V(26).S4, v25.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 23, B9, 4F", "smlal2 v15.D2, V(26).S4, v25.S[1]");
}

#[test]
fn smlal2_4018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v13.D2, v27.S4, v6.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 23, 86, 4F", "smlal2 v13.D2, v27.S4, v6.S[0]");
}

#[test]
fn smlal2_4019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v4.H8, V(3).B16, V(28).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 80, 3C, 4E", "smlal2 v4.H8, V(3).B16, V(28).B16");
}

#[test]
fn smlal2_4020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v18.H8, v8.B16, v8.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 81, 28, 4E", "smlal2 v18.H8, v8.B16, v8.B16");
}

#[test]
fn smlal2_4021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 V(15).S4, V(10).H8, V(4).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 81, 64, 4E", "smlal2 V(15).S4, V(10).H8, V(4).H8");
}

#[test]
fn smlal2_4022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v21.S4, V(25).H8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 83, 7E, 4E", "smlal2 v21.S4, V(25).H8, V(30).H8");
}

#[test]
fn smlal2_4023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v14.D2, V(4).S4, V(30).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 80, BE, 4E", "smlal2 v14.D2, V(4).S4, V(30).S4");
}

#[test]
fn smlal2_4024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlal2 v1.D2, v3.S4, v24.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 80, B8, 4E", "smlal2 v1.D2, v3.S4, v24.S4");
}

#[test]
fn smlsl_4025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v12.S4, V(12).H4, v5.H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 61, 75, 0F", "smlsl v12.S4, V(12).H4, v5.H[3]");
}

#[test]
fn smlsl_4026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(24).S4, V(26).H4, v8.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 6B, 48, 0F", "smlsl V(24).S4, V(26).H4, v8.H[4]");
}

#[test]
fn smlsl_4027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v30.D2, V(29).S2, v17.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 6B, 91, 0F", "smlsl v30.D2, V(29).S2, v17.S[2]");
}

#[test]
fn smlsl_4028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(26).D2, v19.S2, V(6).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 62, 86, 0F", "smlsl V(26).D2, v19.S2, V(6).S[0]");
}

#[test]
fn smlsl_4029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(18).H8, v31.B8, v5.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, A3, 25, 0E", "smlsl V(18).H8, v31.B8, v5.B8");
}

#[test]
fn smlsl_4030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v1.H8, V(30).B8, V(2).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, A3, 22, 0E", "smlsl v1.H8, V(30).B8, V(2).B8");
}

#[test]
fn smlsl_4031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(26).S4, v25.H4, v11.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, A3, 6B, 0E", "smlsl V(26).S4, v25.H4, v11.H4");
}

#[test]
fn smlsl_4032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl v10.S4, v3.H4, V(25).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, A0, 79, 0E", "smlsl v10.S4, v3.H4, V(25).H4");
}

#[test]
fn smlsl_4033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(9).D2, V(26).S2, V(4).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, A3, A4, 0E", "smlsl V(9).D2, V(26).S2, V(4).S2");
}

#[test]
fn smlsl_4034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl V(3).D2, V(9).S2, V(12).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, A1, AC, 0E", "smlsl V(3).D2, V(9).S2, V(12).S2");
}

#[test]
fn smlsl2_4035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v2.S4, V(10).H8, v10.H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 69, 6A, 4F", "smlsl2 v2.S4, V(10).H8, v10.H[6]");
}

#[test]
fn smlsl2_4036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 V(28).S4, v30.H8, v14.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 63, 5E, 4F", "smlsl2 V(28).S4, v30.H8, v14.H[1]");
}

#[test]
fn smlsl2_4037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 V(20).D2, v11.S4, V(6).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 69, 86, 4F", "smlsl2 V(20).D2, v11.S4, V(6).S[2]");
}

#[test]
fn smlsl2_4038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 V(29).D2, v3.S4, V(16).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 68, B0, 4F", "smlsl2 V(29).D2, v3.S4, V(16).S[3]");
}

#[test]
fn smlsl2_4039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v27.H8, v12.B16, V(17).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, A1, 31, 4E", "smlsl2 v27.H8, v12.B16, V(17).B16");
}

#[test]
fn smlsl2_4040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 V(1).H8, V(5).B16, v11.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, A0, 2B, 4E", "smlsl2 V(1).H8, V(5).B16, v11.B16");
}

#[test]
fn smlsl2_4041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v19.S4, v11.H8, v18.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A1, 72, 4E", "smlsl2 v19.S4, v11.H8, v18.H8");
}

#[test]
fn smlsl2_4042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 V(23).S4, v26.H8, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, A3, 7D, 4E", "smlsl2 V(23).S4, v26.H8, v29.H8");
}

#[test]
fn smlsl2_4043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v24.D2, V(21).S4, v25.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, A2, B9, 4E", "smlsl2 v24.D2, V(21).S4, v25.S4");
}

#[test]
fn smlsl2_4044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smlsl2 v31.D2, V(28).S4, v31.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, A3, BF, 4E", "smlsl2 v31.D2, V(28).S4, v31.S4");
}

#[test]
fn smnegl_4045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smnegl x3, w27, w13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, FF, 2D, 9B", "smnegl x3, w27, w13");
}

#[test]
fn smnegl_4046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smnegl x30, W(30), W(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, FF, 3F, 9B", "smnegl x30, W(30), W(31)");
}

#[test]
fn smov_4047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov W(9), V(9).B[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 2D, 03, 0E", "smov W(9), V(9).B[1]");
}

#[test]
fn smov_4048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov W(22), V(24).B[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 2F, 07, 0E", "smov W(22), V(24).B[3]");
}

#[test]
fn smov_4049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov W(31), v7.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 2C, 1E, 0E", "smov W(31), v7.H[7]");
}

#[test]
fn smov_4050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov w17, V(8).H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 2D, 02, 0E", "smov w17, V(8).H[0]");
}

#[test]
fn smov_4051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov X(26), V(15).B[13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 2D, 1B, 4E", "smov X(26), V(15).B[13]");
}

#[test]
fn smov_4052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov x0, v26.B[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 2F, 0F, 4E", "smov x0, v26.B[7]");
}

#[test]
fn smov_4053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov x6, V(16).H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 2E, 16, 4E", "smov x6, V(16).H[5]");
}

#[test]
fn smov_4054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov x30, v1.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 2C, 12, 4E", "smov x30, v1.H[4]");
}

#[test]
fn smov_4055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov X(28), v12.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 2D, 04, 4E", "smov X(28), v12.S[0]");
}

#[test]
fn smov_4056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smov X(4), v16.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 2E, 0C, 4E", "smov X(4), v16.S[1]");
}

#[test]
fn smsubl_4057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smsubl X(17), W(23), W(9), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 9A, 29, 9B", "smsubl X(17), W(23), W(9), x6");
}

#[test]
fn smsubl_4058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smsubl x17, W(3), w9, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, D8, 29, 9B", "smsubl x17, W(3), w9, X(22)");
}

#[test]
fn smulh_4059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smulh X(16), X(20), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 7E, 52, 9B", "smulh X(16), X(20), X(18)");
}

#[test]
fn smulh_4060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smulh X(21), X(8), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 7D, 51, 9B", "smulh X(21), X(8), x17");
}

#[test]
fn smull_4061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v7.S4, V(13).H4, V(14).H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, A1, 6E, 0F", "smull v7.S4, V(13).H4, V(14).H[2]");
}

#[test]
fn smull_4062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v0.S4, v11.H4, V(6).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, A1, 76, 0F", "smull v0.S4, v11.H4, V(6).H[3]");
}

#[test]
fn smull_4063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(23).D2, V(8).S2, V(25).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, A9, 99, 0F", "smull V(23).D2, V(8).S2, V(25).S[2]");
}

#[test]
fn smull_4064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v6.D2, v11.S2, V(12).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, A1, AC, 0F", "smull v6.D2, v11.S2, V(12).S[1]");
}

#[test]
fn smull_4065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v10.H8, v22.B8, v20.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, C2, 34, 0E", "smull v10.H8, v22.B8, v20.B8");
}

#[test]
fn smull_4066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(25).H8, V(1).B8, v18.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, C0, 32, 0E", "smull V(25).H8, V(1).B8, v18.B8");
}

#[test]
fn smull_4067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v18.S4, v3.H4, v1.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, C0, 61, 0E", "smull v18.S4, v3.H4, v1.H4");
}

#[test]
fn smull_4068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v4.S4, v24.H4, v7.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, C3, 67, 0E", "smull v4.S4, v24.H4, v7.H4");
}

#[test]
fn smull_4069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull V(10).D2, v11.S2, v16.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, C1, B0, 0E", "smull V(10).D2, v11.S2, v16.S2");
}

#[test]
fn smull_4070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull v14.D2, v6.S2, v1.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, C0, A1, 0E", "smull v14.D2, v6.S2, v1.S2");
}

#[test]
fn smull_4071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull X(18), w13, W(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 7D, 2D, 9B", "smull X(18), w13, W(13)");
}

#[test]
fn smull_4072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull X(0), W(9), W(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 7D, 24, 9B", "smull X(0), W(9), W(4)");
}

#[test]
fn smull2_4073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(12).S4, V(23).H8, v6.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, AA, 56, 4F", "smull2 V(12).S4, V(23).H8, v6.H[5]");
}

#[test]
fn smull2_4074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(20).S4, V(9).H8, v13.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, A1, 5D, 4F", "smull2 V(20).S4, V(9).H8, v13.H[1]");
}

#[test]
fn smull2_4075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(24).D2, V(18).S4, V(20).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, A2, 94, 4F", "smull2 V(24).D2, V(18).S4, V(20).S[0]");
}

#[test]
fn smull2_4076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(7).D2, V(3).S4, V(8).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, A0, A8, 4F", "smull2 V(7).D2, V(3).S4, V(8).S[1]");
}

#[test]
fn smull2_4077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(23).H8, V(11).B16, v30.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, C1, 3E, 4E", "smull2 V(23).H8, V(11).B16, v30.B16");
}

#[test]
fn smull2_4078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 v2.H8, V(14).B16, v20.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, C1, 34, 4E", "smull2 v2.H8, V(14).B16, v20.B16");
}

#[test]
fn smull2_4079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 v25.S4, V(20).H8, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, C2, 7D, 4E", "smull2 v25.S4, V(20).H8, v29.H8");
}

#[test]
fn smull2_4080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 v0.S4, V(13).H8, v20.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, C1, 74, 4E", "smull2 v0.S4, V(13).H8, v20.H8");
}

#[test]
fn smull2_4081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(10).D2, v14.S4, v22.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, C1, B6, 4E", "smull2 V(10).D2, v14.S4, v22.S4");
}

#[test]
fn smull2_4082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; smull2 V(5).D2, v29.S4, v8.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, C3, A8, 4E", "smull2 V(5).D2, v29.S4, v8.S4");
}

#[test]
fn sqabs_4083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs B(22), b22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 7A, 20, 5E", "sqabs B(22), b22");
}

#[test]
fn sqabs_4084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs b14, b23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 7A, 20, 5E", "sqabs b14, b23");
}

#[test]
fn sqabs_4085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs H(4), h23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 7A, 60, 5E", "sqabs H(4), h23");
}

#[test]
fn sqabs_4086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs h0, H(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 79, 60, 5E", "sqabs h0, H(10)");
}

#[test]
fn sqabs_4087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs s11, s27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 7B, A0, 5E", "sqabs s11, s27");
}

#[test]
fn sqabs_4088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs S(2), S(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 7A, A0, 5E", "sqabs S(2), S(22)");
}

#[test]
fn sqabs_4089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs D(31), d21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 7A, E0, 5E", "sqabs D(31), d21");
}

#[test]
fn sqabs_4090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs D(0), d3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 78, E0, 5E", "sqabs D(0), d3");
}

#[test]
fn sqabs_4091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(15).B16, V(13).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 79, 20, 4E", "sqabs V(15).B16, V(13).B16");
}

#[test]
fn sqabs_4092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v6.B16, V(19).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 7A, 20, 4E", "sqabs v6.B16, V(19).B16");
}

#[test]
fn sqabs_4093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(23).B8, v1.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 78, 20, 0E", "sqabs V(23).B8, v1.B8");
}

#[test]
fn sqabs_4094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(24).B8, V(4).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 78, 20, 0E", "sqabs V(24).B8, V(4).B8");
}

#[test]
fn sqabs_4095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v30.H8, v8.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 79, 60, 4E", "sqabs v30.H8, v8.H8");
}

#[test]
fn sqabs_4096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(20).H8, v2.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 78, 60, 4E", "sqabs V(20).H8, v2.H8");
}

#[test]
fn sqabs_4097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v10.H4, v6.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 78, 60, 0E", "sqabs v10.H4, v6.H4");
}

#[test]
fn sqabs_4098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v6.H4, V(25).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 7B, 60, 0E", "sqabs v6.H4, V(25).H4");
}

#[test]
fn sqabs_4099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(14).S4, v13.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 79, A0, 4E", "sqabs V(14).S4, v13.S4");
}

#[test]
fn sqabs_4100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(1).S4, v10.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 79, A0, 4E", "sqabs V(1).S4, v10.S4");
}

#[test]
fn sqabs_4101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v3.S2, V(28).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 7B, A0, 0E", "sqabs v3.S2, V(28).S2");
}

#[test]
fn sqabs_4102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs v25.S2, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 78, A0, 0E", "sqabs v25.S2, v5.S2");
}

#[test]
fn sqabs_4103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(20).D2, V(31).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 7B, E0, 4E", "sqabs V(20).D2, V(31).D2");
}

#[test]
fn sqabs_4104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqabs V(25).D2, v22.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 7A, E0, 4E", "sqabs V(25).D2, v22.D2");
}

#[test]
fn sqadd_4105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd b30, b24, B(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 0F, 29, 5E", "sqadd b30, b24, B(9)");
}

#[test]
fn sqadd_4106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd B(10), B(30), b10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 0F, 2A, 5E", "sqadd B(10), B(30), b10");
}

#[test]
fn sqadd_4107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd h19, h13, H(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0D, 68, 5E", "sqadd h19, h13, H(8)");
}

#[test]
fn sqadd_4108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd H(4), h4, h10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 0C, 6A, 5E", "sqadd H(4), h4, h10");
}

#[test]
fn sqadd_4109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd S(0), S(11), s7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 0D, A7, 5E", "sqadd S(0), S(11), s7");
}

#[test]
fn sqadd_4110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd S(15), S(6), S(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 0C, B8, 5E", "sqadd S(15), S(6), S(24)");
}

#[test]
fn sqadd_4111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd d23, d14, D(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 0D, F8, 5E", "sqadd d23, d14, D(24)");
}

#[test]
fn sqadd_4112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd D(18), d6, D(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 0C, E1, 5E", "sqadd D(18), d6, D(1)");
}

#[test]
fn sqadd_4113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(10).B16, v6.B16, v18.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 0C, 32, 4E", "sqadd V(10).B16, v6.B16, v18.B16");
}

#[test]
fn sqadd_4114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(14).B16, v15.B16, v16.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 0D, 30, 4E", "sqadd V(14).B16, v15.B16, v16.B16");
}

#[test]
fn sqadd_4115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(9).B8, V(24).B8, v6.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 0F, 26, 0E", "sqadd V(9).B8, V(24).B8, v6.B8");
}

#[test]
fn sqadd_4116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v17.B8, V(4).B8, V(1).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 0C, 21, 0E", "sqadd v17.B8, V(4).B8, V(1).B8");
}

#[test]
fn sqadd_4117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v8.H8, v5.H8, V(18).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 0C, 72, 4E", "sqadd v8.H8, v5.H8, V(18).H8");
}

#[test]
fn sqadd_4118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v14.H8, V(12).H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 0D, 79, 4E", "sqadd v14.H8, V(12).H8, v25.H8");
}

#[test]
fn sqadd_4119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v5.H4, V(14).H4, v19.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 0D, 73, 0E", "sqadd v5.H4, V(14).H4, v19.H4");
}

#[test]
fn sqadd_4120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(7).H4, V(4).H4, v22.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 0C, 76, 0E", "sqadd V(7).H4, V(4).H4, v22.H4");
}

#[test]
fn sqadd_4121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v22.S4, v16.S4, V(30).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 0E, BE, 4E", "sqadd v22.S4, v16.S4, V(30).S4");
}

#[test]
fn sqadd_4122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v30.S4, v1.S4, V(17).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 0C, B1, 4E", "sqadd v30.S4, v1.S4, V(17).S4");
}

#[test]
fn sqadd_4123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(30).S2, v19.S2, v28.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 0E, BC, 0E", "sqadd V(30).S2, v19.S2, v28.S2");
}

#[test]
fn sqadd_4124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(11).S2, V(17).S2, V(23).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 0E, B7, 0E", "sqadd V(11).S2, V(17).S2, V(23).S2");
}

#[test]
fn sqadd_4125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd v10.D2, v25.D2, V(7).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 0F, E7, 4E", "sqadd v10.D2, v25.D2, V(7).D2");
}

#[test]
fn sqadd_4126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqadd V(12).D2, V(19).D2, V(18).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 0E, F2, 4E", "sqadd V(12).D2, V(19).D2, V(18).D2");
}

#[test]
fn sqdmlal_4127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal s26, H(3), v9.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 30, 59, 5F", "sqdmlal s26, H(3), v9.H[1]");
}

#[test]
fn sqdmlal_4128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal S(15), h10, V(9).H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 31, 49, 5F", "sqdmlal S(15), h10, V(9).H[0]");
}

#[test]
fn sqdmlal_4129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal d20, s10, V(18).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 39, B2, 5F", "sqdmlal d20, s10, V(18).S[3]");
}

#[test]
fn sqdmlal_4130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal D(8), s30, v21.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 33, 95, 5F", "sqdmlal D(8), s30, v21.S[0]");
}

#[test]
fn sqdmlal_4131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v3.S4, v11.H4, V(7).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 39, 77, 0F", "sqdmlal v3.S4, v11.H4, V(7).H[7]");
}

#[test]
fn sqdmlal_4132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal V(7).S4, v5.H4, v8.H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 30, 68, 0F", "sqdmlal V(7).S4, v5.H4, v8.H[2]");
}

#[test]
fn sqdmlal_4133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v11.D2, V(18).S2, v8.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 3A, 88, 0F", "sqdmlal v11.D2, V(18).S2, v8.S[2]");
}

#[test]
fn sqdmlal_4134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal V(20).D2, v11.S2, v19.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 39, B3, 0F", "sqdmlal V(20).D2, v11.S2, v19.S[3]");
}

#[test]
fn sqdmlal_4135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal s14, H(23), h7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 92, 67, 5E", "sqdmlal s14, H(23), h7");
}

#[test]
fn sqdmlal_4136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal S(23), h29, h1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 93, 61, 5E", "sqdmlal S(23), h29, h1");
}

#[test]
fn sqdmlal_4137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal D(11), S(1), s29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 90, BD, 5E", "sqdmlal D(11), S(1), s29");
}

#[test]
fn sqdmlal_4138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal D(25), S(21), s6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 92, A6, 5E", "sqdmlal D(25), S(21), s6");
}

#[test]
fn sqdmlal_4139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal V(5).S4, v13.H4, v23.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 91, 77, 0E", "sqdmlal V(5).S4, v13.H4, v23.H4");
}

#[test]
fn sqdmlal_4140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v6.S4, v6.H4, v23.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 90, 77, 0E", "sqdmlal v6.S4, v6.H4, v23.H4");
}

#[test]
fn sqdmlal_4141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v26.D2, v18.S2, v31.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 92, BF, 0E", "sqdmlal v26.D2, v18.S2, v31.S2");
}

#[test]
fn sqdmlal_4142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal v20.D2, v28.S2, V(15).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 93, AF, 0E", "sqdmlal v20.D2, v28.S2, V(15).S2");
}

#[test]
fn sqdmlal2_4143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 V(19).S4, v18.H8, v13.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 32, 5D, 4F", "sqdmlal2 V(19).S4, v18.H8, v13.H[1]");
}

#[test]
fn sqdmlal2_4144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 v6.S4, V(23).H8, v0.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 3A, 70, 4F", "sqdmlal2 v6.S4, V(23).H8, v0.H[7]");
}

#[test]
fn sqdmlal2_4145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 v23.D2, V(0).S4, v11.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 38, AB, 4F", "sqdmlal2 v23.D2, V(0).S4, v11.S[3]");
}

#[test]
fn sqdmlal2_4146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 V(20).D2, V(11).S4, V(16).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 31, B0, 4F", "sqdmlal2 V(20).D2, V(11).S4, V(16).S[1]");
}

#[test]
fn sqdmlal2_4147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 v3.S4, v23.H8, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 92, 73, 4E", "sqdmlal2 v3.S4, v23.H8, V(19).H8");
}

#[test]
fn sqdmlal2_4148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 v1.S4, V(17).H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 92, 79, 4E", "sqdmlal2 v1.S4, V(17).H8, v25.H8");
}

#[test]
fn sqdmlal2_4149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 V(4).D2, v23.S4, V(5).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 92, A5, 4E", "sqdmlal2 V(4).D2, v23.S4, V(5).S4");
}

#[test]
fn sqdmlal2_4150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlal2 v16.D2, V(17).S4, V(23).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 92, B7, 4E", "sqdmlal2 v16.D2, V(17).S4, V(23).S4");
}

#[test]
fn sqdmlsl_4151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl s17, H(23), V(9).H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 72, 69, 5F", "sqdmlsl s17, H(23), V(9).H[2]");
}

#[test]
fn sqdmlsl_4152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl s29, H(21), V(14).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 7A, 7E, 5F", "sqdmlsl s29, H(21), V(14).H[7]");
}

#[test]
fn sqdmlsl_4153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl d4, s16, v26.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 72, 9A, 5F", "sqdmlsl d4, s16, v26.S[0]");
}

#[test]
fn sqdmlsl_4154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl D(20), s1, v19.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 78, 93, 5F", "sqdmlsl D(20), s1, v19.S[2]");
}

#[test]
fn sqdmlsl_4155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(24).S4, v11.H4, V(3).H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 71, 63, 0F", "sqdmlsl V(24).S4, v11.H4, V(3).H[2]");
}

#[test]
fn sqdmlsl_4156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl v27.S4, V(1).H4, v4.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 78, 44, 0F", "sqdmlsl v27.S4, V(1).H4, v4.H[4]");
}

#[test]
fn sqdmlsl_4157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(11).D2, V(23).S2, V(15).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 72, 8F, 0F", "sqdmlsl V(11).D2, V(23).S2, V(15).S[0]");
}

#[test]
fn sqdmlsl_4158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(25).D2, V(2).S2, V(5).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 78, A5, 0F", "sqdmlsl V(25).D2, V(2).S2, V(5).S[3]");
}

#[test]
fn sqdmlsl_4159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl s27, H(3), H(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, B0, 78, 5E", "sqdmlsl s27, H(3), H(24)");
}

#[test]
fn sqdmlsl_4160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl S(21), h16, h16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, B2, 70, 5E", "sqdmlsl S(21), h16, h16");
}

#[test]
fn sqdmlsl_4161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl d28, s3, s10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, B0, AA, 5E", "sqdmlsl d28, s3, s10");
}

#[test]
fn sqdmlsl_4162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl D(12), S(12), S(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, B1, A0, 5E", "sqdmlsl D(12), S(12), S(0)");
}

#[test]
fn sqdmlsl_4163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(6).S4, v22.H4, v7.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, B2, 67, 0E", "sqdmlsl V(6).S4, v22.H4, v7.H4");
}

#[test]
fn sqdmlsl_4164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(4).S4, v1.H4, v25.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, B0, 79, 0E", "sqdmlsl V(4).S4, v1.H4, v25.H4");
}

#[test]
fn sqdmlsl_4165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(23).D2, V(18).S2, v19.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, B2, B3, 0E", "sqdmlsl V(23).D2, V(18).S2, v19.S2");
}

#[test]
fn sqdmlsl_4166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl V(25).D2, v19.S2, v20.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, B2, B4, 0E", "sqdmlsl V(25).D2, v19.S2, v20.S2");
}

#[test]
fn sqdmlsl2_4167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(9).S4, v17.H8, V(13).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 7A, 7D, 4F", "sqdmlsl2 V(9).S4, v17.H8, V(13).H[7]");
}

#[test]
fn sqdmlsl2_4168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 v28.S4, V(29).H8, v0.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 7B, 70, 4F", "sqdmlsl2 v28.S4, V(29).H8, v0.H[7]");
}

#[test]
fn sqdmlsl2_4169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(30).D2, V(23).S4, v14.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 72, AE, 4F", "sqdmlsl2 V(30).D2, V(23).S4, v14.S[1]");
}

#[test]
fn sqdmlsl2_4170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(11).D2, v5.S4, V(18).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 70, B2, 4F", "sqdmlsl2 V(11).D2, v5.S4, V(18).S[1]");
}

#[test]
fn sqdmlsl2_4171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(20).S4, V(5).H8, v30.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, B0, 7E, 4E", "sqdmlsl2 V(20).S4, V(5).H8, v30.H8");
}

#[test]
fn sqdmlsl2_4172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 v31.S4, V(17).H8, v21.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, B2, 75, 4E", "sqdmlsl2 v31.S4, V(17).H8, v21.H8");
}

#[test]
fn sqdmlsl2_4173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 v27.D2, V(3).S4, V(9).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, B0, A9, 4E", "sqdmlsl2 v27.D2, V(3).S4, V(9).S4");
}

#[test]
fn sqdmlsl2_4174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmlsl2 V(31).D2, v7.S4, V(21).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, B0, B5, 4E", "sqdmlsl2 V(31).D2, v7.S4, V(21).S4");
}

#[test]
fn sqdmulh_4175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh h11, h15, v12.H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, C9, 6C, 5F", "sqdmulh h11, h15, v12.H[6]");
}

#[test]
fn sqdmulh_4176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh H(4), h26, V(3).H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, C3, 43, 5F", "sqdmulh H(4), h26, V(3).H[0]");
}

#[test]
fn sqdmulh_4177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh S(22), S(20), V(30).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, C2, 9E, 5F", "sqdmulh S(22), S(20), V(30).S[0]");
}

#[test]
fn sqdmulh_4178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh s20, s12, V(25).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, C1, 99, 5F", "sqdmulh s20, s12, V(25).S[0]");
}

#[test]
fn sqdmulh_4179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v17.H8, v23.H8, V(14).H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, CA, 5E, 4F", "sqdmulh v17.H8, v23.H8, V(14).H[5]");
}

#[test]
fn sqdmulh_4180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v16.H8, V(26).H8, v7.H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, CB, 67, 4F", "sqdmulh v16.H8, V(26).H8, v7.H[6]");
}

#[test]
fn sqdmulh_4181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(27).H4, v28.H4, v0.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, C3, 50, 0F", "sqdmulh V(27).H4, v28.H4, v0.H[1]");
}

#[test]
fn sqdmulh_4182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(10).H4, v9.H4, v10.H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, C1, 7A, 0F", "sqdmulh V(10).H4, v9.H4, v10.H[3]");
}

#[test]
fn sqdmulh_4183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v16.S4, v30.S4, V(26).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, CB, 9A, 4F", "sqdmulh v16.S4, v30.S4, V(26).S[2]");
}

#[test]
fn sqdmulh_4184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(21).S4, v25.S4, V(5).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, C3, 85, 4F", "sqdmulh V(21).S4, v25.S4, V(5).S[0]");
}

#[test]
fn sqdmulh_4185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(0).S2, V(29).S2, V(20).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, CB, B4, 0F", "sqdmulh V(0).S2, V(29).S2, V(20).S[3]");
}

#[test]
fn sqdmulh_4186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v12.S2, V(28).S2, V(14).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, C3, AE, 0F", "sqdmulh v12.S2, V(28).S2, V(14).S[1]");
}

#[test]
fn sqdmulh_4187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh H(14), H(13), H(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, B5, 6F, 5E", "sqdmulh H(14), H(13), H(15)");
}

#[test]
fn sqdmulh_4188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh H(3), h4, H(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, B4, 7A, 5E", "sqdmulh H(3), h4, H(26)");
}

#[test]
fn sqdmulh_4189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh S(30), s27, s0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, B7, A0, 5E", "sqdmulh S(30), s27, s0");
}

#[test]
fn sqdmulh_4190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh S(9), s12, S(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, B5, B7, 5E", "sqdmulh S(9), s12, S(23)");
}

#[test]
fn sqdmulh_4191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(11).H8, V(17).H8, V(20).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, B6, 74, 4E", "sqdmulh V(11).H8, V(17).H8, V(20).H8");
}

#[test]
fn sqdmulh_4192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(21).H8, V(4).H8, v14.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, B4, 6E, 4E", "sqdmulh V(21).H8, V(4).H8, v14.H8");
}

#[test]
fn sqdmulh_4193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(19).H4, V(31).H4, V(11).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, B7, 6B, 0E", "sqdmulh V(19).H4, V(31).H4, V(11).H4");
}

#[test]
fn sqdmulh_4194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v12.H4, v28.H4, v2.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, B7, 62, 0E", "sqdmulh v12.H4, v28.H4, v2.H4");
}

#[test]
fn sqdmulh_4195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(5).S4, v7.S4, v31.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, B4, BF, 4E", "sqdmulh V(5).S4, v7.S4, v31.S4");
}

#[test]
fn sqdmulh_4196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(20).S4, v6.S4, V(22).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, B4, B6, 4E", "sqdmulh V(20).S4, v6.S4, V(22).S4");
}

#[test]
fn sqdmulh_4197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh V(18).S2, v0.S2, v14.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, B4, AE, 0E", "sqdmulh V(18).S2, v0.S2, v14.S2");
}

#[test]
fn sqdmulh_4198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmulh v12.S2, v10.S2, V(20).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, B5, B4, 0E", "sqdmulh v12.S2, v10.S2, V(20).S2");
}

#[test]
fn sqdmull_4199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull s31, H(19), V(6).H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, B2, 56, 5F", "sqdmull s31, H(19), V(6).H[1]");
}

#[test]
fn sqdmull_4200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull s24, H(13), V(0).H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, B1, 50, 5F", "sqdmull s24, H(13), V(0).H[1]");
}

#[test]
fn sqdmull_4201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull D(19), S(23), v0.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, BA, A0, 5F", "sqdmull D(19), S(23), v0.S[3]");
}

#[test]
fn sqdmull_4202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull D(15), S(23), V(2).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, B2, 82, 5F", "sqdmull D(15), S(23), V(2).S[0]");
}

#[test]
fn sqdmull_4203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull v22.S4, v22.H4, v11.H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, B2, 4B, 0F", "sqdmull v22.S4, v22.H4, v11.H[0]");
}

#[test]
fn sqdmull_4204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(21).S4, V(14).H4, v12.H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, B1, 7C, 0F", "sqdmull V(21).S4, V(14).H4, v12.H[3]");
}

#[test]
fn sqdmull_4205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(11).D2, V(19).S2, V(1).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, BA, A1, 0F", "sqdmull V(11).D2, V(19).S2, V(1).S[3]");
}

#[test]
fn sqdmull_4206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(25).D2, v11.S2, v1.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, B1, A1, 0F", "sqdmull V(25).D2, v11.S2, v1.S[1]");
}

#[test]
fn sqdmull_4207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull S(18), h0, h1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, D0, 61, 5E", "sqdmull S(18), h0, h1");
}

#[test]
fn sqdmull_4208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull S(16), h22, H(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, D2, 66, 5E", "sqdmull S(16), h22, H(6)");
}

#[test]
fn sqdmull_4209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull d19, s8, S(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D1, A2, 5E", "sqdmull d19, s8, S(2)");
}

#[test]
fn sqdmull_4210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull D(11), s12, S(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, D1, BA, 5E", "sqdmull D(11), s12, S(26)");
}

#[test]
fn sqdmull_4211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(24).S4, V(24).H4, V(12).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, D3, 6C, 0E", "sqdmull V(24).S4, V(24).H4, V(12).H4");
}

#[test]
fn sqdmull_4212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull v21.S4, v21.H4, v14.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, D2, 6E, 0E", "sqdmull v21.S4, v21.H4, v14.H4");
}

#[test]
fn sqdmull_4213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull v31.D2, V(4).S2, V(29).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, D0, BD, 0E", "sqdmull v31.D2, V(4).S2, V(29).S2");
}

#[test]
fn sqdmull_4214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull V(23).D2, v3.S2, v3.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, D0, A3, 0E", "sqdmull V(23).D2, v3.S2, v3.S2");
}

#[test]
fn sqdmull2_4215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 v24.S4, v13.H8, V(0).H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, B1, 50, 4F", "sqdmull2 v24.S4, v13.H8, V(0).H[1]");
}

#[test]
fn sqdmull2_4216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 V(14).S4, V(6).H8, v4.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, B8, 74, 4F", "sqdmull2 V(14).S4, V(6).H8, v4.H[7]");
}

#[test]
fn sqdmull2_4217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 v22.D2, v5.S4, V(10).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, B0, 8A, 4F", "sqdmull2 v22.D2, v5.S4, V(10).S[0]");
}

#[test]
fn sqdmull2_4218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 V(28).D2, v13.S4, v9.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, B9, A9, 4F", "sqdmull2 V(28).D2, v13.S4, v9.S[3]");
}

#[test]
fn sqdmull2_4219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 v29.S4, V(17).H8, v9.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, D2, 69, 4E", "sqdmull2 v29.S4, V(17).H8, v9.H8");
}

#[test]
fn sqdmull2_4220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 V(21).S4, v30.H8, v5.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, D3, 65, 4E", "sqdmull2 V(21).S4, v30.H8, v5.H8");
}

#[test]
fn sqdmull2_4221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 V(3).D2, V(13).S4, v14.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, D1, AE, 4E", "sqdmull2 V(3).D2, V(13).S4, v14.S4");
}

#[test]
fn sqdmull2_4222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqdmull2 V(31).D2, v14.S4, V(14).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, D1, AE, 4E", "sqdmull2 V(31).D2, v14.S4, V(14).S4");
}

#[test]
fn sqneg_4223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg b25, B(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 7A, 20, 7E", "sqneg b25, B(16)");
}

#[test]
fn sqneg_4224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg b18, b19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 7A, 20, 7E", "sqneg b18, b19");
}

#[test]
fn sqneg_4225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg H(0), H(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 7B, 60, 7E", "sqneg H(0), H(31)");
}

#[test]
fn sqneg_4226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg H(25), H(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 7A, 60, 7E", "sqneg H(25), H(21)");
}

#[test]
fn sqneg_4227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg s22, S(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 79, A0, 7E", "sqneg s22, S(11)");
}

#[test]
fn sqneg_4228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg s18, S(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 78, A0, 7E", "sqneg s18, S(6)");
}

#[test]
fn sqneg_4229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg d10, d10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 79, E0, 7E", "sqneg d10, d10");
}

#[test]
fn sqneg_4230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg d5, d16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 7A, E0, 7E", "sqneg d5, d16");
}

#[test]
fn sqneg_4231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(4).B16, V(27).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 7B, 20, 6E", "sqneg V(4).B16, V(27).B16");
}

#[test]
fn sqneg_4232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v8.B16, v24.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 7B, 20, 6E", "sqneg v8.B16, v24.B16");
}

#[test]
fn sqneg_4233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v20.B8, v4.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 78, 20, 2E", "sqneg v20.B8, v4.B8");
}

#[test]
fn sqneg_4234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(13).B8, V(11).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 79, 20, 2E", "sqneg V(13).B8, V(11).B8");
}

#[test]
fn sqneg_4235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v3.H8, v16.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 7A, 60, 6E", "sqneg v3.H8, v16.H8");
}

#[test]
fn sqneg_4236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(2).H8, V(29).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 7B, 60, 6E", "sqneg V(2).H8, V(29).H8");
}

#[test]
fn sqneg_4237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(10).H4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 79, 60, 2E", "sqneg V(10).H4, V(15).H4");
}

#[test]
fn sqneg_4238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(30).H4, v9.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 79, 60, 2E", "sqneg V(30).H4, v9.H4");
}

#[test]
fn sqneg_4239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v14.S4, v16.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 7A, A0, 6E", "sqneg v14.S4, v16.S4");
}

#[test]
fn sqneg_4240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(0).S4, v20.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 7A, A0, 6E", "sqneg V(0).S4, v20.S4");
}

#[test]
fn sqneg_4241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg v5.S2, V(10).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 79, A0, 2E", "sqneg v5.S2, V(10).S2");
}

#[test]
fn sqneg_4242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(21).S2, V(24).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 7B, A0, 2E", "sqneg V(21).S2, V(24).S2");
}

#[test]
fn sqneg_4243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(0).D2, V(28).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 7B, E0, 6E", "sqneg V(0).D2, V(28).D2");
}

#[test]
fn sqneg_4244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqneg V(8).D2, v31.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 7B, E0, 6E", "sqneg V(8).D2, v31.D2");
}

#[test]
fn sqrdmlah_4245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah H(13), h6, v2.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, D8, 72, 7F", "sqrdmlah H(13), h6, v2.H[7]");
}

#[test]
fn sqrdmlah_4246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah H(29), H(15), v5.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, D9, 55, 7F", "sqrdmlah H(29), H(15), v5.H[5]");
}

#[test]
fn sqrdmlah_4247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah s9, S(13), V(20).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, D1, B4, 7F", "sqrdmlah s9, S(13), V(20).S[1]");
}

#[test]
fn sqrdmlah_4248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah S(15), s12, v26.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, D9, 9A, 7F", "sqrdmlah S(15), s12, v26.S[2]");
}

#[test]
fn sqrdmlah_4249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v31.H8, v30.H8, v15.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, DB, 4F, 6F", "sqrdmlah v31.H8, v30.H8, v15.H[4]");
}

#[test]
fn sqrdmlah_4250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v27.H8, v18.H8, V(9).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, D2, 79, 6F", "sqrdmlah v27.H8, v18.H8, V(9).H[3]");
}

#[test]
fn sqrdmlah_4251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v4.H4, V(26).H4, V(1).H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, DB, 51, 2F", "sqrdmlah v4.H4, V(26).H4, V(1).H[5]");
}

#[test]
fn sqrdmlah_4252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v8.H4, V(25).H4, V(10).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, DB, 7A, 2F", "sqrdmlah v8.H4, V(25).H4, V(10).H[7]");
}

#[test]
fn sqrdmlah_4253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(22).S4, V(15).S4, v7.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, D1, A7, 6F", "sqrdmlah V(22).S4, V(15).S4, v7.S[1]");
}

#[test]
fn sqrdmlah_4254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(16).S4, v6.S4, v15.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, D0, AF, 6F", "sqrdmlah V(16).S4, v6.S4, v15.S[1]");
}

#[test]
fn sqrdmlah_4255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(1).S2, V(1).S2, V(20).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, D0, 94, 2F", "sqrdmlah V(1).S2, V(1).S2, V(20).S[0]");
}

#[test]
fn sqrdmlah_4256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v9.S2, V(2).S2, V(28).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, D8, 9C, 2F", "sqrdmlah v9.S2, V(2).S2, V(28).S[2]");
}

#[test]
fn sqrdmlah_4257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah H(11), h3, H(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 84, 47, 7E", "sqrdmlah H(11), h3, H(7)");
}

#[test]
fn sqrdmlah_4258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah h31, h9, H(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 85, 5F, 7E", "sqrdmlah h31, h9, H(31)");
}

#[test]
fn sqrdmlah_4259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah s6, S(7), s13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 84, 8D, 7E", "sqrdmlah s6, S(7), s13");
}

#[test]
fn sqrdmlah_4260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah S(18), s9, s24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 85, 98, 7E", "sqrdmlah S(18), s9, s24");
}

#[test]
fn sqrdmlah_4261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v12.H8, v2.H8, v5.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 84, 45, 6E", "sqrdmlah v12.H8, v2.H8, v5.H8");
}

#[test]
fn sqrdmlah_4262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v2.H8, v9.H8, v5.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 85, 45, 6E", "sqrdmlah v2.H8, v9.H8, v5.H8");
}

#[test]
fn sqrdmlah_4263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(17).H4, v20.H4, V(6).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 86, 46, 2E", "sqrdmlah V(17).H4, v20.H4, V(6).H4");
}

#[test]
fn sqrdmlah_4264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v22.H4, V(8).H4, v28.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 85, 5C, 2E", "sqrdmlah v22.H4, V(8).H4, v28.H4");
}

#[test]
fn sqrdmlah_4265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v22.S4, V(27).S4, v10.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 87, 8A, 6E", "sqrdmlah v22.S4, V(27).S4, v10.S4");
}

#[test]
fn sqrdmlah_4266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(5).S4, v11.S4, V(7).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 85, 87, 6E", "sqrdmlah V(5).S4, v11.S4, V(7).S4");
}

#[test]
fn sqrdmlah_4267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah V(17).S2, V(30).S2, v27.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 87, 9B, 2E", "sqrdmlah V(17).S2, V(30).S2, v27.S2");
}

#[test]
fn sqrdmlah_4268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlah v29.S2, V(27).S2, V(30).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 87, 9E, 2E", "sqrdmlah v29.S2, V(27).S2, V(30).S2");
}

#[test]
fn sqrdmlsh_4269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh h31, H(28), v15.H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, F3, 6F, 7F", "sqrdmlsh h31, H(28), v15.H[2]");
}

#[test]
fn sqrdmlsh_4270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh h22, h10, V(11).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, F1, 7B, 7F", "sqrdmlsh h22, h10, V(11).H[3]");
}

#[test]
fn sqrdmlsh_4271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh s4, s4, V(14).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, F0, 8E, 7F", "sqrdmlsh s4, s4, V(14).S[0]");
}

#[test]
fn sqrdmlsh_4272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh s20, s30, V(14).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, FB, 8E, 7F", "sqrdmlsh s20, s30, V(14).S[2]");
}

#[test]
fn sqrdmlsh_4273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(6).H8, v23.H8, V(4).H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, F2, 64, 6F", "sqrdmlsh V(6).H8, v23.H8, V(4).H[2]");
}

#[test]
fn sqrdmlsh_4274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(22).H8, v8.H8, V(13).H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, F9, 7D, 6F", "sqrdmlsh V(22).H8, v8.H8, V(13).H[7]");
}

#[test]
fn sqrdmlsh_4275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(3).H4, V(18).H4, v12.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, FA, 4C, 2F", "sqrdmlsh V(3).H4, V(18).H4, v12.H[4]");
}

#[test]
fn sqrdmlsh_4276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(31).H4, V(25).H4, v4.H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, F3, 44, 2F", "sqrdmlsh V(31).H4, V(25).H4, v4.H[0]");
}

#[test]
fn sqrdmlsh_4277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v18.S4, v23.S4, V(28).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, FA, BC, 6F", "sqrdmlsh v18.S4, v23.S4, V(28).S[3]");
}

#[test]
fn sqrdmlsh_4278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(27).S4, V(14).S4, V(15).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, F1, AF, 6F", "sqrdmlsh V(27).S4, V(14).S4, V(15).S[1]");
}

#[test]
fn sqrdmlsh_4279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(6).S2, v26.S2, V(9).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, F3, A9, 2F", "sqrdmlsh V(6).S2, v26.S2, V(9).S[1]");
}

#[test]
fn sqrdmlsh_4280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(27).S2, v8.S2, v5.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, F1, A5, 2F", "sqrdmlsh V(27).S2, v8.S2, v5.S[1]");
}

#[test]
fn sqrdmlsh_4281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh H(15), h1, H(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8C, 49, 7E", "sqrdmlsh H(15), h1, H(9)");
}

#[test]
fn sqrdmlsh_4282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh H(23), h2, H(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 8C, 5A, 7E", "sqrdmlsh H(23), h2, H(26)");
}

#[test]
fn sqrdmlsh_4283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh S(11), s3, S(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 8C, 89, 7E", "sqrdmlsh S(11), s3, S(9)");
}

#[test]
fn sqrdmlsh_4284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh s29, s13, S(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 8D, 89, 7E", "sqrdmlsh s29, s13, S(9)");
}

#[test]
fn sqrdmlsh_4285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v12.H8, V(15).H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 8D, 59, 6E", "sqrdmlsh v12.H8, V(15).H8, v25.H8");
}

#[test]
fn sqrdmlsh_4286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v10.H8, v20.H8, V(22).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 8E, 56, 6E", "sqrdmlsh v10.H8, v20.H8, V(22).H8");
}

#[test]
fn sqrdmlsh_4287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(11).H4, V(21).H4, v18.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 8E, 52, 2E", "sqrdmlsh V(11).H4, V(21).H4, v18.H4");
}

#[test]
fn sqrdmlsh_4288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(14).H4, v10.H4, v4.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 8D, 44, 2E", "sqrdmlsh V(14).H4, v10.H4, v4.H4");
}

#[test]
fn sqrdmlsh_4289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(14).S4, v11.S4, v23.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 8D, 97, 6E", "sqrdmlsh V(14).S4, v11.S4, v23.S4");
}

#[test]
fn sqrdmlsh_4290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v3.S4, v29.S4, V(10).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 8F, 8A, 6E", "sqrdmlsh v3.S4, v29.S4, V(10).S4");
}

#[test]
fn sqrdmlsh_4291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh v16.S2, V(13).S2, V(4).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 8D, 84, 2E", "sqrdmlsh v16.S2, V(13).S2, V(4).S2");
}

#[test]
fn sqrdmlsh_4292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmlsh V(21).S2, v16.S2, V(15).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 8E, 8F, 2E", "sqrdmlsh V(21).S2, v16.S2, V(15).S2");
}

#[test]
fn sqrdmulh_4293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh h14, h9, v1.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, D1, 51, 5F", "sqrdmulh h14, h9, v1.H[1]");
}

#[test]
fn sqrdmulh_4294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh H(28), h27, v13.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, DB, 7D, 5F", "sqrdmulh H(28), h27, v13.H[7]");
}

#[test]
fn sqrdmulh_4295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh s9, s31, V(5).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, DB, A5, 5F", "sqrdmulh s9, s31, V(5).S[3]");
}

#[test]
fn sqrdmulh_4296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh S(5), S(17), v14.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, D2, 8E, 5F", "sqrdmulh S(5), S(17), v14.S[0]");
}

#[test]
fn sqrdmulh_4297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v4.H8, v5.H8, v15.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, D8, 7F, 4F", "sqrdmulh v4.H8, v5.H8, v15.H[7]");
}

#[test]
fn sqrdmulh_4298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(18).H8, v6.H8, v12.H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, D0, 5C, 4F", "sqrdmulh V(18).H8, v6.H8, v12.H[1]");
}

#[test]
fn sqrdmulh_4299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(30).H4, v2.H4, v14.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, D8, 5E, 0F", "sqrdmulh V(30).H4, v2.H4, v14.H[5]");
}

#[test]
fn sqrdmulh_4300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v17.H4, V(22).H4, v10.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, DA, 7A, 0F", "sqrdmulh v17.H4, V(22).H4, v10.H[7]");
}

#[test]
fn sqrdmulh_4301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(15).S4, V(6).S4, V(26).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, D0, 9A, 4F", "sqrdmulh V(15).S4, V(6).S4, V(26).S[0]");
}

#[test]
fn sqrdmulh_4302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(30).S4, V(17).S4, v12.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, DA, 8C, 4F", "sqrdmulh V(30).S4, V(17).S4, v12.S[2]");
}

#[test]
fn sqrdmulh_4303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v24.S2, V(23).S2, v15.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, D2, AF, 0F", "sqrdmulh v24.S2, V(23).S2, v15.S[1]");
}

#[test]
fn sqrdmulh_4304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v11.S2, v8.S2, v11.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, D1, AB, 0F", "sqrdmulh v11.S2, v8.S2, v11.S[1]");
}

#[test]
fn sqrdmulh_4305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh H(26), h20, h1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, B6, 61, 7E", "sqrdmulh H(26), h20, h1");
}

#[test]
fn sqrdmulh_4306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh h18, H(15), H(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, B5, 66, 7E", "sqrdmulh h18, H(15), H(6)");
}

#[test]
fn sqrdmulh_4307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh S(1), S(21), s21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, B6, B5, 7E", "sqrdmulh S(1), S(21), s21");
}

#[test]
fn sqrdmulh_4308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh S(7), s1, s15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, B4, AF, 7E", "sqrdmulh S(7), s1, s15");
}

#[test]
fn sqrdmulh_4309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v24.H8, V(23).H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, B6, 79, 6E", "sqrdmulh v24.H8, V(23).H8, v25.H8");
}

#[test]
fn sqrdmulh_4310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v28.H8, v9.H8, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, B5, 73, 6E", "sqrdmulh v28.H8, v9.H8, V(19).H8");
}

#[test]
fn sqrdmulh_4311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(4).H4, V(15).H4, v12.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, B5, 6C, 2E", "sqrdmulh V(4).H4, V(15).H4, v12.H4");
}

#[test]
fn sqrdmulh_4312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(8).H4, v14.H4, V(16).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, B5, 70, 2E", "sqrdmulh V(8).H4, v14.H4, V(16).H4");
}

#[test]
fn sqrdmulh_4313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v1.S4, V(7).S4, v21.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, B4, B5, 6E", "sqrdmulh v1.S4, V(7).S4, v21.S4");
}

#[test]
fn sqrdmulh_4314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh V(1).S4, V(16).S4, V(10).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, B6, AA, 6E", "sqrdmulh V(1).S4, V(16).S4, V(10).S4");
}

#[test]
fn sqrdmulh_4315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v27.S2, V(9).S2, V(6).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, B5, A6, 2E", "sqrdmulh v27.S2, V(9).S2, V(6).S2");
}

#[test]
fn sqrdmulh_4316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrdmulh v29.S2, V(23).S2, V(19).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, B6, B3, 2E", "sqrdmulh v29.S2, V(23).S2, V(19).S2");
}

#[test]
fn sqrshl_4317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl b31, b23, b6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 5E, 26, 5E", "sqrshl b31, b23, b6");
}

#[test]
fn sqrshl_4318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl b20, B(16), b7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 5E, 27, 5E", "sqrshl b20, B(16), b7");
}

#[test]
fn sqrshl_4319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl H(14), h14, H(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 5D, 6A, 5E", "sqrshl H(14), h14, H(10)");
}

#[test]
fn sqrshl_4320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl H(21), H(26), h26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 5F, 7A, 5E", "sqrshl H(21), H(26), h26");
}

#[test]
fn sqrshl_4321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl S(4), s3, s6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 5C, A6, 5E", "sqrshl S(4), s3, s6");
}

#[test]
fn sqrshl_4322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl s1, s7, S(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 5C, B3, 5E", "sqrshl s1, s7, S(19)");
}

#[test]
fn sqrshl_4323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl d31, D(5), D(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 5C, F5, 5E", "sqrshl d31, D(5), D(21)");
}

#[test]
fn sqrshl_4324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl D(18), D(1), d15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 5C, EF, 5E", "sqrshl D(18), D(1), d15");
}

#[test]
fn sqrshl_4325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v27.B16, V(25).B16, v4.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 5F, 24, 4E", "sqrshl v27.B16, V(25).B16, v4.B16");
}

#[test]
fn sqrshl_4326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v17.B16, v0.B16, v9.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 5C, 29, 4E", "sqrshl v17.B16, v0.B16, v9.B16");
}

#[test]
fn sqrshl_4327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v10.B8, V(28).B8, v2.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 5F, 22, 0E", "sqrshl v10.B8, V(28).B8, v2.B8");
}

#[test]
fn sqrshl_4328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v27.B8, v21.B8, v25.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 5E, 39, 0E", "sqrshl v27.B8, v21.B8, v25.B8");
}

#[test]
fn sqrshl_4329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v29.H8, V(29).H8, V(17).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 5F, 71, 4E", "sqrshl v29.H8, V(29).H8, V(17).H8");
}

#[test]
fn sqrshl_4330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v29.H8, v19.H8, V(18).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 5E, 72, 4E", "sqrshl v29.H8, v19.H8, V(18).H8");
}

#[test]
fn sqrshl_4331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v3.H4, v31.H4, V(10).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 5F, 6A, 0E", "sqrshl v3.H4, v31.H4, V(10).H4");
}

#[test]
fn sqrshl_4332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl V(14).H4, V(10).H4, v26.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 5D, 7A, 0E", "sqrshl V(14).H4, V(10).H4, v26.H4");
}

#[test]
fn sqrshl_4333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v19.S4, v0.S4, v18.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5C, B2, 4E", "sqrshl v19.S4, v0.S4, v18.S4");
}

#[test]
fn sqrshl_4334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v17.S4, V(30).S4, V(26).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 5F, BA, 4E", "sqrshl v17.S4, V(30).S4, V(26).S4");
}

#[test]
fn sqrshl_4335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v14.S2, V(30).S2, v6.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 5F, A6, 0E", "sqrshl v14.S2, V(30).S2, v6.S2");
}

#[test]
fn sqrshl_4336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl v27.S2, V(15).S2, V(0).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 5D, A0, 0E", "sqrshl v27.S2, V(15).S2, V(0).S2");
}

#[test]
fn sqrshl_4337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl V(26).D2, V(2).D2, v10.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 5C, EA, 4E", "sqrshl V(26).D2, V(2).D2, v10.D2");
}

#[test]
fn sqrshl_4338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshl V(5).D2, V(13).D2, V(25).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 5D, F9, 4E", "sqrshl V(5).D2, V(13).D2, V(25).D2");
}

#[test]
fn sqrshrn_4339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn B(13), h16, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 9E, 0D, 5F", "sqrshrn B(13), h16, 3");
}

#[test]
fn sqrshrn_4340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn b13, H(29), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 9F, 09, 5F", "sqrshrn b13, H(29), 7");
}

#[test]
fn sqrshrn_4341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn h4, s10, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 9D, 16, 5F", "sqrshrn h4, s10, 10");
}

#[test]
fn sqrshrn_4342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn H(8), s31, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 9F, 11, 5F", "sqrshrn H(8), s31, 15");
}

#[test]
fn sqrshrn_4343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn S(25), D(15), 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 9D, 2D, 5F", "sqrshrn S(25), D(15), 19");
}

#[test]
fn sqrshrn_4344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn S(12), D(21), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 9E, 39, 5F", "sqrshrn S(12), D(21), 7");
}

#[test]
fn sqrshrn_4345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v12.B8, V(22).H8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 9E, 0E, 0F", "sqrshrn v12.B8, V(22).H8, 2");
}

#[test]
fn sqrshrn_4346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v3.B8, v15.H8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 9D, 0E, 0F", "sqrshrn v3.B8, v15.H8, 2");
}

#[test]
fn sqrshrn_4347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v4.H4, v11.S4, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 9D, 17, 0F", "sqrshrn v4.H4, v11.S4, 9");
}

#[test]
fn sqrshrn_4348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn V(1).H4, v29.S4, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 9F, 11, 0F", "sqrshrn V(1).H4, v29.S4, 15");
}

#[test]
fn sqrshrn_4349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v19.S2, V(18).D2, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9E, 2E, 0F", "sqrshrn v19.S2, V(18).D2, 18");
}

#[test]
fn sqrshrn_4350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn v25.S2, v11.D2, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 9D, 3F, 0F", "sqrshrn v25.S2, v11.D2, 1");
}

#[test]
fn sqrshrn2_4351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 v22.B16, v3.H8, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 9C, 08, 4F", "sqrshrn2 v22.B16, v3.H8, 8");
}

#[test]
fn sqrshrn2_4352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 v3.B16, v21.H8, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 9E, 09, 4F", "sqrshrn2 v3.B16, v21.H8, 7");
}

#[test]
fn sqrshrn2_4353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 V(29).H8, v23.S4, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 9E, 17, 4F", "sqrshrn2 V(29).H8, v23.S4, 9");
}

#[test]
fn sqrshrn2_4354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 V(21).H8, V(2).S4, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 9C, 1B, 4F", "sqrshrn2 V(21).H8, V(2).S4, 5");
}

#[test]
fn sqrshrn2_4355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 V(24).S4, v22.D2, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 9E, 34, 4F", "sqrshrn2 V(24).S4, v22.D2, 12");
}

#[test]
fn sqrshrn2_4356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrn2 v25.S4, v3.D2, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 9C, 22, 4F", "sqrshrn2 v25.S4, v3.D2, 30");
}

#[test]
fn sqrshrun_4357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun B(25), h25, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 8F, 0B, 7F", "sqrshrun B(25), h25, 5");
}

#[test]
fn sqrshrun_4358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun B(0), h9, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 8D, 0D, 7F", "sqrshrun B(0), h9, 3");
}

#[test]
fn sqrshrun_4359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun h17, S(29), 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 8F, 1C, 7F", "sqrshrun h17, S(29), 4");
}

#[test]
fn sqrshrun_4360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun H(15), S(14), 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 8D, 10, 7F", "sqrshrun H(15), S(14), 16");
}

#[test]
fn sqrshrun_4361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun s20, d6, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 8C, 2E, 7F", "sqrshrun s20, d6, 18");
}

#[test]
fn sqrshrun_4362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun S(6), D(27), 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 8F, 21, 7F", "sqrshrun S(6), D(27), 31");
}

#[test]
fn sqrshrun_4363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(12).B8, v22.H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 8E, 0C, 2F", "sqrshrun V(12).B8, v22.H8, 4");
}

#[test]
fn sqrshrun_4364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(25).B8, v16.H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 8E, 0A, 2F", "sqrshrun V(25).B8, v16.H8, 6");
}

#[test]
fn sqrshrun_4365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun v6.H4, V(27).S4, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 8F, 10, 2F", "sqrshrun v6.H4, V(27).S4, 16");
}

#[test]
fn sqrshrun_4366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(13).H4, v9.S4, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 8D, 15, 2F", "sqrshrun V(13).H4, v9.S4, 11");
}

#[test]
fn sqrshrun_4367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun V(18).S2, v25.D2, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 8F, 28, 2F", "sqrshrun V(18).S2, v25.D2, 24");
}

#[test]
fn sqrshrun_4368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun v30.S2, v31.D2, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 8F, 21, 2F", "sqrshrun v30.S2, v31.D2, 31");
}

#[test]
fn sqrshrun2_4369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 V(1).B16, V(20).H8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 8E, 0F, 6F", "sqrshrun2 V(1).B16, V(20).H8, 1");
}

#[test]
fn sqrshrun2_4370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 v3.B16, V(26).H8, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 8F, 0D, 6F", "sqrshrun2 v3.B16, V(26).H8, 3");
}

#[test]
fn sqrshrun2_4371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 v15.H8, v31.S4, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 8F, 17, 6F", "sqrshrun2 v15.H8, v31.S4, 9");
}

#[test]
fn sqrshrun2_4372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 v31.H8, v19.S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 8E, 19, 6F", "sqrshrun2 v31.H8, v19.S4, 7");
}

#[test]
fn sqrshrun2_4373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 v3.S4, V(28).D2, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 8F, 36, 6F", "sqrshrun2 v3.S4, V(28).D2, 10");
}

#[test]
fn sqrshrun2_4374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqrshrun2 v23.S4, v26.D2, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 8F, 31, 6F", "sqrshrun2 v23.S4, v26.D2, 15");
}

#[test]
fn sqshl_4375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl B(19), B(19), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 76, 09, 5F", "sqshl B(19), B(19), 1");
}

#[test]
fn sqshl_4376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl b17, B(20), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 76, 09, 5F", "sqshl b17, B(20), 1");
}

#[test]
fn sqshl_4377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl H(16), h28, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 77, 13, 5F", "sqshl H(16), h28, 3");
}

#[test]
fn sqshl_4378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl H(20), h9, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 75, 12, 5F", "sqshl H(20), h9, 2");
}

#[test]
fn sqshl_4379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl S(3), S(21), 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 76, 39, 5F", "sqshl S(3), S(21), 25");
}

#[test]
fn sqshl_4380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl S(12), S(9), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 75, 23, 5F", "sqshl S(12), S(9), 3");
}

#[test]
fn sqshl_4381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl D(7), d31, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 77, 5B, 5F", "sqshl D(7), d31, 27");
}

#[test]
fn sqshl_4382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl D(21), d17, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 76, 48, 5F", "sqshl D(21), d17, 8");
}

#[test]
fn sqshl_4383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v19.B16, V(5).B16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 74, 0F, 4F", "sqshl v19.B16, V(5).B16, 7");
}

#[test]
fn sqshl_4384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(8).B16, v5.B16, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 74, 0B, 4F", "sqshl V(8).B16, v5.B16, 3");
}

#[test]
fn sqshl_4385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v9.B8, V(22).B8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 76, 0C, 0F", "sqshl v9.B8, V(22).B8, 4");
}

#[test]
fn sqshl_4386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(5).B8, v6.B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 74, 08, 0F", "sqshl V(5).B8, v6.B8, 0");
}

#[test]
fn sqshl_4387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(13).H8, V(11).H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 75, 14, 4F", "sqshl V(13).H8, V(11).H8, 4");
}

#[test]
fn sqshl_4388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(31).H8, v19.H8, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 76, 19, 4F", "sqshl V(31).H8, v19.H8, 9");
}

#[test]
fn sqshl_4389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v27.H4, v21.H4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 76, 13, 0F", "sqshl v27.H4, v21.H4, 3");
}

#[test]
fn sqshl_4390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(3).H4, V(7).H4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 74, 17, 0F", "sqshl V(3).H4, V(7).H4, 7");
}

#[test]
fn sqshl_4391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(10).S4, v15.S4, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 75, 38, 4F", "sqshl V(10).S4, v15.S4, 24");
}

#[test]
fn sqshl_4392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v18.S4, v11.S4, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 75, 24, 4F", "sqshl v18.S4, v11.S4, 4");
}

#[test]
fn sqshl_4393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v12.S2, V(12).S2, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 75, 25, 0F", "sqshl v12.S2, V(12).S2, 5");
}

#[test]
fn sqshl_4394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v28.S2, v8.S2, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 75, 2C, 0F", "sqshl v28.S2, v8.S2, 12");
}

#[test]
fn sqshl_4395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(4).D2, V(28).D2, 58
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 77, 7A, 4F", "sqshl V(4).D2, V(28).D2, 58");
}

#[test]
fn sqshl_4396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v1.D2, v14.D2, 55
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 75, 77, 4F", "sqshl v1.D2, v14.D2, 55");
}

#[test]
fn sqshl_4397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl b13, b7, B(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 4C, 21, 5E", "sqshl b13, b7, B(1)");
}

#[test]
fn sqshl_4398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl B(8), B(12), b14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 4D, 2E, 5E", "sqshl B(8), B(12), b14");
}

#[test]
fn sqshl_4399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl h4, h3, H(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 4C, 74, 5E", "sqshl h4, h3, H(20)");
}

#[test]
fn sqshl_4400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl h13, H(14), h3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 4D, 63, 5E", "sqshl h13, H(14), h3");
}

#[test]
fn sqshl_4401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl S(21), S(19), S(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 4E, BF, 5E", "sqshl S(21), S(19), S(31)");
}

#[test]
fn sqshl_4402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl S(21), S(16), S(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 4E, A4, 5E", "sqshl S(21), S(16), S(4)");
}

#[test]
fn sqshl_4403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl d15, d27, D(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 4F, E1, 5E", "sqshl d15, d27, D(1)");
}

#[test]
fn sqshl_4404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl D(21), D(17), D(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 4E, F4, 5E", "sqshl D(21), D(17), D(20)");
}

#[test]
fn sqshl_4405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v16.B16, V(5).B16, V(6).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 4C, 26, 4E", "sqshl v16.B16, V(5).B16, V(6).B16");
}

#[test]
fn sqshl_4406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(3).B16, v14.B16, v28.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 4D, 3C, 4E", "sqshl V(3).B16, v14.B16, v28.B16");
}

#[test]
fn sqshl_4407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v9.B8, V(25).B8, V(21).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 4F, 35, 0E", "sqshl v9.B8, V(25).B8, V(21).B8");
}

#[test]
fn sqshl_4408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(17).B8, V(29).B8, v20.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 4F, 34, 0E", "sqshl V(17).B8, V(29).B8, v20.B8");
}

#[test]
fn sqshl_4409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v25.H8, V(3).H8, V(2).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 4C, 62, 4E", "sqshl v25.H8, V(3).H8, V(2).H8");
}

#[test]
fn sqshl_4410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(2).H8, v6.H8, V(5).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 4C, 65, 4E", "sqshl V(2).H8, v6.H8, V(5).H8");
}

#[test]
fn sqshl_4411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v0.H4, V(13).H4, v20.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 4D, 74, 0E", "sqshl v0.H4, V(13).H4, v20.H4");
}

#[test]
fn sqshl_4412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(28).H4, V(0).H4, v21.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 4C, 75, 0E", "sqshl V(28).H4, V(0).H4, v21.H4");
}

#[test]
fn sqshl_4413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v7.S4, V(6).S4, v28.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 4C, BC, 4E", "sqshl v7.S4, V(6).S4, v28.S4");
}

#[test]
fn sqshl_4414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl V(23).S4, v25.S4, v9.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 4F, A9, 4E", "sqshl V(23).S4, v25.S4, v9.S4");
}

#[test]
fn sqshl_4415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v21.S2, v20.S2, v31.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 4E, BF, 0E", "sqshl v21.S2, v20.S2, v31.S2");
}

#[test]
fn sqshl_4416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v4.S2, v30.S2, V(13).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 4F, AD, 0E", "sqshl v4.S2, v30.S2, V(13).S2");
}

#[test]
fn sqshl_4417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v21.D2, v21.D2, V(16).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 4E, F0, 4E", "sqshl v21.D2, v21.D2, V(16).D2");
}

#[test]
fn sqshl_4418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshl v28.D2, v25.D2, v6.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 4F, E6, 4E", "sqshl v28.D2, v25.D2, v6.D2");
}

#[test]
fn sqshlu_4419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu b18, b19, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 66, 0E, 7F", "sqshlu b18, b19, 6");
}

#[test]
fn sqshlu_4420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu b7, B(21), 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 66, 0A, 7F", "sqshlu b7, B(21), 2");
}

#[test]
fn sqshlu_4421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu h27, h12, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 65, 1D, 7F", "sqshlu h27, h12, 13");
}

#[test]
fn sqshlu_4422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu h22, H(20), 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 66, 15, 7F", "sqshlu h22, H(20), 5");
}

#[test]
fn sqshlu_4423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu s12, S(14), 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 65, 3D, 7F", "sqshlu s12, S(14), 29");
}

#[test]
fn sqshlu_4424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu s18, S(8), 22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 65, 36, 7F", "sqshlu s18, S(8), 22");
}

#[test]
fn sqshlu_4425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu D(14), D(19), 42
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 66, 6A, 7F", "sqshlu D(14), D(19), 42");
}

#[test]
fn sqshlu_4426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu d12, D(29), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 67, 40, 7F", "sqshlu d12, D(29), 0");
}

#[test]
fn sqshlu_4427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(5).B16, v13.B16, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 65, 0C, 6F", "sqshlu V(5).B16, v13.B16, 4");
}

#[test]
fn sqshlu_4428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v30.B16, V(29).B16, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 67, 09, 6F", "sqshlu v30.B16, V(29).B16, 1");
}

#[test]
fn sqshlu_4429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v22.B8, v23.B8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 66, 09, 2F", "sqshlu v22.B8, v23.B8, 1");
}

#[test]
fn sqshlu_4430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(8).B8, v7.B8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 64, 09, 2F", "sqshlu V(8).B8, v7.B8, 1");
}

#[test]
fn sqshlu_4431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(13).H8, V(1).H8, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 64, 13, 6F", "sqshlu V(13).H8, V(1).H8, 3");
}

#[test]
fn sqshlu_4432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(6).H8, V(23).H8, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 66, 1F, 6F", "sqshlu V(6).H8, V(23).H8, 15");
}

#[test]
fn sqshlu_4433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v13.H4, v19.H4, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 66, 1A, 2F", "sqshlu v13.H4, v19.H4, 10");
}

#[test]
fn sqshlu_4434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v17.H4, V(11).H4, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 65, 12, 2F", "sqshlu v17.H4, V(11).H4, 2");
}

#[test]
fn sqshlu_4435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v30.S4, V(23).S4, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 66, 2F, 6F", "sqshlu v30.S4, V(23).S4, 15");
}

#[test]
fn sqshlu_4436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(5).S4, v17.S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 66, 27, 6F", "sqshlu V(5).S4, v17.S4, 7");
}

#[test]
fn sqshlu_4437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v15.S2, v22.S2, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 66, 2B, 2F", "sqshlu v15.S2, v22.S2, 11");
}

#[test]
fn sqshlu_4438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v28.S2, V(15).S2, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 65, 2C, 2F", "sqshlu v28.S2, V(15).S2, 12");
}

#[test]
fn sqshlu_4439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu V(24).D2, V(19).D2, 33
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 66, 61, 6F", "sqshlu V(24).D2, V(19).D2, 33");
}

#[test]
fn sqshlu_4440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshlu v26.D2, v1.D2, 63
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 64, 7F, 6F", "sqshlu v26.D2, v1.D2, 63");
}

#[test]
fn sqshrn_4441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn b4, h11, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 95, 0F, 5F", "sqshrn b4, h11, 1");
}

#[test]
fn sqshrn_4442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn b11, h3, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 94, 0D, 5F", "sqshrn b11, h3, 3");
}

#[test]
fn sqshrn_4443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn h21, s26, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 97, 15, 5F", "sqshrn h21, s26, 11");
}

#[test]
fn sqshrn_4444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn H(22), s8, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 95, 14, 5F", "sqshrn H(22), s8, 12");
}

#[test]
fn sqshrn_4445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn S(20), d13, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 95, 2D, 5F", "sqshrn S(20), d13, 19");
}

#[test]
fn sqshrn_4446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn s21, d13, 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 95, 32, 5F", "sqshrn s21, d13, 14");
}

#[test]
fn sqshrn_4447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn v29.B8, V(0).H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 94, 0A, 0F", "sqshrn v29.B8, V(0).H8, 6");
}

#[test]
fn sqshrn_4448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn V(18).B8, v7.H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 94, 0C, 0F", "sqshrn V(18).B8, v7.H8, 4");
}

#[test]
fn sqshrn_4449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn v0.H4, v21.S4, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 96, 18, 0F", "sqshrn v0.H4, v21.S4, 8");
}

#[test]
fn sqshrn_4450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn V(7).H4, V(0).S4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 94, 1D, 0F", "sqshrn V(7).H4, V(0).S4, 3");
}

#[test]
fn sqshrn_4451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn V(16).S2, v10.D2, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 95, 2E, 0F", "sqshrn V(16).S2, v10.D2, 18");
}

#[test]
fn sqshrn_4452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn v15.S2, v15.D2, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 95, 31, 0F", "sqshrn v15.S2, v15.D2, 15");
}

#[test]
fn sqshrn2_4453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(21).B16, V(1).H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 94, 0A, 4F", "sqshrn2 V(21).B16, V(1).H8, 6");
}

#[test]
fn sqshrn2_4454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 v4.B16, V(19).H8, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 96, 0D, 4F", "sqshrn2 v4.B16, V(19).H8, 3");
}

#[test]
fn sqshrn2_4455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 v25.H8, v28.S4, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 97, 10, 4F", "sqshrn2 v25.H8, v28.S4, 16");
}

#[test]
fn sqshrn2_4456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(5).H8, v26.S4, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 97, 11, 4F", "sqshrn2 V(5).H8, v26.S4, 15");
}

#[test]
fn sqshrn2_4457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(13).S4, v31.D2, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 97, 26, 4F", "sqshrn2 V(13).S4, v31.D2, 26");
}

#[test]
fn sqshrn2_4458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrn2 V(15).S4, v11.D2, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 95, 39, 4F", "sqshrn2 V(15).S4, v11.D2, 7");
}

#[test]
fn sqshrun_4459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun b20, H(24), 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 87, 0C, 7F", "sqshrun b20, H(24), 4");
}

#[test]
fn sqshrun_4460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun b27, H(1), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 84, 0D, 7F", "sqshrun b27, H(1), 3");
}

#[test]
fn sqshrun_4461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun h0, S(30), 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 87, 1B, 7F", "sqshrun h0, S(30), 5");
}

#[test]
fn sqshrun_4462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun H(22), S(2), 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 84, 15, 7F", "sqshrun H(22), S(2), 11");
}

#[test]
fn sqshrun_4463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun S(25), D(2), 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 84, 2E, 7F", "sqshrun S(25), D(2), 18");
}

#[test]
fn sqshrun_4464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun S(21), D(10), 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 85, 3E, 7F", "sqshrun S(21), D(10), 2");
}

#[test]
fn sqshrun_4465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v17.B8, v14.H8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 85, 0B, 2F", "sqshrun v17.B8, v14.H8, 5");
}

#[test]
fn sqshrun_4466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v16.B8, V(6).H8, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 84, 09, 2F", "sqshrun v16.B8, V(6).H8, 7");
}

#[test]
fn sqshrun_4467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v26.H4, v13.S4, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 85, 1C, 2F", "sqshrun v26.H4, v13.S4, 4");
}

#[test]
fn sqshrun_4468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v26.H4, V(17).S4, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 86, 1C, 2F", "sqshrun v26.H4, V(17).S4, 4");
}

#[test]
fn sqshrun_4469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v22.S2, V(31).D2, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 87, 35, 2F", "sqshrun v22.S2, V(31).D2, 11");
}

#[test]
fn sqshrun_4470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun v13.S2, v18.D2, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 86, 3F, 2F", "sqshrun v13.S2, v18.D2, 1");
}

#[test]
fn sqshrun2_4471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 V(4).B16, V(9).H8, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 85, 08, 6F", "sqshrun2 V(4).B16, V(9).H8, 8");
}

#[test]
fn sqshrun2_4472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 V(23).B16, v9.H8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 85, 0B, 6F", "sqshrun2 V(23).B16, v9.H8, 5");
}

#[test]
fn sqshrun2_4473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 V(28).H8, v25.S4, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 87, 18, 6F", "sqshrun2 V(28).H8, v25.S4, 8");
}

#[test]
fn sqshrun2_4474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 V(18).H8, V(11).S4, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 85, 1C, 6F", "sqshrun2 V(18).H8, V(11).S4, 4");
}

#[test]
fn sqshrun2_4475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 V(0).S4, v30.D2, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 87, 24, 6F", "sqshrun2 V(0).S4, v30.D2, 28");
}

#[test]
fn sqshrun2_4476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqshrun2 V(17).S4, v26.D2, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 87, 22, 6F", "sqshrun2 V(17).S4, v26.D2, 30");
}

#[test]
fn sqsub_4477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub b4, B(2), b22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 2C, 36, 5E", "sqsub b4, B(2), b22");
}

#[test]
fn sqsub_4478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub B(8), B(3), b11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 2C, 2B, 5E", "sqsub B(8), B(3), b11");
}

#[test]
fn sqsub_4479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub h13, h19, H(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 2E, 7E, 5E", "sqsub h13, h19, H(30)");
}

#[test]
fn sqsub_4480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub h30, H(27), H(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 2F, 6D, 5E", "sqsub h30, H(27), H(13)");
}

#[test]
fn sqsub_4481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub S(12), s3, s13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 2C, AD, 5E", "sqsub S(12), s3, s13");
}

#[test]
fn sqsub_4482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub s8, S(29), S(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 2F, A6, 5E", "sqsub s8, S(29), S(6)");
}

#[test]
fn sqsub_4483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub D(27), D(7), d31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 2C, FF, 5E", "sqsub D(27), D(7), d31");
}

#[test]
fn sqsub_4484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub D(26), D(17), D(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 2E, EF, 5E", "sqsub D(26), D(17), D(15)");
}

#[test]
fn sqsub_4485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub V(2).B16, V(31).B16, v5.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 2F, 25, 4E", "sqsub V(2).B16, V(31).B16, v5.B16");
}

#[test]
fn sqsub_4486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v10.B16, V(13).B16, v13.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 2D, 2D, 4E", "sqsub v10.B16, V(13).B16, v13.B16");
}

#[test]
fn sqsub_4487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v19.B8, V(7).B8, v21.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2C, 35, 0E", "sqsub v19.B8, V(7).B8, v21.B8");
}

#[test]
fn sqsub_4488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v10.B8, v31.B8, v4.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 2F, 24, 0E", "sqsub v10.B8, v31.B8, v4.B8");
}

#[test]
fn sqsub_4489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v26.H8, v16.H8, v30.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 2E, 7E, 4E", "sqsub v26.H8, v16.H8, v30.H8");
}

#[test]
fn sqsub_4490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v19.H8, V(14).H8, V(27).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2D, 7B, 4E", "sqsub v19.H8, V(14).H8, V(27).H8");
}

#[test]
fn sqsub_4491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub V(27).H4, V(19).H4, V(26).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 2E, 7A, 0E", "sqsub V(27).H4, V(19).H4, V(26).H4");
}

#[test]
fn sqsub_4492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v22.H4, V(18).H4, V(16).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 2E, 70, 0E", "sqsub v22.H4, V(18).H4, V(16).H4");
}

#[test]
fn sqsub_4493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub V(28).S4, v26.S4, v21.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 2F, B5, 4E", "sqsub V(28).S4, v26.S4, v21.S4");
}

#[test]
fn sqsub_4494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v4.S4, V(22).S4, v7.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 2E, A7, 4E", "sqsub v4.S4, V(22).S4, v7.S4");
}

#[test]
fn sqsub_4495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v7.S2, V(5).S2, v24.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 2C, B8, 0E", "sqsub v7.S2, V(5).S2, v24.S2");
}

#[test]
fn sqsub_4496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v15.S2, V(12).S2, V(27).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 2D, BB, 0E", "sqsub v15.S2, V(12).S2, V(27).S2");
}

#[test]
fn sqsub_4497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v10.D2, v11.D2, v14.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 2D, EE, 4E", "sqsub v10.D2, v11.D2, v14.D2");
}

#[test]
fn sqsub_4498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqsub v6.D2, V(26).D2, V(14).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 2F, EE, 4E", "sqsub v6.D2, V(26).D2, V(14).D2");
}

#[test]
fn sqxtn_4499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn B(20), H(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 4B, 21, 5E", "sqxtn B(20), H(30)");
}

#[test]
fn sqxtn_4500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn b24, H(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 49, 21, 5E", "sqxtn b24, H(8)");
}

#[test]
fn sqxtn_4501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn h30, s23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 4A, 61, 5E", "sqxtn h30, s23");
}

#[test]
fn sqxtn_4502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn H(8), s30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 4B, 61, 5E", "sqxtn H(8), s30");
}

#[test]
fn sqxtn_4503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn S(8), d24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 4B, A1, 5E", "sqxtn S(8), d24");
}

#[test]
fn sqxtn_4504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn s31, D(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 4A, A1, 5E", "sqxtn s31, D(22)");
}

#[test]
fn sqxtn_4505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn V(2).B8, v24.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 4B, 21, 0E", "sqxtn V(2).B8, v24.H8");
}

#[test]
fn sqxtn_4506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn V(1).B8, V(1).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 48, 21, 0E", "sqxtn V(1).B8, V(1).H8");
}

#[test]
fn sqxtn_4507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn v18.H4, V(2).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 48, 61, 0E", "sqxtn v18.H4, V(2).S4");
}

#[test]
fn sqxtn_4508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn V(11).H4, V(25).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 4B, 61, 0E", "sqxtn V(11).H4, V(25).S4");
}

#[test]
fn sqxtn_4509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn v29.S2, V(10).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 49, A1, 0E", "sqxtn v29.S2, V(10).D2");
}

#[test]
fn sqxtn_4510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn V(14).S2, V(23).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 4A, A1, 0E", "sqxtn V(14).S2, V(23).D2");
}

#[test]
fn sqxtn2_4511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(6).B16, V(7).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 48, 21, 4E", "sqxtn2 V(6).B16, V(7).H8");
}

#[test]
fn sqxtn2_4512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 v12.B16, V(27).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 4B, 21, 4E", "sqxtn2 v12.B16, V(27).H8");
}

#[test]
fn sqxtn2_4513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(7).H8, V(11).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 49, 61, 4E", "sqxtn2 V(7).H8, V(11).S4");
}

#[test]
fn sqxtn2_4514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 v1.H8, V(15).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 49, 61, 4E", "sqxtn2 v1.H8, V(15).S4");
}

#[test]
fn sqxtn2_4515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(17).S4, V(30).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 4B, A1, 4E", "sqxtn2 V(17).S4, V(30).D2");
}

#[test]
fn sqxtn2_4516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtn2 V(24).S4, v24.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 4B, A1, 4E", "sqxtn2 V(24).S4, v24.D2");
}

#[test]
fn sqxtun_4517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun B(30), H(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 28, 21, 7E", "sqxtun B(30), H(2)");
}

#[test]
fn sqxtun_4518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun b10, h10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 29, 21, 7E", "sqxtun b10, h10");
}

#[test]
fn sqxtun_4519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun h22, S(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 2A, 61, 7E", "sqxtun h22, S(23)");
}

#[test]
fn sqxtun_4520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun h16, S(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 2A, 61, 7E", "sqxtun h16, S(21)");
}

#[test]
fn sqxtun_4521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun S(14), d13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 29, A1, 7E", "sqxtun S(14), d13");
}

#[test]
fn sqxtun_4522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun S(18), d2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 28, A1, 7E", "sqxtun S(18), d2");
}

#[test]
fn sqxtun_4523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun v11.B8, v19.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 2A, 21, 2E", "sqxtun v11.B8, v19.H8");
}

#[test]
fn sqxtun_4524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun v10.B8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 2B, 21, 2E", "sqxtun v10.B8, V(30).H8");
}

#[test]
fn sqxtun_4525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun v31.H4, v17.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 2A, 61, 2E", "sqxtun v31.H4, v17.S4");
}

#[test]
fn sqxtun_4526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun v12.H4, v22.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 2A, 61, 2E", "sqxtun v12.H4, v22.S4");
}

#[test]
fn sqxtun_4527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun v0.S2, V(10).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 29, A1, 2E", "sqxtun v0.S2, V(10).D2");
}

#[test]
fn sqxtun_4528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun V(1).S2, V(15).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 29, A1, 2E", "sqxtun V(1).S2, V(15).D2");
}

#[test]
fn sqxtun2_4529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 V(25).B16, V(13).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 29, 21, 6E", "sqxtun2 V(25).B16, V(13).H8");
}

#[test]
fn sqxtun2_4530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 V(4).B16, V(31).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 2B, 21, 6E", "sqxtun2 V(4).B16, V(31).H8");
}

#[test]
fn sqxtun2_4531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 v19.H8, v30.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2B, 61, 6E", "sqxtun2 v19.H8, v30.S4");
}

#[test]
fn sqxtun2_4532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 V(27).H8, V(7).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 28, 61, 6E", "sqxtun2 V(27).H8, V(7).S4");
}

#[test]
fn sqxtun2_4533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 v14.S4, v5.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 28, A1, 6E", "sqxtun2 v14.S4, v5.D2");
}

#[test]
fn sqxtun2_4534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sqxtun2 v12.S4, V(4).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 28, A1, 6E", "sqxtun2 v12.S4, V(4).D2");
}

#[test]
fn srhadd_4535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(23).B16, V(4).B16, v2.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 14, 22, 4E", "srhadd V(23).B16, V(4).B16, v2.B16");
}

#[test]
fn srhadd_4536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(10).B16, v3.B16, v1.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 14, 21, 4E", "srhadd V(10).B16, v3.B16, v1.B16");
}

#[test]
fn srhadd_4537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(29).B8, v7.B8, v15.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 14, 2F, 0E", "srhadd V(29).B8, v7.B8, v15.B8");
}

#[test]
fn srhadd_4538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v26.B8, V(27).B8, v22.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 17, 36, 0E", "srhadd v26.B8, V(27).B8, v22.B8");
}

#[test]
fn srhadd_4539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v4.H8, V(26).H8, V(23).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 17, 77, 4E", "srhadd v4.H8, V(26).H8, V(23).H8");
}

#[test]
fn srhadd_4540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v22.H8, V(13).H8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 15, 7E, 4E", "srhadd v22.H8, V(13).H8, V(30).H8");
}

#[test]
fn srhadd_4541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v4.H4, v14.H4, v2.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 15, 62, 0E", "srhadd v4.H4, v14.H4, v2.H4");
}

#[test]
fn srhadd_4542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(13).H4, V(3).H4, V(13).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 14, 6D, 0E", "srhadd V(13).H4, V(3).H4, V(13).H4");
}

#[test]
fn srhadd_4543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v14.S4, v7.S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 14, AB, 4E", "srhadd v14.S4, v7.S4, v11.S4");
}

#[test]
fn srhadd_4544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v2.S4, v21.S4, V(9).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 16, A9, 4E", "srhadd v2.S4, v21.S4, V(9).S4");
}

#[test]
fn srhadd_4545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd v31.S2, v22.S2, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 16, A5, 0E", "srhadd v31.S2, v22.S2, v5.S2");
}

#[test]
fn srhadd_4546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srhadd V(9).S2, v2.S2, v4.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 14, A4, 0E", "srhadd V(9).S2, v2.S2, v4.S2");
}

#[test]
fn sri_4547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri d25, d26, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 47, 7C, 7F", "sri d25, d26, 4");
}

#[test]
fn sri_4548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri D(28), d4, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 44, 6E, 7F", "sri D(28), d4, 18");
}

#[test]
fn sri_4549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v15.B16, V(17).B16, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 46, 0D, 6F", "sri v15.B16, V(17).B16, 3");
}

#[test]
fn sri_4550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v25.B16, v16.B16, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 46, 0F, 6F", "sri v25.B16, v16.B16, 1");
}

#[test]
fn sri_4551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(5).B8, V(13).B8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 45, 0A, 2F", "sri V(5).B8, V(13).B8, 6");
}

#[test]
fn sri_4552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v17.B8, v6.B8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 44, 0A, 2F", "sri v17.B8, v6.B8, 6");
}

#[test]
fn sri_4553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(24).H8, V(12).H8, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 45, 15, 6F", "sri V(24).H8, V(12).H8, 11");
}

#[test]
fn sri_4554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v15.H8, v4.H8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 44, 1B, 6F", "sri v15.H8, v4.H8, 5");
}

#[test]
fn sri_4555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(12).H4, v31.H4, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 47, 16, 2F", "sri V(12).H4, v31.H4, 10");
}

#[test]
fn sri_4556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(4).H4, V(12).H4, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 45, 1A, 2F", "sri V(4).H4, V(12).H4, 6");
}

#[test]
fn sri_4557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v31.S4, v15.S4, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 45, 3B, 6F", "sri v31.S4, v15.S4, 5");
}

#[test]
fn sri_4558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v3.S4, V(26).S4, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 47, 3A, 6F", "sri v3.S4, V(26).S4, 6");
}

#[test]
fn sri_4559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v15.S2, v9.S2, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 45, 36, 2F", "sri v15.S2, v9.S2, 10");
}

#[test]
fn sri_4560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri v26.S2, v16.S2, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 46, 2B, 2F", "sri v26.S2, v16.S2, 21");
}

#[test]
fn sri_4561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(20).D2, v19.D2, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 46, 75, 6F", "sri V(20).D2, v19.D2, 11");
}

#[test]
fn sri_4562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sri V(2).D2, V(15).D2, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 45, 65, 6F", "sri V(2).D2, V(15).D2, 27");
}

#[test]
fn srshl_4563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl d10, d26, D(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 57, EF, 5E", "srshl d10, d26, D(15)");
}

#[test]
fn srshl_4564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl d1, d0, d28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 54, FC, 5E", "srshl d1, d0, d28");
}

#[test]
fn srshl_4565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(17).B16, v22.B16, V(25).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 56, 39, 4E", "srshl V(17).B16, v22.B16, V(25).B16");
}

#[test]
fn srshl_4566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(27).B16, V(11).B16, V(9).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 55, 29, 4E", "srshl V(27).B16, V(11).B16, V(9).B16");
}

#[test]
fn srshl_4567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v23.B8, v9.B8, V(18).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 55, 32, 0E", "srshl v23.B8, v9.B8, V(18).B8");
}

#[test]
fn srshl_4568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(13).B8, V(9).B8, V(6).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 55, 26, 0E", "srshl V(13).B8, V(9).B8, V(6).B8");
}

#[test]
fn srshl_4569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v5.H8, V(8).H8, v8.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 55, 68, 4E", "srshl v5.H8, V(8).H8, v8.H8");
}

#[test]
fn srshl_4570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(16).H8, V(15).H8, v13.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 55, 6D, 4E", "srshl V(16).H8, V(15).H8, v13.H8");
}

#[test]
fn srshl_4571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v6.H4, V(20).H4, V(21).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 56, 75, 0E", "srshl v6.H4, V(20).H4, V(21).H4");
}

#[test]
fn srshl_4572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v6.H4, V(6).H4, v31.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 54, 7F, 0E", "srshl v6.H4, V(6).H4, v31.H4");
}

#[test]
fn srshl_4573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(29).S4, v8.S4, v5.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 55, A5, 4E", "srshl V(29).S4, v8.S4, v5.S4");
}

#[test]
fn srshl_4574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v12.S4, V(31).S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 57, AB, 4E", "srshl v12.S4, V(31).S4, v11.S4");
}

#[test]
fn srshl_4575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(24).S2, v15.S2, V(2).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 55, A2, 0E", "srshl V(24).S2, v15.S2, V(2).S2");
}

#[test]
fn srshl_4576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v17.S2, V(25).S2, v20.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 57, B4, 0E", "srshl v17.S2, V(25).S2, v20.S2");
}

#[test]
fn srshl_4577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl V(16).D2, v22.D2, v17.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 56, F1, 4E", "srshl V(16).D2, v22.D2, v17.D2");
}

#[test]
fn srshl_4578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshl v13.D2, V(12).D2, v15.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 55, EF, 4E", "srshl v13.D2, V(12).D2, v15.D2");
}

#[test]
fn srshr_4579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr D(20), d29, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 27, 7E, 5F", "srshr D(20), d29, 2");
}

#[test]
fn srshr_4580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr d4, d23, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 26, 7F, 5F", "srshr d4, d23, 1");
}

#[test]
fn srshr_4581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(29).B16, v16.B16, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 26, 0A, 4F", "srshr V(29).B16, v16.B16, 6");
}

#[test]
fn srshr_4582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v21.B16, V(4).B16, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 24, 0E, 4F", "srshr v21.B16, V(4).B16, 2");
}

#[test]
fn srshr_4583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(26).B8, v24.B8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 27, 0B, 0F", "srshr V(26).B8, v24.B8, 5");
}

#[test]
fn srshr_4584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v12.B8, v2.B8, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 24, 09, 0F", "srshr v12.B8, v2.B8, 7");
}

#[test]
fn srshr_4585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v17.H8, V(3).H8, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 24, 10, 4F", "srshr v17.H8, V(3).H8, 16");
}

#[test]
fn srshr_4586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(0).H8, v26.H8, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 27, 17, 4F", "srshr V(0).H8, v26.H8, 9");
}

#[test]
fn srshr_4587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v21.H4, V(24).H4, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 27, 16, 0F", "srshr v21.H4, V(24).H4, 10");
}

#[test]
fn srshr_4588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(14).H4, v11.H4, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 25, 1B, 0F", "srshr V(14).H4, v11.H4, 5");
}

#[test]
fn srshr_4589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(2).S4, v26.S4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 27, 3D, 4F", "srshr V(2).S4, v26.S4, 3");
}

#[test]
fn srshr_4590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(1).S4, v10.S4, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 25, 34, 4F", "srshr V(1).S4, v10.S4, 12");
}

#[test]
fn srshr_4591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v26.S2, v24.S2, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 27, 3A, 0F", "srshr v26.S2, v24.S2, 6");
}

#[test]
fn srshr_4592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(23).S2, v20.S2, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 26, 39, 0F", "srshr V(23).S2, v20.S2, 7");
}

#[test]
fn srshr_4593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr V(18).D2, V(4).D2, 34
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 24, 5E, 4F", "srshr V(18).D2, V(4).D2, 34");
}

#[test]
fn srshr_4594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srshr v3.D2, v13.D2, 41
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 25, 57, 4F", "srshr v3.D2, v13.D2, 41");
}

#[test]
fn srsra_4595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra d16, d3, 58
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 34, 46, 5F", "srsra d16, d3, 58");
}

#[test]
fn srsra_4596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra d7, d7, 59
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 34, 45, 5F", "srsra d7, d7, 59");
}

#[test]
fn srsra_4597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v21.B16, v16.B16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 36, 09, 4F", "srsra v21.B16, v16.B16, 7");
}

#[test]
fn srsra_4598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(12).B16, V(5).B16, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 34, 08, 4F", "srsra V(12).B16, V(5).B16, 8");
}

#[test]
fn srsra_4599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v29.B8, V(5).B8, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 34, 08, 0F", "srsra v29.B8, V(5).B8, 8");
}

#[test]
fn srsra_4600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(19).B8, v14.B8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 35, 0C, 0F", "srsra V(19).B8, v14.B8, 4");
}

#[test]
fn srsra_4601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v8.H8, V(17).H8, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 36, 11, 4F", "srsra v8.H8, V(17).H8, 15");
}

#[test]
fn srsra_4602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(22).H8, v7.H8, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 34, 17, 4F", "srsra V(22).H8, v7.H8, 9");
}

#[test]
fn srsra_4603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(25).H4, v21.H4, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 36, 10, 0F", "srsra V(25).H4, v21.H4, 16");
}

#[test]
fn srsra_4604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v13.H4, V(15).H4, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 35, 16, 0F", "srsra v13.H4, V(15).H4, 10");
}

#[test]
fn srsra_4605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(30).S4, V(31).S4, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 37, 24, 4F", "srsra V(30).S4, V(31).S4, 28");
}

#[test]
fn srsra_4606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v19.S4, V(8).S4, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 35, 21, 4F", "srsra v19.S4, V(8).S4, 31");
}

#[test]
fn srsra_4607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(1).S2, v8.S2, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 35, 3C, 0F", "srsra V(1).S2, v8.S2, 4");
}

#[test]
fn srsra_4608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(29).S2, v20.S2, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 36, 21, 0F", "srsra V(29).S2, v20.S2, 31");
}

#[test]
fn srsra_4609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra v13.D2, V(17).D2, 46
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 36, 52, 4F", "srsra v13.D2, V(17).D2, 46");
}

#[test]
fn srsra_4610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; srsra V(20).D2, V(25).D2, 57
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 37, 47, 4F", "srsra V(20).D2, V(25).D2, 57");
}

#[test]
fn ssbb_4611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssbb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 30, 03, D5", "ssbb");
}

#[test]
fn ssbb_4612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssbb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 30, 03, D5", "ssbb");
}

#[test]
fn sshl_4613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl d17, D(8), d1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 45, E1, 5E", "sshl d17, D(8), d1");
}

#[test]
fn sshl_4614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl d24, D(18), d24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 46, F8, 5E", "sshl d24, D(18), d24");
}

#[test]
fn sshl_4615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v16.B16, V(3).B16, V(1).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 44, 21, 4E", "sshl v16.B16, V(3).B16, V(1).B16");
}

#[test]
fn sshl_4616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(14).B16, V(4).B16, V(11).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 44, 2B, 4E", "sshl V(14).B16, V(4).B16, V(11).B16");
}

#[test]
fn sshl_4617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(23).B8, v4.B8, v1.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 44, 21, 0E", "sshl V(23).B8, v4.B8, v1.B8");
}

#[test]
fn sshl_4618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(18).B8, V(3).B8, V(23).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 44, 37, 0E", "sshl V(18).B8, V(3).B8, V(23).B8");
}

#[test]
fn sshl_4619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v1.H8, v22.H8, V(23).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 46, 77, 4E", "sshl v1.H8, v22.H8, V(23).H8");
}

#[test]
fn sshl_4620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(19).H8, V(0).H8, v31.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 44, 7F, 4E", "sshl V(19).H8, V(0).H8, v31.H8");
}

#[test]
fn sshl_4621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v25.H4, V(20).H4, V(20).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 46, 74, 0E", "sshl v25.H4, V(20).H4, V(20).H4");
}

#[test]
fn sshl_4622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(15).H4, V(4).H4, v27.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 44, 7B, 0E", "sshl V(15).H4, V(4).H4, v27.H4");
}

#[test]
fn sshl_4623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v23.S4, v7.S4, v8.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 44, A8, 4E", "sshl v23.S4, v7.S4, v8.S4");
}

#[test]
fn sshl_4624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v15.S4, v2.S4, V(11).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 44, AB, 4E", "sshl v15.S4, v2.S4, V(11).S4");
}

#[test]
fn sshl_4625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v6.S2, v14.S2, v28.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 45, BC, 0E", "sshl v6.S2, v14.S2, v28.S2");
}

#[test]
fn sshl_4626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl V(21).S2, v27.S2, v0.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 47, A0, 0E", "sshl V(21).S2, v27.S2, v0.S2");
}

#[test]
fn sshl_4627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v10.D2, v21.D2, v8.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 46, E8, 4E", "sshl v10.D2, v21.D2, v8.D2");
}

#[test]
fn sshl_4628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshl v22.D2, v6.D2, v20.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 44, F4, 4E", "sshl v22.D2, v6.D2, v20.D2");
}

#[test]
fn sshll_4629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll V(26).H8, v29.B8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, A7, 09, 0F", "sshll V(26).H8, v29.B8, 1");
}

#[test]
fn sshll_4630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll V(6).H8, V(30).B8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, A7, 0D, 0F", "sshll V(6).H8, V(30).B8, 5");
}

#[test]
fn sshll_4631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll v15.S4, V(31).H4, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, A7, 12, 0F", "sshll v15.S4, V(31).H4, 2");
}

#[test]
fn sshll_4632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll v20.S4, v23.H4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, A6, 13, 0F", "sshll v20.S4, v23.H4, 3");
}

#[test]
fn sshll_4633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll V(9).D2, v13.S2, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, A5, 30, 0F", "sshll V(9).D2, v13.S2, 16");
}

#[test]
fn sshll_4634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll V(9).D2, v25.S2, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, A7, 3C, 0F", "sshll V(9).D2, v25.S2, 28");
}

#[test]
fn sshll2_4635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 V(3).H8, V(27).B16, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, A7, 0D, 4F", "sshll2 V(3).H8, V(27).B16, 5");
}

#[test]
fn sshll2_4636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 V(15).H8, V(23).B16, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, A6, 0A, 4F", "sshll2 V(15).H8, V(23).B16, 2");
}

#[test]
fn sshll2_4637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 v28.S4, v12.H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, A5, 16, 4F", "sshll2 v28.S4, v12.H8, 6");
}

#[test]
fn sshll2_4638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 v16.S4, V(3).H8, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, A4, 1D, 4F", "sshll2 v16.S4, V(3).H8, 13");
}

#[test]
fn sshll2_4639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 v15.D2, v20.S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, A6, 27, 4F", "sshll2 v15.D2, v20.S4, 7");
}

#[test]
fn sshll2_4640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshll2 V(15).D2, V(30).S4, 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, A7, 37, 4F", "sshll2 V(15).D2, V(30).S4, 23");
}

#[test]
fn sshr_4641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr d17, D(17), 60
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 06, 44, 5F", "sshr d17, D(17), 60");
}

#[test]
fn sshr_4642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr d7, D(15), 39
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 05, 59, 5F", "sshr d7, D(15), 39");
}

#[test]
fn sshr_4643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(3).B16, v9.B16, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 05, 0D, 4F", "sshr V(3).B16, v9.B16, 3");
}

#[test]
fn sshr_4644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(11).B16, V(30).B16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 07, 09, 4F", "sshr V(11).B16, V(30).B16, 7");
}

#[test]
fn sshr_4645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(9).B8, V(2).B8, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 04, 08, 0F", "sshr V(9).B8, V(2).B8, 8");
}

#[test]
fn sshr_4646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(4).B8, v29.B8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 07, 0C, 0F", "sshr V(4).B8, v29.B8, 4");
}

#[test]
fn sshr_4647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(3).H8, v20.H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 06, 1C, 4F", "sshr V(3).H8, v20.H8, 4");
}

#[test]
fn sshr_4648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v23.H8, V(29).H8, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 07, 19, 4F", "sshr v23.H8, V(29).H8, 7");
}

#[test]
fn sshr_4649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(24).H4, v15.H4, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 05, 1A, 0F", "sshr V(24).H4, v15.H4, 6");
}

#[test]
fn sshr_4650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v0.H4, v27.H4, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 07, 17, 0F", "sshr v0.H4, v27.H4, 9");
}

#[test]
fn sshr_4651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(13).S4, v26.S4, 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 07, 20, 4F", "sshr V(13).S4, v26.S4, 32");
}

#[test]
fn sshr_4652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v4.S4, V(28).S4, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 07, 30, 4F", "sshr v4.S4, V(28).S4, 16");
}

#[test]
fn sshr_4653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr V(10).S2, V(20).S2, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 06, 3D, 0F", "sshr V(10).S2, V(20).S2, 3");
}

#[test]
fn sshr_4654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v21.S2, V(4).S2, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 04, 36, 0F", "sshr v21.S2, V(4).S2, 10");
}

#[test]
fn sshr_4655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v3.D2, V(6).D2, 39
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 04, 59, 4F", "sshr v3.D2, V(6).D2, 39");
}

#[test]
fn sshr_4656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; sshr v9.D2, V(29).D2, 43
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 07, 55, 4F", "sshr v9.D2, V(29).D2, 43");
}

#[test]
fn ssra_4657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra D(2), D(11), 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 15, 69, 5F", "ssra D(2), D(11), 23");
}

#[test]
fn ssra_4658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra d12, D(15), 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 15, 6D, 5F", "ssra d12, D(15), 19");
}

#[test]
fn ssra_4659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(1).B16, v27.B16, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 17, 0B, 4F", "ssra V(1).B16, v27.B16, 5");
}

#[test]
fn ssra_4660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v12.B16, V(15).B16, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 15, 08, 4F", "ssra v12.B16, V(15).B16, 8");
}

#[test]
fn ssra_4661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(24).B8, V(16).B8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 16, 0E, 0F", "ssra V(24).B8, V(16).B8, 2");
}

#[test]
fn ssra_4662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(10).B8, V(15).B8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 15, 0B, 0F", "ssra V(10).B8, V(15).B8, 5");
}

#[test]
fn ssra_4663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v29.H8, v25.H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 17, 1A, 4F", "ssra v29.H8, v25.H8, 6");
}

#[test]
fn ssra_4664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v20.H8, V(24).H8, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 17, 15, 4F", "ssra v20.H8, V(24).H8, 11");
}

#[test]
fn ssra_4665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(7).H4, v1.H4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 14, 1D, 0F", "ssra V(7).H4, v1.H4, 3");
}

#[test]
fn ssra_4666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(25).H4, V(8).H4, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 15, 13, 0F", "ssra V(25).H4, V(8).H4, 13");
}

#[test]
fn ssra_4667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v7.S4, V(20).S4, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 16, 24, 4F", "ssra v7.S4, V(20).S4, 28");
}

#[test]
fn ssra_4668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v16.S4, v9.S4, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 15, 37, 4F", "ssra v16.S4, v9.S4, 9");
}

#[test]
fn ssra_4669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v18.S2, v24.S2, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 17, 3A, 0F", "ssra v18.S2, v24.S2, 6");
}

#[test]
fn ssra_4670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v10.S2, V(2).S2, 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 14, 29, 0F", "ssra v10.S2, V(2).S2, 23");
}

#[test]
fn ssra_4671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra V(26).D2, V(5).D2, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 14, 7A, 4F", "ssra V(26).D2, V(5).D2, 6");
}

#[test]
fn ssra_4672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssra v21.D2, v30.D2, 38
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 17, 5A, 4F", "ssra v21.D2, v30.D2, 38");
}

#[test]
fn ssubl_4673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl v31.H8, v15.B8, V(6).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 21, 26, 0E", "ssubl v31.H8, v15.B8, V(6).B8");
}

#[test]
fn ssubl_4674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl V(17).H8, v15.B8, V(29).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 21, 3D, 0E", "ssubl V(17).H8, v15.B8, V(29).B8");
}

#[test]
fn ssubl_4675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl V(27).S4, V(4).H4, V(5).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 20, 65, 0E", "ssubl V(27).S4, V(4).H4, V(5).H4");
}

#[test]
fn ssubl_4676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl V(30).S4, v18.H4, V(21).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 22, 75, 0E", "ssubl V(30).S4, v18.H4, V(21).H4");
}

#[test]
fn ssubl_4677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl v30.D2, V(17).S2, v18.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 22, B2, 0E", "ssubl v30.D2, V(17).S2, v18.S2");
}

#[test]
fn ssubl_4678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl v9.D2, V(14).S2, V(2).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 21, A2, 0E", "ssubl v9.D2, V(14).S2, V(2).S2");
}

#[test]
fn ssubl2_4679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 V(5).H8, V(23).B16, v22.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 22, 36, 4E", "ssubl2 V(5).H8, V(23).B16, v22.B16");
}

#[test]
fn ssubl2_4680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 v25.H8, v11.B16, v2.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 21, 22, 4E", "ssubl2 v25.H8, v11.B16, v2.B16");
}

#[test]
fn ssubl2_4681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 v30.S4, V(13).H8, V(8).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 21, 68, 4E", "ssubl2 v30.S4, V(13).H8, V(8).H8");
}

#[test]
fn ssubl2_4682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 V(4).S4, v11.H8, V(24).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 21, 78, 4E", "ssubl2 V(4).S4, v11.H8, V(24).H8");
}

#[test]
fn ssubl2_4683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 v25.D2, V(2).S4, V(7).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 20, A7, 4E", "ssubl2 v25.D2, V(2).S4, V(7).S4");
}

#[test]
fn ssubl2_4684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubl2 V(29).D2, v3.S4, V(10).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 20, AA, 4E", "ssubl2 V(29).D2, v3.S4, V(10).S4");
}

#[test]
fn ssubw_4685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw V(7).H8, v24.H8, V(17).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 33, 31, 0E", "ssubw V(7).H8, v24.H8, V(17).B8");
}

#[test]
fn ssubw_4686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw V(17).H8, V(23).H8, v16.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 32, 30, 0E", "ssubw V(17).H8, V(23).H8, v16.B8");
}

#[test]
fn ssubw_4687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw V(27).S4, v29.S4, V(10).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 33, 6A, 0E", "ssubw V(27).S4, v29.S4, V(10).H4");
}

#[test]
fn ssubw_4688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw V(0).S4, v24.S4, v17.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 33, 71, 0E", "ssubw V(0).S4, v24.S4, v17.H4");
}

#[test]
fn ssubw_4689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw V(31).D2, V(12).D2, V(15).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 31, AF, 0E", "ssubw V(31).D2, V(12).D2, V(15).S2");
}

#[test]
fn ssubw_4690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw v20.D2, V(6).D2, V(26).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 30, BA, 0E", "ssubw v20.D2, V(6).D2, V(26).S2");
}

#[test]
fn ssubw2_4691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 v31.H8, v6.H8, v0.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 30, 20, 4E", "ssubw2 v31.H8, v6.H8, v0.B16");
}

#[test]
fn ssubw2_4692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 V(8).H8, V(29).H8, V(2).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 33, 22, 4E", "ssubw2 V(8).H8, V(29).H8, V(2).B16");
}

#[test]
fn ssubw2_4693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 V(27).S4, V(8).S4, v5.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 31, 65, 4E", "ssubw2 V(27).S4, V(8).S4, v5.H8");
}

#[test]
fn ssubw2_4694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 v7.S4, v21.S4, V(13).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 32, 6D, 4E", "ssubw2 v7.S4, v21.S4, V(13).H8");
}

#[test]
fn ssubw2_4695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 v9.D2, V(17).D2, v10.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 32, AA, 4E", "ssubw2 v9.D2, V(17).D2, v10.S4");
}

#[test]
fn ssubw2_4696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ssubw2 v12.D2, V(26).D2, v6.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 33, A6, 4E", "ssubw2 v12.D2, V(26).D2, v6.S4");
}

#[test]
fn st1_4697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(26).B16 * 1}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 72, 00, 4C", "st1 {{V(26).B16 * 1}}, [x18]");
}

#[test]
fn st1_4698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v3.B16 * 1}, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 72, 00, 4C", "st1 {{v3.B16 * 1}}, [x23]");
}

#[test]
fn st1_4699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(13).B8 * 1}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 73, 00, 0C", "st1 {{V(13).B8 * 1}}, [x29]");
}

#[test]
fn st1_4700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).B8 * 1}, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 72, 00, 0C", "st1 {{V(1).B8 * 1}}, [x23]");
}

#[test]
fn st1_4701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v26.H8 * 1}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 75, 00, 4C", "st1 {{v26.H8 * 1}}, [x9]");
}

#[test]
fn st1_4702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(27).H8 * 1}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 77, 00, 4C", "st1 {{V(27).H8 * 1}}, [sp]");
}

#[test]
fn st1_4703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.H4 * 1}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 74, 00, 0C", "st1 {{v16.H4 * 1}}, [x0]");
}

#[test]
fn st1_4704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(17).H4 * 1}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 76, 00, 0C", "st1 {{V(17).H4 * 1}}, [x22]");
}

#[test]
fn st1_4705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(28).S4 * 1}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 7B, 00, 4C", "st1 {{V(28).S4 * 1}}, [sp]");
}

#[test]
fn st1_4706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(15).S4 * 1}, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 7A, 00, 4C", "st1 {{V(15).S4 * 1}}, [x20]");
}

#[test]
fn st1_4707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(22).S2 * 1}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 7B, 00, 0C", "st1 {{V(22).S2 * 1}}, [x27]");
}

#[test]
fn st1_4708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.S2 * 1}, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 7B, 00, 0C", "st1 {{v16.S2 * 1}}, [x24]");
}

#[test]
fn st1_4709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).D2 * 1}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 7C, 00, 4C", "st1 {{V(23).D2 * 1}}, [x0]");
}

#[test]
fn st1_4710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v9.D2 * 1}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 7C, 00, 4C", "st1 {{v9.D2 * 1}}, [x6]");
}

#[test]
fn st1_4711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(29).D1 * 1}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 7D, 00, 0C", "st1 {{V(29).D1 * 1}}, [x12]");
}

#[test]
fn st1_4712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v8.D1 * 1}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 7D, 00, 0C", "st1 {{v8.D1 * 1}}, [x14]");
}

#[test]
fn st1_4713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v15.B16 * 2}, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, A3, 00, 4C", "st1 {{v15.B16 * 2}}, [x28]");
}

#[test]
fn st1_4714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(10).B16 * 2}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, A1, 00, 4C", "st1 {{V(10).B16 * 2}}, [x12]");
}

#[test]
fn st1_4715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.B8 * 2}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, A2, 00, 0C", "st1 {{v12.B8 * 2}}, [x19]");
}

#[test]
fn st1_4716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v1.B8 * 2}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, A1, 00, 0C", "st1 {{v1.B8 * 2}}, [x15]");
}

#[test]
fn st1_4717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).H8 * 2}, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, A7, 00, 4C", "st1 {{V(1).H8 * 2}}, [x29]");
}

#[test]
fn st1_4718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).H8 * 2}, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A4, 00, 4C", "st1 {{V(23).H8 * 2}}, [x4]");
}

#[test]
fn st1_4719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.H4 * 2}, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, A7, 00, 0C", "st1 {{v21.H4 * 2}}, [x25]");
}

#[test]
fn st1_4720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).H4 * 2}, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, A5, 00, 0C", "st1 {{V(9).H4 * 2}}, [x15]");
}

#[test]
fn st1_4721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.S4 * 2}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, A8, 00, 4C", "st1 {{v6.S4 * 2}}, [x6]");
}

#[test]
fn st1_4722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v28.S4 * 2}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, AB, 00, 4C", "st1 {{v28.S4 * 2}}, [x27]");
}

#[test]
fn st1_4723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v17.S2 * 2}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, A9, 00, 0C", "st1 {{v17.S2 * 2}}, [x14]");
}

#[test]
fn st1_4724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v25.S2 * 2}, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, A8, 00, 0C", "st1 {{v25.S2 * 2}}, [x2]");
}

#[test]
fn st1_4725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v28.D2 * 2}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, AF, 00, 4C", "st1 {{v28.D2 * 2}}, [x27]");
}

#[test]
fn st1_4726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v18.D2 * 2}, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, AC, 00, 4C", "st1 {{v18.D2 * 2}}, [x1]");
}

#[test]
fn st1_4727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v15.D1 * 2}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, AE, 00, 0C", "st1 {{v15.D1 * 2}}, [x16]");
}

#[test]
fn st1_4728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(17).D1 * 2}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, AF, 00, 0C", "st1 {{V(17).D1 * 2}}, [x30]");
}

#[test]
fn st1_4729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v13.B16 * 3}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 62, 00, 4C", "st1 {{v13.B16 * 3}}, [x16]");
}

#[test]
fn st1_4730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v29.B16 * 3}, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 63, 00, 4C", "st1 {{v29.B16 * 3}}, [x27]");
}

#[test]
fn st1_4731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v20.B8 * 3}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 61, 00, 0C", "st1 {{v20.B8 * 3}}, [x14]");
}

#[test]
fn st1_4732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(25).B8 * 3}, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 61, 00, 0C", "st1 {{V(25).B8 * 3}}, [x14]");
}

#[test]
fn st1_4733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v18.H8 * 3}, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 64, 00, 4C", "st1 {{v18.H8 * 3}}, [x6]");
}

#[test]
fn st1_4734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v22.H8 * 3}, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 67, 00, 4C", "st1 {{v22.H8 * 3}}, [x26]");
}

#[test]
fn st1_4735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(30).H4 * 3}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 66, 00, 0C", "st1 {{V(30).H4 * 3}}, [x22]");
}

#[test]
fn st1_4736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v17.H4 * 3}, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 65, 00, 0C", "st1 {{v17.H4 * 3}}, [x8]");
}

#[test]
fn st1_4737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v19.S4 * 3}, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 6B, 00, 4C", "st1 {{v19.S4 * 3}}, [x28]");
}

#[test]
fn st1_4738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).S4 * 3}, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 6A, 00, 4C", "st1 {{V(9).S4 * 3}}, [x23]");
}

#[test]
fn st1_4739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v7.S2 * 3}, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 69, 00, 0C", "st1 {{v7.S2 * 3}}, [x9]");
}

#[test]
fn st1_4740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v19.S2 * 3}, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 68, 00, 0C", "st1 {{v19.S2 * 3}}, [x0]");
}

#[test]
fn st1_4741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(16).D2 * 3}, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 6D, 00, 4C", "st1 {{V(16).D2 * 3}}, [x13]");
}

#[test]
fn st1_4742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(3).D2 * 3}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 6F, 00, 4C", "st1 {{V(3).D2 * 3}}, [x30]");
}

#[test]
fn st1_4743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(26).D1 * 3}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 6E, 00, 0C", "st1 {{V(26).D1 * 3}}, [x19]");
}

#[test]
fn st1_4744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v4.D1 * 3}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 6E, 00, 0C", "st1 {{v4.D1 * 3}}, [x16]");
}

#[test]
fn st1_4745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v26.B16 * 4}, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 23, 00, 4C", "st1 {{v26.B16 * 4}}, [x25]");
}

#[test]
fn st1_4746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(21).B16 * 4}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 23, 00, 4C", "st1 {{V(21).B16 * 4}}, [x30]");
}

#[test]
fn st1_4747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(24).B8 * 4}, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 20, 00, 0C", "st1 {{V(24).B8 * 4}}, [x7]");
}

#[test]
fn st1_4748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v27.B8 * 4}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 22, 00, 0C", "st1 {{v27.B8 * 4}}, [x16]");
}

#[test]
fn st1_4749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).H8 * 4}, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 25, 00, 4C", "st1 {{V(9).H8 * 4}}, [x10]");
}

#[test]
fn st1_4750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v11.H8 * 4}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 26, 00, 4C", "st1 {{v11.H8 * 4}}, [x22]");
}

#[test]
fn st1_4751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(29).H4 * 4}, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 26, 00, 0C", "st1 {{V(29).H4 * 4}}, [x19]");
}

#[test]
fn st1_4752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(26).H4 * 4}, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 26, 00, 0C", "st1 {{V(26).H4 * 4}}, [x16]");
}

#[test]
fn st1_4753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v3.S4 * 4}, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 29, 00, 4C", "st1 {{v3.S4 * 4}}, [x12]");
}

#[test]
fn st1_4754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v1.S4 * 4}, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 2A, 00, 4C", "st1 {{v1.S4 * 4}}, [x20]");
}

#[test]
fn st1_4755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.S2 * 4}, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 2A, 00, 0C", "st1 {{v16.S2 * 4}}, [x18]");
}

#[test]
fn st1_4756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.S2 * 4}, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 2A, 00, 0C", "st1 {{v16.S2 * 4}}, [x22]");
}

#[test]
fn st1_4757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).D2 * 4}, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 2E, 00, 4C", "st1 {{V(1).D2 * 4}}, [x23]");
}

#[test]
fn st1_4758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v13.D2 * 4}, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 2C, 00, 4C", "st1 {{v13.D2 * 4}}, [x3]");
}

#[test]
fn st1_4759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v23.D1 * 4}, [sp]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 2F, 00, 0C", "st1 {{v23.D1 * 4}}, [sp]");
}

#[test]
fn st1_4760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v24.D1 * 4}, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 2F, 00, 0C", "st1 {{v24.D1 * 4}}, [x30]");
}

#[test]
fn st1_4761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(6).B8 * 1}, [x21], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 72, 9F, 0C", "st1 {{V(6).B8 * 1}}, [x21], 8");
}

#[test]
fn st1_4762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).B8 * 1}, [x2], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 70, 9F, 0C", "st1 {{V(5).B8 * 1}}, [x2], 8");
}

#[test]
fn st1_4763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(14).H4 * 1}, [x5], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 74, 9F, 0C", "st1 {{V(14).H4 * 1}}, [x5], 8");
}

#[test]
fn st1_4764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(11).H4 * 1}, [x30], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 77, 9F, 0C", "st1 {{V(11).H4 * 1}}, [x30], 8");
}

#[test]
fn st1_4765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v17.S2 * 1}, [x18], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 7A, 9F, 0C", "st1 {{v17.S2 * 1}}, [x18], 8");
}

#[test]
fn st1_4766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).S2 * 1}, [x11], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 79, 9F, 0C", "st1 {{V(23).S2 * 1}}, [x11], 8");
}

#[test]
fn st1_4767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(18).D1 * 1}, [x12], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 7D, 9F, 0C", "st1 {{V(18).D1 * 1}}, [x12], 8");
}

#[test]
fn st1_4768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).D1 * 1}, [x15], 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 7D, 9F, 0C", "st1 {{V(1).D1 * 1}}, [x15], 8");
}

#[test]
fn st1_4769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(7).B16 * 1}, [x26], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 73, 9F, 4C", "st1 {{V(7).B16 * 1}}, [x26], 16");
}

#[test]
fn st1_4770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v9.B16 * 1}, [x27], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 73, 9F, 4C", "st1 {{v9.B16 * 1}}, [x27], 16");
}

#[test]
fn st1_4771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(8).H8 * 1}, [x21], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 76, 9F, 4C", "st1 {{V(8).H8 * 1}}, [x21], 16");
}

#[test]
fn st1_4772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(27).H8 * 1}, [x22], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 76, 9F, 4C", "st1 {{V(27).H8 * 1}}, [x22], 16");
}

#[test]
fn st1_4773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v10.S4 * 1}, [x27], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 7B, 9F, 4C", "st1 {{v10.S4 * 1}}, [x27], 16");
}

#[test]
fn st1_4774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(28).S4 * 1}, [x22], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 7A, 9F, 4C", "st1 {{V(28).S4 * 1}}, [x22], 16");
}

#[test]
fn st1_4775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(16).D2 * 1}, [XSP(31)], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 7F, 9F, 4C", "st1 {{V(16).D2 * 1}}, [XSP(31)], 16");
}

#[test]
fn st1_4776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v25.D2 * 1}, [x6], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 7C, 9F, 4C", "st1 {{v25.D2 * 1}}, [x6], 16");
}

#[test]
fn st1_4777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v11.B16 * 1}, [x1], X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 70, 80, 4C", "st1 {{v11.B16 * 1}}, [x1], X(0)");
}

#[test]
fn st1_4778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(11).B16 * 1}, [x18], x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 72, 80, 4C", "st1 {{V(11).B16 * 1}}, [x18], x0");
}

#[test]
fn st1_4779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(2).B8 * 1}, [x12], x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 71, 8D, 0C", "st1 {{V(2).B8 * 1}}, [x12], x13");
}

#[test]
fn st1_4780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v0.B8 * 1}, [x28], X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 73, 87, 0C", "st1 {{v0.B8 * 1}}, [x28], X(7)");
}

#[test]
fn st1_4781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.H8 * 1}, [x1], x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 74, 97, 4C", "st1 {{v6.H8 * 1}}, [x1], x23");
}

#[test]
fn st1_4782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(27).H8 * 1}, [x22], x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 76, 8A, 4C", "st1 {{V(27).H8 * 1}}, [x22], x10");
}

#[test]
fn st1_4783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v31.H4 * 1}, [x18], x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 76, 8F, 0C", "st1 {{v31.H4 * 1}}, [x18], x15");
}

#[test]
fn st1_4784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v14.H4 * 1}, [x24], X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 77, 8B, 0C", "st1 {{v14.H4 * 1}}, [x24], X(11)");
}

#[test]
fn st1_4785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(3).S4 * 1}, [x12], x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 79, 99, 4C", "st1 {{V(3).S4 * 1}}, [x12], x25");
}

#[test]
fn st1_4786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v4.S4 * 1}, [x6], x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 78, 86, 4C", "st1 {{v4.S4 * 1}}, [x6], x6");
}

#[test]
fn st1_4787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v10.S2 * 1}, [x1], x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 78, 9A, 0C", "st1 {{v10.S2 * 1}}, [x1], x26");
}

#[test]
fn st1_4788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(8).S2 * 1}, [x1], X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 78, 83, 0C", "st1 {{V(8).S2 * 1}}, [x1], X(3)");
}

#[test]
fn st1_4789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v2.D2 * 1}, [x20], X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 7E, 85, 4C", "st1 {{v2.D2 * 1}}, [x20], X(5)");
}

#[test]
fn st1_4790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(29).D2 * 1}, [x9], X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 7D, 8E, 4C", "st1 {{V(29).D2 * 1}}, [x9], X(14)");
}

#[test]
fn st1_4791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v29.D1 * 1}, [x20], x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 7E, 85, 0C", "st1 {{v29.D1 * 1}}, [x20], x5");
}

#[test]
fn st1_4792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(14).D1 * 1}, [x9], x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 7D, 93, 0C", "st1 {{V(14).D1 * 1}}, [x9], x19");
}

#[test]
fn st1_4793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).B8 * 2}, [x10], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, A1, 9F, 0C", "st1 {{V(23).B8 * 2}}, [x10], 16");
}

#[test]
fn st1_4794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).B8 * 2}, [x11], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, A1, 9F, 0C", "st1 {{V(23).B8 * 2}}, [x11], 16");
}

#[test]
fn st1_4795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v30.H4 * 2}, [x29], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, A7, 9F, 0C", "st1 {{v30.H4 * 2}}, [x29], 16");
}

#[test]
fn st1_4796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(19).H4 * 2}, [x19], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A6, 9F, 0C", "st1 {{V(19).H4 * 2}}, [x19], 16");
}

#[test]
fn st1_4797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(6).S2 * 2}, [x22], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, AA, 9F, 0C", "st1 {{V(6).S2 * 2}}, [x22], 16");
}

#[test]
fn st1_4798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v14.S2 * 2}, [x8], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, A9, 9F, 0C", "st1 {{v14.S2 * 2}}, [x8], 16");
}

#[test]
fn st1_4799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(30).D1 * 2}, [x21], 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, AE, 9F, 0C", "st1 {{V(30).D1 * 2}}, [x21], 16");
}
