
#[test]
fn st1_2400() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v13.B16 * 2}, [XSP(1)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, A0, 9F, 4C", "st1 {{v13.B16 * 2}}, [XSP(1)], 32");
}

#[test]
fn st1_2401() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).H8 * 2}, [x11], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, A5, 9F, 4C", "st1 {{V(1).H8 * 2}}, [x11], 32");
}

#[test]
fn st1_2402() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v10.S4 * 2}, [x26], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, AB, 9F, 4C", "st1 {{v10.S4 * 2}}, [x26], 32");
}

#[test]
fn st1_2403() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v3.D2 * 2}, [XSP(6)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, AC, 9F, 4C", "st1 {{v3.D2 * 2}}, [XSP(6)], 32");
}

#[test]
fn st1_2404() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.B16 * 2}, [x20], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, A2, 98, 4C", "st1 {{v21.B16 * 2}}, [x20], x24");
}

#[test]
fn st1_2405() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(26).B8 * 2}, [XSP(25)], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, A3, 93, 0C", "st1 {{V(26).B8 * 2}}, [XSP(25)], X(19)");
}

#[test]
fn st1_2406() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(18).H8 * 2}, [XSP(24)], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, A7, 84, 4C", "st1 {{V(18).H8 * 2}}, [XSP(24)], x4");
}

#[test]
fn st1_2407() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v22.H4 * 2}, [XSP(31)], X(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, A7, 88, 0C", "st1 {{v22.H4 * 2}}, [XSP(31)], X(8)");
}

#[test]
fn st1_2408() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(8).S4 * 2}, [x26], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, AB, 93, 4C", "st1 {{V(8).S4 * 2}}, [x26], X(19)");
}

#[test]
fn st1_2409() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(30).S2 * 2}, [x0], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, A8, 8B, 0C", "st1 {{V(30).S2 * 2}}, [x0], X(11)");
}

#[test]
fn st1_2410() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(6).D2 * 2}, [XSP(22)], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, AE, 8A, 4C", "st1 {{V(6).D2 * 2}}, [XSP(22)], x10");
}

#[test]
fn st1_2411() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.D1 * 2}, [XSP(25)], x3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, AF, 83, 0C", "st1 {{v12.D1 * 2}}, [XSP(25)], x3");
}

#[test]
fn st1_2412() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(30).B8 * 3}, [XSP(0)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 60, 9F, 0C", "st1 {{V(30).B8 * 3}}, [XSP(0)], 24");
}

#[test]
fn st1_2413() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v17.H4 * 3}, [x13], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 65, 9F, 0C", "st1 {{v17.H4 * 3}}, [x13], 24");
}

#[test]
fn st1_2414() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v24.S2 * 3}, [XSP(20)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 6A, 9F, 0C", "st1 {{v24.S2 * 3}}, [XSP(20)], 24");
}

#[test]
fn st1_2415() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).D1 * 3}, [x17], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 6E, 9F, 0C", "st1 {{V(5).D1 * 3}}, [x17], 24");
}

#[test]
fn st1_2416() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(31).B16 * 3}, [x23], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 62, 9F, 4C", "st1 {{V(31).B16 * 3}}, [x23], 48");
}

#[test]
fn st1_2417() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(18).H8 * 3}, [XSP(31)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 67, 9F, 4C", "st1 {{V(18).H8 * 3}}, [XSP(31)], 48");
}

#[test]
fn st1_2418() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v25.S4 * 3}, [XSP(20)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 6A, 9F, 4C", "st1 {{v25.S4 * 3}}, [XSP(20)], 48");
}

#[test]
fn st1_2419() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v0.D2 * 3}, [x29], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 6F, 9F, 4C", "st1 {{v0.D2 * 3}}, [x29], 48");
}

#[test]
fn st1_2420() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(20).B16 * 3}, [XSP(8)], x20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 61, 94, 4C", "st1 {{V(20).B16 * 3}}, [XSP(8)], x20");
}

#[test]
fn st1_2421() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v26.B8 * 3}, [x15], X(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 61, 83, 0C", "st1 {{v26.B8 * 3}}, [x15], X(3)");
}

#[test]
fn st1_2422() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v18.H8 * 3}, [x24], X(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 67, 98, 4C", "st1 {{v18.H8 * 3}}, [x24], X(24)");
}

#[test]
fn st1_2423() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(25).H4 * 3}, [XSP(21)], X(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 66, 8B, 0C", "st1 {{V(25).H4 * 3}}, [XSP(21)], X(11)");
}

#[test]
fn st1_2424() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v5.S4 * 3}, [x3], x7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 68, 87, 4C", "st1 {{v5.S4 * 3}}, [x3], x7");
}

#[test]
fn st1_2425() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v19.S2 * 3}, [XSP(3)], x29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 68, 9D, 0C", "st1 {{v19.S2 * 3}}, [XSP(3)], x29");
}

#[test]
fn st1_2426() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(9).D2 * 3}, [x8], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 6D, 8F, 4C", "st1 {{V(9).D2 * 3}}, [x8], X(15)");
}

#[test]
fn st1_2427() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v23.D1 * 3}, [x20], x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 6E, 8A, 0C", "st1 {{v23.D1 * 3}}, [x20], x10");
}

#[test]
fn st1_2428() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v25.B8 * 4}, [XSP(18)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 22, 9F, 0C", "st1 {{v25.B8 * 4}}, [XSP(18)], 32");
}

#[test]
fn st1_2429() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).H4 * 4}, [x9], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 25, 9F, 0C", "st1 {{V(5).H4 * 4}}, [x9], 32");
}

#[test]
fn st1_2430() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(20).S2 * 4}, [x10], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 29, 9F, 0C", "st1 {{V(20).S2 * 4}}, [x10], 32");
}

#[test]
fn st1_2431() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(29).D1 * 4}, [XSP(1)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 2C, 9F, 0C", "st1 {{V(29).D1 * 4}}, [XSP(1)], 32");
}

#[test]
fn st1_2432() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.B16 * 4}, [XSP(22)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 22, 9F, 4C", "st1 {{v21.B16 * 4}}, [XSP(22)], 64");
}

#[test]
fn st1_2433() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(21).H8 * 4}, [XSP(28)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 27, 9F, 4C", "st1 {{V(21).H8 * 4}}, [XSP(28)], 64");
}

#[test]
fn st1_2434() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(5).S4 * 4}, [XSP(24)], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 2B, 9F, 4C", "st1 {{V(5).S4 * 4}}, [XSP(24)], 64");
}

#[test]
fn st1_2435() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v12.D2 * 4}, [x12], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 2D, 9F, 4C", "st1 {{v12.D2 * 4}}, [x12], 64");
}

#[test]
fn st1_2436() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(13).B16 * 4}, [XSP(23)], X(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 22, 87, 4C", "st1 {{V(13).B16 * 4}}, [XSP(23)], X(7)");
}

#[test]
fn st1_2437() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v7.B8 * 4}, [XSP(16)], x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 22, 9B, 0C", "st1 {{v7.B8 * 4}}, [XSP(16)], x27");
}

#[test]
fn st1_2438() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v23.H8 * 4}, [x13], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 25, 9C, 4C", "st1 {{v23.H8 * 4}}, [x13], X(28)");
}

#[test]
fn st1_2439() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).H4 * 4}, [x15], x28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 25, 9C, 0C", "st1 {{V(23).H4 * 4}}, [x15], x28");
}

#[test]
fn st1_2440() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v14.S4 * 4}, [XSP(10)], X(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 29, 8A, 4C", "st1 {{v14.S4 * 4}}, [XSP(10)], X(10)");
}

#[test]
fn st1_2441() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.S2 * 4}, [XSP(8)], x26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 29, 9A, 0C", "st1 {{v6.S2 * 4}}, [XSP(8)], x26");
}

#[test]
fn st1_2442() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(24).D2 * 4}, [x21], x15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 2E, 8F, 4C", "st1 {{V(24).D2 * 4}}, [x21], x15");
}

#[test]
fn st1_2443() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v21.D1 * 4}, [x3], x18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 2C, 92, 0C", "st1 {{v21.D1 * 4}}, [x3], x18");
}

#[test]
fn st1_2444() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v1.B * 1}[12], [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 13, 00, 4D", "st1 {{v1.B * 1}}[12], [XSP(24)]");
}

#[test]
fn st1_2445() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v6.H * 1}[6], [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 52, 00, 4D", "st1 {{v6.H * 1}}[6], [x16]");
}

#[test]
fn st1_2446() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(1).S * 1}[2], [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 80, 00, 4D", "st1 {{V(1).S * 1}}[2], [x2]");
}

#[test]
fn st1_2447() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v27.D * 1}[0], [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 87, 00, 0D", "st1 {{v27.D * 1}}[0], [XSP(25)]");
}

#[test]
fn st1_2448() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(22).B * 1}[0], [x18], 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 02, 9F, 0D", "st1 {{V(22).B * 1}}[0], [x18], 1");
}

#[test]
fn st1_2449() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v22.B * 1}[7], [sp], X(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 1F, 91, 0D", "st1 {{v22.B * 1}}[7], [sp], X(17)");
}

#[test]
fn st1_2450() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(19).H * 1}[0], [XSP(16)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 42, 9F, 0D", "st1 {{V(19).H * 1}}[0], [XSP(16)], 2");
}

#[test]
fn st1_2451() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(27).H * 1}[7], [x30], X(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 5B, 8C, 4D", "st1 {{V(27).H * 1}}[7], [x30], X(12)");
}

#[test]
fn st1_2452() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(23).S * 1}[3], [XSP(2)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 90, 9F, 4D", "st1 {{V(23).S * 1}}[3], [XSP(2)], 4");
}

#[test]
fn st1_2453() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v19.S * 1}[3], [XSP(31)], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 93, 93, 4D", "st1 {{v19.S * 1}}[3], [XSP(31)], X(19)");
}

#[test]
fn st1_2454() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {V(6).D * 1}[1], [sp], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 87, 9F, 4D", "st1 {{V(6).D * 1}}[1], [sp], 8");
}

#[test]
fn st1_2455() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st1 {v16.D * 1}[0], [x1], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 84, 98, 0D", "st1 {{v16.D * 1}}[0], [x1], x24");
}

#[test]
fn st2_2456() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.B16 * 2}, [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 80, 00, 4C", "st2 {{v31.B16 * 2}}, [XSP(2)]");
}

#[test]
fn st2_2457() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v1.B8 * 2}, [x28]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 83, 00, 0C", "st2 {{v1.B8 * 2}}, [x28]");
}

#[test]
fn st2_2458() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(21).H8 * 2}, [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 87, 00, 4C", "st2 {{V(21).H8 * 2}}, [XSP(24)]");
}

#[test]
fn st2_2459() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v1.H4 * 2}, [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 85, 00, 0C", "st2 {{v1.H4 * 2}}, [XSP(9)]");
}

#[test]
fn st2_2460() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v26.S4 * 2}, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 8B, 00, 4C", "st2 {{v26.S4 * 2}}, [x26]");
}

#[test]
fn st2_2461() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.S2 * 2}, [XSP(21)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 8A, 00, 0C", "st2 {{v31.S2 * 2}}, [XSP(21)]");
}

#[test]
fn st2_2462() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(11).D2 * 2}, [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 8C, 00, 4C", "st2 {{V(11).D2 * 2}}, [XSP(6)]");
}

#[test]
fn st2_2463() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(26).B8 * 2}, [x5], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 80, 9F, 0C", "st2 {{V(26).B8 * 2}}, [x5], 16");
}

#[test]
fn st2_2464() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v20.H4 * 2}, [XSP(9)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 85, 9F, 0C", "st2 {{v20.H4 * 2}}, [XSP(9)], 16");
}

#[test]
fn st2_2465() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v22.S2 * 2}, [x13], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 89, 9F, 0C", "st2 {{v22.S2 * 2}}, [x13], 16");
}

#[test]
fn st2_2466() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v22.B16 * 2}, [x15], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 81, 9F, 4C", "st2 {{v22.B16 * 2}}, [x15], 32");
}

#[test]
fn st2_2467() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(13).H8 * 2}, [XSP(21)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 86, 9F, 4C", "st2 {{V(13).H8 * 2}}, [XSP(21)], 32");
}

#[test]
fn st2_2468() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(21).S4 * 2}, [XSP(16)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 8A, 9F, 4C", "st2 {{V(21).S4 * 2}}, [XSP(16)], 32");
}

#[test]
fn st2_2469() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v3.D2 * 2}, [x14], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 8D, 9F, 4C", "st2 {{v3.D2 * 2}}, [x14], 32");
}

#[test]
fn st2_2470() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v8.B16 * 2}, [XSP(22)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 82, 99, 4C", "st2 {{v8.B16 * 2}}, [XSP(22)], X(25)");
}

#[test]
fn st2_2471() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(6).B8 * 2}, [XSP(0)], x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 80, 8E, 0C", "st2 {{V(6).B8 * 2}}, [XSP(0)], x14");
}

#[test]
fn st2_2472() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(24).H8 * 2}, [XSP(29)], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 87, 9C, 4C", "st2 {{V(24).H8 * 2}}, [XSP(29)], X(28)");
}

#[test]
fn st2_2473() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v27.H4 * 2}, [x7], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 84, 84, 0C", "st2 {{v27.H4 * 2}}, [x7], x4");
}

#[test]
fn st2_2474() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v10.S4 * 2}, [XSP(11)], x2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 89, 82, 4C", "st2 {{v10.S4 * 2}}, [XSP(11)], x2");
}

#[test]
fn st2_2475() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(10).S2 * 2}, [XSP(21)], X(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 8A, 8F, 0C", "st2 {{V(10).S2 * 2}}, [XSP(21)], X(15)");
}

#[test]
fn st2_2476() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(29).D2 * 2}, [XSP(26)], X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 8F, 93, 4C", "st2 {{V(29).D2 * 2}}, [XSP(26)], X(19)");
}

#[test]
fn st2_2477() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v11.B * 2}[3], [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 0E, 20, 0D", "st2 {{v11.B * 2}}[3], [XSP(19)]");
}

#[test]
fn st2_2478() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(20).H * 2}[5], [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 48, 20, 4D", "st2 {{V(20).H * 2}}[5], [XSP(7)]");
}

#[test]
fn st2_2479() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(0).S * 2}[2], [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 80, 20, 4D", "st2 {{V(0).S * 2}}[2], [XSP(1)]");
}

#[test]
fn st2_2480() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v15.D * 2}[0], [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 86, 20, 0D", "st2 {{v15.D * 2}}[0], [XSP(16)]");
}

#[test]
fn st2_2481() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v6.B * 2}[14], [XSP(20)], 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 1A, BF, 4D", "st2 {{v6.B * 2}}[14], [XSP(20)], 2");
}

#[test]
fn st2_2482() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.B * 2}[13], [x5], X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 14, BA, 4D", "st2 {{v31.B * 2}}[13], [x5], X(26)");
}

#[test]
fn st2_2483() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v16.H * 2}[1], [x7], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 48, BF, 0D", "st2 {{v16.H * 2}}[1], [x7], 4");
}

#[test]
fn st2_2484() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v31.H * 2}[2], [x2], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 50, B7, 0D", "st2 {{v31.H * 2}}[2], [x2], x23");
}

#[test]
fn st2_2485() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v11.S * 2}[3], [XSP(1)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 90, BF, 4D", "st2 {{v11.S * 2}}[3], [XSP(1)], 8");
}

#[test]
fn st2_2486() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v2.S * 2}[0], [XSP(23)], X(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 82, A8, 0D", "st2 {{v2.S * 2}}[0], [XSP(23)], X(8)");
}

#[test]
fn st2_2487() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {V(6).D * 2}[0], [XSP(30)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 87, BF, 0D", "st2 {{V(6).D * 2}}[0], [XSP(30)], 16");
}

#[test]
fn st2_2488() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st2 {v2.D * 2}[1], [XSP(20)], x17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 86, B1, 4D", "st2 {{v2.D * 2}}[1], [XSP(20)], x17");
}

#[test]
fn st3_2489() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(3).B16 * 3}, [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 42, 00, 4C", "st3 {{V(3).B16 * 3}}, [x20]");
}

#[test]
fn st3_2490() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v10.B8 * 3}, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 40, 00, 0C", "st3 {{v10.B8 * 3}}, [XSP(7)]");
}

#[test]
fn st3_2491() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v16.H8 * 3}, [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 45, 00, 4C", "st3 {{v16.H8 * 3}}, [x14]");
}

#[test]
fn st3_2492() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v28.H4 * 3}, [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 44, 00, 0C", "st3 {{v28.H4 * 3}}, [XSP(4)]");
}

#[test]
fn st3_2493() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(15).S4 * 3}, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 4A, 00, 4C", "st3 {{V(15).S4 * 3}}, [x23]");
}

#[test]
fn st3_2494() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(12).S2 * 3}, [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 49, 00, 0C", "st3 {{V(12).S2 * 3}}, [x8]");
}

#[test]
fn st3_2495() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v7.D2 * 3}, [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 4D, 00, 4C", "st3 {{v7.D2 * 3}}, [XSP(15)]");
}

#[test]
fn st3_2496() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v0.B8 * 3}, [XSP(24)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 43, 9F, 0C", "st3 {{v0.B8 * 3}}, [XSP(24)], 24");
}

#[test]
fn st3_2497() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v14.H4 * 3}, [XSP(23)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 46, 9F, 0C", "st3 {{v14.H4 * 3}}, [XSP(23)], 24");
}

#[test]
fn st3_2498() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(1).S2 * 3}, [XSP(20)], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 4A, 9F, 0C", "st3 {{V(1).S2 * 3}}, [XSP(20)], 24");
}

#[test]
fn st3_2499() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v25.B16 * 3}, [x17], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 42, 9F, 4C", "st3 {{v25.B16 * 3}}, [x17], 48");
}

#[test]
fn st3_2500() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v10.H8 * 3}, [XSP(11)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 45, 9F, 4C", "st3 {{v10.H8 * 3}}, [XSP(11)], 48");
}

#[test]
fn st3_2501() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v13.S4 * 3}, [XSP(19)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 4A, 9F, 4C", "st3 {{v13.S4 * 3}}, [XSP(19)], 48");
}

#[test]
fn st3_2502() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v4.D2 * 3}, [x2], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 4C, 9F, 4C", "st3 {{v4.D2 * 3}}, [x2], 48");
}

#[test]
fn st3_2503() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v0.B16 * 3}, [XSP(19)], x5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 42, 85, 4C", "st3 {{v0.B16 * 3}}, [XSP(19)], x5");
}

#[test]
fn st3_2504() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(23).B8 * 3}, [x30], x15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 43, 8F, 0C", "st3 {{V(23).B8 * 3}}, [x30], x15");
}

#[test]
fn st3_2505() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(11).H8 * 3}, [x16], x30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 46, 9E, 4C", "st3 {{V(11).H8 * 3}}, [x16], x30");
}

#[test]
fn st3_2506() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v8.H4 * 3}, [XSP(15)], X(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 45, 9C, 0C", "st3 {{v8.H4 * 3}}, [XSP(15)], X(28)");
}

#[test]
fn st3_2507() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v5.S4 * 3}, [x4], x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 48, 8E, 4C", "st3 {{v5.S4 * 3}}, [x4], x14");
}

#[test]
fn st3_2508() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(9).S2 * 3}, [x12], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 49, 84, 0C", "st3 {{V(9).S2 * 3}}, [x12], x4");
}

#[test]
fn st3_2509() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v22.D2 * 3}, [XSP(3)], x0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 4C, 80, 4C", "st3 {{v22.D2 * 3}}, [XSP(3)], x0");
}

#[test]
fn st3_2510() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v19.B * 3}[9], [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 25, 00, 4D", "st3 {{v19.B * 3}}[9], [x11]");
}

#[test]
fn st3_2511() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(12).H * 3}[7], [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 78, 00, 4D", "st3 {{V(12).H * 3}}[7], [x5]");
}

#[test]
fn st3_2512() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v27.S * 3}[0], [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, A0, 00, 0D", "st3 {{v27.S * 3}}[0], [XSP(6)]");
}

#[test]
fn st3_2513() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v31.D * 3}[0], [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, A4, 00, 0D", "st3 {{v31.D * 3}}[0], [XSP(7)]");
}

#[test]
fn st3_2514() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(3).B * 3}[13], [XSP(22)], 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 36, 9F, 4D", "st3 {{V(3).B * 3}}[13], [XSP(22)], 3");
}

#[test]
fn st3_2515() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(1).B * 3}[1], [XSP(29)], x29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 27, 9D, 0D", "st3 {{V(1).B * 3}}[1], [XSP(29)], x29");
}

#[test]
fn st3_2516() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(3).H * 3}[1], [XSP(13)], 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 69, 9F, 0D", "st3 {{V(3).H * 3}}[1], [XSP(13)], 6");
}

#[test]
fn st3_2517() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v13.H * 3}[6], [x19], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 72, 84, 4D", "st3 {{v13.H * 3}}[6], [x19], x4");
}

#[test]
fn st3_2518() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v16.S * 3}[1], [x21], 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, B2, 9F, 0D", "st3 {{v16.S * 3}}[1], [x21], 12");
}

#[test]
fn st3_2519() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v23.S * 3}[2], [XSP(10)], X(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, A1, 99, 4D", "st3 {{v23.S * 3}}[2], [XSP(10)], X(25)");
}

#[test]
fn st3_2520() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {V(10).D * 3}[0], [x25], 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, A7, 9F, 0D", "st3 {{V(10).D * 3}}[0], [x25], 24");
}

#[test]
fn st3_2521() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st3 {v20.D * 3}[1], [XSP(25)], X(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, A7, 81, 4D", "st3 {{v20.D * 3}}[1], [XSP(25)], X(1)");
}

#[test]
fn st4_2522() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v27.B16 * 4}, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 02, 00, 4C", "st4 {{v27.B16 * 4}}, [x23]");
}

#[test]
fn st4_2523() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v23.B8 * 4}, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 01, 00, 0C", "st4 {{v23.B8 * 4}}, [XSP(8)]");
}

#[test]
fn st4_2524() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v25.H8 * 4}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 07, 00, 4C", "st4 {{v25.H8 * 4}}, [x30]");
}

#[test]
fn st4_2525() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v21.H4 * 4}, [XSP(13)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 05, 00, 0C", "st4 {{v21.H4 * 4}}, [XSP(13)]");
}

#[test]
fn st4_2526() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(0).S4 * 4}, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 08, 00, 4C", "st4 {{V(0).S4 * 4}}, [x0]");
}

#[test]
fn st4_2527() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v19.S2 * 4}, [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 09, 00, 0C", "st4 {{v19.S2 * 4}}, [XSP(12)]");
}

#[test]
fn st4_2528() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(7).D2 * 4}, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 0F, 00, 4C", "st4 {{V(7).D2 * 4}}, [x30]");
}

#[test]
fn st4_2529() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v21.B8 * 4}, [XSP(5)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 00, 9F, 0C", "st4 {{v21.B8 * 4}}, [XSP(5)], 32");
}

#[test]
fn st4_2530() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v29.H4 * 4}, [x24], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 07, 9F, 0C", "st4 {{v29.H4 * 4}}, [x24], 32");
}

#[test]
fn st4_2531() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(1).S2 * 4}, [x14], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 09, 9F, 0C", "st4 {{V(1).S2 * 4}}, [x14], 32");
}

#[test]
fn st4_2532() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(11).B16 * 4}, [x4], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 00, 9F, 4C", "st4 {{V(11).B16 * 4}}, [x4], 64");
}

#[test]
fn st4_2533() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v9.H8 * 4}, [x18], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 06, 9F, 4C", "st4 {{v9.H8 * 4}}, [x18], 64");
}

#[test]
fn st4_2534() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(12).S4 * 4}, [x10], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 09, 9F, 4C", "st4 {{V(12).S4 * 4}}, [x10], 64");
}

#[test]
fn st4_2535() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v9.D2 * 4}, [x0], 64
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 0C, 9F, 4C", "st4 {{v9.D2 * 4}}, [x0], 64");
}

#[test]
fn st4_2536() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(11).B16 * 4}, [XSP(25)], X(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 03, 84, 4C", "st4 {{V(11).B16 * 4}}, [XSP(25)], X(4)");
}

#[test]
fn st4_2537() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v19.B8 * 4}, [x28], x8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 03, 88, 0C", "st4 {{v19.B8 * 4}}, [x28], x8");
}

#[test]
fn st4_2538() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v1.H8 * 4}, [XSP(16)], X(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 06, 97, 4C", "st4 {{v1.H8 * 4}}, [XSP(16)], X(23)");
}

#[test]
fn st4_2539() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v22.H4 * 4}, [x8], x4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 05, 84, 0C", "st4 {{v22.H4 * 4}}, [x8], x4");
}

#[test]
fn st4_2540() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(28).S4 * 4}, [x7], x23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 08, 97, 4C", "st4 {{V(28).S4 * 4}}, [x7], x23");
}

#[test]
fn st4_2541() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(23).S2 * 4}, [sp], x30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 0B, 9E, 0C", "st4 {{V(23).S2 * 4}}, [sp], x30");
}

#[test]
fn st4_2542() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(16).D2 * 4}, [x5], X(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 0C, 8A, 4C", "st4 {{V(16).D2 * 4}}, [x5], X(10)");
}

#[test]
fn st4_2543() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v5.B * 4}[14], [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 39, 20, 4D", "st4 {{v5.B * 4}}[14], [x11]");
}

#[test]
fn st4_2544() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v27.H * 4}[3], [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 7A, 20, 0D", "st4 {{v27.H * 4}}[3], [x23]");
}

#[test]
fn st4_2545() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v1.S * 4}[2], [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, A3, 20, 4D", "st4 {{v1.S * 4}}[2], [XSP(24)]");
}

#[test]
fn st4_2546() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(10).D * 4}[1], [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, A5, 20, 4D", "st4 {{V(10).D * 4}}[1], [x11]");
}

#[test]
fn st4_2547() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v17.B * 4}[11], [XSP(11)], 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 2D, BF, 4D", "st4 {{v17.B * 4}}[11], [XSP(11)], 4");
}

#[test]
fn st4_2548() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v18.B * 4}[4], [XSP(14)], X(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 31, A7, 0D", "st4 {{v18.B * 4}}[4], [XSP(14)], X(7)");
}

#[test]
fn st4_2549() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(26).H * 4}[6], [XSP(20)], 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 72, BF, 4D", "st4 {{V(26).H * 4}}[6], [XSP(20)], 8");
}

#[test]
fn st4_2550() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v6.H * 4}[6], [XSP(2)], X(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 70, A6, 4D", "st4 {{v6.H * 4}}[6], [XSP(2)], X(6)");
}

#[test]
fn st4_2551() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v16.S * 4}[1], [XSP(31)], 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, B3, BF, 0D", "st4 {{v16.S * 4}}[1], [XSP(31)], 16");
}

#[test]
fn st4_2552() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(7).S * 4}[1], [x8], x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, B1, A9, 0D", "st4 {{V(7).S * 4}}[1], [x8], x9");
}

#[test]
fn st4_2553() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {v10.D * 4}[1], [XSP(29)], 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, A7, BF, 4D", "st4 {{v10.D * 4}}[1], [XSP(29)], 32");
}

#[test]
fn st4_2554() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; st4 {V(13).D * 4}[1], [x29], x27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, A7, BB, 4D", "st4 {{V(13).D * 4}}[1], [x29], x27");
}

#[test]
fn stadd_2555() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stadd W(5), [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 00, 25, B8", "stadd W(5), [x2]");
}

#[test]
fn stadd_2556() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stadd X(30), [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 03, 3E, F8", "stadd X(30), [XSP(28)]");
}

#[test]
fn staddb_2557() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddb w17, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 02, 31, 38", "staddb w17, [x16]");
}

#[test]
fn staddh_2558() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddh w16, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 02, 30, 78", "staddh w16, [x16]");
}

#[test]
fn staddl_2559() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddl w9, [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 00, 69, B8", "staddl w9, [XSP(7)]");
}

#[test]
fn staddl_2560() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddl X(31), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 02, 7F, F8", "staddl X(31), [x21]");
}

#[test]
fn staddlb_2561() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddlb w20, [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 02, 74, 38", "staddlb w20, [x16]");
}

#[test]
fn staddlh_2562() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; staddlh W(1), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 01, 61, 78", "staddlh W(1), [XSP(14)]");
}

#[test]
fn stclr_2563() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclr w10, [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 13, 2A, B8", "stclr w10, [x27]");
}

#[test]
fn stclr_2564() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclr X(1), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 12, 21, F8", "stclr X(1), [XSP(16)]");
}

#[test]
fn stclrb_2565() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrb W(4), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 12, 24, 38", "stclrb W(4), [XSP(23)]");
}

#[test]
fn stclrh_2566() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrh W(8), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 11, 28, 78", "stclrh W(8), [x13]");
}

#[test]
fn stclrl_2567() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrl W(0), [XSP(15)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 11, 60, B8", "stclrl W(0), [XSP(15)]");
}

#[test]
fn stclrl_2568() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrl X(5), [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 13, 65, F8", "stclrl X(5), [XSP(29)]");
}

#[test]
fn stclrlb_2569() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrlb w7, [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 11, 67, 38", "stclrlb w7, [XSP(14)]");
}

#[test]
fn stclrlh_2570() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stclrlh W(9), [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 13, 69, 78", "stclrlh W(9), [XSP(24)]");
}

#[test]
fn steor_2571() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steor W(1), [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 22, 21, B8", "steor W(1), [x23]");
}

#[test]
fn steor_2572() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steor X(29), [XSP(20)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 22, 3D, F8", "steor X(29), [XSP(20)]");
}

#[test]
fn steorb_2573() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorb w17, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 23, 31, 38", "steorb w17, [x24]");
}

#[test]
fn steorh_2574() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorh w16, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 23, 30, 78", "steorh w16, [x30]");
}

#[test]
fn steorl_2575() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorl W(2), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 21, 62, B8", "steorl W(2), [XSP(14)]");
}

#[test]
fn steorl_2576() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorl x8, [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 22, 68, F8", "steorl x8, [XSP(23)]");
}

#[test]
fn steorlb_2577() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorlb W(9), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 21, 69, 38", "steorlb W(9), [x8]");
}

#[test]
fn steorlh_2578() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; steorlh w29, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 23, 7D, 78", "steorlh w29, [XSP(25)]");
}

#[test]
fn stllr_2579() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllr w20, [XSP(12)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 7D, 9F, 88", "stllr w20, [XSP(12)]");
}

#[test]
fn stllr_2580() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllr x18, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 7C, 9F, C8", "stllr x18, [x1]");
}

#[test]
fn stllrb_2581() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllrb W(3), [XSP(16)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 7E, 9F, 08", "stllrb W(3), [XSP(16)]");
}

#[test]
fn stllrh_2582() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stllrh W(8), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 7C, 9F, 48", "stllrh W(8), [x7]");
}

#[test]
fn stlr_2583() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlr W(16), [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, FE, 9F, 88", "stlr W(16), [XSP(22)]");
}

#[test]
fn stlr_2584() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlr X(22), [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, FE, 9F, C8", "stlr X(22), [XSP(22)]");
}

#[test]
fn stlrb_2585() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlrb W(16), [XSP(7)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, FC, 9F, 08", "stlrb W(16), [XSP(7)]");
}

#[test]
fn stlrh_2586() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlrh W(3), [XSP(1)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, FC, 9F, 48", "stlrh W(3), [XSP(1)]");
}

#[test]
fn stlur_2587() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlur wzr, [XSP(7)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 00, 00, 99", "stlur wzr, [XSP(7)  ]");
}

#[test]
fn stlur_2588() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlur x16, [XSP(3)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 00, 00, D9", "stlur x16, [XSP(3)  ]");
}

#[test]
fn stlurb_2589() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlurb w9, [XSP(16) , 77  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, D2, 04, 19", "stlurb w9, [XSP(16) , 77  ]");
}

#[test]
fn stlurh_2590() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlurh W(26), [x24 , -14  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 23, 1F, 59", "stlurh W(26), [x24 , -14  ]");
}

#[test]
fn stlxp_2591() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxp W(23), w15, W(26), [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, EB, 37, 88", "stlxp W(23), w15, W(26), [x30]");
}

#[test]
fn stlxp_2592() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxp W(19), X(11), X(6), [XSP(6)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 98, 33, C8", "stlxp W(19), X(11), X(6), [XSP(6)]");
}

#[test]
fn stlxr_2593() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxr W(11), W(4), [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, FE, 0B, 88", "stlxr W(11), W(4), [x20]");
}

#[test]
fn stlxr_2594() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxr W(27), x11, [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FF, 1B, C8", "stlxr W(27), x11, [XSP(30)]");
}

#[test]
fn stlxrb_2595() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxrb w13, w7, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, FE, 0D, 08", "stlxrb w13, w7, [XSP(19)]");
}

#[test]
fn stlxrh_2596() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stlxrh W(10), W(19), [x8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, FD, 0A, 48", "stlxrh W(10), W(19), [x8]");
}

#[test]
fn stnp_2597() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp S(31), s31, [x3  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 7C, 00, 2C", "stnp S(31), s31, [x3  ]");
}

#[test]
fn stnp_2598() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp d26, D(8), [x9 , -512  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 21, 20, 6C", "stnp d26, D(8), [x9 , -512  ]");
}

#[test]
fn stnp_2599() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp q20, Q(12), [x0 , -800  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 30, 27, AC", "stnp q20, Q(12), [x0 , -800  ]");
}

#[test]
fn stnp_2600() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp W(21), w10, [XSP(5) , -28  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, A8, 3C, 28", "stnp W(21), w10, [XSP(5) , -28  ]");
}

#[test]
fn stnp_2601() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stnp X(0), x2, [x17  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 0A, 00, A8", "stnp X(0), x2, [x17  ]");
}

#[test]
fn stp_2602() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp s30, S(5), [XSP(29)], -216
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 17, A5, 2C", "stp s30, S(5), [XSP(29)], -216");
}

#[test]
fn stp_2603() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp D(23), d7, [XSP(28)], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 1F, 83, 6C", "stp D(23), d7, [XSP(28)], 48");
}

#[test]
fn stp_2604() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp q5, q9, [x17], -1008
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, A6, A0, AC", "stp q5, q9, [x17], -1008");
}

#[test]
fn stp_2605() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp s15, S(5), [x7, -208]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 14, A6, 2D", "stp s15, S(5), [x7, -208]!");
}

#[test]
fn stp_2606() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp D(7), D(11), [x7, 224]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 2C, 8E, 6D", "stp D(7), D(11), [x7, 224]!");
}

#[test]
fn stp_2607() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp Q(10), Q(1), [XSP(17), 864]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 06, 9B, AD", "stp Q(10), Q(1), [XSP(17), 864]!");
}

#[test]
fn stp_2608() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp s25, s7, [XSP(23)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 1E, 00, 2D", "stp s25, s7, [XSP(23)  ]");
}

#[test]
fn stp_2609() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp D(31), D(24), [sp  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 63, 00, 6D", "stp D(31), D(24), [sp  ]");
}

#[test]
fn stp_2610() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp Q(24), Q(11), [XSP(16) , 704  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 2E, 16, AD", "stp Q(24), Q(11), [XSP(16) , 704  ]");
}

#[test]
fn stp_2611() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp w16, W(4), [x26], 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 13, 86, 28", "stp w16, W(4), [x26], 48");
}

#[test]
fn stp_2612() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp X(14), x17, [XSP(26)], -176
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 47, B5, A8", "stp X(14), x17, [XSP(26)], -176");
}

#[test]
fn stp_2613() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp W(14), W(28), [x6, -240]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 70, A2, 29", "stp W(14), W(28), [x6, -240]!");
}

#[test]
fn stp_2614() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp x12, X(21), [x19, 320]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 56, 94, A9", "stp x12, X(21), [x19, 320]!");
}

#[test]
fn stp_2615() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp w19, W(22), [XSP(25)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 5B, 00, 29", "stp w19, W(22), [XSP(25)  ]");
}

#[test]
fn stp_2616() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stp x29, x5, [XSP(24) , 352  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 17, 16, A9", "stp x29, x5, [XSP(24) , 352  ]");
}

#[test]
fn str_2617() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str b26, [XSP(13)], -242
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, E5, 10, 3C", "str b26, [XSP(13)], -242");
}

#[test]
fn str_2618() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str H(23), [x19], 117
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 56, 07, 7C", "str H(23), [x19], 117");
}

#[test]
fn str_2619() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s5, [XSP(22)], -171
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 56, 15, BC", "str s5, [XSP(22)], -171");
}

#[test]
fn str_2620() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str D(6), [XSP(15)], 86
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 65, 05, FC", "str D(6), [XSP(15)], 86");
}

#[test]
fn str_2621() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str q8, [x17], -237
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 36, 91, 3C", "str q8, [x17], -237");
}

#[test]
fn str_2622() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str B(29), [x23, 129]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 1E, 08, 3C", "str B(29), [x23, 129]!");
}

#[test]
fn str_2623() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str h29, [XSP(25), -41]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 7F, 1D, 7C", "str h29, [XSP(25), -41]!");
}

#[test]
fn str_2624() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s4, [x4, -129]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, FC, 17, BC", "str s4, [x4, -129]!");
}

#[test]
fn str_2625() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str d3, [XSP(25), 20]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 4F, 01, FC", "str d3, [XSP(25), 20]!");
}

#[test]
fn str_2626() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str q1, [x9, -106]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 6D, 99, 3C", "str q1, [x9, -106]!");
}

#[test]
fn str_2627() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str b14, [x8 , 460  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 31, 07, 3D", "str b14, [x8 , 460  ]");
}

#[test]
fn str_2628() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str H(15), [x0  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 7D", "str H(15), [x0  ]");
}

#[test]
fn str_2629() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s8, [x23 , 13240  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, BA, 33, BD", "str s8, [x23 , 13240  ]");
}

#[test]
fn str_2630() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str d14, [XSP(1) , 18624  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 60, 24, FD", "str d14, [XSP(1) , 18624  ]");
}

#[test]
fn str_2631() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str Q(22), [XSP(24)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 03, 80, 3D", "str Q(22), [XSP(24)  ]");
}

#[test]
fn str_2632() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str W(22), [XSP(19)], -7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 96, 1F, B8", "str W(22), [XSP(19)], -7");
}

#[test]
fn str_2633() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(11), [XSP(28)], -55
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 97, 1C, F8", "str X(11), [XSP(28)], -55");
}

#[test]
fn str_2634() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str w24, [x7, 30]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, EC, 01, B8", "str w24, [x7, 30]!");
}

#[test]
fn str_2635() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(14), [x17, -56]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 8E, 1C, F8", "str X(14), [x17, -56]!");
}

#[test]
fn str_2636() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str w27, [x17 , 15676  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 3E, 3D, B9", "str w27, [x17 , 15676  ]");
}

#[test]
fn str_2637() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(1), [XSP(19)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 02, 00, F9", "str X(1), [XSP(19)  ]");
}

#[test]
fn str_2638() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str b10, [x24, w12  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, DB, 2C, 3C", "str b10, [x24, w12  , SXTW  0   ]");
}

#[test]
fn str_2639() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str h26, [XSP(31), w6  , SXTW  1   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, DB, 26, 7C", "str h26, [XSP(31), w6  , SXTW  1   ]");
}

#[test]
fn str_2640() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str s13, [x9, x26  , SXTX  2   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, F9, 3A, BC", "str s13, [x9, x26  , SXTX  2   ]");
}

#[test]
fn str_2641() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str d27, [x25, X(3)  , LSL  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 6B, 23, FC", "str d27, [x25, X(3)  , LSL  0   ]");
}

#[test]
fn str_2642() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str q23, [XSP(22), X(10)   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 6A, AA, 3C", "str q23, [XSP(22), X(10)   ]");
}

#[test]
fn str_2643() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str W(27), [XSP(29), X(2)  , LSL  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 6B, 22, B8", "str W(27), [XSP(29), X(2)  , LSL  0   ]");
}

#[test]
fn str_2644() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; str X(19), [x8, x24   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 69, 38, F8", "str X(19), [x8, x24   ]");
}

#[test]
fn strb_2645() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb w8, [XSP(9)], -141
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 35, 17, 38", "strb w8, [XSP(9)], -141");
}

#[test]
fn strb_2646() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb w26, [x12, 244]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 4D, 0F, 38", "strb w26, [x12, 244]!");
}

#[test]
fn strb_2647() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb W(13), [XSP(4)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 00, 00, 39", "strb W(13), [XSP(4)  ]");
}

#[test]
fn strb_2648() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strb w9, [XSP(29), w19  , UXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 5B, 33, 38", "strb w9, [XSP(29), w19  , UXTW  0   ]");
}

#[test]
fn strh_2649() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(25), [x5], 165
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 54, 0A, 78", "strh W(25), [x5], 165");
}

#[test]
fn strh_2650() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(31), [x1, 2]!
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 2C, 00, 78", "strh W(31), [x1, 2]!");
}

#[test]
fn strh_2651() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(31), [x6  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 00, 00, 79", "strh W(31), [x6  ]");
}

#[test]
fn strh_2652() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; strh W(18), [x1, w20  , SXTW  0   ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, C8, 34, 78", "strh W(18), [x1, w20  , SXTW  0   ]");
}

#[test]
fn stset_2653() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stset W(7), [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 32, 27, B8", "stset W(7), [XSP(19)]");
}

#[test]
fn stset_2654() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stset X(18), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 32, 32, F8", "stset X(18), [x16]");
}

#[test]
fn stsetb_2655() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetb W(17), [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 32, 31, 38", "stsetb W(17), [XSP(18)]");
}

#[test]
fn stseth_2656() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stseth W(16), [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 30, 30, 78", "stseth W(16), [x1]");
}

#[test]
fn stsetl_2657() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetl w2, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 32, 62, B8", "stsetl w2, [XSP(22)]");
}

#[test]
fn stsetl_2658() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetl x14, [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 33, 6E, F8", "stsetl x14, [x26]");
}

#[test]
fn stsetlb_2659() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetlb w23, [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 33, 77, 38", "stsetlb w23, [XSP(29)]");
}

#[test]
fn stsetlh_2660() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsetlh w12, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 32, 6C, 78", "stsetlh w12, [x23]");
}

#[test]
fn stsmax_2661() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmax W(6), [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 43, 26, B8", "stsmax W(6), [XSP(28)]");
}

#[test]
fn stsmax_2662() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmax X(20), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 40, 34, F8", "stsmax X(20), [x7]");
}

#[test]
fn stsmaxb_2663() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxb W(20), [XSP(11)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 41, 34, 38", "stsmaxb W(20), [XSP(11)]");
}

#[test]
fn stsmaxh_2664() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxh w23, [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 40, 37, 78", "stsmaxh w23, [x4]");
}

#[test]
fn stsmaxl_2665() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxl W(13), [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 43, 6D, B8", "stsmaxl W(13), [XSP(27)]");
}

#[test]
fn stsmaxl_2666() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxl X(14), [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 40, 6E, F8", "stsmaxl X(14), [x5]");
}

#[test]
fn stsmaxlb_2667() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxlb W(12), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 41, 6C, 38", "stsmaxlb W(12), [XSP(14)]");
}

#[test]
fn stsmaxlh_2668() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmaxlh W(9), [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 40, 69, 78", "stsmaxlh W(9), [XSP(4)]");
}

#[test]
fn stsmin_2669() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmin W(28), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 50, 3C, B8", "stsmin W(28), [x7]");
}

#[test]
fn stsmin_2670() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsmin x30, [x0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 50, 3E, F8", "stsmin x30, [x0]");
}

#[test]
fn stsminb_2671() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminb w2, [x5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 50, 22, 38", "stsminb w2, [x5]");
}

#[test]
fn stsminh_2672() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminh w13, [XSP(11)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 51, 2D, 78", "stsminh w13, [XSP(11)]");
}

#[test]
fn stsminl_2673() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminl w25, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 52, 79, B8", "stsminl w25, [XSP(18)]");
}

#[test]
fn stsminl_2674() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminl X(13), [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 53, 6D, F8", "stsminl X(13), [XSP(24)]");
}

#[test]
fn stsminlb_2675() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminlb W(28), [x27]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 53, 7C, 38", "stsminlb W(28), [x27]");
}

#[test]
fn stsminlh_2676() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stsminlh w19, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 50, 73, 78", "stsminlh w19, [x1]");
}

#[test]
fn sttr_2677() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttr w10, [x7  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 08, 00, B8", "sttr w10, [x7  ]");
}

#[test]
fn sttr_2678() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttr X(9), [x29 , -91  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 5B, 1A, F8", "sttr X(9), [x29 , -91  ]");
}

#[test]
fn sttrb_2679() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttrb W(7), [x19  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 0A, 00, 38", "sttrb W(7), [x19  ]");
}

#[test]
fn sttrh_2680() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sttrh w24, [XSP(22)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 0A, 00, 78", "sttrh w24, [XSP(22)  ]");
}

#[test]
fn stumax_2681() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumax w18, [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 60, 32, B8", "stumax w18, [x7]");
}

#[test]
fn stumax_2682() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumax X(10), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 61, 2A, F8", "stumax X(10), [x13]");
}

#[test]
fn stumaxb_2683() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxb w7, [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 63, 27, 38", "stumaxb w7, [x29]");
}

#[test]
fn stumaxh_2684() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxh w27, [XSP(18)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 62, 3B, 78", "stumaxh w27, [XSP(18)]");
}

#[test]
fn stumaxl_2685() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxl W(17), [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 61, 71, B8", "stumaxl W(17), [x12]");
}

#[test]
fn stumaxl_2686() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxl x30, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 61, 7E, F8", "stumaxl x30, [x10]");
}

#[test]
fn stumaxlb_2687() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxlb w26, [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 60, 7A, 38", "stumaxlb w26, [x7]");
}

#[test]
fn stumaxlh_2688() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumaxlh w12, [XSP(8)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 61, 6C, 78", "stumaxlh w12, [XSP(8)]");
}

#[test]
fn stumin_2689() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumin W(11), [x17]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 72, 2B, B8", "stumin W(11), [x17]");
}

#[test]
fn stumin_2690() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stumin x18, [x23]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 72, 32, F8", "stumin x18, [x23]");
}

#[test]
fn stuminb_2691() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminb w16, [x20]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 72, 30, 38", "stuminb w16, [x20]");
}

#[test]
fn stuminh_2692() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminh W(28), [x4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 70, 3C, 78", "stuminh W(28), [x4]");
}

#[test]
fn stuminl_2693() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminl W(11), [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 70, 6B, B8", "stuminl W(11), [x1]");
}

#[test]
fn stuminl_2694() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminl X(7), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 70, 67, F8", "stuminl X(7), [x7]");
}

#[test]
fn stuminlb_2695() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminlb W(5), [x26]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 73, 65, 38", "stuminlb W(5), [x26]");
}

#[test]
fn stuminlh_2696() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stuminlh w19, [x25]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 73, 73, 78", "stuminlh w19, [x25]");
}

#[test]
fn stur_2697() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur b14, [XSP(12)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 01, 00, 3C", "stur b14, [XSP(12)  ]");
}

#[test]
fn stur_2698() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur h17, [XSP(17) , 30  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, E2, 01, 7C", "stur h17, [XSP(17) , 30  ]");
}

#[test]
fn stur_2699() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur s1, [x15  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 01, 00, BC", "stur s1, [x15  ]");
}

#[test]
fn stur_2700() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur d21, [XSP(7)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 00, 00, FC", "stur d21, [XSP(7)  ]");
}

#[test]
fn stur_2701() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur q24, [x11 , 37  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 51, 82, 3C", "stur q24, [x11 , 37  ]");
}

#[test]
fn stur_2702() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur W(27), [x20 , 130  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 22, 08, B8", "stur W(27), [x20 , 130  ]");
}

#[test]
fn stur_2703() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stur x3, [x4  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 00, 00, F8", "stur x3, [x4  ]");
}

#[test]
fn sturb_2704() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sturb w25, [x20  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 02, 00, 38", "sturb w25, [x20  ]");
}

#[test]
fn sturh_2705() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sturh W(22), [XSP(20)  ]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 02, 00, 78", "sturh W(22), [XSP(20)  ]");
}

#[test]
fn stxp_2706() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxp W(25), W(18), W(21), [x18]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 56, 39, 88", "stxp W(25), W(18), W(21), [x18]");
}

#[test]
fn stxp_2707() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxp W(17), x7, X(19), [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 4D, 31, C8", "stxp W(17), x7, X(19), [x11]");
}

#[test]
fn stxr_2708() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxr w15, w4, [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 7F, 0F, 88", "stxr w15, w4, [x24]");
}

#[test]
fn stxr_2709() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxr w29, X(1), [XSP(23)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 7E, 1D, C8", "stxr w29, X(1), [XSP(23)]");
}

#[test]
fn stxrb_2710() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxrb w7, w24, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 7D, 07, 08", "stxrb w7, w24, [x10]");
}

#[test]
fn stxrh_2711() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; stxrh W(16), W(6), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 7E, 10, 48", "stxrh W(16), W(6), [x16]");
}

#[test]
fn sub_2712() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub w5, w21, w7 , LSR 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 06, 47, 4B", "sub w5, w21, w7 , LSR 1");
}

#[test]
fn sub_2713() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub X(17), x28, x22 , LSL 31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 7F, 16, CB", "sub X(17), x28, x22 , LSL 31");
}

#[test]
fn sub_2714() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub WSP(5), w19, w12 , SXTW 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, CE, 2C, 4B", "sub WSP(5), w19, w12 , SXTW 3");
}

#[test]
fn sub_2715() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub XSP(23), XSP(29), W(0) , SXTB  0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 83, 20, CB", "sub XSP(23), XSP(29), W(0) , SXTB  0");
}

#[test]
fn sub_2716() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub XSP(13), XSP(26), x19 , SXTX 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, E3, 33, CB", "sub XSP(13), XSP(26), x19 , SXTX 0");
}

#[test]
fn sub_2717() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub w29, WSP(5), 3504
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, C0, 36, 51", "sub w29, WSP(5), 3504");
}

#[test]
fn sub_2718() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub XSP(27), XSP(31), 1665
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 07, 1A, D1", "sub XSP(27), XSP(31), 1665");
}

#[test]
fn sub_2719() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub D(0), d5, D(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 84, FD, 7E", "sub D(0), d5, D(29)");
}

#[test]
fn sub_2720() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub V(26).B16, V(4).B16, V(7).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 84, 27, 6E", "sub V(26).B16, V(4).B16, V(7).B16");
}

#[test]
fn sub_2721() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v1.B8, v23.B8, v10.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 86, 2A, 2E", "sub v1.B8, v23.B8, v10.B8");
}

#[test]
fn sub_2722() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub V(13).H8, V(19).H8, v18.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 86, 72, 6E", "sub V(13).H8, V(19).H8, v18.H8");
}

#[test]
fn sub_2723() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v9.H4, v8.H4, V(1).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 85, 61, 2E", "sub v9.H4, v8.H4, V(1).H4");
}

#[test]
fn sub_2724() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v9.S4, v27.S4, V(10).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 87, AA, 6E", "sub v9.S4, v27.S4, V(10).S4");
}

#[test]
fn sub_2725() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v20.S2, V(9).S2, v25.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 85, B9, 2E", "sub v20.S2, V(9).S2, v25.S2");
}

#[test]
fn sub_2726() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sub v3.D2, V(5).D2, v24.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 84, F8, 6E", "sub v3.D2, V(5).D2, v24.D2");
}

#[test]
fn subhn_2727() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn v5.B8, V(16).H8, V(27).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 62, 3B, 0E", "subhn v5.B8, V(16).H8, V(27).H8");
}

#[test]
fn subhn_2728() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn V(9).H4, v4.S4, v19.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 60, 73, 0E", "subhn V(9).H4, v4.S4, v19.S4");
}

#[test]
fn subhn_2729() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn V(1).S2, v31.D2, v3.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 63, A3, 0E", "subhn V(1).S2, v31.D2, v3.D2");
}

#[test]
fn subhn2_2730() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn2 V(24).B16, v14.H8, V(4).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 61, 24, 4E", "subhn2 V(24).B16, v14.H8, V(4).H8");
}

#[test]
fn subhn2_2731() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn2 V(8).H8, v11.S4, V(25).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 61, 79, 4E", "subhn2 V(8).H8, v11.S4, V(25).S4");
}

#[test]
fn subhn2_2732() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subhn2 v8.S4, v19.D2, V(29).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 62, BD, 4E", "subhn2 v8.S4, v19.D2, V(29).D2");
}

#[test]
fn subs_2733() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs W(16), W(0), w5 , LSL 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 70, 05, 6B", "subs W(16), W(0), w5 , LSL 28");
}

#[test]
fn subs_2734() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs X(16), x24, x25 , LSL 58
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, EB, 19, EB", "subs X(16), x24, x25 , LSL 58");
}

#[test]
fn subs_2735() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs W(20), w4, W(29) , LSL 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 08, 1D, 6B", "subs W(20), w4, W(29) , LSL 2");
}

#[test]
fn subs_2736() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs x20, x14, w30 , UXTH  3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 2D, 3E, EB", "subs x20, x14, w30 , UXTH  3");
}

#[test]
fn subs_2737() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs x25, XSP(29), x26 , LSL 3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 0F, 1A, EB", "subs x25, XSP(29), x26 , LSL 3");
}

#[test]
fn subs_2738() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs w11, w9, 2401 , LSL 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 85, 65, 71", "subs w11, w9, 2401 , LSL 12");
}

#[test]
fn subs_2739() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; subs X(30), x27, 2037 , LSL 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, D7, 5F, F1", "subs X(30), x27, 2037 , LSL 12");
}

#[test]
fn suqadd_2740() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd B(23), B(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 3A, 20, 5E", "suqadd B(23), B(16)");
}

#[test]
fn suqadd_2741() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd h8, H(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 38, 60, 5E", "suqadd h8, H(7)");
}

#[test]
fn suqadd_2742() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd S(11), S(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 3B, A0, 5E", "suqadd S(11), S(30)");
}

#[test]
fn suqadd_2743() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd D(12), d16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 3A, E0, 5E", "suqadd D(12), d16");
}

#[test]
fn suqadd_2744() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(21).B16, v28.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 3B, 20, 4E", "suqadd V(21).B16, v28.B16");
}

#[test]
fn suqadd_2745() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(22).B8, V(14).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 39, 20, 0E", "suqadd V(22).B8, V(14).B8");
}

#[test]
fn suqadd_2746() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd v2.H8, V(7).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 38, 60, 4E", "suqadd v2.H8, V(7).H8");
}

#[test]
fn suqadd_2747() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd v2.H4, v13.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 39, 60, 0E", "suqadd v2.H4, v13.H4");
}

#[test]
fn suqadd_2748() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(23).S4, V(11).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 39, A0, 4E", "suqadd V(23).S4, V(11).S4");
}

#[test]
fn suqadd_2749() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(4).S2, V(14).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 39, A0, 0E", "suqadd V(4).S2, V(14).S2");
}

#[test]
fn suqadd_2750() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; suqadd V(6).D2, V(15).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 39, E0, 4E", "suqadd V(6).D2, V(15).D2");
}

#[test]
fn svc_2751() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; svc 25171
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 4A, 0C, D4", "svc 25171");
}

#[test]
fn swp_2752() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swp W(2), W(13), [XSP(2)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 80, 22, B8", "swp W(2), W(13), [XSP(2)]");
}

#[test]
fn swp_2753() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swp X(18), X(8), [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 82, 32, F8", "swp X(18), X(8), [x21]");
}

#[test]
fn swpa_2754() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpa W(10), w18, [x29]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 83, AA, B8", "swpa W(10), w18, [x29]");
}

#[test]
fn swpa_2755() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpa X(27), x17, [XSP(29)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 83, BB, F8", "swpa X(27), x17, [XSP(29)]");
}

#[test]
fn swpab_2756() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpab W(15), w26, [XSP(5)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 80, AF, 38", "swpab W(15), w26, [XSP(5)]");
}

#[test]
fn swpah_2757() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpah w16, W(14), [x24]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 83, B0, 78", "swpah w16, W(14), [x24]");
}

#[test]
fn swpal_2758() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpal wzr, W(7), [x16]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 82, FF, B8", "swpal wzr, W(7), [x16]");
}

#[test]
fn swpal_2759() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpal X(12), X(4), [XSP(9)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 81, EC, F8", "swpal X(12), X(4), [XSP(9)]");
}

#[test]
fn swpalb_2760() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpalb W(17), w14, [x19]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 82, F1, 38", "swpalb W(17), w14, [x19]");
}

#[test]
fn swpalh_2761() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpalh W(12), W(18), [XSP(14)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 81, EC, 78", "swpalh W(12), W(18), [XSP(14)]");
}

#[test]
fn swpb_2762() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpb W(21), w7, [x9]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 81, 35, 38", "swpb W(21), w7, [x9]");
}

#[test]
fn swph_2763() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swph w9, w12, [x10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 81, 29, 78", "swph w9, w12, [x10]");
}

#[test]
fn swpl_2764() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpl W(18), W(9), [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 83, 72, B8", "swpl W(18), W(9), [XSP(28)]");
}

#[test]
fn swpl_2765() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swpl x23, x15, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, 77, F8", "swpl x23, x15, [XSP(25)]");
}

#[test]
fn swplb_2766() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swplb w16, W(15), [x7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 80, 70, 38", "swplb w16, W(15), [x7]");
}

#[test]
fn swplh_2767() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; swplh w16, W(6), [sp]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 83, 70, 78", "swplh w16, W(6), [sp]");
}

#[test]
fn sxtb_2768() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtb W(27), w6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 1C, 00, 13", "sxtb W(27), w6");
}

#[test]
fn sxtb_2769() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtb X(31), w5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 1C, 40, 93", "sxtb X(31), w5");
}

#[test]
fn sxth_2770() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxth w19, w6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3C, 00, 13", "sxth w19, w6");
}

#[test]
fn sxth_2771() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxth x26, W(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 3E, 40, 93", "sxth x26, W(18)");
}

#[test]
fn sxtl_2772() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl v4.H8, v11.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, A5, 08, 0F", "sxtl v4.H8, v11.B8");
}

#[test]
fn sxtl_2773() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl V(2).S4, V(19).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, A6, 10, 0F", "sxtl V(2).S4, V(19).H4");
}

#[test]
fn sxtl_2774() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl v9.D2, V(21).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, A6, 20, 0F", "sxtl v9.D2, V(21).S2");
}

#[test]
fn sxtl2_2775() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl2 v28.H8, V(15).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, A5, 08, 4F", "sxtl2 v28.H8, V(15).B16");
}

#[test]
fn sxtl2_2776() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl2 v23.S4, V(31).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, A7, 10, 4F", "sxtl2 v23.S4, V(31).H8");
}

#[test]
fn sxtl2_2777() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtl2 V(2).D2, v29.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, A7, 20, 4F", "sxtl2 V(2).D2, v29.S4");
}

#[test]
fn sxtw_2778() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sxtw X(17), W(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 7D, 40, 93", "sxtw X(17), W(15)");
}

#[test]
fn sys_2779() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sys 1, c9, c8, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 98, 09, D5", "sys 1, c9, c8, 4");
}

#[test]
fn sysl_2780() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; sysl X(9), 4, c7, c12, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 7C, 2C, D5", "sysl X(9), 4, c7, c12, 0");
}

#[test]
fn tbl_2781() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v20.B16, {V(18).B16 * 2}, v16.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 22, 10, 4E", "tbl v20.B16, {{V(18).B16 * 2}}, v16.B16");
}

#[test]
fn tbl_2782() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(17).B8, {v0.B16 * 2}, v26.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 20, 1A, 0E", "tbl V(17).B8, {{v0.B16 * 2}}, v26.B8");
}

#[test]
fn tbl_2783() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(25).B16, {v7.B16 * 3}, v10.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 40, 0A, 4E", "tbl V(25).B16, {{v7.B16 * 3}}, v10.B16");
}

#[test]
fn tbl_2784() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v27.B8, {V(24).B16 * 3}, V(23).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 43, 17, 0E", "tbl v27.B8, {{V(24).B16 * 3}}, V(23).B8");
}

#[test]
fn tbl_2785() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(21).B16, {V(31).B16 * 4}, v26.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 63, 1A, 4E", "tbl V(21).B16, {{V(31).B16 * 4}}, v26.B16");
}

#[test]
fn tbl_2786() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl V(18).B8, {v25.B16 * 4}, v24.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 63, 18, 0E", "tbl V(18).B8, {{v25.B16 * 4}}, v24.B8");
}

#[test]
fn tbl_2787() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v5.B16, {v26.B16 * 1}, v6.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 03, 06, 4E", "tbl v5.B16, {{v26.B16 * 1}}, v6.B16");
}

#[test]
fn tbl_2788() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbl v4.B8, {v0.B16 * 1}, V(7).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 00, 07, 0E", "tbl v4.B8, {{v0.B16 * 1}}, V(7).B8");
}

#[test]
fn tbnz_2789() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbnz W(23), 26, 10524
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 48, D1, 37", "tbnz W(23), 26, 10524");
}

#[test]
fn tbnz_2790() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbnz x24, 46, 728
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 16, 70, B7", "tbnz x24, 46, 728");
}

#[test]
fn tbx_2791() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx V(7).B16, {V(3).B16 * 2}, v5.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 30, 05, 4E", "tbx V(7).B16, {{V(3).B16 * 2}}, v5.B16");
}

#[test]
fn tbx_2792() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v19.B8, {v18.B16 * 2}, v22.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 32, 16, 0E", "tbx v19.B8, {{v18.B16 * 2}}, v22.B8");
}

#[test]
fn tbx_2793() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v14.B16, {V(31).B16 * 3}, V(14).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 53, 0E, 4E", "tbx v14.B16, {{V(31).B16 * 3}}, V(14).B16");
}

#[test]
fn tbx_2794() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v17.B8, {v31.B16 * 3}, V(2).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 53, 02, 0E", "tbx v17.B8, {{v31.B16 * 3}}, V(2).B8");
}

#[test]
fn tbx_2795() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx V(4).B16, {v21.B16 * 4}, v11.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 72, 0B, 4E", "tbx V(4).B16, {{v21.B16 * 4}}, v11.B16");
}

#[test]
fn tbx_2796() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v1.B8, {v19.B16 * 4}, V(30).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 72, 1E, 0E", "tbx v1.B8, {{v19.B16 * 4}}, V(30).B8");
}

#[test]
fn tbx_2797() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v24.B16, {V(16).B16 * 1}, V(12).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 12, 0C, 4E", "tbx v24.B16, {{V(16).B16 * 1}}, V(12).B16");
}

#[test]
fn tbx_2798() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbx v2.B8, {v24.B16 * 1}, V(28).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 13, 1C, 0E", "tbx v2.B8, {{v24.B16 * 1}}, V(28).B8");
}

#[test]
fn tbz_2799() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; tbz w30, 19, 11948
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 75, 99, 36", "tbz w30, 19, 11948");
}
