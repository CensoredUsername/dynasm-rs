
#[test]
fn tbz_5600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tbz w16, 31, 2156
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 43, F8, 36", "tbz w16, 31, 2156");
}

#[test]
fn tbz_5601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tbz x27, 52, -20380
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 83, A5, B6", "tbz x27, 52, -20380");
}

#[test]
fn tbz_5602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tbz X(8), 7, -19164
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, A9, 3D, 36", "tbz X(8), 7, -19164");
}

#[test]
fn trn1_5603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v16.B16, v11.B16, v25.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 29, 19, 4E", "trn1 v16.B16, v11.B16, v25.B16");
}

#[test]
fn trn1_5604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v10.B16, v1.B16, v0.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 28, 00, 4E", "trn1 v10.B16, v1.B16, v0.B16");
}

#[test]
fn trn1_5605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v3.B8, v27.B8, v9.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 2B, 09, 0E", "trn1 v3.B8, v27.B8, v9.B8");
}

#[test]
fn trn1_5606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(15).B8, V(8).B8, V(0).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 29, 00, 0E", "trn1 V(15).B8, V(8).B8, V(0).B8");
}

#[test]
fn trn1_5607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(5).H8, v14.H8, V(9).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 29, 49, 4E", "trn1 V(5).H8, v14.H8, V(9).H8");
}

#[test]
fn trn1_5608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v29.H8, V(1).H8, v9.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 28, 49, 4E", "trn1 v29.H8, V(1).H8, v9.H8");
}

#[test]
fn trn1_5609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v3.H4, V(18).H4, v16.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 2A, 50, 0E", "trn1 v3.H4, V(18).H4, v16.H4");
}

#[test]
fn trn1_5610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v17.H4, V(23).H4, v8.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 2A, 48, 0E", "trn1 v17.H4, V(23).H4, v8.H4");
}

#[test]
fn trn1_5611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v2.S4, v23.S4, v6.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 2A, 86, 4E", "trn1 v2.S4, v23.S4, v6.S4");
}

#[test]
fn trn1_5612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v4.S4, v21.S4, V(28).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 2A, 9C, 4E", "trn1 v4.S4, v21.S4, V(28).S4");
}

#[test]
fn trn1_5613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(19).S2, v9.S2, V(31).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 29, 9F, 0E", "trn1 V(19).S2, v9.S2, V(31).S2");
}

#[test]
fn trn1_5614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(6).S2, v10.S2, v22.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 29, 96, 0E", "trn1 V(6).S2, v10.S2, v22.S2");
}

#[test]
fn trn1_5615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 v24.D2, v1.D2, v20.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 28, D4, 4E", "trn1 v24.D2, v1.D2, v20.D2");
}

#[test]
fn trn1_5616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn1 V(6).D2, v25.D2, V(22).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 2B, D6, 4E", "trn1 V(6).D2, v25.D2, V(22).D2");
}

#[test]
fn trn2_5617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v30.B16, v21.B16, v23.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 6A, 17, 4E", "trn2 v30.B16, v21.B16, v23.B16");
}

#[test]
fn trn2_5618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(1).B16, V(31).B16, V(18).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 6B, 12, 4E", "trn2 V(1).B16, V(31).B16, V(18).B16");
}

#[test]
fn trn2_5619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v6.B8, v10.B8, v10.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 69, 0A, 0E", "trn2 v6.B8, v10.B8, v10.B8");
}

#[test]
fn trn2_5620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(12).B8, V(12).B8, v29.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 69, 1D, 0E", "trn2 V(12).B8, V(12).B8, v29.B8");
}

#[test]
fn trn2_5621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v3.H8, V(0).H8, V(2).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 68, 42, 4E", "trn2 v3.H8, V(0).H8, V(2).H8");
}

#[test]
fn trn2_5622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v31.H8, V(17).H8, V(13).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 6A, 4D, 4E", "trn2 v31.H8, V(17).H8, V(13).H8");
}

#[test]
fn trn2_5623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(22).H4, V(30).H4, v16.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 6B, 50, 0E", "trn2 V(22).H4, V(30).H4, v16.H4");
}

#[test]
fn trn2_5624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v8.H4, v30.H4, V(2).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 6B, 42, 0E", "trn2 v8.H4, v30.H4, V(2).H4");
}

#[test]
fn trn2_5625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v23.S4, v8.S4, V(5).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 69, 85, 4E", "trn2 v23.S4, v8.S4, V(5).S4");
}

#[test]
fn trn2_5626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(30).S4, v18.S4, v27.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 6A, 9B, 4E", "trn2 V(30).S4, v18.S4, v27.S4");
}

#[test]
fn trn2_5627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v2.S2, V(9).S2, V(19).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 69, 93, 0E", "trn2 v2.S2, V(9).S2, V(19).S2");
}

#[test]
fn trn2_5628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 v30.S2, V(25).S2, v17.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 6B, 91, 0E", "trn2 v30.S2, V(25).S2, v17.S2");
}

#[test]
fn trn2_5629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(21).D2, v2.D2, v29.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 68, DD, 4E", "trn2 V(21).D2, v2.D2, v29.D2");
}

#[test]
fn trn2_5630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; trn2 V(4).D2, v0.D2, V(21).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 68, D5, 4E", "trn2 V(4).D2, v0.D2, V(21).D2");
}

#[test]
fn tst_5631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst w8, 1431655765
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, F1, 00, 72", "tst w8, 1431655765");
}

#[test]
fn tst_5632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst w2, 32506352
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 90, 0C, 72", "tst w2, 32506352");
}

#[test]
fn tst_5633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst x4, 16176895226370056319
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, A4, 03, F2", "tst x4, 16176895226370056319");
}

#[test]
fn tst_5634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst X(4), 2459565876494606882
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, E0, 03, F2", "tst X(4), 2459565876494606882");
}

#[test]
fn tst_5635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst W(28), w0 , LSR 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 07, 40, 6A", "tst W(28), w0 , LSR 1");
}

#[test]
fn tst_5636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst W(8), w7 , ROR 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 49, C7, 6A", "tst W(8), w7 , ROR 18");
}

#[test]
fn tst_5637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst X(12), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 01, 04, EA", "tst X(12), X(4)");
}

#[test]
fn tst_5638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; tst x19, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 02, 02, EA", "tst x19, X(2)");
}

#[test]
fn uaba_5639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v4.B16, v2.B16, v4.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 7C, 24, 6E", "uaba v4.B16, v2.B16, v4.B16");
}

#[test]
fn uaba_5640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v18.B16, V(29).B16, v16.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 7F, 30, 6E", "uaba v18.B16, V(29).B16, v16.B16");
}

#[test]
fn uaba_5641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba V(27).B8, v24.B8, v26.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 7F, 3A, 2E", "uaba V(27).B8, v24.B8, v26.B8");
}

#[test]
fn uaba_5642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v2.B8, v28.B8, v15.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 7F, 2F, 2E", "uaba v2.B8, v28.B8, v15.B8");
}

#[test]
fn uaba_5643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v0.H8, V(30).H8, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 7F, 7D, 6E", "uaba v0.H8, V(30).H8, v29.H8");
}

#[test]
fn uaba_5644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v6.H8, V(11).H8, v0.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 7D, 60, 6E", "uaba v6.H8, V(11).H8, v0.H8");
}

#[test]
fn uaba_5645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v29.H4, V(7).H4, v13.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 7C, 6D, 2E", "uaba v29.H4, V(7).H4, v13.H4");
}

#[test]
fn uaba_5646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba V(5).H4, V(0).H4, V(24).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 7C, 78, 2E", "uaba V(5).H4, V(0).H4, V(24).H4");
}

#[test]
fn uaba_5647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v7.S4, v16.S4, v13.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 7E, AD, 6E", "uaba v7.S4, v16.S4, v13.S4");
}

#[test]
fn uaba_5648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba V(21).S4, V(25).S4, V(9).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 7F, A9, 6E", "uaba V(21).S4, V(25).S4, V(9).S4");
}

#[test]
fn uaba_5649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v30.S2, V(17).S2, v31.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 7E, BF, 2E", "uaba v30.S2, V(17).S2, v31.S2");
}

#[test]
fn uaba_5650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaba v25.S2, V(18).S2, v16.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 7E, B0, 2E", "uaba v25.S2, V(18).S2, v16.S2");
}

#[test]
fn uabal_5651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal V(11).H8, V(3).B8, v3.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 50, 23, 2E", "uabal V(11).H8, V(3).B8, v3.B8");
}

#[test]
fn uabal_5652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal V(4).H8, V(17).B8, v26.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 52, 3A, 2E", "uabal V(4).H8, V(17).B8, v26.B8");
}

#[test]
fn uabal_5653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal v27.S4, V(1).H4, v22.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 50, 76, 2E", "uabal v27.S4, V(1).H4, v22.H4");
}

#[test]
fn uabal_5654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal v29.S4, V(3).H4, V(16).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 50, 70, 2E", "uabal v29.S4, V(3).H4, V(16).H4");
}

#[test]
fn uabal_5655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal v2.D2, v2.S2, v28.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 50, BC, 2E", "uabal v2.D2, v2.S2, v28.S2");
}

#[test]
fn uabal_5656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal V(30).D2, V(0).S2, V(27).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 50, BB, 2E", "uabal V(30).D2, V(0).S2, V(27).S2");
}

#[test]
fn uabal2_5657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 V(26).H8, v13.B16, v12.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 51, 2C, 6E", "uabal2 V(26).H8, v13.B16, v12.B16");
}

#[test]
fn uabal2_5658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 V(29).H8, V(16).B16, V(20).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 52, 34, 6E", "uabal2 V(29).H8, V(16).B16, V(20).B16");
}

#[test]
fn uabal2_5659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 V(11).S4, v3.H8, V(17).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 50, 71, 6E", "uabal2 V(11).S4, v3.H8, V(17).H8");
}

#[test]
fn uabal2_5660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 v16.S4, v10.H8, v17.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 51, 71, 6E", "uabal2 v16.S4, v10.H8, v17.H8");
}

#[test]
fn uabal2_5661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 v31.D2, v13.S4, V(22).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 51, B6, 6E", "uabal2 v31.D2, v13.S4, V(22).S4");
}

#[test]
fn uabal2_5662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabal2 v4.D2, v26.S4, V(28).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 53, BC, 6E", "uabal2 v4.D2, v26.S4, V(28).S4");
}

#[test]
fn uabd_5663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(21).B16, V(8).B16, V(21).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 75, 35, 6E", "uabd V(21).B16, V(8).B16, V(21).B16");
}

#[test]
fn uabd_5664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v15.B16, v15.B16, V(18).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 75, 32, 6E", "uabd v15.B16, v15.B16, V(18).B16");
}

#[test]
fn uabd_5665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(26).B8, v26.B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 77, 27, 2E", "uabd V(26).B8, v26.B8, V(7).B8");
}

#[test]
fn uabd_5666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v11.B8, v20.B8, v20.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 76, 34, 2E", "uabd v11.B8, v20.B8, v20.B8");
}

#[test]
fn uabd_5667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v11.H8, v30.H8, V(18).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 77, 72, 6E", "uabd v11.H8, v30.H8, V(18).H8");
}

#[test]
fn uabd_5668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v23.H8, v26.H8, V(22).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 77, 76, 6E", "uabd v23.H8, v26.H8, V(22).H8");
}

#[test]
fn uabd_5669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(18).H4, V(4).H4, v3.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 74, 63, 2E", "uabd V(18).H4, V(4).H4, v3.H4");
}

#[test]
fn uabd_5670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v2.H4, V(17).H4, V(7).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 76, 67, 2E", "uabd v2.H4, V(17).H4, V(7).H4");
}

#[test]
fn uabd_5671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(3).S4, V(19).S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 76, AB, 6E", "uabd V(3).S4, V(19).S4, v11.S4");
}

#[test]
fn uabd_5672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd v5.S4, V(23).S4, V(21).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 76, B5, 6E", "uabd v5.S4, V(23).S4, V(21).S4");
}

#[test]
fn uabd_5673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(19).S2, V(2).S2, V(12).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, AC, 2E", "uabd V(19).S2, V(2).S2, V(12).S2");
}

#[test]
fn uabd_5674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabd V(13).S2, v7.S2, V(7).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 74, A7, 2E", "uabd V(13).S2, v7.S2, V(7).S2");
}

#[test]
fn uabdl_5675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v18.H8, V(28).B8, v30.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 73, 3E, 2E", "uabdl v18.H8, V(28).B8, v30.B8");
}

#[test]
fn uabdl_5676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v25.H8, V(13).B8, V(11).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 71, 2B, 2E", "uabdl v25.H8, V(13).B8, V(11).B8");
}

#[test]
fn uabdl_5677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v22.S4, V(20).H4, v29.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 72, 7D, 2E", "uabdl v22.S4, V(20).H4, v29.H4");
}

#[test]
fn uabdl_5678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl V(3).S4, v31.H4, v16.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 73, 70, 2E", "uabdl V(3).S4, v31.H4, v16.H4");
}

#[test]
fn uabdl_5679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v8.D2, V(15).S2, V(23).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 71, B7, 2E", "uabdl v8.D2, V(15).S2, V(23).S2");
}

#[test]
fn uabdl_5680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl v23.D2, V(27).S2, v14.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 73, AE, 2E", "uabdl v23.D2, V(27).S2, v14.S2");
}

#[test]
fn uabdl2_5681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 V(17).H8, v5.B16, v20.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 70, 34, 6E", "uabdl2 V(17).H8, v5.B16, v20.B16");
}

#[test]
fn uabdl2_5682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 V(22).H8, V(13).B16, v8.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 71, 28, 6E", "uabdl2 V(22).H8, V(13).B16, v8.B16");
}

#[test]
fn uabdl2_5683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 V(18).S4, V(14).H8, V(23).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 71, 77, 6E", "uabdl2 V(18).S4, V(14).H8, V(23).H8");
}

#[test]
fn uabdl2_5684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 V(7).S4, V(4).H8, V(31).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 70, 7F, 6E", "uabdl2 V(7).S4, V(4).H8, V(31).H8");
}

#[test]
fn uabdl2_5685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 v20.D2, v6.S4, V(19).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 70, B3, 6E", "uabdl2 v20.D2, v6.S4, V(19).S4");
}

#[test]
fn uabdl2_5686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uabdl2 v25.D2, V(24).S4, v12.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 73, AC, 6E", "uabdl2 v25.D2, V(24).S4, v12.S4");
}

#[test]
fn uadalp_5687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp v31.H8, V(27).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 6B, 20, 6E", "uadalp v31.H8, V(27).B16");
}

#[test]
fn uadalp_5688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(15).H8, v28.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 6B, 20, 6E", "uadalp V(15).H8, v28.B16");
}

#[test]
fn uadalp_5689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp v18.H4, V(8).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 69, 20, 2E", "uadalp v18.H4, V(8).B8");
}

#[test]
fn uadalp_5690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(21).H4, v25.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 6B, 20, 2E", "uadalp V(21).H4, v25.B8");
}

#[test]
fn uadalp_5691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(25).S4, V(26).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 6B, 60, 6E", "uadalp V(25).S4, V(26).H8");
}

#[test]
fn uadalp_5692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(13).S4, V(20).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 6A, 60, 6E", "uadalp V(13).S4, V(20).H8");
}

#[test]
fn uadalp_5693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(6).S2, V(3).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 68, 60, 2E", "uadalp V(6).S2, V(3).H4");
}

#[test]
fn uadalp_5694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp v13.S2, V(18).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 6A, 60, 2E", "uadalp v13.S2, V(18).H4");
}

#[test]
fn uadalp_5695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(8).D2, V(15).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 69, A0, 6E", "uadalp V(8).D2, V(15).S4");
}

#[test]
fn uadalp_5696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(6).D2, v20.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 6A, A0, 6E", "uadalp V(6).D2, v20.S4");
}

#[test]
fn uadalp_5697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(9).D1, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 68, A0, 2E", "uadalp V(9).D1, v5.S2");
}

#[test]
fn uadalp_5698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uadalp V(4).D1, v9.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 69, A0, 2E", "uadalp V(4).D1, v9.S2");
}

#[test]
fn uaddl_5699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl v28.H8, V(20).B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 02, 27, 2E", "uaddl v28.H8, V(20).B8, V(7).B8");
}

#[test]
fn uaddl_5700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl V(29).H8, V(10).B8, v20.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 01, 34, 2E", "uaddl V(29).H8, V(10).B8, v20.B8");
}

#[test]
fn uaddl_5701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl v2.S4, V(0).H4, v28.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 00, 7C, 2E", "uaddl v2.S4, V(0).H4, v28.H4");
}

#[test]
fn uaddl_5702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl V(5).S4, V(10).H4, v22.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 01, 76, 2E", "uaddl V(5).S4, V(10).H4, v22.H4");
}

#[test]
fn uaddl_5703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl V(1).D2, V(8).S2, v3.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 01, A3, 2E", "uaddl V(1).D2, V(8).S2, v3.S2");
}

#[test]
fn uaddl_5704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl v6.D2, v19.S2, V(5).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 02, A5, 2E", "uaddl v6.D2, v19.S2, V(5).S2");
}

#[test]
fn uaddl2_5705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 V(16).H8, V(24).B16, v11.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 03, 2B, 6E", "uaddl2 V(16).H8, V(24).B16, v11.B16");
}

#[test]
fn uaddl2_5706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 v27.H8, V(7).B16, v4.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 00, 24, 6E", "uaddl2 v27.H8, V(7).B16, v4.B16");
}

#[test]
fn uaddl2_5707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 v18.S4, v20.H8, V(15).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 02, 6F, 6E", "uaddl2 v18.S4, v20.H8, V(15).H8");
}

#[test]
fn uaddl2_5708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 v17.S4, V(10).H8, V(28).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 01, 7C, 6E", "uaddl2 v17.S4, V(10).H8, V(28).H8");
}

#[test]
fn uaddl2_5709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 v16.D2, V(30).S4, V(4).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 03, A4, 6E", "uaddl2 v16.D2, V(30).S4, V(4).S4");
}

#[test]
fn uaddl2_5710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddl2 V(31).D2, v26.S4, V(24).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 03, B8, 6E", "uaddl2 V(31).D2, v26.S4, V(24).S4");
}

#[test]
fn uaddlp_5711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(3).H8, V(30).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 2B, 20, 6E", "uaddlp V(3).H8, V(30).B16");
}

#[test]
fn uaddlp_5712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(22).H8, V(20).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 2A, 20, 6E", "uaddlp V(22).H8, V(20).B16");
}

#[test]
fn uaddlp_5713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(10).H4, v6.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 28, 20, 2E", "uaddlp V(10).H4, v6.B8");
}

#[test]
fn uaddlp_5714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(18).H4, v18.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 2A, 20, 2E", "uaddlp V(18).H4, v18.B8");
}

#[test]
fn uaddlp_5715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(8).S4, V(24).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 2B, 60, 6E", "uaddlp V(8).S4, V(24).H8");
}

#[test]
fn uaddlp_5716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(18).S4, v2.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 28, 60, 6E", "uaddlp V(18).S4, v2.H8");
}

#[test]
fn uaddlp_5717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v0.S2, v19.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 2A, 60, 2E", "uaddlp v0.S2, v19.H4");
}

#[test]
fn uaddlp_5718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v30.S2, v17.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 2A, 60, 2E", "uaddlp v30.S2, v17.H4");
}

#[test]
fn uaddlp_5719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v19.D2, V(19).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2A, A0, 6E", "uaddlp v19.D2, V(19).S4");
}

#[test]
fn uaddlp_5720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp v8.D2, v9.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 29, A0, 6E", "uaddlp v8.D2, v9.S4");
}

#[test]
fn uaddlp_5721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(24).D1, v8.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 29, A0, 2E", "uaddlp V(24).D1, v8.S2");
}

#[test]
fn uaddlp_5722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlp V(25).D1, V(30).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 2B, A0, 2E", "uaddlp V(25).D1, V(30).S2");
}

#[test]
fn uaddlv_5723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv H(5), v28.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 3B, 30, 6E", "uaddlv H(5), v28.B16");
}

#[test]
fn uaddlv_5724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv H(7), V(17).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 3A, 30, 6E", "uaddlv H(7), V(17).B16");
}

#[test]
fn uaddlv_5725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv H(26), V(23).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 3A, 30, 2E", "uaddlv H(26), V(23).B8");
}

#[test]
fn uaddlv_5726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv h23, V(1).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 38, 30, 2E", "uaddlv h23, V(1).B8");
}

#[test]
fn uaddlv_5727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv s4, v21.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 3A, 70, 6E", "uaddlv s4, v21.H8");
}

#[test]
fn uaddlv_5728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv s5, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 3B, 70, 6E", "uaddlv s5, v29.H8");
}

#[test]
fn uaddlv_5729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv s0, v26.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 3B, 70, 2E", "uaddlv s0, v26.H4");
}

#[test]
fn uaddlv_5730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv s8, V(0).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 38, 70, 2E", "uaddlv s8, V(0).H4");
}

#[test]
fn uaddlv_5731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv D(18), v14.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 39, B0, 6E", "uaddlv D(18), v14.S4");
}

#[test]
fn uaddlv_5732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddlv d0, v19.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 3A, B0, 6E", "uaddlv d0, v19.S4");
}

#[test]
fn uaddw_5733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw V(13).H8, v5.H8, v25.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 10, 39, 2E", "uaddw V(13).H8, v5.H8, v25.B8");
}

#[test]
fn uaddw_5734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw V(21).H8, V(1).H8, v27.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 10, 3B, 2E", "uaddw V(21).H8, V(1).H8, v27.B8");
}

#[test]
fn uaddw_5735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw v0.S4, V(10).S4, V(20).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 11, 74, 2E", "uaddw v0.S4, V(10).S4, V(20).H4");
}

#[test]
fn uaddw_5736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw v19.S4, V(25).S4, v13.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 13, 6D, 2E", "uaddw v19.S4, V(25).S4, v13.H4");
}

#[test]
fn uaddw_5737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw v30.D2, v27.D2, V(25).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 13, B9, 2E", "uaddw v30.D2, v27.D2, V(25).S2");
}

#[test]
fn uaddw_5738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw V(1).D2, v1.D2, v10.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 10, AA, 2E", "uaddw V(1).D2, v1.D2, v10.S2");
}

#[test]
fn uaddw2_5739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 v1.H8, V(7).H8, V(7).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 10, 27, 6E", "uaddw2 v1.H8, V(7).H8, V(7).B16");
}

#[test]
fn uaddw2_5740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 V(16).H8, v29.H8, v8.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 13, 28, 6E", "uaddw2 V(16).H8, v29.H8, v8.B16");
}

#[test]
fn uaddw2_5741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 V(10).S4, v25.S4, v24.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 13, 78, 6E", "uaddw2 V(10).S4, v25.S4, v24.H8");
}

#[test]
fn uaddw2_5742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 V(5).S4, v12.S4, V(23).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 11, 77, 6E", "uaddw2 V(5).S4, v12.S4, V(23).H8");
}

#[test]
fn uaddw2_5743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 V(11).D2, V(29).D2, v2.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 13, A2, 6E", "uaddw2 V(11).D2, V(29).D2, v2.S4");
}

#[test]
fn uaddw2_5744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uaddw2 v17.D2, v10.D2, V(28).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 11, BC, 6E", "uaddw2 v17.D2, v10.D2, V(28).S4");
}

#[test]
fn ubfiz_5745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfiz w25, W(10), 12, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 05, 14, 53", "ubfiz w25, W(10), 12, 2");
}

#[test]
fn ubfiz_5746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfiz W(31), W(6), 30, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 04, 02, 53", "ubfiz W(31), W(6), 30, 2");
}

#[test]
fn ubfiz_5747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfiz x21, x19, 23, 35
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 8A, 69, D3", "ubfiz x21, x19, 23, 35");
}

#[test]
fn ubfiz_5748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfiz X(28), X(17), 29, 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 62, 63, D3", "ubfiz X(28), X(17), 29, 25");
}

#[test]
fn ubfm_5749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfm W(29), w1, 16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 1C, 10, 53", "ubfm W(29), w1, 16, 7");
}

#[test]
fn ubfm_5750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfm w0, W(14), 28, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 19, 1C, 53", "ubfm w0, W(14), 28, 6");
}

#[test]
fn ubfm_5751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfm x16, X(24), 14, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 7F, 4E, D3", "ubfm x16, X(24), 14, 31");
}

#[test]
fn ubfm_5752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfm x13, x8, 63, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 05, 7F, D3", "ubfm x13, x8, 63, 1");
}

#[test]
fn ubfx_5753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfx w24, W(8), 12, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 59, 0C, 53", "ubfx w24, W(8), 12, 11");
}

#[test]
fn ubfx_5754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfx w12, W(24), 10, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 43, 0A, 53", "ubfx w12, W(24), 10, 7");
}

#[test]
fn ubfx_5755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfx X(4), x24, 17, 36
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, D3, 51, D3", "ubfx X(4), x24, 17, 36");
}

#[test]
fn ubfx_5756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ubfx X(8), x5, 41, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, E4, 69, D3", "ubfx X(8), x5, 41, 17");
}

#[test]
fn ucvtf_5757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(25), H(1), 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, E4, 14, 7F", "ucvtf H(25), H(1), 12");
}

#[test]
fn ucvtf_5758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h23, h23, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, E6, 18, 7F", "ucvtf h23, h23, 8");
}

#[test]
fn ucvtf_5759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(16), S(15), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, E5, 39, 7F", "ucvtf S(16), S(15), 7");
}

#[test]
fn ucvtf_5760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(13), s27, 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, E7, 32, 7F", "ucvtf S(13), s27, 14");
}

#[test]
fn ucvtf_5761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(30), d29, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, E7, 6D, 7F", "ucvtf D(30), d29, 19");
}

#[test]
fn ucvtf_5762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d12, d23, 35
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, E6, 5D, 7F", "ucvtf d12, d23, 35");
}

#[test]
fn ucvtf_5763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v21.H8, V(0).H8, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, E4, 14, 6F", "ucvtf v21.H8, V(0).H8, 12");
}

#[test]
fn ucvtf_5764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(13).H8, V(13).H8, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, E5, 17, 6F", "ucvtf V(13).H8, V(13).H8, 9");
}

#[test]
fn ucvtf_5765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v19.H4, v12.H4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, E5, 19, 2F", "ucvtf v19.H4, v12.H4, 7");
}

#[test]
fn ucvtf_5766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(29).H4, V(28).H4, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, E7, 10, 2F", "ucvtf V(29).H4, V(28).H4, 16");
}

#[test]
fn ucvtf_5767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(31).S4, v15.S4, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, E5, 33, 6F", "ucvtf V(31).S4, v15.S4, 13");
}

#[test]
fn ucvtf_5768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v4.S4, V(7).S4, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, E4, 34, 6F", "ucvtf v4.S4, V(7).S4, 12");
}

#[test]
fn ucvtf_5769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(6).S2, v23.S2, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, E6, 2B, 2F", "ucvtf V(6).S2, v23.S2, 21");
}

#[test]
fn ucvtf_5770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v7.S2, V(2).S2, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, E4, 2D, 2F", "ucvtf v7.S2, V(2).S2, 19");
}

#[test]
fn ucvtf_5771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v13.D2, v6.D2, 54
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, E4, 4A, 6F", "ucvtf v13.D2, v6.D2, 54");
}

#[test]
fn ucvtf_5772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(10).D2, v15.D2, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, E5, 79, 6F", "ucvtf V(10).D2, v15.D2, 7");
}

#[test]
fn ucvtf_5773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(1), H(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, DA, 79, 7E", "ucvtf H(1), H(20)");
}

#[test]
fn ucvtf_5774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(8), H(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, DA, 79, 7E", "ucvtf H(8), H(21)");
}

#[test]
fn ucvtf_5775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s22, s26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, DB, 21, 7E", "ucvtf s22, s26");
}

#[test]
fn ucvtf_5776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(25), s23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, DA, 21, 7E", "ucvtf S(25), s23");
}

#[test]
fn ucvtf_5777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(16), d9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, D9, 61, 7E", "ucvtf D(16), d9");
}

#[test]
fn ucvtf_5778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d29, D(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, D8, 61, 7E", "ucvtf d29, D(5)");
}

#[test]
fn ucvtf_5779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(24).H8, V(27).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, DB, 79, 6E", "ucvtf V(24).H8, V(27).H8");
}

#[test]
fn ucvtf_5780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(27).H8, V(12).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, D9, 79, 6E", "ucvtf V(27).H8, V(12).H8");
}

#[test]
fn ucvtf_5781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(27).H4, v14.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, D9, 79, 2E", "ucvtf V(27).H4, v14.H4");
}

#[test]
fn ucvtf_5782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(0).H4, v24.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, DB, 79, 2E", "ucvtf V(0).H4, v24.H4");
}

#[test]
fn ucvtf_5783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v15.S4, v5.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, D8, 21, 6E", "ucvtf v15.S4, v5.S4");
}

#[test]
fn ucvtf_5784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v11.S4, v19.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, DA, 21, 6E", "ucvtf v11.S4, v19.S4");
}

#[test]
fn ucvtf_5785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v14.S2, V(5).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, D8, 21, 2E", "ucvtf v14.S2, V(5).S2");
}

#[test]
fn ucvtf_5786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(13).S2, V(25).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, DB, 21, 2E", "ucvtf V(13).S2, V(25).S2");
}

#[test]
fn ucvtf_5787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf v12.D2, V(26).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, DB, 61, 6E", "ucvtf v12.D2, V(26).D2");
}

#[test]
fn ucvtf_5788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf V(25).D2, V(4).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, D8, 61, 6E", "ucvtf V(25).D2, V(4).D2");
}

#[test]
fn ucvtf_5789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(17), w19, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, FE, C3, 1E", "ucvtf H(17), w19, 1");
}

#[test]
fn ucvtf_5790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h30, w6, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, D4, C3, 1E", "ucvtf h30, w6, 11");
}

#[test]
fn ucvtf_5791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s22, w3, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, F0, 03, 1E", "ucvtf s22, w3, 4");
}

#[test]
fn ucvtf_5792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s26, w24, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, EB, 03, 1E", "ucvtf s26, w24, 6");
}

#[test]
fn ucvtf_5793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(12), W(27), 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, F3, 43, 1E", "ucvtf D(12), W(27), 4");
}

#[test]
fn ucvtf_5794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(26), w18, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, D6, 43, 1E", "ucvtf D(26), w18, 11");
}

#[test]
fn ucvtf_5795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(21), X(3), 38
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 68, C3, 9E", "ucvtf H(21), X(3), 38");
}

#[test]
fn ucvtf_5796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h11, x12, 41
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 5D, C3, 9E", "ucvtf h11, x12, 41");
}

#[test]
fn ucvtf_5797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s30, x28, 57
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 1F, 03, 9E", "ucvtf s30, x28, 57");
}

#[test]
fn ucvtf_5798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(20), x30, 57
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 1F, 03, 9E", "ucvtf S(20), x30, 57");
}

#[test]
fn ucvtf_5799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d11, xzr, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 8B, 43, 9E", "ucvtf d11, xzr, 30");
}

#[test]
fn ucvtf_5800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d21, x17, 60
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 12, 43, 9E", "ucvtf d21, x17, 60");
}

#[test]
fn ucvtf_5801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h28, W(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 03, E3, 1E", "ucvtf h28, W(28)");
}

#[test]
fn ucvtf_5802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(3), W(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 03, E3, 1E", "ucvtf H(3), W(26)");
}

#[test]
fn ucvtf_5803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf s17, W(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 01, 23, 1E", "ucvtf s17, W(8)");
}

#[test]
fn ucvtf_5804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(6), w5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 00, 23, 1E", "ucvtf S(6), w5");
}

#[test]
fn ucvtf_5805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(22), w28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 03, 63, 1E", "ucvtf D(22), w28");
}

#[test]
fn ucvtf_5806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d1, w3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 00, 63, 1E", "ucvtf d1, w3");
}

#[test]
fn ucvtf_5807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf h12, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 03, E3, 9E", "ucvtf h12, X(27)");
}

#[test]
fn ucvtf_5808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf H(15), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, E3, 9E", "ucvtf H(15), x5");
}

#[test]
fn ucvtf_5809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(22), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 01, 23, 9E", "ucvtf S(22), x11");
}

#[test]
fn ucvtf_5810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf S(28), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 03, 23, 9E", "ucvtf S(28), x24");
}

#[test]
fn ucvtf_5811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf d28, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 01, 63, 9E", "ucvtf d28, x15");
}

#[test]
fn ucvtf_5812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ucvtf D(15), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 03, 63, 9E", "ucvtf D(15), X(28)");
}

#[test]
fn udiv_5813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udiv W(15), W(20), W(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 0A, D8, 1A", "udiv W(15), W(20), W(24)");
}

#[test]
fn udiv_5814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udiv w24, W(0), W(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 08, D2, 1A", "udiv w24, W(0), W(18)");
}

#[test]
fn udiv_5815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udiv X(7), X(20), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 0A, D9, 9A", "udiv X(7), X(20), x25");
}

#[test]
fn udiv_5816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udiv x13, xzr, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 0B, C6, 9A", "udiv x13, xzr, X(6)");
}

#[test]
fn udot_5817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot V(23).S2, V(14).B8, v12.B4[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, E1, AC, 2F", "udot V(23).S2, V(14).B8, v12.B4[1]");
}

#[test]
fn udot_5818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot v20.S2, v18.B8, v19.B4[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, EA, B3, 2F", "udot v20.S2, v18.B8, v19.B4[3]");
}

#[test]
fn udot_5819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot V(9).S4, V(31).B16, V(16).B4[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, EB, B0, 6F", "udot V(9).S4, V(31).B16, V(16).B4[3]");
}

#[test]
fn udot_5820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot v12.S4, V(26).B16, v16.B4[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, EB, B0, 6F", "udot v12.S4, V(26).B16, v16.B4[3]");
}

#[test]
fn udot_5821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot V(9).S2, V(10).B8, v27.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 95, 9B, 2E", "udot V(9).S2, V(10).B8, v27.B8");
}

#[test]
fn udot_5822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot V(12).S2, v11.B8, v15.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, 95, 8F, 2E", "udot V(12).S2, v11.B8, v15.B8");
}

#[test]
fn udot_5823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot v28.S4, V(0).B16, V(22).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 94, 96, 6E", "udot v28.S4, V(0).B16, V(22).B16");
}

#[test]
fn udot_5824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; udot v13.S4, v13.B16, v11.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 95, 8B, 6E", "udot v13.S4, v13.B16, v11.B16");
}

#[test]
fn uhadd_5825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(0).B16, V(0).B16, v0.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 04, 20, 6E", "uhadd V(0).B16, V(0).B16, v0.B16");
}

#[test]
fn uhadd_5826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v24.B16, v0.B16, V(19).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 04, 33, 6E", "uhadd v24.B16, v0.B16, V(19).B16");
}

#[test]
fn uhadd_5827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v9.B8, V(11).B8, V(26).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 05, 3A, 2E", "uhadd v9.B8, V(11).B8, V(26).B8");
}

#[test]
fn uhadd_5828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(18).B8, V(13).B8, v3.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 05, 23, 2E", "uhadd V(18).B8, V(13).B8, v3.B8");
}

#[test]
fn uhadd_5829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v27.H8, V(12).H8, V(2).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 05, 62, 6E", "uhadd v27.H8, V(12).H8, V(2).H8");
}

#[test]
fn uhadd_5830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v27.H8, v8.H8, v1.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 05, 61, 6E", "uhadd v27.H8, v8.H8, v1.H8");
}

#[test]
fn uhadd_5831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(27).H4, v25.H4, v12.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 07, 6C, 2E", "uhadd V(27).H4, v25.H4, v12.H4");
}

#[test]
fn uhadd_5832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v9.H4, V(18).H4, v31.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 06, 7F, 2E", "uhadd v9.H4, V(18).H4, v31.H4");
}

#[test]
fn uhadd_5833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(27).S4, V(15).S4, v30.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 05, BE, 6E", "uhadd V(27).S4, V(15).S4, v30.S4");
}

#[test]
fn uhadd_5834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(29).S4, v0.S4, v1.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 04, A1, 6E", "uhadd V(29).S4, v0.S4, v1.S4");
}

#[test]
fn uhadd_5835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd v31.S2, V(3).S2, v21.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 04, B5, 2E", "uhadd v31.S2, V(3).S2, v21.S2");
}

#[test]
fn uhadd_5836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhadd V(10).S2, V(25).S2, V(14).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 07, AE, 2E", "uhadd V(10).S2, V(25).S2, V(14).S2");
}

#[test]
fn uhsub_5837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v5.B16, v21.B16, V(2).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 26, 22, 6E", "uhsub v5.B16, v21.B16, V(2).B16");
}

#[test]
fn uhsub_5838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v20.B16, V(1).B16, v7.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 24, 27, 6E", "uhsub v20.B16, V(1).B16, v7.B16");
}

#[test]
fn uhsub_5839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(8).B8, V(26).B8, V(27).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 27, 3B, 2E", "uhsub V(8).B8, V(26).B8, V(27).B8");
}

#[test]
fn uhsub_5840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v31.B8, V(9).B8, v27.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 25, 3B, 2E", "uhsub v31.B8, V(9).B8, v27.B8");
}

#[test]
fn uhsub_5841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(24).H8, v16.H8, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 26, 7D, 6E", "uhsub V(24).H8, v16.H8, v29.H8");
}

#[test]
fn uhsub_5842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(19).H8, v22.H8, V(2).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 26, 62, 6E", "uhsub V(19).H8, v22.H8, V(2).H8");
}

#[test]
fn uhsub_5843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(24).H4, v9.H4, V(5).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 25, 65, 2E", "uhsub V(24).H4, v9.H4, V(5).H4");
}

#[test]
fn uhsub_5844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(5).H4, v10.H4, V(27).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 25, 7B, 2E", "uhsub V(5).H4, v10.H4, V(27).H4");
}

#[test]
fn uhsub_5845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v17.S4, v9.S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 25, AB, 6E", "uhsub v17.S4, v9.S4, v11.S4");
}

#[test]
fn uhsub_5846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v11.S4, v21.S4, v6.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 26, A6, 6E", "uhsub v11.S4, v21.S4, v6.S4");
}

#[test]
fn uhsub_5847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub V(13).S2, V(24).S2, V(14).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 27, AE, 2E", "uhsub V(13).S2, V(24).S2, V(14).S2");
}

#[test]
fn uhsub_5848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uhsub v7.S2, v13.S2, V(26).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 25, BA, 2E", "uhsub v7.S2, v13.S2, V(26).S2");
}

#[test]
fn umaddl_5849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaddl x0, W(14), w15, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 71, AF, 9B", "umaddl x0, W(14), w15, X(28)");
}

#[test]
fn umaddl_5850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaddl x0, w0, w10, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 04, AA, 9B", "umaddl x0, w0, w10, X(1)");
}

#[test]
fn umax_5851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(3).B16, v18.B16, v19.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 66, 33, 6E", "umax V(3).B16, v18.B16, v19.B16");
}

#[test]
fn umax_5852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(20).B16, v6.B16, v19.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 64, 33, 6E", "umax V(20).B16, v6.B16, v19.B16");
}

#[test]
fn umax_5853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax v30.B8, v6.B8, v28.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 64, 3C, 2E", "umax v30.B8, v6.B8, v28.B8");
}

#[test]
fn umax_5854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(18).B8, V(9).B8, v26.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 65, 3A, 2E", "umax V(18).B8, V(9).B8, v26.B8");
}

#[test]
fn umax_5855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(8).H8, v24.H8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 67, 7E, 6E", "umax V(8).H8, v24.H8, V(30).H8");
}

#[test]
fn umax_5856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(27).H8, V(16).H8, V(5).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 66, 65, 6E", "umax V(27).H8, V(16).H8, V(5).H8");
}

#[test]
fn umax_5857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax v9.H4, v4.H4, V(24).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 64, 78, 2E", "umax v9.H4, v4.H4, V(24).H4");
}

#[test]
fn umax_5858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(31).H4, V(28).H4, V(24).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 67, 78, 2E", "umax V(31).H4, V(28).H4, V(24).H4");
}

#[test]
fn umax_5859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax v23.S4, v2.S4, V(2).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 64, A2, 6E", "umax v23.S4, v2.S4, V(2).S4");
}

#[test]
fn umax_5860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax V(4).S4, V(18).S4, v8.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 66, A8, 6E", "umax V(4).S4, V(18).S4, v8.S4");
}

#[test]
fn umax_5861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax v12.S2, v20.S2, v26.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 66, BA, 2E", "umax v12.S2, v20.S2, v26.S2");
}

#[test]
fn umax_5862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umax v29.S2, v27.S2, v1.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 67, A1, 2E", "umax v29.S2, v27.S2, v1.S2");
}

#[test]
fn umaxp_5863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v16.B16, v14.B16, v31.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, A5, 3F, 6E", "umaxp v16.B16, v14.B16, v31.B16");
}

#[test]
fn umaxp_5864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v30.B16, V(1).B16, V(20).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, A4, 34, 6E", "umaxp v30.B16, V(1).B16, V(20).B16");
}

#[test]
fn umaxp_5865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v12.B8, v18.B8, V(12).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, A6, 2C, 2E", "umaxp v12.B8, v18.B8, V(12).B8");
}

#[test]
fn umaxp_5866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(9).B8, v2.B8, V(31).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, A4, 3F, 2E", "umaxp V(9).B8, v2.B8, V(31).B8");
}

#[test]
fn umaxp_5867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v3.H8, V(17).H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, A6, 79, 6E", "umaxp v3.H8, V(17).H8, v25.H8");
}

#[test]
fn umaxp_5868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(15).H8, V(10).H8, v28.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, A5, 7C, 6E", "umaxp V(15).H8, V(10).H8, v28.H8");
}

#[test]
fn umaxp_5869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v15.H4, v25.H4, v17.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 71, 2E", "umaxp v15.H4, v25.H4, v17.H4");
}

#[test]
fn umaxp_5870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp v8.H4, v14.H4, V(10).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, A5, 6A, 2E", "umaxp v8.H4, v14.H4, V(10).H4");
}

#[test]
fn umaxp_5871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(5).S4, V(31).S4, V(15).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, A7, AF, 6E", "umaxp V(5).S4, V(31).S4, V(15).S4");
}

#[test]
fn umaxp_5872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(31).S4, V(10).S4, v27.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, A5, BB, 6E", "umaxp V(31).S4, V(10).S4, v27.S4");
}

#[test]
fn umaxp_5873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(10).S2, V(2).S2, v18.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, A4, B2, 2E", "umaxp V(10).S2, V(2).S2, v18.S2");
}

#[test]
fn umaxp_5874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxp V(21).S2, v2.S2, v9.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, A4, A9, 2E", "umaxp V(21).S2, v2.S2, v9.S2");
}

#[test]
fn umaxv_5875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv B(20), V(30).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, AB, 30, 6E", "umaxv B(20), V(30).B16");
}

#[test]
fn umaxv_5876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv B(17), V(2).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, A8, 30, 6E", "umaxv B(17), V(2).B16");
}

#[test]
fn umaxv_5877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv b15, v0.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A8, 30, 2E", "umaxv b15, v0.B8");
}

#[test]
fn umaxv_5878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv B(16), v7.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, A8, 30, 2E", "umaxv B(16), v7.B8");
}

#[test]
fn umaxv_5879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv H(0), V(3).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, A8, 70, 6E", "umaxv H(0), V(3).H8");
}

#[test]
fn umaxv_5880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv h14, V(5).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, A8, 70, 6E", "umaxv h14, V(5).H8");
}

#[test]
fn umaxv_5881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv h1, V(3).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, A8, 70, 2E", "umaxv h1, V(3).H4");
}

#[test]
fn umaxv_5882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv H(29), v13.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, A9, 70, 2E", "umaxv H(29), v13.H4");
}

#[test]
fn umaxv_5883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv S(26), V(27).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, AB, B0, 6E", "umaxv S(26), V(27).S4");
}

#[test]
fn umaxv_5884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umaxv S(10), V(24).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, AB, B0, 6E", "umaxv S(10), V(24).S4");
}

#[test]
fn umin_5885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(26).B16, v19.B16, v15.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 6E, 2F, 6E", "umin V(26).B16, v19.B16, v15.B16");
}

#[test]
fn umin_5886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin v17.B16, v21.B16, v15.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 6E, 2F, 6E", "umin v17.B16, v21.B16, v15.B16");
}

#[test]
fn umin_5887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(28).B8, V(5).B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 6C, 27, 2E", "umin V(28).B8, V(5).B8, V(7).B8");
}

#[test]
fn umin_5888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin v13.B8, v2.B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 6C, 27, 2E", "umin v13.B8, v2.B8, V(7).B8");
}

#[test]
fn umin_5889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin v5.H8, V(8).H8, v14.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 6D, 6E, 6E", "umin v5.H8, V(8).H8, v14.H8");
}

#[test]
fn umin_5890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(28).H8, V(2).H8, v3.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 6C, 63, 6E", "umin V(28).H8, V(2).H8, v3.H8");
}

#[test]
fn umin_5891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(26).H4, V(18).H4, V(13).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 6E, 6D, 2E", "umin V(26).H4, V(18).H4, V(13).H4");
}

#[test]
fn umin_5892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin v3.H4, V(23).H4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 6E, 6F, 2E", "umin v3.H4, V(23).H4, V(15).H4");
}

#[test]
fn umin_5893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin v19.S4, V(7).S4, v0.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 6C, A0, 6E", "umin v19.S4, V(7).S4, v0.S4");
}

#[test]
fn umin_5894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin v17.S4, V(2).S4, V(5).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 6C, A5, 6E", "umin v17.S4, V(2).S4, V(5).S4");
}

#[test]
fn umin_5895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(12).S2, V(29).S2, v19.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 6F, B3, 2E", "umin V(12).S2, V(29).S2, v19.S2");
}

#[test]
fn umin_5896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umin V(25).S2, V(22).S2, V(30).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 6E, BE, 2E", "umin V(25).S2, V(22).S2, V(30).S2");
}

#[test]
fn uminp_5897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v4.B16, V(24).B16, v23.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, AF, 37, 6E", "uminp v4.B16, V(24).B16, v23.B16");
}

#[test]
fn uminp_5898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(20).B16, V(3).B16, v13.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, AC, 2D, 6E", "uminp V(20).B16, V(3).B16, v13.B16");
}

#[test]
fn uminp_5899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(23).B8, V(19).B8, V(2).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, AE, 22, 2E", "uminp V(23).B8, V(19).B8, V(2).B8");
}

#[test]
fn uminp_5900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v30.B8, v31.B8, v1.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, AF, 21, 2E", "uminp v30.B8, v31.B8, v1.B8");
}

#[test]
fn uminp_5901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v30.H8, v27.H8, v8.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, AF, 68, 6E", "uminp v30.H8, v27.H8, v8.H8");
}

#[test]
fn uminp_5902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v12.H8, v9.H8, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, AD, 73, 6E", "uminp v12.H8, v9.H8, V(19).H8");
}

#[test]
fn uminp_5903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(2).H4, v3.H4, V(19).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, AC, 73, 2E", "uminp V(2).H4, v3.H4, V(19).H4");
}

#[test]
fn uminp_5904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(31).H4, V(12).H4, v3.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, AD, 63, 2E", "uminp V(31).H4, V(12).H4, v3.H4");
}

#[test]
fn uminp_5905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(9).S4, V(31).S4, v7.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, AF, A7, 6E", "uminp V(9).S4, V(31).S4, v7.S4");
}

#[test]
fn uminp_5906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(25).S4, V(15).S4, v30.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, AD, BE, 6E", "uminp V(25).S4, V(15).S4, v30.S4");
}

#[test]
fn uminp_5907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp V(5).S2, V(18).S2, V(27).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, AE, BB, 2E", "uminp V(5).S2, V(18).S2, V(27).S2");
}

#[test]
fn uminp_5908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminp v6.S2, V(2).S2, v26.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, AC, BA, 2E", "uminp v6.S2, V(2).S2, v26.S2");
}

#[test]
fn uminv_5909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv b15, v1.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A8, 31, 6E", "uminv b15, v1.B16");
}

#[test]
fn uminv_5910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv B(19), V(17).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, AA, 31, 6E", "uminv B(19), V(17).B16");
}

#[test]
fn uminv_5911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv B(25), V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, A8, 31, 2E", "uminv B(25), V(7).B8");
}

#[test]
fn uminv_5912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv b31, v6.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, A8, 31, 2E", "uminv b31, v6.B8");
}

#[test]
fn uminv_5913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv h20, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, AB, 71, 6E", "uminv h20, v25.H8");
}

#[test]
fn uminv_5914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv H(14), v7.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, A8, 71, 6E", "uminv H(14), v7.H8");
}

#[test]
fn uminv_5915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv h30, v19.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, AA, 71, 2E", "uminv h30, v19.H4");
}

#[test]
fn uminv_5916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv h22, V(22).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, AA, 71, 2E", "uminv h22, V(22).H4");
}

#[test]
fn uminv_5917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv s10, V(3).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, A8, B1, 6E", "uminv s10, V(3).S4");
}

#[test]
fn uminv_5918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uminv s8, v3.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, A8, B1, 6E", "uminv s8, v3.S4");
}

#[test]
fn umlal_5919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(1).S4, v9.H4, V(2).H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 29, 62, 2F", "umlal V(1).S4, v9.H4, V(2).H[6]");
}

#[test]
fn umlal_5920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal v0.S4, v19.H4, v1.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 2A, 51, 2F", "umlal v0.S4, v19.H4, v1.H[5]");
}

#[test]
fn umlal_5921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(5).D2, v30.S2, V(22).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 2B, 96, 2F", "umlal V(5).D2, v30.S2, V(22).S[2]");
}

#[test]
fn umlal_5922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal v19.D2, V(23).S2, v23.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2A, 97, 2F", "umlal v19.D2, V(23).S2, v23.S[2]");
}

#[test]
fn umlal_5923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(10).H8, V(7).B8, v24.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 80, 38, 2E", "umlal V(10).H8, V(7).B8, v24.B8");
}

#[test]
fn umlal_5924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal v27.H8, v13.B8, v13.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 81, 2D, 2E", "umlal v27.H8, v13.B8, v13.B8");
}

#[test]
fn umlal_5925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal v12.S4, V(0).H4, V(4).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 80, 64, 2E", "umlal v12.S4, V(0).H4, V(4).H4");
}

#[test]
fn umlal_5926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal v4.S4, V(26).H4, v14.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 83, 6E, 2E", "umlal v4.S4, V(26).H4, v14.H4");
}

#[test]
fn umlal_5927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(3).D2, V(1).S2, V(22).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 80, B6, 2E", "umlal V(3).D2, V(1).S2, V(22).S2");
}

#[test]
fn umlal_5928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal V(24).D2, v3.S2, v3.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 80, A3, 2E", "umlal V(24).D2, v3.S2, v3.S2");
}

#[test]
fn umlal2_5929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(27).S4, v29.H8, v4.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 2B, 54, 6F", "umlal2 V(27).S4, v29.H8, v4.H[5]");
}

#[test]
fn umlal2_5930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(9).S4, V(2).H8, v8.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 28, 78, 6F", "umlal2 V(9).S4, V(2).H8, v8.H[7]");
}

#[test]
fn umlal2_5931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(0).D2, V(22).S4, v21.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 22, B5, 6F", "umlal2 V(0).D2, V(22).S4, v21.S[1]");
}

#[test]
fn umlal2_5932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v15.D2, V(23).S4, v23.S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 22, 97, 6F", "umlal2 v15.D2, V(23).S4, v23.S[0]");
}

#[test]
fn umlal2_5933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(18).H8, V(21).B16, V(26).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 82, 3A, 6E", "umlal2 V(18).H8, V(21).B16, V(26).B16");
}

#[test]
fn umlal2_5934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v3.H8, v24.B16, V(0).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 83, 20, 6E", "umlal2 v3.H8, v24.B16, V(0).B16");
}

#[test]
fn umlal2_5935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 v25.S4, v8.H8, v1.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 81, 61, 6E", "umlal2 v25.S4, v8.H8, v1.H8");
}

#[test]
fn umlal2_5936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(2).S4, V(14).H8, v27.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 81, 7B, 6E", "umlal2 V(2).S4, V(14).H8, v27.H8");
}

#[test]
fn umlal2_5937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(30).D2, V(27).S4, v5.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 83, A5, 6E", "umlal2 V(30).D2, V(27).S4, v5.S4");
}

#[test]
fn umlal2_5938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlal2 V(5).D2, V(7).S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 80, AB, 6E", "umlal2 V(5).D2, V(7).S4, v11.S4");
}

#[test]
fn umlsl_5939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v7.S4, V(24).H4, v7.H[5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 6B, 57, 2F", "umlsl v7.S4, V(24).H4, v7.H[5]");
}

#[test]
fn umlsl_5940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl V(1).S4, V(25).H4, v10.H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 63, 4A, 2F", "umlsl V(1).S4, V(25).H4, v10.H[0]");
}

#[test]
fn umlsl_5941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v27.D2, v17.S2, v28.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 6A, BC, 2F", "umlsl v27.D2, v17.S2, v28.S[3]");
}

#[test]
fn umlsl_5942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl V(30).D2, V(7).S2, V(20).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 68, 94, 2F", "umlsl V(30).D2, V(7).S2, V(20).S[2]");
}

#[test]
fn umlsl_5943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v1.H8, v2.B8, v6.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, A0, 26, 2E", "umlsl v1.H8, v2.B8, v6.B8");
}

#[test]
fn umlsl_5944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl V(13).H8, V(11).B8, V(14).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, A1, 2E, 2E", "umlsl V(13).H8, V(11).B8, V(14).B8");
}

#[test]
fn umlsl_5945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v7.S4, v21.H4, v22.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, A2, 76, 2E", "umlsl v7.S4, v21.H4, v22.H4");
}

#[test]
fn umlsl_5946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl V(8).S4, v30.H4, V(31).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, A3, 7F, 2E", "umlsl V(8).S4, v30.H4, V(31).H4");
}

#[test]
fn umlsl_5947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v0.D2, V(22).S2, V(3).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, A2, A3, 2E", "umlsl v0.D2, V(22).S2, V(3).S2");
}

#[test]
fn umlsl_5948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl v31.D2, v27.S2, v24.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, A3, B8, 2E", "umlsl v31.D2, v27.S2, v24.S2");
}

#[test]
fn umlsl2_5949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v25.S4, V(19).H8, V(12).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 62, 7C, 6F", "umlsl2 v25.S4, V(19).H8, V(12).H[3]");
}

#[test]
fn umlsl2_5950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v18.S4, V(14).H8, V(1).H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 61, 41, 6F", "umlsl2 v18.S4, V(14).H8, V(1).H[0]");
}

#[test]
fn umlsl2_5951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v12.D2, V(29).S4, V(27).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 63, 9B, 6F", "umlsl2 v12.D2, V(29).S4, V(27).S[0]");
}

#[test]
fn umlsl2_5952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v15.D2, V(9).S4, V(11).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 61, 8B, 6F", "umlsl2 v15.D2, V(9).S4, V(11).S[0]");
}

#[test]
fn umlsl2_5953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v16.H8, V(8).B16, V(6).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, A1, 26, 6E", "umlsl2 v16.H8, V(8).B16, V(6).B16");
}

#[test]
fn umlsl2_5954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v17.H8, v24.B16, v31.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, A3, 3F, 6E", "umlsl2 v17.H8, v24.B16, v31.B16");
}

#[test]
fn umlsl2_5955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 V(18).S4, V(12).H8, V(5).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, A1, 65, 6E", "umlsl2 V(18).S4, V(12).H8, V(5).H8");
}

#[test]
fn umlsl2_5956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 V(17).S4, V(5).H8, v31.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, A0, 7F, 6E", "umlsl2 V(17).S4, V(5).H8, v31.H8");
}

#[test]
fn umlsl2_5957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 V(12).D2, V(9).S4, v23.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, A1, B7, 6E", "umlsl2 V(12).D2, V(9).S4, v23.S4");
}

#[test]
fn umlsl2_5958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umlsl2 v9.D2, V(18).S4, V(28).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, A2, BC, 6E", "umlsl2 v9.D2, V(18).S4, V(28).S4");
}

#[test]
fn umnegl_5959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umnegl x7, W(12), W(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, FD, A5, 9B", "umnegl x7, W(12), W(5)");
}

#[test]
fn umnegl_5960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umnegl X(6), W(26), w28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, FF, BC, 9B", "umnegl X(6), W(26), w28");
}

#[test]
fn umov_5961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(14), V(8).B[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 3D, 0D, 0E", "umov W(14), V(8).B[6]");
}

#[test]
fn umov_5962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(6), V(20).B[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 3E, 0F, 0E", "umov W(6), V(20).B[7]");
}

#[test]
fn umov_5963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(28), v27.H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 3F, 0E, 0E", "umov W(28), v27.H[3]");
}

#[test]
fn umov_5964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(30), V(30).H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 3F, 0E, 0E", "umov W(30), V(30).H[3]");
}

#[test]
fn umov_5965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov w17, v31.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 3F, 0C, 0E", "umov w17, v31.S[1]");
}

#[test]
fn umov_5966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov W(25), V(12).S[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 3D, 04, 0E", "umov W(25), V(12).S[0]");
}

#[test]
fn umov_5967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov x23, V(8).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 3D, 18, 4E", "umov x23, V(8).D[1]");
}

#[test]
fn umov_5968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umov X(20), V(22).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 3E, 18, 4E", "umov X(20), V(22).D[1]");
}

#[test]
fn umsubl_5969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umsubl x8, W(5), W(11), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 8C, AB, 9B", "umsubl x8, W(5), W(11), X(3)");
}

#[test]
fn umsubl_5970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umsubl X(18), w28, w30, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, FB, BE, 9B", "umsubl X(18), w28, w30, x30");
}

#[test]
fn umulh_5971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umulh X(25), x1, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 7C, C2, 9B", "umulh X(25), x1, X(2)");
}

#[test]
fn umulh_5972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umulh x19, X(3), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 7C, D7, 9B", "umulh x19, X(3), x23");
}

#[test]
fn umull_5973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull v20.S4, v29.H4, v1.H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, AB, 61, 2F", "umull v20.S4, v29.H4, v1.H[6]");
}

#[test]
fn umull_5974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull v18.S4, V(23).H4, v0.H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, A2, 40, 2F", "umull v18.S4, V(23).H4, v0.H[0]");
}

#[test]
fn umull_5975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull v7.D2, v22.S2, v25.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, A2, B9, 2F", "umull v7.D2, v22.S2, v25.S[1]");
}

#[test]
fn umull_5976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(23).D2, v9.S2, V(1).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, A1, A1, 2F", "umull V(23).D2, v9.S2, V(1).S[1]");
}

#[test]
fn umull_5977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(0).H8, v0.B8, V(4).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, C0, 24, 2E", "umull V(0).H8, v0.B8, V(4).B8");
}

#[test]
fn umull_5978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(21).H8, V(10).B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, C1, 27, 2E", "umull V(21).H8, V(10).B8, V(7).B8");
}

#[test]
fn umull_5979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(10).S4, V(29).H4, V(8).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, C3, 68, 2E", "umull V(10).S4, V(29).H4, V(8).H4");
}

#[test]
fn umull_5980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(26).S4, V(9).H4, v14.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, C1, 6E, 2E", "umull V(26).S4, V(9).H4, v14.H4");
}

#[test]
fn umull_5981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull V(18).D2, V(21).S2, v6.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, C2, A6, 2E", "umull V(18).D2, V(21).S2, v6.S2");
}

#[test]
fn umull_5982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull v28.D2, V(11).S2, v11.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, C1, AB, 2E", "umull v28.D2, V(11).S2, v11.S2");
}

#[test]
fn umull_5983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull x1, W(8), W(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 7D, B6, 9B", "umull x1, W(8), W(22)");
}

#[test]
fn umull_5984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull X(17), w7, w24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 7C, B8, 9B", "umull X(17), w7, w24");
}

#[test]
fn umull2_5985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v17.S4, v17.H8, V(8).H[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, A2, 48, 6F", "umull2 v17.S4, v17.H8, V(8).H[0]");
}

#[test]
fn umull2_5986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v0.S4, v30.H8, v12.H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, AB, 4C, 6F", "umull2 v0.S4, v30.H8, v12.H[4]");
}

#[test]
fn umull2_5987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v0.D2, v31.S4, V(16).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, AB, B0, 6F", "umull2 v0.D2, v31.S4, V(16).S[3]");
}

#[test]
fn umull2_5988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 V(3).D2, V(22).S4, v6.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, A2, A6, 6F", "umull2 V(3).D2, V(22).S4, v6.S[1]");
}

#[test]
fn umull2_5989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v1.H8, V(12).B16, v0.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, C1, 20, 6E", "umull2 v1.H8, V(12).B16, v0.B16");
}

#[test]
fn umull2_5990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v5.H8, v10.B16, v22.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, C1, 36, 6E", "umull2 v5.H8, v10.B16, v22.B16");
}

#[test]
fn umull2_5991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v1.S4, v0.H8, v11.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, C0, 6B, 6E", "umull2 v1.S4, v0.H8, v11.H8");
}

#[test]
fn umull2_5992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 V(10).S4, V(5).H8, v22.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, C0, 76, 6E", "umull2 V(10).S4, V(5).H8, v22.H8");
}

#[test]
fn umull2_5993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v27.D2, V(29).S4, V(29).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, C3, BD, 6E", "umull2 v27.D2, V(29).S4, V(29).S4");
}

#[test]
fn umull2_5994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; umull2 v26.D2, V(9).S4, V(14).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, C1, AE, 6E", "umull2 v26.D2, V(9).S4, V(14).S4");
}

#[test]
fn uqadd_5995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd b15, b29, B(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, 35, 7E", "uqadd b15, b29, B(21)");
}

#[test]
fn uqadd_5996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd b24, B(19), B(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 0E, 32, 7E", "uqadd b24, B(19), B(18)");
}

#[test]
fn uqadd_5997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd h5, H(0), h26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 0C, 7A, 7E", "uqadd h5, H(0), h26");
}

#[test]
fn uqadd_5998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd h25, h10, H(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 0D, 6A, 7E", "uqadd h25, h10, H(10)");
}

#[test]
fn uqadd_5999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd s21, S(9), s16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 0D, B0, 7E", "uqadd s21, S(9), s16");
}

#[test]
fn uqadd_6000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd s20, S(17), S(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 0E, A6, 7E", "uqadd s20, S(17), S(6)");
}

#[test]
fn uqadd_6001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd D(31), D(3), D(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 0C, F3, 7E", "uqadd D(31), D(3), D(19)");
}

#[test]
fn uqadd_6002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd d18, D(24), d13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 0F, ED, 7E", "uqadd d18, D(24), d13");
}

#[test]
fn uqadd_6003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v26.B16, v28.B16, V(12).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 0F, 2C, 6E", "uqadd v26.B16, v28.B16, V(12).B16");
}

#[test]
fn uqadd_6004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v14.B16, v14.B16, v12.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 0D, 2C, 6E", "uqadd v14.B16, v14.B16, v12.B16");
}

#[test]
fn uqadd_6005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v18.B8, v3.B8, V(23).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 0C, 37, 2E", "uqadd v18.B8, v3.B8, V(23).B8");
}

#[test]
fn uqadd_6006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(28).B8, V(9).B8, v19.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 0D, 33, 2E", "uqadd V(28).B8, V(9).B8, v19.B8");
}

#[test]
fn uqadd_6007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v2.H8, v20.H8, v11.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 0E, 6B, 6E", "uqadd v2.H8, v20.H8, v11.H8");
}

#[test]
fn uqadd_6008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(27).H8, V(23).H8, v16.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 0E, 70, 6E", "uqadd V(27).H8, V(23).H8, v16.H8");
}

#[test]
fn uqadd_6009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(10).H4, V(21).H4, v21.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 0E, 75, 2E", "uqadd V(10).H4, V(21).H4, v21.H4");
}

#[test]
fn uqadd_6010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(17).H4, V(14).H4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 0D, 6F, 2E", "uqadd V(17).H4, V(14).H4, V(15).H4");
}

#[test]
fn uqadd_6011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(5).S4, V(10).S4, V(3).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 0D, A3, 6E", "uqadd V(5).S4, V(10).S4, V(3).S4");
}

#[test]
fn uqadd_6012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v16.S4, v30.S4, v18.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 0F, B2, 6E", "uqadd v16.S4, v30.S4, v18.S4");
}

#[test]
fn uqadd_6013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(3).S2, v22.S2, V(16).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 0E, B0, 2E", "uqadd V(3).S2, v22.S2, V(16).S2");
}

#[test]
fn uqadd_6014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v27.S2, V(6).S2, v15.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 0C, AF, 2E", "uqadd v27.S2, V(6).S2, v15.S2");
}

#[test]
fn uqadd_6015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd v15.D2, v11.D2, V(7).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 0D, E7, 6E", "uqadd v15.D2, v11.D2, V(7).D2");
}

#[test]
fn uqadd_6016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqadd V(20).D2, V(18).D2, V(2).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 0E, E2, 6E", "uqadd V(20).D2, V(18).D2, V(2).D2");
}

#[test]
fn uqrshl_6017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl b17, B(0), b24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 5C, 38, 7E", "uqrshl b17, B(0), b24");
}

#[test]
fn uqrshl_6018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl B(2), B(26), b14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 5F, 2E, 7E", "uqrshl B(2), B(26), b14");
}

#[test]
fn uqrshl_6019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl h23, H(25), H(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 5F, 74, 7E", "uqrshl h23, H(25), H(20)");
}

#[test]
fn uqrshl_6020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl h12, h12, h17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, 5D, 71, 7E", "uqrshl h12, h12, h17");
}

#[test]
fn uqrshl_6021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl s7, s29, s20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 5F, B4, 7E", "uqrshl s7, s29, s20");
}

#[test]
fn uqrshl_6022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl s3, S(26), S(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 5F, B0, 7E", "uqrshl s3, S(26), S(16)");
}

#[test]
fn uqrshl_6023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl D(1), D(1), D(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 5C, FF, 7E", "uqrshl D(1), D(1), D(31)");
}

#[test]
fn uqrshl_6024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl d20, d19, D(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 5E, ED, 7E", "uqrshl d20, d19, D(13)");
}

#[test]
fn uqrshl_6025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(24).B16, v2.B16, V(11).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 5C, 2B, 6E", "uqrshl V(24).B16, v2.B16, V(11).B16");
}

#[test]
fn uqrshl_6026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl v8.B16, V(28).B16, V(21).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 5F, 35, 6E", "uqrshl v8.B16, V(28).B16, V(21).B16");
}

#[test]
fn uqrshl_6027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl v21.B8, v30.B8, v4.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 5F, 24, 2E", "uqrshl v21.B8, v30.B8, v4.B8");
}

#[test]
fn uqrshl_6028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(29).B8, v9.B8, V(30).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 5D, 3E, 2E", "uqrshl V(29).B8, v9.B8, V(30).B8");
}

#[test]
fn uqrshl_6029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(3).H8, V(30).H8, v3.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 5F, 63, 6E", "uqrshl V(3).H8, V(30).H8, v3.H8");
}

#[test]
fn uqrshl_6030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(16).H8, v5.H8, v3.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 5C, 63, 6E", "uqrshl V(16).H8, v5.H8, v3.H8");
}

#[test]
fn uqrshl_6031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(24).H4, v29.H4, v28.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 5F, 7C, 2E", "uqrshl V(24).H4, v29.H4, v28.H4");
}

#[test]
fn uqrshl_6032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(3).H4, v4.H4, v31.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 5C, 7F, 2E", "uqrshl V(3).H4, v4.H4, v31.H4");
}

#[test]
fn uqrshl_6033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl v12.S4, v14.S4, V(11).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 5D, AB, 6E", "uqrshl v12.S4, v14.S4, V(11).S4");
}

#[test]
fn uqrshl_6034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(23).S4, V(6).S4, V(6).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 5C, A6, 6E", "uqrshl V(23).S4, V(6).S4, V(6).S4");
}

#[test]
fn uqrshl_6035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl V(10).S2, V(16).S2, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 5E, A5, 2E", "uqrshl V(10).S2, V(16).S2, v5.S2");
}

#[test]
fn uqrshl_6036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl v11.S2, V(29).S2, V(6).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 5F, A6, 2E", "uqrshl v11.S2, V(29).S2, V(6).S2");
}

#[test]
fn uqrshl_6037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl v21.D2, V(13).D2, V(1).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 5D, E1, 6E", "uqrshl v21.D2, V(13).D2, V(1).D2");
}

#[test]
fn uqrshl_6038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshl v17.D2, V(9).D2, v11.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 5D, EB, 6E", "uqrshl v17.D2, V(9).D2, v11.D2");
}

#[test]
fn uqrshrn_6039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn B(4), h4, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 9C, 0C, 7F", "uqrshrn B(4), h4, 4");
}

#[test]
fn uqrshrn_6040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn B(25), h25, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 9F, 0A, 7F", "uqrshrn B(25), h25, 6");
}

#[test]
fn uqrshrn_6041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn h7, S(23), 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 9E, 11, 7F", "uqrshrn h7, S(23), 15");
}

#[test]
fn uqrshrn_6042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn H(9), s17, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 9E, 1E, 7F", "uqrshrn H(9), s17, 2");
}

#[test]
fn uqrshrn_6043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn S(23), D(7), 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 9C, 23, 7F", "uqrshrn S(23), D(7), 29");
}

#[test]
fn uqrshrn_6044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn S(0), D(10), 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 9D, 2E, 7F", "uqrshrn S(0), D(10), 18");
}

#[test]
fn uqrshrn_6045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn V(1).B8, V(19).H8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 9E, 0E, 2F", "uqrshrn V(1).B8, V(19).H8, 2");
}

#[test]
fn uqrshrn_6046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn V(11).B8, v11.H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 9D, 0C, 2F", "uqrshrn V(11).B8, v11.H8, 4");
}

#[test]
fn uqrshrn_6047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn v11.H4, V(22).S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 9E, 19, 2F", "uqrshrn v11.H4, V(22).S4, 7");
}

#[test]
fn uqrshrn_6048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn V(29).H4, V(29).S4, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 9F, 10, 2F", "uqrshrn V(29).H4, V(29).S4, 16");
}

#[test]
fn uqrshrn_6049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn V(28).S2, v20.D2, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 9E, 26, 2F", "uqrshrn V(28).S2, v20.D2, 26");
}

#[test]
fn uqrshrn_6050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn V(15).S2, V(31).D2, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 9F, 3D, 2F", "uqrshrn V(15).S2, V(31).D2, 3");
}

#[test]
fn uqrshrn2_6051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn2 V(21).B16, V(24).H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 9F, 0A, 6F", "uqrshrn2 V(21).B16, V(24).H8, 6");
}

#[test]
fn uqrshrn2_6052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn2 V(2).B16, V(18).H8, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 9E, 0B, 6F", "uqrshrn2 V(2).B16, V(18).H8, 5");
}

#[test]
fn uqrshrn2_6053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn2 v4.H8, V(23).S4, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 9E, 1B, 6F", "uqrshrn2 v4.H8, V(23).S4, 5");
}

#[test]
fn uqrshrn2_6054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn2 V(28).H8, V(3).S4, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 9C, 1B, 6F", "uqrshrn2 V(28).H8, V(3).S4, 5");
}

#[test]
fn uqrshrn2_6055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn2 v3.S4, v4.D2, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 9C, 3D, 6F", "uqrshrn2 v3.S4, v4.D2, 3");
}

#[test]
fn uqrshrn2_6056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqrshrn2 v18.S4, v3.D2, 22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 9C, 2A, 6F", "uqrshrn2 v18.S4, v3.D2, 22");
}

#[test]
fn uqshl_6057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl b22, B(8), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 75, 0F, 7F", "uqshl b22, B(8), 7");
}

#[test]
fn uqshl_6058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl B(22), B(23), 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 76, 0E, 7F", "uqshl B(22), B(23), 6");
}

#[test]
fn uqshl_6059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl H(1), h26, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 77, 16, 7F", "uqshl H(1), h26, 6");
}

#[test]
fn uqshl_6060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl h19, h27, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 77, 1B, 7F", "uqshl h19, h27, 11");
}

#[test]
fn uqshl_6061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl S(27), s0, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 74, 33, 7F", "uqshl S(27), s0, 19");
}

#[test]
fn uqshl_6062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl s13, s17, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 76, 22, 7F", "uqshl s13, s17, 2");
}

#[test]
fn uqshl_6063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl d27, D(30), 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 77, 52, 7F", "uqshl d27, D(30), 18");
}

#[test]
fn uqshl_6064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl d22, d18, 39
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 76, 67, 7F", "uqshl d22, d18, 39");
}

#[test]
fn uqshl_6065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(3).B16, v13.B16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 75, 0F, 6F", "uqshl V(3).B16, v13.B16, 7");
}

#[test]
fn uqshl_6066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(14).B16, V(5).B16, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 74, 0C, 6F", "uqshl V(14).B16, V(5).B16, 4");
}

#[test]
fn uqshl_6067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v4.B8, V(13).B8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 75, 0E, 2F", "uqshl v4.B8, V(13).B8, 6");
}

#[test]
fn uqshl_6068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v25.B8, V(27).B8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 77, 0A, 2F", "uqshl v25.B8, V(27).B8, 2");
}

#[test]
fn uqshl_6069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v14.H8, V(26).H8, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 77, 1D, 6F", "uqshl v14.H8, V(26).H8, 13");
}

#[test]
fn uqshl_6070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v15.H8, V(16).H8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 76, 12, 6F", "uqshl v15.H8, V(16).H8, 2");
}

#[test]
fn uqshl_6071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v19.H4, V(26).H4, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 1A, 2F", "uqshl v19.H4, V(26).H4, 10");
}

#[test]
fn uqshl_6072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v10.H4, v17.H4, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 76, 1C, 2F", "uqshl v10.H4, v17.H4, 12");
}

#[test]
fn uqshl_6073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v24.S4, V(10).S4, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 75, 2B, 6F", "uqshl v24.S4, V(10).S4, 11");
}

#[test]
fn uqshl_6074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(8).S4, v10.S4, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 75, 35, 6F", "uqshl V(8).S4, v10.S4, 21");
}

#[test]
fn uqshl_6075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v13.S2, v16.S2, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 76, 3B, 2F", "uqshl v13.S2, v16.S2, 27");
}

#[test]
fn uqshl_6076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(15).S2, v8.S2, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 75, 34, 2F", "uqshl V(15).S2, v8.S2, 20");
}

#[test]
fn uqshl_6077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(12).D2, v13.D2, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 75, 48, 6F", "uqshl V(12).D2, v13.D2, 8");
}

#[test]
fn uqshl_6078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(3).D2, V(22).D2, 34
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 76, 62, 6F", "uqshl V(3).D2, V(22).D2, 34");
}

#[test]
fn uqshl_6079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl b23, B(7), B(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 4C, 24, 7E", "uqshl b23, B(7), B(4)");
}

#[test]
fn uqshl_6080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl B(6), b16, B(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 4E, 32, 7E", "uqshl B(6), b16, B(18)");
}

#[test]
fn uqshl_6081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl h18, h27, h20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 4F, 74, 7E", "uqshl h18, h27, h20");
}

#[test]
fn uqshl_6082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl h18, h31, H(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 4F, 72, 7E", "uqshl h18, h31, H(18)");
}

#[test]
fn uqshl_6083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl S(12), s26, S(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 4F, B6, 7E", "uqshl S(12), s26, S(22)");
}

#[test]
fn uqshl_6084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl S(15), s14, S(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 4D, A7, 7E", "uqshl S(15), s14, S(7)");
}

#[test]
fn uqshl_6085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl d2, d25, d5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 4F, E5, 7E", "uqshl d2, d25, d5");
}

#[test]
fn uqshl_6086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl D(0), d13, d1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 4D, E1, 7E", "uqshl D(0), d13, d1");
}

#[test]
fn uqshl_6087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v15.B16, v9.B16, v0.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 4D, 20, 6E", "uqshl v15.B16, v9.B16, v0.B16");
}

#[test]
fn uqshl_6088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(16).B16, V(30).B16, V(31).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 4F, 3F, 6E", "uqshl V(16).B16, V(30).B16, V(31).B16");
}

#[test]
fn uqshl_6089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(9).B8, v2.B8, v26.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 4C, 3A, 2E", "uqshl V(9).B8, v2.B8, v26.B8");
}

#[test]
fn uqshl_6090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(2).B8, v0.B8, v26.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 4C, 3A, 2E", "uqshl V(2).B8, v0.B8, v26.B8");
}

#[test]
fn uqshl_6091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(9).H8, v23.H8, V(28).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 4E, 7C, 6E", "uqshl V(9).H8, v23.H8, V(28).H8");
}

#[test]
fn uqshl_6092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(5).H8, v29.H8, v30.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 4F, 7E, 6E", "uqshl V(5).H8, v29.H8, v30.H8");
}

#[test]
fn uqshl_6093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(17).H4, V(25).H4, v21.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 4F, 75, 2E", "uqshl V(17).H4, V(25).H4, v21.H4");
}

#[test]
fn uqshl_6094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(28).H4, v18.H4, V(3).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 4E, 63, 2E", "uqshl V(28).H4, v18.H4, V(3).H4");
}

#[test]
fn uqshl_6095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v29.S4, v6.S4, v3.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 4C, A3, 6E", "uqshl v29.S4, v6.S4, v3.S4");
}

#[test]
fn uqshl_6096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v27.S4, V(0).S4, v25.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 4C, B9, 6E", "uqshl v27.S4, V(0).S4, v25.S4");
}

#[test]
fn uqshl_6097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v0.S2, V(5).S2, v25.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 4C, B9, 2E", "uqshl v0.S2, V(5).S2, v25.S2");
}

#[test]
fn uqshl_6098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v3.S2, V(5).S2, v23.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 4C, B7, 2E", "uqshl v3.S2, V(5).S2, v23.S2");
}

#[test]
fn uqshl_6099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl v8.D2, V(23).D2, v2.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 4E, E2, 6E", "uqshl v8.D2, V(23).D2, v2.D2");
}

#[test]
fn uqshl_6100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshl V(27).D2, V(9).D2, V(29).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 4D, FD, 6E", "uqshl V(27).D2, V(9).D2, V(29).D2");
}

#[test]
fn uqshrn_6101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn b20, H(5), 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 94, 08, 7F", "uqshrn b20, H(5), 8");
}

#[test]
fn uqshrn_6102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn b9, H(22), 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 96, 0A, 7F", "uqshrn b9, H(22), 6");
}

#[test]
fn uqshrn_6103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn H(4), s2, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 94, 16, 7F", "uqshrn H(4), s2, 10");
}

#[test]
fn uqshrn_6104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn h1, S(17), 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 96, 1C, 7F", "uqshrn h1, S(17), 4");
}

#[test]
fn uqshrn_6105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn S(12), D(5), 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 94, 38, 7F", "uqshrn S(12), D(5), 8");
}

#[test]
fn uqshrn_6106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn s1, D(26), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 97, 39, 7F", "uqshrn s1, D(26), 7");
}

#[test]
fn uqshrn_6107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn v2.B8, v11.H8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 95, 0F, 2F", "uqshrn v2.B8, v11.H8, 1");
}

#[test]
fn uqshrn_6108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn v30.B8, v2.H8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 94, 0F, 2F", "uqshrn v30.B8, v2.H8, 1");
}

#[test]
fn uqshrn_6109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn V(27).H4, V(3).S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, 94, 19, 2F", "uqshrn V(27).H4, V(3).S4, 7");
}

#[test]
fn uqshrn_6110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn V(31).H4, v30.S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 97, 19, 2F", "uqshrn V(31).H4, v30.S4, 7");
}

#[test]
fn uqshrn_6111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn V(3).S2, v29.D2, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 97, 38, 2F", "uqshrn V(3).S2, v29.D2, 8");
}

#[test]
fn uqshrn_6112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn v14.S2, V(16).D2, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 96, 3A, 2F", "uqshrn v14.S2, V(16).D2, 6");
}

#[test]
fn uqshrn2_6113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn2 V(22).B16, v3.H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 94, 0C, 6F", "uqshrn2 V(22).B16, v3.H8, 4");
}

#[test]
fn uqshrn2_6114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn2 V(29).B16, v11.H8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 95, 0E, 6F", "uqshrn2 V(29).B16, v11.H8, 2");
}

#[test]
fn uqshrn2_6115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn2 v26.H8, v9.S4, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 95, 1F, 6F", "uqshrn2 v26.H8, v9.S4, 1");
}

#[test]
fn uqshrn2_6116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn2 v16.H8, V(30).S4, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 97, 18, 6F", "uqshrn2 v16.H8, V(30).S4, 8");
}

#[test]
fn uqshrn2_6117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn2 v3.S4, V(24).D2, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 97, 22, 6F", "uqshrn2 v3.S4, V(24).D2, 30");
}

#[test]
fn uqshrn2_6118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqshrn2 V(10).S4, V(20).D2, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 96, 39, 6F", "uqshrn2 V(10).S4, V(20).D2, 7");
}

#[test]
fn uqsub_6119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub B(10), b22, B(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 2E, 3A, 7E", "uqsub B(10), b22, B(26)");
}

#[test]
fn uqsub_6120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub B(5), B(21), b15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 2E, 2F, 7E", "uqsub B(5), B(21), b15");
}

#[test]
fn uqsub_6121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub h4, h9, h18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 2D, 72, 7E", "uqsub h4, h9, h18");
}

#[test]
fn uqsub_6122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub h0, h21, h16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 2E, 70, 7E", "uqsub h0, h21, h16");
}

#[test]
fn uqsub_6123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub S(14), s18, s23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 2E, B7, 7E", "uqsub S(14), s18, s23");
}

#[test]
fn uqsub_6124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub S(7), s20, s27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 2E, BB, 7E", "uqsub S(7), s20, s27");
}

#[test]
fn uqsub_6125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub d29, D(23), d18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 2E, F2, 7E", "uqsub d29, D(23), d18");
}

#[test]
fn uqsub_6126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub d15, D(22), d30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 2E, FE, 7E", "uqsub d15, D(22), d30");
}

#[test]
fn uqsub_6127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(9).B16, V(21).B16, v8.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 2E, 28, 6E", "uqsub V(9).B16, V(21).B16, v8.B16");
}

#[test]
fn uqsub_6128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(6).B16, v6.B16, V(3).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 2C, 23, 6E", "uqsub V(6).B16, v6.B16, V(3).B16");
}

#[test]
fn uqsub_6129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub v9.B8, v24.B8, V(18).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 2F, 32, 2E", "uqsub v9.B8, v24.B8, V(18).B8");
}

#[test]
fn uqsub_6130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub v16.B8, v16.B8, v29.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 2E, 3D, 2E", "uqsub v16.B8, v16.B8, v29.B8");
}

#[test]
fn uqsub_6131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub v0.H8, v22.H8, v0.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 2E, 60, 6E", "uqsub v0.H8, v22.H8, v0.H8");
}

#[test]
fn uqsub_6132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub v29.H8, V(28).H8, V(7).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 2F, 67, 6E", "uqsub v29.H8, V(28).H8, V(7).H8");
}

#[test]
fn uqsub_6133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub v27.H4, v31.H4, v26.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 2F, 7A, 2E", "uqsub v27.H4, v31.H4, v26.H4");
}

#[test]
fn uqsub_6134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(17).H4, v15.H4, v20.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 2D, 74, 2E", "uqsub V(17).H4, v15.H4, v20.H4");
}

#[test]
fn uqsub_6135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub v3.S4, V(10).S4, v28.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 2D, BC, 6E", "uqsub v3.S4, V(10).S4, v28.S4");
}

#[test]
fn uqsub_6136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(27).S4, v6.S4, V(16).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 2C, B0, 6E", "uqsub V(27).S4, v6.S4, V(16).S4");
}

#[test]
fn uqsub_6137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(1).S2, V(23).S2, v12.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 2E, AC, 2E", "uqsub V(1).S2, V(23).S2, v12.S2");
}

#[test]
fn uqsub_6138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(9).S2, v30.S2, v18.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 2F, B2, 2E", "uqsub V(9).S2, v30.S2, v18.S2");
}

#[test]
fn uqsub_6139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(0).D2, v24.D2, v15.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 2F, EF, 6E", "uqsub V(0).D2, v24.D2, v15.D2");
}

#[test]
fn uqsub_6140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqsub V(3).D2, v20.D2, v18.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 2E, F2, 6E", "uqsub V(3).D2, v20.D2, v18.D2");
}

#[test]
fn uqxtn_6141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn b2, h25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, 4B, 21, 7E", "uqxtn b2, h25");
}

#[test]
fn uqxtn_6142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn B(28), H(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 49, 21, 7E", "uqxtn B(28), H(15)");
}

#[test]
fn uqxtn_6143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn h14, S(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 48, 61, 7E", "uqxtn h14, S(7)");
}

#[test]
fn uqxtn_6144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn H(30), S(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 4B, 61, 7E", "uqxtn H(30), S(26)");
}

#[test]
fn uqxtn_6145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn S(10), D(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 4A, A1, 7E", "uqxtn S(10), D(19)");
}

#[test]
fn uqxtn_6146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn s1, D(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 4A, A1, 7E", "uqxtn s1, D(18)");
}

#[test]
fn uqxtn_6147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn v15.B8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 4B, 21, 2E", "uqxtn v15.B8, v25.H8");
}

#[test]
fn uqxtn_6148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn V(2).B8, v13.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 49, 21, 2E", "uqxtn V(2).B8, v13.H8");
}

#[test]
fn uqxtn_6149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn v15.H4, v17.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 4A, 61, 2E", "uqxtn v15.H4, v17.S4");
}

#[test]
fn uqxtn_6150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn V(0).H4, v6.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 48, 61, 2E", "uqxtn V(0).H4, v6.S4");
}

#[test]
fn uqxtn_6151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn v27.S2, V(5).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 48, A1, 2E", "uqxtn v27.S2, V(5).D2");
}

#[test]
fn uqxtn_6152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn v7.S2, v23.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 4A, A1, 2E", "uqxtn v7.S2, v23.D2");
}

#[test]
fn uqxtn2_6153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn2 v21.B16, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 4A, 21, 6E", "uqxtn2 v21.B16, V(19).H8");
}

#[test]
fn uqxtn2_6154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn2 v10.B16, V(15).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 49, 21, 6E", "uqxtn2 v10.B16, V(15).H8");
}

#[test]
fn uqxtn2_6155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn2 V(30).H8, V(4).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, 48, 61, 6E", "uqxtn2 V(30).H8, V(4).S4");
}

#[test]
fn uqxtn2_6156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn2 v25.H8, v5.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 48, 61, 6E", "uqxtn2 v25.H8, v5.S4");
}

#[test]
fn uqxtn2_6157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn2 v19.S4, v21.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4A, A1, 6E", "uqxtn2 v19.S4, v21.D2");
}

#[test]
fn uqxtn2_6158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uqxtn2 v30.S4, v25.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, 4B, A1, 6E", "uqxtn2 v30.S4, v25.D2");
}

#[test]
fn urecpe_6159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urecpe v31.S4, v10.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, C9, A1, 4E", "urecpe v31.S4, v10.S4");
}

#[test]
fn urecpe_6160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urecpe v7.S4, V(6).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, C8, A1, 4E", "urecpe v7.S4, V(6).S4");
}

#[test]
fn urecpe_6161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urecpe v27.S2, v31.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, CB, A1, 0E", "urecpe v27.S2, v31.S2");
}

#[test]
fn urecpe_6162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urecpe V(14).S2, v30.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, CB, A1, 0E", "urecpe V(14).S2, v30.S2");
}

#[test]
fn urhadd_6163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(13).B16, v7.B16, V(15).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 14, 2F, 6E", "urhadd V(13).B16, v7.B16, V(15).B16");
}

#[test]
fn urhadd_6164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(29).B16, v28.B16, v9.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 17, 29, 6E", "urhadd V(29).B16, v28.B16, v9.B16");
}

#[test]
fn urhadd_6165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(13).B8, V(18).B8, V(16).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 16, 30, 2E", "urhadd V(13).B8, V(18).B8, V(16).B8");
}

#[test]
fn urhadd_6166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(21).B8, V(26).B8, v16.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 17, 30, 2E", "urhadd V(21).B8, V(26).B8, v16.B8");
}

#[test]
fn urhadd_6167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd v12.H8, V(24).H8, V(21).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 17, 75, 6E", "urhadd v12.H8, V(24).H8, V(21).H8");
}

#[test]
fn urhadd_6168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd v28.H8, V(31).H8, V(2).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 17, 62, 6E", "urhadd v28.H8, V(31).H8, V(2).H8");
}

#[test]
fn urhadd_6169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(24).H4, v28.H4, V(26).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 17, 7A, 2E", "urhadd V(24).H4, v28.H4, V(26).H4");
}

#[test]
fn urhadd_6170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(16).H4, V(8).H4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 15, 6F, 2E", "urhadd V(16).H4, V(8).H4, V(15).H4");
}

#[test]
fn urhadd_6171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd V(3).S4, V(27).S4, V(30).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 17, BE, 6E", "urhadd V(3).S4, V(27).S4, V(30).S4");
}

#[test]
fn urhadd_6172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd v31.S4, v12.S4, V(29).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 15, BD, 6E", "urhadd v31.S4, v12.S4, V(29).S4");
}

#[test]
fn urhadd_6173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd v10.S2, v8.S2, v10.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 15, AA, 2E", "urhadd v10.S2, v8.S2, v10.S2");
}

#[test]
fn urhadd_6174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urhadd v16.S2, v4.S2, v7.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 14, A7, 2E", "urhadd v16.S2, v4.S2, v7.S2");
}

#[test]
fn urshl_6175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl D(26), D(16), d10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 56, EA, 7E", "urshl D(26), D(16), d10");
}

#[test]
fn urshl_6176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl D(19), d6, d8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 54, E8, 7E", "urshl D(19), d6, d8");
}

#[test]
fn urshl_6177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v18.B16, v1.B16, V(31).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 54, 3F, 6E", "urshl v18.B16, v1.B16, V(31).B16");
}

#[test]
fn urshl_6178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl V(18).B16, V(17).B16, v25.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 56, 39, 6E", "urshl V(18).B16, V(17).B16, v25.B16");
}

#[test]
fn urshl_6179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl V(4).B8, V(8).B8, v6.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 55, 26, 2E", "urshl V(4).B8, V(8).B8, v6.B8");
}

#[test]
fn urshl_6180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v19.B8, v0.B8, V(15).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 54, 2F, 2E", "urshl v19.B8, v0.B8, V(15).B8");
}

#[test]
fn urshl_6181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v12.H8, V(21).H8, v17.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 56, 71, 6E", "urshl v12.H8, V(21).H8, v17.H8");
}

#[test]
fn urshl_6182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v19.H8, v25.H8, V(12).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 57, 6C, 6E", "urshl v19.H8, v25.H8, V(12).H8");
}

#[test]
fn urshl_6183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v5.H4, V(27).H4, V(19).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 57, 73, 2E", "urshl v5.H4, V(27).H4, V(19).H4");
}

#[test]
fn urshl_6184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl V(13).H4, V(21).H4, V(1).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 56, 61, 2E", "urshl V(13).H4, V(21).H4, V(1).H4");
}

#[test]
fn urshl_6185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v29.S4, V(18).S4, v0.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 56, A0, 6E", "urshl v29.S4, V(18).S4, v0.S4");
}

#[test]
fn urshl_6186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl V(11).S4, v20.S4, V(7).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 56, A7, 6E", "urshl V(11).S4, v20.S4, V(7).S4");
}

#[test]
fn urshl_6187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v18.S2, V(3).S2, v24.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 54, B8, 2E", "urshl v18.S2, V(3).S2, v24.S2");
}

#[test]
fn urshl_6188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v28.S2, V(31).S2, v28.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 57, BC, 2E", "urshl v28.S2, V(31).S2, v28.S2");
}

#[test]
fn urshl_6189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl V(8).D2, v4.D2, V(7).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 54, E7, 6E", "urshl V(8).D2, v4.D2, V(7).D2");
}

#[test]
fn urshl_6190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshl v21.D2, V(17).D2, V(17).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 56, F1, 6E", "urshl v21.D2, V(17).D2, V(17).D2");
}

#[test]
fn urshr_6191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr d16, d4, 46
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 24, 52, 7F", "urshr d16, d4, 46");
}

#[test]
fn urshr_6192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr D(2), d14, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 25, 70, 7F", "urshr D(2), d14, 16");
}

#[test]
fn urshr_6193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr v11.B16, v6.B16, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 24, 08, 6F", "urshr v11.B16, v6.B16, 8");
}

#[test]
fn urshr_6194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(19).B16, V(29).B16, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 27, 0C, 6F", "urshr V(19).B16, V(29).B16, 4");
}

#[test]
fn urshr_6195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr v28.B8, v22.B8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 26, 0E, 2F", "urshr v28.B8, v22.B8, 2");
}

#[test]
fn urshr_6196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(27).B8, V(5).B8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 24, 0E, 2F", "urshr V(27).B8, V(5).B8, 2");
}

#[test]
fn urshr_6197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr v17.H8, V(31).H8, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 27, 1F, 6F", "urshr v17.H8, V(31).H8, 1");
}

#[test]
fn urshr_6198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(24).H8, v29.H8, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 27, 13, 6F", "urshr V(24).H8, v29.H8, 13");
}

#[test]
fn urshr_6199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr v6.H4, v30.H4, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 27, 17, 2F", "urshr v6.H4, v30.H4, 9");
}

#[test]
fn urshr_6200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(9).H4, v1.H4, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 24, 15, 2F", "urshr V(9).H4, v1.H4, 11");
}

#[test]
fn urshr_6201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(10).S4, V(15).S4, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 25, 25, 6F", "urshr V(10).S4, V(15).S4, 27");
}

#[test]
fn urshr_6202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(7).S4, v31.S4, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 27, 3A, 6F", "urshr V(7).S4, v31.S4, 6");
}

#[test]
fn urshr_6203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr v8.S2, v27.S2, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 27, 2F, 2F", "urshr v8.S2, v27.S2, 17");
}

#[test]
fn urshr_6204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(4).S2, V(11).S2, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 25, 24, 2F", "urshr V(4).S2, V(11).S2, 28");
}

#[test]
fn urshr_6205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr V(26).D2, v31.D2, 57
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 27, 47, 6F", "urshr V(26).D2, v31.D2, 57");
}

#[test]
fn urshr_6206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; urshr v14.D2, v14.D2, 44
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 25, 54, 6F", "urshr v14.D2, v14.D2, 44");
}

#[test]
fn ursqrte_6207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursqrte v12.S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, C9, A1, 6E", "ursqrte v12.S4, v11.S4");
}

#[test]
fn ursqrte_6208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursqrte V(30).S4, v10.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, C9, A1, 6E", "ursqrte V(30).S4, v10.S4");
}

#[test]
fn ursqrte_6209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursqrte V(0).S2, v26.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, CB, A1, 2E", "ursqrte V(0).S2, v26.S2");
}

#[test]
fn ursqrte_6210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursqrte v29.S2, v24.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, CB, A1, 2E", "ursqrte v29.S2, v24.S2");
}

#[test]
fn ursra_6211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra D(30), d2, 33
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 34, 5F, 7F", "ursra D(30), d2, 33");
}

#[test]
fn ursra_6212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra D(21), d5, 45
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 34, 53, 7F", "ursra D(21), d5, 45");
}

#[test]
fn ursra_6213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra v13.B16, v3.B16, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 34, 0C, 6F", "ursra v13.B16, v3.B16, 4");
}

#[test]
fn ursra_6214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra v16.B16, V(14).B16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 35, 09, 6F", "ursra v16.B16, V(14).B16, 7");
}

#[test]
fn ursra_6215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(26).B8, V(31).B8, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 37, 09, 2F", "ursra V(26).B8, V(31).B8, 7");
}

#[test]
fn ursra_6216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra v11.B8, v16.B8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 36, 0E, 2F", "ursra v11.B8, v16.B8, 2");
}

#[test]
fn ursra_6217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra v2.H8, v5.H8, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 34, 17, 6F", "ursra v2.H8, v5.H8, 9");
}

#[test]
fn ursra_6218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(13).H8, V(18).H8, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 36, 15, 6F", "ursra V(13).H8, V(18).H8, 11");
}

#[test]
fn ursra_6219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(16).H4, v17.H4, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 36, 14, 2F", "ursra V(16).H4, v17.H4, 12");
}

#[test]
fn ursra_6220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(13).H4, v11.H4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 35, 1D, 2F", "ursra V(13).H4, v11.H4, 3");
}

#[test]
fn ursra_6221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(20).S4, v1.S4, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 34, 2E, 6F", "ursra V(20).S4, v1.S4, 18");
}

#[test]
fn ursra_6222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(2).S4, v30.S4, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 37, 2E, 6F", "ursra V(2).S4, v30.S4, 18");
}

#[test]
fn ursra_6223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(22).S2, v30.S2, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 37, 2B, 2F", "ursra V(22).S2, v30.S2, 21");
}

#[test]
fn ursra_6224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra v6.S2, v26.S2, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 37, 33, 2F", "ursra v6.S2, v26.S2, 13");
}

#[test]
fn ursra_6225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra V(26).D2, v12.D2, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 35, 7F, 6F", "ursra V(26).D2, v12.D2, 1");
}

#[test]
fn ursra_6226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ursra v7.D2, V(16).D2, 53
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 36, 4B, 6F", "ursra v7.D2, V(16).D2, 53");
}

#[test]
fn ushl_6227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl D(8), D(13), d11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 45, EB, 7E", "ushl D(8), D(13), d11");
}

#[test]
fn ushl_6228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl D(5), D(30), d17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 47, F1, 7E", "ushl D(5), D(30), d17");
}

#[test]
fn ushl_6229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v20.B16, V(12).B16, V(31).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 45, 3F, 6E", "ushl v20.B16, V(12).B16, V(31).B16");
}

#[test]
fn ushl_6230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v0.B16, V(24).B16, V(9).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 47, 29, 6E", "ushl v0.B16, V(24).B16, V(9).B16");
}

#[test]
fn ushl_6231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v26.B8, V(3).B8, V(16).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 44, 30, 2E", "ushl v26.B8, V(3).B8, V(16).B8");
}

#[test]
fn ushl_6232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v20.B8, v30.B8, V(4).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 47, 24, 2E", "ushl v20.B8, v30.B8, V(4).B8");
}

#[test]
fn ushl_6233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl V(7).H8, v21.H8, v27.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 46, 7B, 6E", "ushl V(7).H8, v21.H8, v27.H8");
}

#[test]
fn ushl_6234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl V(30).H8, V(14).H8, V(23).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 45, 77, 6E", "ushl V(30).H8, V(14).H8, V(23).H8");
}

#[test]
fn ushl_6235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v26.H4, v23.H4, v30.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 46, 7E, 2E", "ushl v26.H4, v23.H4, v30.H4");
}

#[test]
fn ushl_6236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v24.H4, V(1).H4, v30.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 44, 7E, 2E", "ushl v24.H4, V(1).H4, v30.H4");
}

#[test]
fn ushl_6237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v6.S4, v6.S4, v18.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 44, B2, 6E", "ushl v6.S4, v6.S4, v18.S4");
}

#[test]
fn ushl_6238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v11.S4, v0.S4, v12.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 44, AC, 6E", "ushl v11.S4, v0.S4, v12.S4");
}

#[test]
fn ushl_6239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl V(20).S2, V(24).S2, v20.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 47, B4, 2E", "ushl V(20).S2, V(24).S2, v20.S2");
}

#[test]
fn ushl_6240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v18.S2, v14.S2, v29.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 45, BD, 2E", "ushl v18.S2, v14.S2, v29.S2");
}

#[test]
fn ushl_6241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl v19.D2, V(5).D2, v12.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 44, EC, 6E", "ushl v19.D2, V(5).D2, v12.D2");
}

#[test]
fn ushl_6242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushl V(22).D2, v22.D2, v17.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 46, F1, 6E", "ushl V(22).D2, v22.D2, v17.D2");
}

#[test]
fn ushll_6243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll V(12).H8, v13.B8, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, A5, 0F, 2F", "ushll V(12).H8, v13.B8, 7");
}

#[test]
fn ushll_6244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll V(12).H8, v31.B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, A7, 08, 2F", "ushll V(12).H8, v31.B8, 0");
}

#[test]
fn ushll_6245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll v11.S4, v22.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, A6, 10, 2F", "ushll v11.S4, v22.H4, 0");
}

#[test]
fn ushll_6246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll v28.S4, V(2).H4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, A4, 17, 2F", "ushll v28.S4, V(2).H4, 7");
}

#[test]
fn ushll_6247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll V(20).D2, V(3).S2, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, A4, 2C, 2F", "ushll V(20).D2, V(3).S2, 12");
}

#[test]
fn ushll_6248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll V(29).D2, V(19).S2, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, A6, 38, 2F", "ushll V(29).D2, V(19).S2, 24");
}

#[test]
fn ushll2_6249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll2 v14.H8, V(28).B16, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, A7, 0B, 6F", "ushll2 v14.H8, V(28).B16, 3");
}

#[test]
fn ushll2_6250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll2 v4.H8, v1.B16, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, A4, 0E, 6F", "ushll2 v4.H8, v1.B16, 6");
}

#[test]
fn ushll2_6251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll2 v20.S4, v19.H8, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, A6, 1D, 6F", "ushll2 v20.S4, v19.H8, 13");
}

#[test]
fn ushll2_6252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll2 v31.S4, v4.H8, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, A4, 1C, 6F", "ushll2 v31.S4, v4.H8, 12");
}

#[test]
fn ushll2_6253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll2 V(20).D2, V(19).S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, A6, 27, 6F", "ushll2 V(20).D2, V(19).S4, 7");
}

#[test]
fn ushll2_6254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushll2 V(16).D2, v8.S4, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, A5, 3A, 6F", "ushll2 V(16).D2, v8.S4, 26");
}

#[test]
fn ushr_6255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr d23, D(18), 50
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 06, 4E, 7F", "ushr d23, D(18), 50");
}

#[test]
fn ushr_6256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr D(16), D(14), 42
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 05, 56, 7F", "ushr D(16), D(14), 42");
}

#[test]
fn ushr_6257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr V(18).B16, V(13).B16, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 05, 0C, 6F", "ushr V(18).B16, V(13).B16, 4");
}

#[test]
fn ushr_6258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v5.B16, V(27).B16, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 07, 09, 6F", "ushr v5.B16, V(27).B16, 7");
}

#[test]
fn ushr_6259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v24.B8, v10.B8, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 05, 0E, 2F", "ushr v24.B8, v10.B8, 2");
}

#[test]
fn ushr_6260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v15.B8, v4.B8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 04, 0C, 2F", "ushr v15.B8, v4.B8, 4");
}

#[test]
fn ushr_6261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v24.H8, v22.H8, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 06, 1C, 6F", "ushr v24.H8, v22.H8, 4");
}

#[test]
fn ushr_6262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v31.H8, V(20).H8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 06, 1A, 6F", "ushr v31.H8, V(20).H8, 6");
}

#[test]
fn ushr_6263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v27.H4, V(5).H4, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 04, 1A, 2F", "ushr v27.H4, V(5).H4, 6");
}

#[test]
fn ushr_6264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr V(31).H4, V(30).H4, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 07, 1E, 2F", "ushr V(31).H4, V(30).H4, 2");
}

#[test]
fn ushr_6265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr V(14).S4, V(4).S4, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 04, 2E, 6F", "ushr V(14).S4, V(4).S4, 18");
}

#[test]
fn ushr_6266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr V(18).S4, V(23).S4, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 06, 2B, 6F", "ushr V(18).S4, V(23).S4, 21");
}

#[test]
fn ushr_6267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr V(29).S2, V(17).S2, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 06, 3E, 2F", "ushr V(29).S2, V(17).S2, 2");
}

#[test]
fn ushr_6268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v27.S2, v12.S2, 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 05, 27, 2F", "ushr v27.S2, v12.S2, 25");
}

#[test]
fn ushr_6269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr v27.D2, V(29).D2, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 07, 7C, 6F", "ushr v27.D2, V(29).D2, 4");
}

#[test]
fn ushr_6270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ushr V(24).D2, v26.D2, 43
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, 07, 55, 6F", "ushr V(24).D2, v26.D2, 43");
}

#[test]
fn usqadd_6271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd B(17), b4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 38, 20, 7E", "usqadd B(17), b4");
}

#[test]
fn usqadd_6272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd B(14), b13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 39, 20, 7E", "usqadd B(14), b13");
}

#[test]
fn usqadd_6273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd h3, H(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 3A, 60, 7E", "usqadd h3, H(18)");
}

#[test]
fn usqadd_6274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd H(0), H(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 3B, 60, 7E", "usqadd H(0), H(27)");
}

#[test]
fn usqadd_6275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd S(28), S(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 38, A0, 7E", "usqadd S(28), S(4)");
}

#[test]
fn usqadd_6276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd s27, s4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 38, A0, 7E", "usqadd s27, s4");
}

#[test]
fn usqadd_6277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd d0, D(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 3B, E0, 7E", "usqadd d0, D(31)");
}

#[test]
fn usqadd_6278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd D(24), D(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 3A, E0, 7E", "usqadd D(24), D(22)");
}

#[test]
fn usqadd_6279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd V(29).B16, V(30).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 3B, 20, 6E", "usqadd V(29).B16, V(30).B16");
}

#[test]
fn usqadd_6280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v22.B16, v14.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 39, 20, 6E", "usqadd v22.B16, v14.B16");
}

#[test]
fn usqadd_6281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v5.B8, V(19).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 3A, 20, 2E", "usqadd v5.B8, V(19).B8");
}

#[test]
fn usqadd_6282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd V(5).B8, v23.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 3A, 20, 2E", "usqadd V(5).B8, v23.B8");
}

#[test]
fn usqadd_6283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v31.H8, V(3).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 38, 60, 6E", "usqadd v31.H8, V(3).H8");
}

#[test]
fn usqadd_6284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v27.H8, V(30).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 3B, 60, 6E", "usqadd v27.H8, V(30).H8");
}

#[test]
fn usqadd_6285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v18.H4, V(29).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 3B, 60, 2E", "usqadd v18.H4, V(29).H4");
}

#[test]
fn usqadd_6286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd V(18).H4, V(30).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 3B, 60, 2E", "usqadd V(18).H4, V(30).H4");
}

#[test]
fn usqadd_6287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v31.S4, V(27).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 3B, A0, 6E", "usqadd v31.S4, V(27).S4");
}

#[test]
fn usqadd_6288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v3.S4, v22.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 3A, A0, 6E", "usqadd v3.S4, v22.S4");
}

#[test]
fn usqadd_6289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v28.S2, v5.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 38, A0, 2E", "usqadd v28.S2, v5.S2");
}

#[test]
fn usqadd_6290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd V(18).S2, v10.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 39, A0, 2E", "usqadd V(18).S2, v10.S2");
}

#[test]
fn usqadd_6291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd v26.D2, V(29).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 3B, E0, 6E", "usqadd v26.D2, V(29).D2");
}

#[test]
fn usqadd_6292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usqadd V(18).D2, V(0).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 38, E0, 6E", "usqadd V(18).D2, V(0).D2");
}

#[test]
fn usra_6293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra D(13), d5, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 14, 6C, 7F", "usra D(13), d5, 20");
}

#[test]
fn usra_6294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra d28, d19, 35
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 16, 5D, 7F", "usra d28, d19, 35");
}

#[test]
fn usra_6295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v15.B16, v25.B16, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 17, 0C, 6F", "usra v15.B16, v25.B16, 4");
}

#[test]
fn usra_6296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(31).B16, v28.B16, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 17, 0A, 6F", "usra V(31).B16, v28.B16, 6");
}

#[test]
fn usra_6297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(29).B8, V(30).B8, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 17, 0D, 2F", "usra V(29).B8, V(30).B8, 3");
}

#[test]
fn usra_6298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v0.B8, V(24).B8, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 17, 0D, 2F", "usra v0.B8, V(24).B8, 3");
}

#[test]
fn usra_6299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(25).H8, v4.H8, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 14, 16, 6F", "usra V(25).H8, v4.H8, 10");
}

#[test]
fn usra_6300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v31.H8, v9.H8, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 15, 15, 6F", "usra v31.H8, v9.H8, 11");
}

#[test]
fn usra_6301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(28).H4, V(21).H4, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 16, 1B, 2F", "usra V(28).H4, V(21).H4, 5");
}

#[test]
fn usra_6302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v25.H4, v13.H4, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 15, 1A, 2F", "usra v25.H4, v13.H4, 6");
}

#[test]
fn usra_6303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v20.S4, V(18).S4, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 16, 39, 6F", "usra v20.S4, V(18).S4, 7");
}

#[test]
fn usra_6304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(17).S4, v26.S4, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 17, 3D, 6F", "usra V(17).S4, v26.S4, 3");
}

#[test]
fn usra_6305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v9.S2, V(8).S2, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 15, 3E, 2F", "usra v9.S2, V(8).S2, 2");
}

#[test]
fn usra_6306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(28).S2, v2.S2, 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 14, 29, 2F", "usra V(28).S2, v2.S2, 23");
}

#[test]
fn usra_6307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra v26.D2, V(20).D2, 44
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 16, 54, 6F", "usra v26.D2, V(20).D2, 44");
}

#[test]
fn usra_6308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usra V(4).D2, V(4).D2, 36
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 14, 5C, 6F", "usra V(4).D2, V(4).D2, 36");
}

#[test]
fn usubl_6309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl v10.H8, v5.B8, v19.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 20, 33, 2E", "usubl v10.H8, v5.B8, v19.B8");
}

#[test]
fn usubl_6310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl V(6).H8, V(14).B8, V(0).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 21, 20, 2E", "usubl V(6).H8, V(14).B8, V(0).B8");
}

#[test]
fn usubl_6311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl v25.S4, V(4).H4, V(3).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 20, 63, 2E", "usubl v25.S4, V(4).H4, V(3).H4");
}

#[test]
fn usubl_6312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl v28.S4, v20.H4, V(31).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 22, 7F, 2E", "usubl v28.S4, v20.H4, V(31).H4");
}

#[test]
fn usubl_6313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl V(9).D2, V(11).S2, v15.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 21, AF, 2E", "usubl V(9).D2, V(11).S2, v15.S2");
}

#[test]
fn usubl_6314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl v15.D2, V(29).S2, v26.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 23, BA, 2E", "usubl v15.D2, V(29).S2, v26.S2");
}

#[test]
fn usubl2_6315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl2 V(26).H8, V(16).B16, V(6).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 22, 26, 6E", "usubl2 V(26).H8, V(16).B16, V(6).B16");
}

#[test]
fn usubl2_6316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl2 V(20).H8, v3.B16, V(10).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 20, 2A, 6E", "usubl2 V(20).H8, v3.B16, V(10).B16");
}

#[test]
fn usubl2_6317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl2 V(17).S4, v29.H8, V(6).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 23, 66, 6E", "usubl2 V(17).S4, v29.H8, V(6).H8");
}

#[test]
fn usubl2_6318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl2 V(25).S4, V(29).H8, v23.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 23, 77, 6E", "usubl2 V(25).S4, V(29).H8, v23.H8");
}

#[test]
fn usubl2_6319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl2 V(26).D2, v28.S4, V(10).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 23, AA, 6E", "usubl2 V(26).D2, v28.S4, V(10).S4");
}

#[test]
fn usubl2_6320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubl2 v1.D2, V(13).S4, v25.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 21, B9, 6E", "usubl2 v1.D2, V(13).S4, v25.S4");
}

#[test]
fn usubw_6321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw V(14).H8, v31.H8, V(2).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 33, 22, 2E", "usubw V(14).H8, v31.H8, V(2).B8");
}

#[test]
fn usubw_6322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw v25.H8, V(30).H8, v0.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 33, 20, 2E", "usubw v25.H8, V(30).H8, v0.B8");
}

#[test]
fn usubw_6323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw v22.S4, V(20).S4, v15.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 32, 6F, 2E", "usubw v22.S4, V(20).S4, v15.H4");
}

#[test]
fn usubw_6324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw v30.S4, V(16).S4, v3.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 32, 63, 2E", "usubw v30.S4, V(16).S4, v3.H4");
}

#[test]
fn usubw_6325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw v20.D2, v30.D2, v9.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 33, A9, 2E", "usubw v20.D2, v30.D2, v9.S2");
}

#[test]
fn usubw_6326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw V(29).D2, v6.D2, V(27).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 30, BB, 2E", "usubw V(29).D2, v6.D2, V(27).S2");
}

#[test]
fn usubw2_6327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw2 v21.H8, V(6).H8, V(22).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 30, 36, 6E", "usubw2 v21.H8, V(6).H8, V(22).B16");
}

#[test]
fn usubw2_6328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw2 v7.H8, V(25).H8, v1.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 33, 21, 6E", "usubw2 v7.H8, V(25).H8, v1.B16");
}

#[test]
fn usubw2_6329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw2 V(12).S4, V(18).S4, V(22).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 32, 76, 6E", "usubw2 V(12).S4, V(18).S4, V(22).H8");
}

#[test]
fn usubw2_6330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw2 V(28).S4, V(23).S4, v11.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 32, 6B, 6E", "usubw2 V(28).S4, V(23).S4, v11.H8");
}

#[test]
fn usubw2_6331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw2 V(19).D2, V(24).D2, V(2).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 33, A2, 6E", "usubw2 V(19).D2, V(24).D2, V(2).S4");
}

#[test]
fn usubw2_6332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; usubw2 v27.D2, V(14).D2, V(5).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 31, A5, 6E", "usubw2 v27.D2, V(14).D2, V(5).S4");
}

#[test]
fn uxtb_6333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtb w4, W(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "04, 1E, 00, 53", "uxtb w4, W(16)");
}

#[test]
fn uxtb_6334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtb W(8), W(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 1F, 00, 53", "uxtb W(8), W(24)");
}

#[test]
fn uxth_6335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxth w19, w5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 3C, 00, 53", "uxth w19, w5");
}

#[test]
fn uxth_6336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxth w4, w25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 3F, 00, 53", "uxth w4, w25");
}

#[test]
fn uxtl_6337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl v10.H8, V(10).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, A5, 08, 2F", "uxtl v10.H8, V(10).B8");
}

#[test]
fn uxtl_6338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl v24.H8, v10.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "58, A5, 08, 2F", "uxtl v24.H8, v10.B8");
}

#[test]
fn uxtl_6339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl V(12).S4, V(2).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, A4, 10, 2F", "uxtl V(12).S4, V(2).H4");
}

#[test]
fn uxtl_6340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl v2.S4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, A5, 10, 2F", "uxtl v2.S4, V(15).H4");
}

#[test]
fn uxtl_6341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl V(16).D2, V(30).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, A7, 20, 2F", "uxtl V(16).D2, V(30).S2");
}

#[test]
fn uxtl_6342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl v8.D2, v7.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, A4, 20, 2F", "uxtl v8.D2, v7.S2");
}

#[test]
fn uxtl2_6343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl2 V(20).H8, V(16).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, A6, 08, 6F", "uxtl2 V(20).H8, V(16).B16");
}

#[test]
fn uxtl2_6344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl2 V(28).H8, v17.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, A6, 08, 6F", "uxtl2 V(28).H8, v17.B16");
}

#[test]
fn uxtl2_6345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl2 V(23).S4, V(12).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A5, 10, 6F", "uxtl2 V(23).S4, V(12).H8");
}

#[test]
fn uxtl2_6346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl2 v31.S4, v5.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, A4, 10, 6F", "uxtl2 v31.S4, v5.H8");
}

#[test]
fn uxtl2_6347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl2 v20.D2, v14.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, A5, 20, 6F", "uxtl2 v20.D2, v14.S4");
}

#[test]
fn uxtl2_6348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uxtl2 V(7).D2, V(30).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, A7, 20, 6F", "uxtl2 V(7).D2, V(30).S4");
}

#[test]
fn uzp1_6349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v14.B16, v23.B16, v12.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 1A, 0C, 4E", "uzp1 v14.B16, v23.B16, v12.B16");
}

#[test]
fn uzp1_6350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v22.B16, V(2).B16, V(25).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, 18, 19, 4E", "uzp1 v22.B16, V(2).B16, V(25).B16");
}

#[test]
fn uzp1_6351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v29.B8, V(24).B8, v28.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 1B, 1C, 0E", "uzp1 v29.B8, V(24).B8, v28.B8");
}

#[test]
fn uzp1_6352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 V(5).B8, V(25).B8, V(2).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 1B, 02, 0E", "uzp1 V(5).B8, V(25).B8, V(2).B8");
}

#[test]
fn uzp1_6353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v19.H8, V(12).H8, V(27).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 19, 5B, 4E", "uzp1 v19.H8, V(12).H8, V(27).H8");
}

#[test]
fn uzp1_6354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v4.H8, v13.H8, V(10).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 19, 4A, 4E", "uzp1 v4.H8, v13.H8, V(10).H8");
}

#[test]
fn uzp1_6355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v13.H4, v14.H4, v5.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 19, 45, 0E", "uzp1 v13.H4, v14.H4, v5.H4");
}

#[test]
fn uzp1_6356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v20.H4, v31.H4, v28.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 1B, 5C, 0E", "uzp1 v20.H4, v31.H4, v28.H4");
}

#[test]
fn uzp1_6357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v0.S4, V(4).S4, v16.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 18, 90, 4E", "uzp1 v0.S4, V(4).S4, v16.S4");
}

#[test]
fn uzp1_6358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 V(6).S4, V(11).S4, V(7).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 19, 87, 4E", "uzp1 V(6).S4, V(11).S4, V(7).S4");
}

#[test]
fn uzp1_6359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 V(6).S2, v27.S2, V(1).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 1B, 81, 0E", "uzp1 V(6).S2, v27.S2, V(1).S2");
}

#[test]
fn uzp1_6360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v28.S2, V(2).S2, V(10).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 18, 8A, 0E", "uzp1 v28.S2, V(2).S2, V(10).S2");
}

#[test]
fn uzp1_6361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v24.D2, v19.D2, V(22).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 1A, D6, 4E", "uzp1 v24.D2, v19.D2, V(22).D2");
}

#[test]
fn uzp1_6362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp1 v19.D2, v26.D2, v30.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, DE, 4E", "uzp1 v19.D2, v26.D2, v30.D2");
}

#[test]
fn uzp2_6363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v4.B16, V(12).B16, v6.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 59, 06, 4E", "uzp2 v4.B16, V(12).B16, v6.B16");
}

#[test]
fn uzp2_6364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v4.B16, V(30).B16, v1.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 5B, 01, 4E", "uzp2 v4.B16, V(30).B16, v1.B16");
}

#[test]
fn uzp2_6365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(25).B8, v18.B8, v5.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 5A, 05, 0E", "uzp2 V(25).B8, v18.B8, v5.B8");
}

#[test]
fn uzp2_6366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(13).B8, v12.B8, v26.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 59, 1A, 0E", "uzp2 V(13).B8, v12.B8, v26.B8");
}

#[test]
fn uzp2_6367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(8).H8, V(28).H8, v0.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 5B, 40, 4E", "uzp2 V(8).H8, V(28).H8, v0.H8");
}

#[test]
fn uzp2_6368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(6).H8, V(1).H8, v16.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 58, 50, 4E", "uzp2 V(6).H8, V(1).H8, v16.H8");
}

#[test]
fn uzp2_6369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(6).H4, v25.H4, V(23).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 5B, 57, 0E", "uzp2 V(6).H4, v25.H4, V(23).H4");
}

#[test]
fn uzp2_6370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v21.H4, V(14).H4, V(15).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 59, 4F, 0E", "uzp2 v21.H4, V(14).H4, V(15).H4");
}

#[test]
fn uzp2_6371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(25).S4, V(22).S4, V(31).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 5A, 9F, 4E", "uzp2 V(25).S4, V(22).S4, V(31).S4");
}

#[test]
fn uzp2_6372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 V(22).S4, v28.S4, v17.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 5B, 91, 4E", "uzp2 V(22).S4, v28.S4, v17.S4");
}

#[test]
fn uzp2_6373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v26.S2, v7.S2, v28.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 58, 9C, 0E", "uzp2 v26.S2, v7.S2, v28.S2");
}

#[test]
fn uzp2_6374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v4.S2, V(28).S2, v31.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 5B, 9F, 0E", "uzp2 v4.S2, V(28).S2, v31.S2");
}

#[test]
fn uzp2_6375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v25.D2, v2.D2, V(31).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 58, DF, 4E", "uzp2 v25.D2, v2.D2, V(31).D2");
}

#[test]
fn uzp2_6376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; uzp2 v25.D2, v24.D2, V(23).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 5B, D7, 4E", "uzp2 v25.D2, v24.D2, V(23).D2");
}

#[test]
fn wfe_6377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; wfe
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 20, 03, D5", "wfe");
}

#[test]
fn wfe_6378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; wfe
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 20, 03, D5", "wfe");
}

#[test]
fn wfi_6379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; wfi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 20, 03, D5", "wfi");
}

#[test]
fn wfi_6380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; wfi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 20, 03, D5", "wfi");
}

#[test]
fn xar_6381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xar v10.D2, v14.D2, v1.D2, 38
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 99, 81, CE", "xar v10.D2, v14.D2, v1.D2, 38");
}

#[test]
fn xar_6382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xar v28.D2, V(31).D2, V(15).D2, 54
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, DB, 8F, CE", "xar v28.D2, V(31).D2, V(15).D2, 54");
}

#[test]
fn xpacd_6383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xpacd X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 47, C1, DA", "xpacd X(29)");
}

#[test]
fn xpacd_6384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xpacd x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 47, C1, DA", "xpacd x11");
}

#[test]
fn xpaci_6385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xpaci X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 43, C1, DA", "xpaci X(21)");
}

#[test]
fn xpaci_6386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xpaci x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 43, C1, DA", "xpaci x21");
}

#[test]
fn xpaclri_6387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xpaclri
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 20, 03, D5", "xpaclri");
}

#[test]
fn xpaclri_6388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xpaclri
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 20, 03, D5", "xpaclri");
}

#[test]
fn xtn_6389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn V(18).B8, V(27).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 2B, 21, 0E", "xtn V(18).B8, V(27).H8");
}

#[test]
fn xtn_6390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn v25.B8, V(4).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 28, 21, 0E", "xtn v25.B8, V(4).H8");
}

#[test]
fn xtn_6391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn V(2).H4, V(20).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 2A, 61, 0E", "xtn V(2).H4, V(20).S4");
}

#[test]
fn xtn_6392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn V(13).H4, V(12).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 29, 61, 0E", "xtn V(13).H4, V(12).S4");
}

#[test]
fn xtn_6393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn V(26).S2, V(14).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 29, A1, 0E", "xtn V(26).S2, V(14).D2");
}

#[test]
fn xtn_6394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn V(1).S2, V(24).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 2B, A1, 0E", "xtn V(1).S2, V(24).D2");
}

#[test]
fn xtn2_6395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn2 V(14).B16, v17.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 2A, 21, 4E", "xtn2 V(14).B16, v17.H8");
}

#[test]
fn xtn2_6396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn2 v4.B16, v26.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 2B, 21, 4E", "xtn2 v4.B16, v26.H8");
}

#[test]
fn xtn2_6397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn2 V(15).H8, v27.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 2B, 61, 4E", "xtn2 V(15).H8, v27.S4");
}

#[test]
fn xtn2_6398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn2 V(20).H8, V(21).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 2A, 61, 4E", "xtn2 V(20).H8, V(21).S4");
}

#[test]
fn xtn2_6399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; xtn2 v1.S4, V(21).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 2A, A1, 4E", "xtn2 v1.S4, V(21).D2");
}
