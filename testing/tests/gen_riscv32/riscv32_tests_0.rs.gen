
#[test]
fn add_0() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; add x24, x1, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8C, 40, 00", "add x24, x1, X(4)");
}

#[test]
fn add_1() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; add X(0), x14, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 87, 00", "add X(0), x14, X(8)");
}

#[test]
fn addi_2() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; addi x13, X(16), 465
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 06, 18, 1D", "addi x13, X(16), 465");
}

#[test]
fn addi_3() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; addi x15, x23, -19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 87, DB, FE", "addi x15, x23, -19");
}

#[test]
fn aes32dsi_4() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsi X(10), x30, x21, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 05, 5F, EB", "aes32dsi X(10), x30, x21, 3");
}

#[test]
fn aes32dsi_5() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsi X(1), x11, x3, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 80, 35, 2A", "aes32dsi X(1), x11, x3, 0");
}

#[test]
fn aes32dsmi_6() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; aes32dsmi X(25), X(15), X(30), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8C, E7, 2F", "aes32dsmi X(25), X(15), X(30), 0");
}

#[test]
fn aes32dsmi_7() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknd
        ; aes32dsmi X(29), x17, x27, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8E, B8, AF", "aes32dsmi X(29), x17, x27, 2");
}

#[test]
fn aes32esi_8() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkne
        ; aes32esi X(4), x29, X(19), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 82, 3E, E3", "aes32esi X(4), x29, X(19), 3");
}

#[test]
fn aes32esi_9() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; aes32esi x18, X(22), X(5), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 09, 5B, E2", "aes32esi x18, X(22), X(5), 3");
}

#[test]
fn aes32esmi_10() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkne
        ; aes32esmi X(6), x5, X(5), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 83, 52, 66", "aes32esmi X(6), x5, X(5), 1");
}

#[test]
fn aes32esmi_11() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32esmi X(17), X(6), X(0), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 08, 03, 66", "aes32esmi X(17), X(6), X(0), 1");
}

#[test]
fn amoadd_b_12() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b X(26), x8, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8D, 84, 00", "amoadd.b X(26), x8, [x9]");
}

#[test]
fn amoadd_b_13() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b X(24), X(12), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8C, C6, 00", "amoadd.b X(24), X(12), [X(13)]");
}

#[test]
fn amoadd_b_aq_14() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aq x15, x9, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 07, 94, 04", "amoadd.b.aq x15, x9, [X(8)]");
}

#[test]
fn amoadd_b_aq_15() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aq X(13), X(15), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 86, F3, 04", "amoadd.b.aq X(13), X(15), [X(7)]");
}

#[test]
fn amoadd_b_aqrl_16() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aqrl x25, X(6), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8C, 63, 06", "amoadd.b.aqrl x25, X(6), [X(7)]");
}

#[test]
fn amoadd_b_aqrl_17() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aqrl X(28), X(2), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, 20, 06", "amoadd.b.aqrl X(28), X(2), [X(0)]");
}

#[test]
fn amoadd_b_rl_18() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.rl x28, x28, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, CC, 03", "amoadd.b.rl x28, x28, [X(24)]");
}

#[test]
fn amoadd_b_rl_19() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.rl X(7), X(2), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 03, 2B, 02", "amoadd.b.rl X(7), X(2), [x22]");
}

#[test]
fn amoadd_h_20() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h x12, X(8), [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, 88, 00", "amoadd.h x12, X(8), [X(16)]");
}

#[test]
fn amoadd_h_21() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h X(13), X(11), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, BF, 00", "amoadd.h X(13), X(11), [x31]");
}

#[test]
fn amoadd_h_aq_22() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aq X(4), x15, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 92, F5, 04", "amoadd.h.aq X(4), x15, [x11]");
}

#[test]
fn amoadd_h_aq_23() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aq x9, x21, [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, 52, 05", "amoadd.h.aq x9, x21, [X(4)]");
}

#[test]
fn amoadd_h_aqrl_24() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aqrl x13, x21, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 16, 58, 07", "amoadd.h.aqrl x13, x21, [X(16)]");
}

#[test]
fn amoadd_h_aqrl_25() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aqrl X(14), X(1), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, 1A, 06", "amoadd.h.aqrl X(14), X(1), [x21]");
}

#[test]
fn amoadd_h_rl_26() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.rl X(2), X(24), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, 80, 03", "amoadd.h.rl X(2), X(24), [X(0)]");
}

#[test]
fn amoadd_h_rl_27() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.rl X(2), x17, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, 1E, 03", "amoadd.h.rl X(2), x17, [x29]");
}

#[test]
fn amoadd_w_28() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w X(3), x21, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 21, 5F, 01", "amoadd.w X(3), x21, [x30]");
}

#[test]
fn amoadd_w_29() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w X(16), X(21), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A8, 53, 01", "amoadd.w X(16), X(21), [X(7)]");
}

#[test]
fn amoadd_w_aq_30() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aq X(6), x12, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A3, CB, 04", "amoadd.w.aq X(6), x12, [X(23)]");
}

#[test]
fn amoadd_w_aq_31() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aq X(18), X(0), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 00, 04", "amoadd.w.aq X(18), X(0), [x1]");
}

#[test]
fn amoadd_w_aqrl_32() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aqrl x4, x24, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A2, 8D, 07", "amoadd.w.aqrl x4, x24, [X(27)]");
}

#[test]
fn amoadd_w_aqrl_33() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aqrl x18, x2, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 2B, 06", "amoadd.w.aqrl x18, x2, [x23]");
}

#[test]
fn amoadd_w_rl_34() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.rl X(3), X(15), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A1, F6, 02", "amoadd.w.rl X(3), X(15), [X(13)]");
}

#[test]
fn amoadd_w_rl_35() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.rl x22, X(24), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2B, 80, 03", "amoadd.w.rl x22, X(24), [X(0)]");
}

#[test]
fn amoand_b_36() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b x10, x27, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, BB, 61", "amoand.b x10, x27, [X(22)]");
}

#[test]
fn amoand_b_37() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b X(18), x25, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, 9E, 61", "amoand.b X(18), x25, [X(29)]");
}

#[test]
fn amoand_b_aq_38() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aq x25, x6, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0C, 61, 64", "amoand.b.aq x25, x6, [X(2)]");
}

#[test]
fn amoand_b_aq_39() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aq x5, x1, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 82, 10, 64", "amoand.b.aq x5, x1, [x1]");
}

#[test]
fn amoand_b_aqrl_40() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aqrl x31, X(21), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, 5D, 67", "amoand.b.aqrl x31, X(21), [X(26)]");
}

#[test]
fn amoand_b_aqrl_41() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aqrl x3, X(1), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 81, 12, 66", "amoand.b.aqrl x3, X(1), [x5]");
}

#[test]
fn amoand_b_rl_42() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.rl x4, x3, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, 30, 62", "amoand.b.rl x4, x3, [X(1)]");
}

#[test]
fn amoand_b_rl_43() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.rl X(1), x13, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 80, D8, 62", "amoand.b.rl X(1), x13, [X(17)]");
}

#[test]
fn amoand_h_44() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h x9, X(22), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, 6B, 61", "amoand.h x9, X(22), [x22]");
}

#[test]
fn amoand_h_45() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h X(19), x13, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, DF, 60", "amoand.h X(19), x13, [x30]");
}

#[test]
fn amoand_h_aq_46() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aq x21, x16, [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1A, 0D, 65", "amoand.h.aq x21, x16, [X(26)]");
}

#[test]
fn amoand_h_aq_47() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aq X(31), X(4), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, 46, 64", "amoand.h.aq X(31), X(4), [X(13)]");
}

#[test]
fn amoand_h_aqrl_48() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aqrl X(16), x6, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, 6D, 66", "amoand.h.aqrl X(16), x6, [X(27)]");
}

#[test]
fn amoand_h_aqrl_49() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aqrl x14, X(7), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, 7A, 66", "amoand.h.aqrl x14, X(7), [X(21)]");
}

#[test]
fn amoand_h_rl_50() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.rl x29, X(14), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, E4, 62", "amoand.h.rl x29, X(14), [x9]");
}

#[test]
fn amoand_h_rl_51() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.rl x13, x22, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 16, 63, 63", "amoand.h.rl x13, x22, [X(6)]");
}

#[test]
fn amoand_w_52() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w x12, X(14), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, E0, 60", "amoand.w x12, X(14), [x1]");
}

#[test]
fn amoand_w_53() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w X(0), x9, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, 9A, 60", "amoand.w X(0), x9, [X(20)]");
}

#[test]
fn amoand_w_aq_54() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aq x10, x3, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, 39, 64", "amoand.w.aq x10, x3, [X(18)]");
}

#[test]
fn amoand_w_aq_55() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aq X(1), x17, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 20, 1D, 65", "amoand.w.aq X(1), x17, [x26]");
}

#[test]
fn amoand_w_aqrl_56() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aqrl x17, X(27), [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, B4, 67", "amoand.w.aqrl x17, X(27), [X(9)]");
}

#[test]
fn amoand_w_aqrl_57() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aqrl x0, X(21), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, 53, 67", "amoand.w.aqrl x0, X(21), [x7]");
}

#[test]
fn amoand_w_rl_58() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.rl x20, x9, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2A, 9B, 62", "amoand.w.rl x20, x9, [x22]");
}

#[test]
fn amoand_w_rl_59() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.rl X(25), x0, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2C, 01, 62", "amoand.w.rl X(25), x0, [x2]");
}

#[test]
fn amocas_b_60() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b X(15), x19, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 07, 31, 29", "amocas.b X(15), x19, [x2]");
}

#[test]
fn amocas_b_61() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b x12, X(28), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, C2, 29", "amocas.b x12, X(28), [x5]");
}

#[test]
fn amocas_b_aq_62() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aq x22, X(12), [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8B, C0, 2C", "amocas.b.aq x22, X(12), [X(1)]");
}

#[test]
fn amocas_b_aq_63() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aq X(12), x24, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, 81, 2D", "amocas.b.aq X(12), x24, [X(3)]");
}

#[test]
fn amocas_b_aqrl_64() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aqrl X(8), x20, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 84, 49, 2F", "amocas.b.aqrl X(8), x20, [X(19)]");
}

#[test]
fn amocas_b_aqrl_65() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aqrl x7, X(26), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 03, A1, 2F", "amocas.b.aqrl x7, X(26), [X(2)]");
}

#[test]
fn amocas_b_rl_66() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.rl x30, X(13), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0F, D0, 2A", "amocas.b.rl x30, X(13), [X(0)]");
}

#[test]
fn amocas_b_rl_67() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.rl x11, x24, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 85, 88, 2B", "amocas.b.rl x11, x24, [x17]");
}

#[test]
fn amocas_d_68() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d x2, x30, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 31, E8, 29", "amocas.d x2, x30, [X(16)]");
}

#[test]
fn amocas_d_69() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d x0, X(12), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B0, CB, 28", "amocas.d x0, X(12), [x23]");
}

#[test]
fn amocas_d_aq_70() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aq x10, X(6), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B5, 6D, 2C", "amocas.d.aq x10, X(6), [x27]");
}

#[test]
fn amocas_d_aq_71() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aq X(0), X(10), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 30, AD, 2C", "amocas.d.aq X(0), X(10), [x26]");
}

#[test]
fn amocas_d_aqrl_72() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aqrl X(14), x12, [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B7, C5, 2E", "amocas.d.aqrl X(14), x12, [X(11)]");
}

#[test]
fn amocas_d_aqrl_73() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aqrl x14, x22, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B7, 6C, 2F", "amocas.d.aqrl x14, x22, [X(25)]");
}

#[test]
fn amocas_d_rl_74() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.rl x16, x24, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B8, 89, 2B", "amocas.d.rl x16, x24, [X(19)]");
}

#[test]
fn amocas_d_rl_75() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.rl x10, x2, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 35, 27, 2A", "amocas.d.rl x10, x2, [x14]");
}

#[test]
fn amocas_h_76() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h x18, X(19), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 99, 37, 29", "amocas.h x18, X(19), [X(15)]");
}

#[test]
fn amocas_h_77() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h x7, X(1), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 93, 1F, 28", "amocas.h x7, X(1), [x31]");
}

#[test]
fn amocas_h_aq_78() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aq X(14), X(9), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, 9D, 2C", "amocas.h.aq X(14), X(9), [x27]");
}

#[test]
fn amocas_h_aq_79() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aq x17, x18, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 18, 2E, 2D", "amocas.h.aq x17, x18, [x28]");
}

#[test]
fn amocas_h_aqrl_80() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aqrl x0, X(6), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 90, 69, 2E", "amocas.h.aqrl x0, X(6), [x19]");
}

#[test]
fn amocas_h_aqrl_81() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aqrl x1, x0, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 0C, 2E", "amocas.h.aqrl x1, x0, [x24]");
}

#[test]
fn amocas_h_rl_82() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.rl X(0), x17, [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 10, 12, 2B", "amocas.h.rl X(0), x17, [X(4)]");
}

#[test]
fn amocas_h_rl_83() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.rl x24, X(8), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, 83, 2A", "amocas.h.rl x24, X(8), [X(6)]");
}

#[test]
fn amocas_w_84() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w x22, X(24), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AB, 83, 29", "amocas.w x22, X(24), [x7]");
}

#[test]
fn amocas_w_85() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w x8, x6, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A4, 6E, 28", "amocas.w x8, x6, [x29]");
}

#[test]
fn amocas_w_aq_86() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aq X(1), x18, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, 2F, 2D", "amocas.w.aq X(1), x18, [X(31)]");
}

#[test]
fn amocas_w_aq_87() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aq X(7), x4, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 43, 2C", "amocas.w.aq X(7), x4, [x7]");
}

#[test]
fn amocas_w_aqrl_88() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aqrl x25, X(31), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, F3, 2F", "amocas.w.aqrl x25, X(31), [x7]");
}

#[test]
fn amocas_w_aqrl_89() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aqrl X(21), x31, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2A, FC, 2F", "amocas.w.aqrl X(21), x31, [X(24)]");
}

#[test]
fn amocas_w_rl_90() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.rl X(7), x31, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 23, FC, 2B", "amocas.w.rl X(7), x31, [X(24)]");
}

#[test]
fn amocas_w_rl_91() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.rl x2, x3, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 21, 34, 2A", "amocas.w.rl x2, x3, [X(8)]");
}

#[test]
fn amomax_b_92() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b X(1), X(29), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 80, D5, A1", "amomax.b X(1), X(29), [x11]");
}

#[test]
fn amomax_b_93() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b X(8), x19, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 84, 34, A1", "amomax.b X(8), x19, [X(9)]");
}

#[test]
fn amomax_b_aq_94() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aq X(19), X(26), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 09, A9, A5", "amomax.b.aq X(19), X(26), [x18]");
}

#[test]
fn amomax_b_aq_95() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aq x22, x19, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, 31, A5", "amomax.b.aq x22, x19, [x2]");
}

#[test]
fn amomax_b_aqrl_96() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aqrl X(28), x7, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, 7E, A6", "amomax.b.aqrl X(28), x7, [x28]");
}

#[test]
fn amomax_b_aqrl_97() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aqrl X(3), x0, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 01, 05, A6", "amomax.b.aqrl X(3), x0, [x10]");
}

#[test]
fn amomax_b_rl_98() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.rl x2, x22, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 01, 61, A3", "amomax.b.rl x2, x22, [X(2)]");
}

#[test]
fn amomax_b_rl_99() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.rl x1, X(29), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, D1, A3", "amomax.b.rl x1, X(29), [X(2)]");
}

#[test]
fn amomax_h_100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h x21, X(16), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9A, 0D, A1", "amomax.h x21, X(16), [x27]");
}

#[test]
fn amomax_h_101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h x31, x6, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, 62, A0", "amomax.h x31, x6, [x5]");
}

#[test]
fn amomax_h_aq_102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aq x9, x18, [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, 2F, A5", "amomax.h.aq x9, x18, [X(30)]");
}

#[test]
fn amomax_h_aq_103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aq X(22), x11, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, BC, A4", "amomax.h.aq X(22), x11, [X(24)]");
}

#[test]
fn amomax_h_aqrl_104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aqrl X(20), X(8), [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9A, 8C, A6", "amomax.h.aqrl X(20), X(8), [X(25)]");
}

#[test]
fn amomax_h_aqrl_105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aqrl X(22), X(22), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, 62, A7", "amomax.h.aqrl X(22), X(22), [x4]");
}

#[test]
fn amomax_h_rl_106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.rl x10, X(3), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, 3F, A2", "amomax.h.rl x10, X(3), [x31]");
}

#[test]
fn amomax_h_rl_107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.rl x23, X(16), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1B, 0C, A3", "amomax.h.rl x23, X(16), [X(24)]");
}

#[test]
fn amomax_w_108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w x8, X(18), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A4, 27, A1", "amomax.w x8, X(18), [x15]");
}

#[test]
fn amomax_w_109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w X(20), X(20), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, 46, A1", "amomax.w X(20), X(20), [x13]");
}

#[test]
fn amomax_w_aq_110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aq x17, x24, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, 8B, A5", "amomax.w.aq x17, x24, [X(22)]");
}

#[test]
fn amomax_w_aq_111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aq x14, X(0), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 04, A4", "amomax.w.aq x14, X(0), [x9]");
}

#[test]
fn amomax_w_aqrl_112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aqrl x22, X(14), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AB, E6, A6", "amomax.w.aqrl x22, X(14), [x13]");
}

#[test]
fn amomax_w_aqrl_113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aqrl X(24), x30, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, EA, A7", "amomax.w.aqrl X(24), x30, [x20]");
}

#[test]
fn amomax_w_rl_114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.rl x20, x7, [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2A, 77, A2", "amomax.w.rl x20, x7, [X(14)]");
}

#[test]
fn amomax_w_rl_115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.rl x26, X(3), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 3C, A2", "amomax.w.rl x26, X(3), [x25]");
}

#[test]
fn amomaxu_b_116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b x6, x30, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, E3, E1", "amomaxu.b x6, x30, [X(7)]");
}

#[test]
fn amomaxu_b_117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b X(0), X(23), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 76, E1", "amomaxu.b X(0), X(23), [x12]");
}

#[test]
fn amomaxu_b_aq_118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aq X(9), X(23), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 84, 79, E5", "amomaxu.b.aq X(9), X(23), [X(19)]");
}

#[test]
fn amomaxu_b_aq_119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aq X(17), x20, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 88, 40, E5", "amomaxu.b.aq X(17), x20, [x1]");
}

#[test]
fn amomaxu_b_aqrl_120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aqrl x30, X(30), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8F, ED, E7", "amomaxu.b.aqrl x30, X(30), [X(27)]");
}

#[test]
fn amomaxu_b_aqrl_121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aqrl X(26), x7, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, 7C, E6", "amomaxu.b.aqrl X(26), x7, [X(24)]");
}

#[test]
fn amomaxu_b_rl_122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.rl X(12), X(15), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, F2, E2", "amomaxu.b.rl X(12), X(15), [x4]");
}

#[test]
fn amomaxu_b_rl_123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.rl X(11), X(20), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 85, 4D, E3", "amomaxu.b.rl X(11), X(20), [X(27)]");
}

#[test]
fn amomaxu_h_124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h X(12), X(23), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, 7B, E1", "amomaxu.h X(12), X(23), [X(22)]");
}

#[test]
fn amomaxu_h_125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h x2, X(26), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, A1, E1", "amomaxu.h x2, X(26), [x2]");
}

#[test]
fn amomaxu_h_aq_126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aq x2, X(23), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, 76, E5", "amomaxu.h.aq x2, X(23), [X(12)]");
}

#[test]
fn amomaxu_h_aq_127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aq x13, x0, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, 06, E4", "amomaxu.h.aq x13, x0, [X(13)]");
}

#[test]
fn amomaxu_h_aqrl_128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aqrl x27, x1, [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1D, 1D, E6", "amomaxu.h.aqrl x27, x1, [X(26)]");
}

#[test]
fn amomaxu_h_aqrl_129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aqrl x14, x25, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 17, 90, E7", "amomaxu.h.aqrl x14, x25, [x0]");
}

#[test]
fn amomaxu_h_rl_130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.rl x10, X(21), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 15, 5D, E3", "amomaxu.h.rl x10, X(21), [X(26)]");
}

#[test]
fn amomaxu_h_rl_131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.rl X(22), X(10), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, AF, E2", "amomaxu.h.rl X(22), X(10), [x30]");
}

#[test]
fn amomaxu_w_132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w x11, x3, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 30, E0", "amomaxu.w x11, x3, [X(0)]");
}

#[test]
fn amomaxu_w_133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w x10, x1, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, 19, E0", "amomaxu.w x10, x1, [X(18)]");
}

#[test]
fn amomaxu_w_aq_134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aq x6, x23, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, 72, E5", "amomaxu.w.aq x6, x23, [x4]");
}

#[test]
fn amomaxu_w_aq_135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aq x0, x29, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, DB, E5", "amomaxu.w.aq x0, x29, [x23]");
}

#[test]
fn amomaxu_w_aqrl_136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aqrl x25, X(12), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, CF, E6", "amomaxu.w.aqrl x25, X(12), [x31]");
}

#[test]
fn amomaxu_w_aqrl_137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aqrl X(11), X(2), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A5, 22, E6", "amomaxu.w.aqrl X(11), X(2), [x5]");
}

#[test]
fn amomaxu_w_rl_138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.rl x31, x15, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AF, F5, E2", "amomaxu.w.rl x31, x15, [x11]");
}

#[test]
fn amomaxu_w_rl_139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.rl x10, x23, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A5, 74, E3", "amomaxu.w.rl x10, x23, [X(9)]");
}

#[test]
fn amomin_b_140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b x1, X(17), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 1B, 81", "amomin.b x1, X(17), [x22]");
}

#[test]
fn amomin_b_141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b X(13), x2, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 86, 2A, 80", "amomin.b X(13), x2, [x21]");
}

#[test]
fn amomin_b_aq_142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aq x4, x6, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, 67, 84", "amomin.b.aq x4, x6, [X(15)]");
}

#[test]
fn amomin_b_aq_143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aq x21, x23, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0A, 7F, 85", "amomin.b.aq x21, x23, [x30]");
}

#[test]
fn amomin_b_aqrl_144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aqrl X(10), x20, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, 47, 87", "amomin.b.aqrl X(10), x20, [x14]");
}

#[test]
fn amomin_b_aqrl_145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aqrl x5, X(29), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 82, DA, 87", "amomin.b.aqrl x5, X(29), [X(21)]");
}

#[test]
fn amomin_b_rl_146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.rl X(15), X(9), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 87, 90, 82", "amomin.b.rl X(15), X(9), [x1]");
}

#[test]
fn amomin_b_rl_147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.rl X(27), X(15), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0D, F3, 82", "amomin.b.rl X(27), X(15), [X(6)]");
}

#[test]
fn amomin_h_148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h X(12), X(13), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, D1, 80", "amomin.h X(12), X(13), [X(2)]");
}

#[test]
fn amomin_h_149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h x1, x12, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 90, C8, 80", "amomin.h x1, x12, [X(17)]");
}

#[test]
fn amomin_h_aq_150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aq x6, x6, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, 61, 84", "amomin.h.aq x6, x6, [X(2)]");
}

#[test]
fn amomin_h_aq_151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aq X(16), x21, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, 5C, 85", "amomin.h.aq X(16), x21, [X(25)]");
}

#[test]
fn amomin_h_aqrl_152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aqrl X(2), x14, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, E9, 86", "amomin.h.aqrl X(2), x14, [x19]");
}

#[test]
fn amomin_h_aqrl_153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aqrl X(1), X(5), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 5B, 86", "amomin.h.aqrl X(1), X(5), [X(22)]");
}

#[test]
fn amomin_h_rl_154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.rl X(29), X(24), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, 8E, 83", "amomin.h.rl X(29), X(24), [X(29)]");
}

#[test]
fn amomin_h_rl_155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.rl X(4), X(9), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 92, 9D, 82", "amomin.h.rl X(4), X(9), [X(27)]");
}

#[test]
fn amomin_w_156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w x9, X(9), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, 9F, 80", "amomin.w x9, X(9), [x30]");
}

#[test]
fn amomin_w_157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w x6, X(7), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, 75, 80", "amomin.w x6, X(7), [X(10)]");
}

#[test]
fn amomin_w_aq_158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aq X(0), x0, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, 04, 84", "amomin.w.aq X(0), x0, [x8]");
}

#[test]
fn amomin_w_aq_159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aq X(17), x16, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, 0E, 85", "amomin.w.aq X(17), x16, [X(28)]");
}

#[test]
fn amomin_w_aqrl_160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aqrl x30, x31, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2F, F3, 87", "amomin.w.aqrl x30, x31, [X(6)]");
}

#[test]
fn amomin_w_aqrl_161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aqrl x26, X(24), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, 87, 87", "amomin.w.aqrl x26, X(24), [x14]");
}

#[test]
fn amomin_w_rl_162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.rl X(14), X(2), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 27, 2F, 82", "amomin.w.rl X(14), X(2), [x30]");
}

#[test]
fn amomin_w_rl_163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.rl X(5), x12, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A2, C0, 82", "amomin.w.rl X(5), x12, [x1]");
}

#[test]
fn amominu_b_164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b x17, X(8), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 08, 8C, C0", "amominu.b x17, X(8), [x24]");
}

#[test]
fn amominu_b_165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b x29, X(17), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8E, 17, C1", "amominu.b x29, X(17), [x15]");
}

#[test]
fn amominu_b_aq_166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aq x14, x15, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 87, FC, C4", "amominu.b.aq x14, x15, [x25]");
}

#[test]
fn amominu_b_aq_167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aq X(25), x4, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8C, 40, C4", "amominu.b.aq X(25), x4, [X(1)]");
}

#[test]
fn amominu_b_aqrl_168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aqrl x18, X(30), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, E9, C7", "amominu.b.aqrl x18, X(30), [x19]");
}

#[test]
fn amominu_b_aqrl_169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aqrl x22, X(5), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8B, 51, C6", "amominu.b.aqrl x22, X(5), [x3]");
}

#[test]
fn amominu_b_rl_170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.rl X(18), x3, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, 31, C2", "amominu.b.rl X(18), x3, [X(2)]");
}

#[test]
fn amominu_b_rl_171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.rl x14, x21, [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 87, 5F, C3", "amominu.b.rl x14, x21, [x31]");
}

#[test]
fn amominu_h_172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h x7, x26, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 93, AB, C1", "amominu.h x7, x26, [X(23)]");
}

#[test]
fn amominu_h_173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h X(0), x4, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 10, 4E, C0", "amominu.h X(0), x4, [X(28)]");
}

#[test]
fn amominu_h_aq_174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aq X(21), x16, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1A, 05, C5", "amominu.h.aq X(21), x16, [x10]");
}

#[test]
fn amominu_h_aq_175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aq x20, X(23), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9A, 72, C5", "amominu.h.aq x20, X(23), [x5]");
}

#[test]
fn amominu_h_aqrl_176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aqrl X(29), X(21), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, 53, C7", "amominu.h.aqrl X(29), X(21), [X(7)]");
}

#[test]
fn amominu_h_aqrl_177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aqrl x6, X(21), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, 57, C7", "amominu.h.aqrl x6, X(21), [X(14)]");
}

#[test]
fn amominu_h_rl_178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.rl X(5), x30, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 12, EC, C3", "amominu.h.rl X(5), x30, [X(24)]");
}

#[test]
fn amominu_h_rl_179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.rl X(18), X(23), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 19, 79, C3", "amominu.h.rl X(18), X(23), [x18]");
}

#[test]
fn amominu_w_180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w X(19), x3, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A9, 32, C0", "amominu.w X(19), x3, [X(5)]");
}

#[test]
fn amominu_w_181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w X(15), x9, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, 93, C0", "amominu.w X(15), x9, [X(6)]");
}

#[test]
fn amominu_w_aq_182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aq x12, x17, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, 12, C5", "amominu.w.aq x12, x17, [x4]");
}

#[test]
fn amominu_w_aq_183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aq X(9), x7, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, 7C, C4", "amominu.w.aq X(9), x7, [x24]");
}

#[test]
fn amominu_w_aqrl_184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aqrl x26, x1, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 10, C6", "amominu.w.aqrl x26, x1, [X(1)]");
}

#[test]
fn amominu_w_aqrl_185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aqrl X(0), x18, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, 29, C7", "amominu.w.aqrl X(0), x18, [X(18)]");
}

#[test]
fn amominu_w_rl_186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.rl x3, x30, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A1, E2, C3", "amominu.w.rl x3, x30, [x5]");
}

#[test]
fn amominu_w_rl_187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.rl X(22), X(24), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AB, 85, C3", "amominu.w.rl X(22), X(24), [X(11)]");
}

#[test]
fn amoor_b_188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b x30, X(20), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8F, 4E, 41", "amoor.b x30, X(20), [X(29)]");
}

#[test]
fn amoor_b_189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b X(18), X(21), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, 57, 41", "amoor.b X(18), X(21), [X(14)]");
}

#[test]
fn amoor_b_aq_190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aq X(12), X(8), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, 8B, 44", "amoor.b.aq X(12), X(8), [x23]");
}

#[test]
fn amoor_b_aq_191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aq x26, X(11), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, B5, 44", "amoor.b.aq x26, X(11), [X(10)]");
}

#[test]
fn amoor_b_aqrl_192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aqrl x20, X(23), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0A, 72, 47", "amoor.b.aqrl x20, X(23), [x4]");
}

#[test]
fn amoor_b_aqrl_193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aqrl X(2), X(18), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 01, 23, 47", "amoor.b.aqrl X(2), X(18), [x6]");
}

#[test]
fn amoor_b_rl_194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.rl x27, X(6), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0D, 68, 42", "amoor.b.rl x27, X(6), [x16]");
}

#[test]
fn amoor_b_rl_195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.rl x26, x10, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, AE, 42", "amoor.b.rl x26, x10, [x28]");
}

#[test]
fn amoor_h_196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h x2, x4, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, 4B, 40", "amoor.h x2, x4, [X(23)]");
}

#[test]
fn amoor_h_197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h x6, x17, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, 1B, 41", "amoor.h x6, x17, [X(22)]");
}

#[test]
fn amoor_h_aq_198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aq X(17), x4, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 18, 45, 44", "amoor.h.aq X(17), x4, [X(10)]");
}

#[test]
fn amoor_h_aq_199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aq x12, X(25), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, 93, 45", "amoor.h.aq x12, X(25), [x6]");
}

#[test]
fn amoor_h_aqrl_200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aqrl x12, x16, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, 00, 47", "amoor.h.aqrl x12, x16, [X(1)]");
}

#[test]
fn amoor_h_aqrl_201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aqrl x31, X(10), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, AB, 46", "amoor.h.aqrl x31, X(10), [X(23)]");
}

#[test]
fn amoor_h_rl_202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.rl X(12), x13, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, DE, 42", "amoor.h.rl X(12), x13, [x29]");
}

#[test]
fn amoor_h_rl_203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.rl X(10), X(19), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, 34, 43", "amoor.h.rl X(10), X(19), [x9]");
}

#[test]
fn amoor_w_204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w X(0), X(31), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, F2, 41", "amoor.w X(0), X(31), [x5]");
}

#[test]
fn amoor_w_205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w X(12), X(18), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, 20, 41", "amoor.w X(12), X(18), [x1]");
}

#[test]
fn amoor_w_aq_206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aq X(23), X(4), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AB, 4D, 44", "amoor.w.aq X(23), X(4), [x27]");
}

#[test]
fn amoor_w_aq_207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aq x27, x2, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 26, 44", "amoor.w.aq x27, x2, [X(13)]");
}

#[test]
fn amoor_w_aqrl_208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aqrl X(12), x29, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, D2, 47", "amoor.w.aqrl X(12), x29, [X(5)]");
}

#[test]
fn amoor_w_aqrl_209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aqrl X(29), X(18), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AE, 2B, 47", "amoor.w.aqrl X(29), X(18), [x23]");
}

#[test]
fn amoor_w_rl_210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.rl x14, X(19), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 3D, 43", "amoor.w.rl x14, X(19), [x27]");
}

#[test]
fn amoor_w_rl_211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.rl X(28), x22, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AE, 63, 43", "amoor.w.rl X(28), x22, [X(7)]");
}

#[test]
fn amoswap_b_212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b x12, x31, [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, F6, 09", "amoswap.b x12, x31, [X(12)]");
}

#[test]
fn amoswap_b_213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b x20, x27, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8A, BD, 09", "amoswap.b x20, x27, [x27]");
}

#[test]
fn amoswap_b_aq_214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aq X(23), x21, [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0B, 56, 0D", "amoswap.b.aq X(23), x21, [X(12)]");
}

#[test]
fn amoswap_b_aq_215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aq x12, x31, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, FB, 0D", "amoswap.b.aq x12, x31, [X(22)]");
}

#[test]
fn amoswap_b_aqrl_216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aqrl x5, X(18), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 82, 23, 0F", "amoswap.b.aqrl x5, X(18), [X(7)]");
}

#[test]
fn amoswap_b_aqrl_217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aqrl x27, x12, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8D, C6, 0E", "amoswap.b.aqrl x27, x12, [x13]");
}

#[test]
fn amoswap_b_rl_218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.rl x4, X(12), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 02, C1, 0A", "amoswap.b.rl x4, X(12), [X(2)]");
}

#[test]
fn amoswap_b_rl_219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.rl x0, x12, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, C6, 0A", "amoswap.b.rl x0, x12, [x12]");
}

#[test]
fn amoswap_h_220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h X(2), x8, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, 84, 08", "amoswap.h X(2), x8, [X(8)]");
}

#[test]
fn amoswap_h_221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h X(1), X(6), [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 68, 08", "amoswap.h X(1), X(6), [X(16)]");
}

#[test]
fn amoswap_h_aq_222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aq X(8), X(10), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 14, AD, 0C", "amoswap.h.aq X(8), X(10), [X(26)]");
}

#[test]
fn amoswap_h_aq_223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aq x13, x7, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 16, 75, 0C", "amoswap.h.aq x13, x7, [x10]");
}

#[test]
fn amoswap_h_aqrl_224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aqrl X(9), X(13), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, D7, 0E", "amoswap.h.aqrl X(9), X(13), [x14]");
}

#[test]
fn amoswap_h_aqrl_225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aqrl X(1), x3, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 90, 38, 0E", "amoswap.h.aqrl X(1), x3, [x17]");
}

#[test]
fn amoswap_h_rl_226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.rl X(14), X(27), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, B9, 0B", "amoswap.h.rl X(14), X(27), [X(19)]");
}

#[test]
fn amoswap_h_rl_227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.rl x13, x31, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, F2, 0B", "amoswap.h.rl x13, x31, [x5]");
}

#[test]
fn amoswap_w_228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w x9, X(8), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A4, 8E, 08", "amoswap.w x9, X(8), [X(29)]");
}

#[test]
fn amoswap_w_229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w X(1), x23, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, 78, 09", "amoswap.w X(1), x23, [x17]");
}

#[test]
fn amoswap_w_aq_230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aq x30, X(12), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2F, C1, 0C", "amoswap.w.aq x30, X(12), [X(2)]");
}

#[test]
fn amoswap_w_aq_231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aq x25, X(25), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2C, 9B, 0D", "amoswap.w.aq x25, X(25), [x22]");
}

#[test]
fn amoswap_w_aqrl_232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aqrl X(0), x27, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, BE, 0F", "amoswap.w.aqrl X(0), x27, [X(29)]");
}

#[test]
fn amoswap_w_aqrl_233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aqrl X(2), x25, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A1, 93, 0F", "amoswap.w.aqrl X(2), x25, [X(7)]");
}

#[test]
fn amoswap_w_rl_234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.rl X(20), x19, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, 30, 0B", "amoswap.w.rl X(20), x19, [x1]");
}

#[test]
fn amoswap_w_rl_235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.rl x18, x22, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 67, 0B", "amoswap.w.rl x18, x22, [X(15)]");
}

#[test]
fn amoxor_b_236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b x30, X(26), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0F, A0, 21", "amoxor.b x30, X(26), [X(0)]");
}

#[test]
fn amoxor_b_237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b X(1), X(28), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 80, C7, 21", "amoxor.b X(1), X(28), [x15]");
}

#[test]
fn amoxor_b_aq_238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aq x0, x9, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 95, 24", "amoxor.b.aq x0, x9, [x10]");
}

#[test]
fn amoxor_b_aq_239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aq x6, X(20), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 03, 4C, 25", "amoxor.b.aq x6, X(20), [x24]");
}

#[test]
fn amoxor_b_aqrl_240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aqrl x18, X(30), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, E6, 27", "amoxor.b.aqrl x18, X(30), [x12]");
}

#[test]
fn amoxor_b_aqrl_241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aqrl x6, X(12), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, CB, 26", "amoxor.b.aqrl x6, X(12), [x23]");
}

#[test]
fn amoxor_b_rl_242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.rl x8, X(12), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 04, CA, 22", "amoxor.b.rl x8, X(12), [x20]");
}

#[test]
fn amoxor_b_rl_243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.rl x31, X(16), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, 0E, 23", "amoxor.b.rl x31, X(16), [x28]");
}

#[test]
fn amoxor_h_244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h X(29), x8, [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1E, 8F, 20", "amoxor.h X(29), x8, [X(30)]");
}

#[test]
fn amoxor_h_245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h x10, x15, [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 15, FD, 20", "amoxor.h x10, x15, [X(26)]");
}

#[test]
fn amoxor_h_aq_246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aq x20, x17, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9A, 18, 25", "amoxor.h.aq x20, x17, [X(17)]");
}

#[test]
fn amoxor_h_aq_247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aq X(6), x5, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, 58, 24", "amoxor.h.aq X(6), x5, [X(17)]");
}

#[test]
fn amoxor_h_aqrl_248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aqrl X(12), X(8), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, 84, 26", "amoxor.h.aqrl X(12), X(8), [X(8)]");
}

#[test]
fn amoxor_h_aqrl_249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aqrl X(21), x29, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1A, DA, 27", "amoxor.h.aqrl X(21), x29, [x20]");
}

#[test]
fn amoxor_h_rl_250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.rl x10, x3, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, 3D, 22", "amoxor.h.rl x10, x3, [X(27)]");
}

#[test]
fn amoxor_h_rl_251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.rl X(15), X(22), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 17, 6A, 23", "amoxor.h.rl X(15), X(22), [x20]");
}

#[test]
fn amoxor_w_252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w X(22), X(5), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2B, 56, 20", "amoxor.w X(22), X(5), [x12]");
}

#[test]
fn amoxor_w_253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w X(27), X(9), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2D, 92, 20", "amoxor.w X(27), X(9), [x4]");
}

#[test]
fn amoxor_w_aq_254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aq X(23), x24, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AB, 8C, 25", "amoxor.w.aq X(23), x24, [X(25)]");
}

#[test]
fn amoxor_w_aq_255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aq x11, X(23), [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 78, 25", "amoxor.w.aq x11, X(23), [X(16)]");
}

#[test]
fn amoxor_w_aqrl_256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aqrl X(7), X(30), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, EC, 27", "amoxor.w.aqrl X(7), X(30), [x25]");
}

#[test]
fn amoxor_w_aqrl_257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aqrl x12, X(4), [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, 42, 26", "amoxor.w.aqrl x12, X(4), [X(4)]");
}

#[test]
fn amoxor_w_rl_258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.rl x18, x19, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 34, 23", "amoxor.w.rl x18, x19, [X(9)]");
}

#[test]
fn amoxor_w_rl_259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.rl x0, x13, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, DE, 22", "amoxor.w.rl x0, x13, [x29]");
}

#[test]
fn and_260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; and x28, X(3), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, FE, 91, 00", "and x28, X(3), X(9)");
}

#[test]
fn and_261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; and x14, x28, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 77, 8E, 00", "and x14, x28, x8");
}

#[test]
fn andi_262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; andi x17, X(28), -483
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 78, DE, E1", "andi x17, X(28), -483");
}

#[test]
fn andi_263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; andi x17, X(25), -380
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, F8, 4C, E8", "andi x17, X(25), -380");
}

#[test]
fn andn_264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; andn x19, X(12), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 79, F6, 41", "andn x19, X(12), X(31)");
}

#[test]
fn andn_265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; andn x6, x26, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 73, FD, 40", "andn x6, x26, X(15)");
}

#[test]
fn bclr_266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclr x29, x31, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 9E, BF, 48", "bclr x29, x31, X(11)");
}

#[test]
fn bclr_267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclr x10, x21, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 95, 9A, 48", "bclr x10, x21, x9");
}

#[test]
fn bclri_268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclri X(27), X(22), 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1D, FB, 48", "bclri X(27), X(22), 15");
}

#[test]
fn bclri_269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclri x21, X(9), 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9A, B4, 48", "bclri x21, X(9), 11");
}

#[test]
fn beq_270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beq x11, x27, 652
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 86, B5, 29", "beq x11, x27, 652");
}

#[test]
fn beq_271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beq x25, x8, 1956
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 82, 8C, 7A", "beq x25, x8, 1956");
}

#[test]
fn beqz_272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beqz X(8), -1450
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 0B, 04, A4", "beqz X(8), -1450");
}

#[test]
fn beqz_273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beqz x5, 770
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 81, 02, 30", "beqz x5, 770");
}

#[test]
fn bext_274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bext x26, x15, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, DD, 17, 48", "bext x26, x15, x1");
}

#[test]
fn bext_275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bext X(31), X(0), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 5F, 70, 49", "bext X(31), X(0), x23");
}

#[test]
fn bexti_276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bexti x12, x14, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 56, 87, 49", "bexti x12, x14, 24");
}

#[test]
fn bexti_277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bexti X(26), X(12), 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5D, 56, 48", "bexti X(26), X(12), 5");
}

#[test]
fn bge_278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bge X(29), x28, -2044
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, D2, CE, 81", "bge X(29), x28, -2044");
}

#[test]
fn bge_279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bge x30, X(31), -1810
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 57, FF, 8F", "bge x30, X(31), -1810");
}

#[test]
fn bgeu_280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgeu x2, x14, 474
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 7D, E1, 1C", "bgeu x2, x14, 474");
}

#[test]
fn bgeu_281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgeu x3, X(8), 198
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, F3, 81, 0C", "bgeu x3, X(8), 198");
}

#[test]
fn bgez_282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgez x14, 1624
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 5C, 07, 64", "bgez x14, 1624");
}

#[test]
fn bgez_283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgez X(19), 244
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, DA, 09, 0E", "bgez X(19), 244");
}

#[test]
fn bgt_284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgt X(12), x10, -1478
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 4D, C5, A2", "bgt X(12), x10, -1478");
}

#[test]
fn bgt_285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgt x0, x22, 2022
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 43, 0B, 7E", "bgt x0, x22, 2022");
}

#[test]
fn bgtu_286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtu x25, X(23), 1706
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, E5, 9B, 6B", "bgtu x25, X(23), 1706");
}

#[test]
fn bgtu_287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtu x5, X(29), 68
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, E2, 5E, 04", "bgtu x5, X(29), 68");
}

#[test]
fn bgtz_288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtz x0, 1010
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 49, 00, 3E", "bgtz x0, 1010");
}

#[test]
fn bgtz_289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtz x18, -12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 4A, 20, FF", "bgtz x18, -12");
}

#[test]
fn binv_290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binv X(8), X(2), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 14, 71, 69", "binv X(8), X(2), X(23)");
}

#[test]
fn binv_291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binv X(21), X(26), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1A, 4D, 69", "binv X(21), X(26), X(20)");
}

#[test]
fn binvi_292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binvi x10, x1, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 95, F0, 69", "binvi x10, x1, 31");
}

#[test]
fn binvi_293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binvi x12, x12, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 16, 66, 68", "binvi x12, x12, 6");
}

#[test]
fn ble_294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ble x18, X(11), 822
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, DB, 25, 33", "ble x18, X(11), 822");
}

#[test]
fn ble_295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ble x4, x31, 544
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D0, 4F, 22", "ble x4, x31, 544");
}

#[test]
fn bleu_296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bleu X(29), X(22), 1034
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 75, DB, 41", "bleu X(29), X(22), 1034");
}

#[test]
fn bleu_297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bleu X(15), x31, -1266
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, F7, FF, B0", "bleu X(15), x31, -1266");
}

#[test]
fn blez_298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blez x4, 1944
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 5C, 40, 78", "blez x4, 1944");
}

#[test]
fn blez_299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blez X(17), 236
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 56, 10, 0F", "blez X(17), 236");
}

#[test]
fn blt_300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blt x10, X(25), -1694
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 41, 95, 97", "blt x10, X(25), -1694");
}

#[test]
fn blt_301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blt X(27), x30, 1758
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, CF, ED, 6D", "blt X(27), x30, 1758");
}

#[test]
fn bltu_302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltu X(24), x18, -1232
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 68, 2C, B3", "bltu X(24), x18, -1232");
}

#[test]
fn bltu_303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltu X(13), X(12), -1566
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, E1, C6, 9E", "bltu X(13), X(12), -1566");
}

#[test]
fn bltz_304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltz x18, 328
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 44, 09, 14", "bltz x18, 328");
}

#[test]
fn bltz_305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltz x7, -1174
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, C5, 03, B6", "bltz x7, -1174");
}

#[test]
fn bne_306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bne x8, x3, 1676
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 16, 34, 68", "bne x8, x3, 1676");
}

#[test]
fn bne_307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bne X(5), x29, -1014
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 95, D2, C1", "bne X(5), x29, -1014");
}

#[test]
fn bnez_308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bnez X(18), -932
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 1E, 09, C4", "bnez X(18), -932");
}

#[test]
fn bnez_309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bnez x18, -784
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 18, 09, CE", "bnez x18, -784");
}

#[test]
fn brev8_310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; brev8 x31, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DF, 78, 68", "brev8 x31, X(17)");
}

#[test]
fn brev8_311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; brev8 X(23), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DB, 75, 68", "brev8 X(23), x11");
}

#[test]
fn bset_312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bset X(30), x13, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 9F, A6, 29", "bset X(30), x13, X(26)");
}

#[test]
fn bset_313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bset x26, X(14), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 1D, 77, 29", "bset x26, X(14), X(23)");
}

#[test]
fn bseti_314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bseti X(12), X(10), 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 16, 25, 29", "bseti X(12), X(10), 18");
}

#[test]
fn bseti_315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bseti x1, x8, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 10, 54, 29", "bseti x1, x8, 21");
}

#[test]
fn c_add_316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.add x14, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 97", "c.add x14, X(13)");
}

#[test]
fn c_add_317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.add x11, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 95", "c.add x11, X(6)");
}

#[test]
fn c_addi_318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi X(28), 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 0E", "c.addi X(28), 19");
}

#[test]
fn c_addi_319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi x10, -10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 15", "c.addi x10, -10");
}

#[test]
fn c_addi16sp_320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi16sp x2, 208
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 61", "c.addi16sp x2, 208");
}

#[test]
fn c_addi16sp_321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi16sp x2, 464
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 61", "c.addi16sp x2, 464");
}

#[test]
fn c_addi4spn_322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi4spn x9, x2, 552
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 14", "c.addi4spn x9, x2, 552");
}

#[test]
fn c_addi4spn_323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi4spn x13, x2, 716
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 05", "c.addi4spn x13, x2, 716");
}

#[test]
fn c_and_324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.and X(8), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 8C", "c.and X(8), x14");
}

#[test]
fn c_and_325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.and X(13), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 8E", "c.and X(13), x12");
}

#[test]
fn c_andi_326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.andi x13, -1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 9A", "c.andi x13, -1");
}

#[test]
fn c_andi_327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.andi x9, -31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 98", "c.andi x9, -31");
}

#[test]
fn c_beqz_328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.beqz X(10), -94
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, D1", "c.beqz X(10), -94");
}

#[test]
fn c_beqz_329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.beqz X(10), -102
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, DD", "c.beqz X(10), -102");
}

#[test]
fn c_bnez_330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.bnez x15, -256
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, F3", "c.bnez x15, -256");
}

#[test]
fn c_bnez_331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.bnez x8, -10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, F8", "c.bnez x8, -10");
}

#[test]
fn c_ebreak_332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_ebreak_333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_fld_334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fld F(15), [x8, 32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 30", "c.fld F(15), [x8, 32]");
}

#[test]
fn c_fld_335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fld F(13), [x8, 88]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 2C", "c.fld F(13), [x8, 88]");
}

#[test]
fn c_fldsp_336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fldsp f29, [sp, 424]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 3E", "c.fldsp f29, [sp, 424]");
}

#[test]
fn c_fldsp_337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fldsp F(15), [sp, 24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 27", "c.fldsp F(15), [sp, 24]");
}

#[test]
fn c_flw_338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flw F(13), [X(15), 68]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 63", "c.flw F(13), [X(15), 68]");
}

#[test]
fn c_flw_339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flw F(15), [x10, 32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 71", "c.flw F(15), [x10, 32]");
}

#[test]
fn c_flwsp_340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flwsp F(24), [sp, 164]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 7C", "c.flwsp F(24), [sp, 164]");
}

#[test]
fn c_flwsp_341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flwsp F(2), [sp, 20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 61", "c.flwsp F(2), [sp, 20]");
}

#[test]
fn c_fsd_342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsd F(15), [X(13), 32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, B2", "c.fsd F(15), [X(13), 32]");
}

#[test]
fn c_fsd_343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsd F(9), [x11, 104]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, B5", "c.fsd F(9), [x11, 104]");
}

#[test]
fn c_fsdsp_344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsdsp f29, [sp, 192]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, A1", "c.fsdsp f29, [sp, 192]");
}

#[test]
fn c_fsdsp_345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsdsp f5, [sp, 432]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, BB", "c.fsdsp f5, [sp, 432]");
}

#[test]
fn c_fsw_346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fsw F(10), [X(12), 52]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, FA", "c.fsw F(10), [X(12), 52]");
}

#[test]
fn c_fsw_347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fsw f10, [x11, 92]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, ED", "c.fsw f10, [x11, 92]");
}

#[test]
fn c_fswsp_348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fswsp F(15), [sp, 212]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, EB", "c.fswsp F(15), [sp, 212]");
}

#[test]
fn c_fswsp_349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fswsp f7, [sp, 144]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, E9", "c.fswsp f7, [sp, 144]");
}

#[test]
fn c_j_350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.j -1490
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, B4", "c.j -1490");
}

#[test]
fn c_j_351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.j -560
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, BB", "c.j -560");
}

#[test]
fn c_jal_352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jal -1962
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 38", "c.jal -1962");
}

#[test]
fn c_jal_353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jal -94
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 37", "c.jal -94");
}

#[test]
fn c_jalr_354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jalr X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 96", "c.jalr X(12)");
}

#[test]
fn c_jalr_355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jalr x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 9D", "c.jalr x27");
}

#[test]
fn c_jr_356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jr X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 81", "c.jr X(3)");
}

#[test]
fn c_jr_357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jr X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 80", "c.jr X(1)");
}

#[test]
fn c_lbu_358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lbu x10, [x15, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 83", "c.lbu x10, [x15, 0]");
}

#[test]
fn c_lbu_359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lbu x9, [X(9), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 80", "c.lbu x9, [X(9), 0]");
}

#[test]
fn c_lh_360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lh x10, [x10, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 85", "c.lh x10, [x10, 0]");
}

#[test]
fn c_lh_361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lh X(15), [X(10), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 85", "c.lh X(15), [X(10), 0]");
}

#[test]
fn c_lhu_362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lhu x11, [X(12), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 86", "c.lhu x11, [X(12), 2]");
}

#[test]
fn c_lhu_363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lhu x15, [X(9), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 84", "c.lhu x15, [X(9), 2]");
}

#[test]
fn c_li_364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.li X(26), -28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 5D", "c.li X(26), -28");
}

#[test]
fn c_li_365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.li X(13), 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 46", "c.li X(13), 9");
}

#[test]
fn c_lw_366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lw x13, [x8, 52]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 58", "c.lw x13, [x8, 52]");
}

#[test]
fn c_lw_367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lw X(12), [x11, 32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 51", "c.lw X(12), [x11, 32]");
}

#[test]
fn c_lwsp_368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lwsp x15, [sp, 140]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, 47", "c.lwsp x15, [sp, 140]");
}

#[test]
fn c_lwsp_369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lwsp x6, [sp, 212]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 43", "c.lwsp x6, [sp, 212]");
}

#[test]
fn c_mop_1_370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_1_371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_11_372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_11_373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_13_374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_13_375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_15_376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_15_377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_3_378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_3_379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_5_380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_5_381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_7_382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_7_383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_9_384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_9_385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_n_386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.N 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.N 5");
}

#[test]
fn c_mop_n_387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.N 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.N 13");
}

#[test]
fn c_mul_388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature mzcb
        ; c.mul X(10), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 9D", "c.mul X(10), x10");
}

#[test]
fn c_mul_389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature mzcb
        ; c.mul x14, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 9F", "c.mul x14, x11");
}

#[test]
fn c_mv_390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.mv X(28), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 8E", "c.mv X(28), X(22)");
}

#[test]
fn c_mv_391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.mv x3, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 81", "c.mv x3, X(26)");
}

#[test]
fn c_nop_392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_nop_393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_not_394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.not X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 9C", "c.not X(9)");
}

#[test]
fn c_not_395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.not x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 9E", "c.not x12");
}

#[test]
fn c_ntl_all_396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_all_397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_p1_398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_p1_399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_pall_400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_pall_401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_s1_402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_ntl_s1_403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_or_404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.or x10, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 8D", "c.or x10, x12");
}

#[test]
fn c_or_405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.or x11, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 8D", "c.or x11, x9");
}

#[test]
fn c_sb_406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.sb x13, [X(8), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 88", "c.sb x13, [X(8), 0]");
}

#[test]
fn c_sb_407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.sb X(11), [X(15), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 8B", "c.sb X(11), [X(15), 2]");
}

#[test]
fn c_sext_b_408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.b x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 9C", "c.sext.b x8");
}

#[test]
fn c_sext_b_409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.b X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 9D", "c.sext.b X(11)");
}

#[test]
fn c_sext_h_410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.h X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 9E", "c.sext.h X(12)");
}

#[test]
fn c_sext_h_411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.h X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 9C", "c.sext.h X(8)");
}

#[test]
fn c_sh_412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sh X(15), [X(10), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 8D", "c.sh X(15), [X(10), 0]");
}

#[test]
fn c_sh_413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sh x10, [x9, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 8C", "c.sh x10, [x9, 0]");
}

#[test]
fn c_slli_414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.slli x7, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 03", "c.slli x7, 30");
}

#[test]
fn c_slli_415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.slli x19, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 09", "c.slli x19, 27");
}

#[test]
fn c_srai_416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srai X(12), 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 86", "c.srai X(12), 25");
}

#[test]
fn c_srai_417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srai X(11), 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 85", "c.srai X(11), 25");
}

#[test]
fn c_srli_418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srli X(14), 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 83", "c.srli X(14), 16");
}

#[test]
fn c_srli_419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srli x14, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 83", "c.srli x14, 9");
}

#[test]
fn c_sspopchk_420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspopchk_421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspush_422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sspush_423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sub_424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sub x8, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 8C", "c.sub x8, x15");
}

#[test]
fn c_sub_425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sub X(10), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 8D", "c.sub X(10), x14");
}

#[test]
fn c_sw_426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sw X(14), [X(9), 84]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, C8", "c.sw X(14), [X(9), 84]");
}

#[test]
fn c_sw_427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sw X(8), [x14, 60]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, DF", "c.sw X(8), [x14, 60]");
}

#[test]
fn c_swsp_428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.swsp X(2), [sp, 128]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, C1", "c.swsp X(2), [sp, 128]");
}

#[test]
fn c_swsp_429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.swsp x31, [sp, 60]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, DE", "c.swsp x31, [sp, 60]");
}

#[test]
fn c_unimp_430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00", "c.unimp");
}

#[test]
fn c_unimp_431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00", "c.unimp");
}

#[test]
fn c_xor_432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.xor x10, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 8D", "c.xor x10, x9");
}

#[test]
fn c_xor_433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.xor X(11), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 8D", "c.xor X(11), X(10)");
}

#[test]
fn c_zext_b_434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.zext.b x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 9F", "c.zext.b x14");
}

#[test]
fn c_zext_b_435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.zext.b x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 9D", "c.zext.b x10");
}

#[test]
fn c_zext_h_436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.zext.h X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 9D", "c.zext.h X(10)");
}

#[test]
fn c_zext_h_437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.zext.h x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 9E", "c.zext.h x12");
}

#[test]
fn call_438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; call -256737940
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 80, B2, F0, E7, 80, C0, D6", "call -256737940");
}

#[test]
fn call_439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; call -1755994725
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A0, 55, 97, E7, 80, B0, 59", "call -1755994725");
}

#[test]
fn cbo_clean_440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.clean [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 1D, 00", "cbo.clean [x27]");
}

#[test]
fn cbo_clean_441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.clean [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 1D, 00", "cbo.clean [x26]");
}

#[test]
fn cbo_flush_442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.flush [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 27, 00", "cbo.flush [x15]");
}

#[test]
fn cbo_flush_443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.flush [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 2B, 00", "cbo.flush [x23]");
}

#[test]
fn cbo_inval_444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.inval [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 07, 00", "cbo.inval [x14]");
}

#[test]
fn cbo_inval_445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.inval [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 03, 00", "cbo.inval [x7]");
}

#[test]
fn cbo_zero_446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicboz
        ; cbo.zero [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 49, 00", "cbo.zero [x18]");
}

#[test]
fn cbo_zero_447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicboz
        ; cbo.zero [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 45, 00", "cbo.zero [X(11)]");
}

#[test]
fn clmul_448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmul x11, x4, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 15, A2, 0A", "clmul x11, x4, X(10)");
}

#[test]
fn clmul_449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; clmul X(1), x17, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 90, F8, 0B", "clmul X(1), x17, X(31)");
}

#[test]
fn clmulh_450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; clmulh x5, x20, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 32, FA, 0B", "clmulh x5, x20, X(31)");
}

#[test]
fn clmulh_451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkc
        ; clmulh X(6), X(10), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 33, F5, 0B", "clmulh X(6), X(10), X(31)");
}

#[test]
fn clmulr_452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulr x1, X(13), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A0, 06, 0A", "clmulr x1, X(13), X(0)");
}

#[test]
fn clmulr_453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulr x9, X(7), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A4, 53, 0B", "clmulr x9, X(7), X(21)");
}

#[test]
fn clz_454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; clz X(30), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9F, 0A, 60", "clz X(30), X(21)");
}

#[test]
fn clz_455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; clz X(7), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 93, 09, 60", "clz X(7), x19");
}

#[test]
fn cm_jalt_456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jalt 76
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, A1", "cm.jalt 76");
}

#[test]
fn cm_jalt_457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jalt 237
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, A3", "cm.jalt 237");
}

#[test]
fn cm_jt_458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jt 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, A0", "cm.jt 12");
}

#[test]
fn cm_jt_459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jt 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, A0", "cm.jt 31");
}

#[test]
fn cm_mva01s_460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mva01s x20, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, AE", "cm.mva01s x20, X(20)");
}

#[test]
fn cm_mva01s_461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mva01s x20, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, AE", "cm.mva01s x20, x22");
}

#[test]
fn cm_mvsa01_462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mvsa01 x19, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, AD", "cm.mvsa01 x19, X(20)");
}

#[test]
fn cm_mvsa01_463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mvsa01 X(23), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, AF", "cm.mvsa01 X(23), x19");
}

#[test]
fn cm_pop_464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.pop {ra, s0-s9}, 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, BA", "cm.pop {{ra, s0-s9}}, 48");
}

#[test]
fn cm_pop_465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.pop {ra, s0-s3}, 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, BA", "cm.pop {{ra, s0-s3}}, 32");
}

#[test]
fn cm_popret_466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popret {ra, s0-s4}, 80
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, BE", "cm.popret {{ra, s0-s4}}, 80");
}

#[test]
fn cm_popret_467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popret {ra; 5}, 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, BE", "cm.popret {{ra; 5}}, 64");
}

#[test]
fn cm_popretz_468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popretz {ra; 1}, 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, BC", "cm.popretz {{ra; 1}}, 64");
}

#[test]
fn cm_popretz_469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popretz {ra; 12}, 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, BC", "cm.popretz {{ra; 12}}, 64");
}

#[test]
fn cm_push_470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.push {ra, s0-s9}, -64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, B8", "cm.push {{ra, s0-s9}}, -64");
}

#[test]
fn cm_push_471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.push {ra; 7}, -64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BA, B8", "cm.push {{ra; 7}}, -64");
}

#[test]
fn cpop_472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; cpop x25, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1C, 2B, 60", "cpop x25, x22");
}

#[test]
fn cpop_473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; cpop x6, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 13, 20, 60", "cpop x6, x0");
}

#[test]
fn csrc_474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrc hpmcounter26, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, B0, A9, C1", "csrc hpmcounter26, x19");
}

#[test]
fn csrc_475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrc 3086, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, B0, E6, C0", "csrc 3086, X(13)");
}

#[test]
fn csrci_476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrci hpmcounter13, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 70, DC, C0", "csrci hpmcounter13, 24");
}

#[test]
fn csrci_477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrci hpmcounter5, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, F0, 5D, C0", "csrci hpmcounter5, 27");
}

#[test]
fn csrr_478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrr x22, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2B, 20, 00", "csrr x22, 2");
}

#[test]
fn csrr_479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrr X(18), 3090
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 29, 20, C1", "csrr X(18), 3090");
}

#[test]
fn csrrc_480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrc X(4), 17, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 32, 18, 01", "csrrc X(4), 17, X(16)");
}

#[test]
fn csrrc_481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrc x5, 3098, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 32, A7, C1", "csrrc x5, 3098, X(14)");
}

#[test]
fn csrrci_482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrci X(13), 3097, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 76, 98, C1", "csrrci X(13), 3097, 16");
}

#[test]
fn csrrci_483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrci x16, 3078, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 78, 65, C0", "csrrci x16, 3078, 10");
}

#[test]
fn csrrs_484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrs x26, 3101, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2D, D0, C1", "csrrs x26, 3101, X(0)");
}

#[test]
fn csrrs_485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrs X(16), 3098, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 28, A5, C1", "csrrs X(16), 3098, X(10)");
}

#[test]
fn csrrsi_486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrsi X(12), hpmcounter13, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 66, D0, C0", "csrrsi X(12), hpmcounter13, 0");
}

#[test]
fn csrrsi_487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrsi X(16), 3086, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 68, E3, C0", "csrrsi X(16), 3086, 6");
}

#[test]
fn csrrw_488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrw X(18), 3087, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 99, FA, C0", "csrrw X(18), 3087, X(21)");
}

#[test]
fn csrrw_489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrw X(0), hpmcounter12, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, C0, C0", "csrrw X(0), hpmcounter12, X(0)");
}

#[test]
fn csrrwi_490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrwi x16, 3080, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, D8, 84, C0", "csrrwi x16, 3080, 9");
}

#[test]
fn csrrwi_491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrwi x6, cycle, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 53, 06, C0", "csrrwi x6, cycle, 12");
}

#[test]
fn csrs_492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrs 3077, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A0, 54, C0", "csrs 3077, x9");
}

#[test]
fn csrs_493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrs fcsr, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A0, 38, 00", "csrs fcsr, X(17)");
}

#[test]
fn csrsi_494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrsi 3072, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, E0, 04, C0", "csrsi 3072, 9");
}

#[test]
fn csrsi_495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrsi 17, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, E0, 18, 01", "csrsi 17, 17");
}

#[test]
fn csrw_496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrw ssp, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 90, 14, 01", "csrw ssp, X(9)");
}

#[test]
fn csrw_497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrw 3098, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 90, A4, C1", "csrw 3098, x9");
}

#[test]
fn csrwi_498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrwi 3088, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 50, 0C, C1", "csrwi 3088, 24");
}

#[test]
fn csrwi_499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrwi 3081, 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 50, 92, C0", "csrwi 3081, 4");
}

#[test]
fn ctz_500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; ctz x2, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 91, 12, 60", "ctz x2, X(5)");
}

#[test]
fn ctz_501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; ctz X(8), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 14, 19, 60", "ctz X(8), x18");
}

#[test]
fn czero_eqz_502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.eqz X(21), x22, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 5A, 2B, 0E", "czero.eqz X(21), x22, x2");
}

#[test]
fn czero_eqz_503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.eqz x15, X(11), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D7, C5, 0E", "czero.eqz x15, X(11), x12");
}

#[test]
fn czero_nez_504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.nez X(31), x8, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 7F, D4, 0F", "czero.nez X(31), x8, X(29)");
}

#[test]
fn czero_nez_505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.nez X(13), x8, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 76, 74, 0F", "czero.nez X(13), x8, x23");
}

#[test]
fn div_506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; div X(3), X(13), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, C1, D6, 03", "div X(3), X(13), x29");
}

#[test]
fn div_507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; div X(0), X(12), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 40, A6, 02", "div X(0), X(12), X(10)");
}

#[test]
fn divu_508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; divu x3, x17, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D1, 08, 02", "divu x3, x17, x0");
}

#[test]
fn divu_509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; divu X(13), X(28), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 56, EE, 03", "divu X(13), X(28), X(30)");
}

#[test]
fn ebreak_510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ebreak_511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ecall_512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn ecall_513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn fabs_d_514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fabs.d F(17), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 7B, 23", "fabs.d F(17), f23");
}

#[test]
fn fabs_d_515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fabs.d f0, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 20, 00, 22", "fabs.d f0, F(0)");
}

#[test]
fn fabs_d_516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fabs.d X(16), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 28, 8C, 23", "fabs.d X(16), X(24)");
}

#[test]
fn fabs_d_517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fabs.d x28, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2E, 6B, 23", "fabs.d x28, X(22)");
}

#[test]
fn fabs_h_518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fabs.h f27, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, 94, 24", "fabs.h f27, F(9)");
}

#[test]
fn fabs_h_519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fabs.h f3, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, 10, 24", "fabs.h f3, F(1)");
}

#[test]
fn fabs_h_520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fabs.h x22, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2B, 00, 24", "fabs.h x22, X(0)");
}

#[test]
fn fabs_h_521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fabs.h X(26), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, DE, 25", "fabs.h X(26), x29");
}

#[test]
fn fabs_q_522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fabs.q f13, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 26, 63, 26", "fabs.q f13, f6");
}

#[test]
fn fabs_q_523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fabs.q f30, f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2F, 8C, 27", "fabs.q f30, f24");
}

#[test]
fn fabs_s_524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fabs.s F(31), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AF, 7B, 21", "fabs.s F(31), f23");
}

#[test]
fn fabs_s_525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fabs.s F(19), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 29, A5, 20", "fabs.s F(19), F(10)");
}

#[test]
fn fabs_s_526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fabs.s x4, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 22, 84, 20", "fabs.s x4, X(8)");
}

#[test]
fn fabs_s_527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fabs.s X(10), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A5, DE, 21", "fabs.s X(10), x29");
}

#[test]
fn fadd_d_528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d f14, f29, f8, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 8E, 02", "fadd.d f14, f29, f8, dyn");
}

#[test]
fn fadd_d_529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d F(12), f12, f17, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 16, 03", "fadd.d F(12), f12, f17, dyn");
}

#[test]
fn fadd_d_530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fadd.d x2, X(12), X(8), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 41, 86, 02", "fadd.d x2, X(12), X(8), rmm");
}

#[test]
fn fadd_d_531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fadd.d x8, x12, X(2), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 34, 26, 02", "fadd.d x8, x12, X(2), rup");
}

#[test]
fn fadd_d_532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d f17, F(9), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 64, 03", "fadd.d f17, F(9), F(22)");
}

#[test]
fn fadd_d_533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d f25, F(31), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 2F, 03", "fadd.d f25, F(31), f18");
}

#[test]
fn fadd_d_534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fadd.d x14, X(24), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, AC, 02", "fadd.d x14, X(24), X(10)");
}

#[test]
fn fadd_d_535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fadd.d x28, X(26), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 8D, 02", "fadd.d x28, X(26), X(8)");
}

#[test]
fn fadd_h_536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(29), F(19), F(28), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, C9, 05", "fadd.h F(29), F(19), F(28), dyn");
}

#[test]
fn fadd_h_537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h f27, f17, f30, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, E8, 05", "fadd.h f27, f17, f30, rne");
}

#[test]
fn fadd_h_538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fadd.h x20, x15, x26, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8A, A7, 05", "fadd.h x20, x15, x26, rne");
}

#[test]
fn fadd_h_539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fadd.h x12, x11, x2, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 96, 25, 04", "fadd.h x12, x11, x2, rtz");
}

#[test]
fn fadd_h_540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(25), F(2), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, 51, 05", "fadd.h F(25), F(2), f21");
}

#[test]
fn fadd_h_541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h f19, f18, F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 99, 05", "fadd.h f19, f18, F(25)");
}

#[test]
fn fadd_h_542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fadd.h x16, x17, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 38, 04", "fadd.h x16, x17, X(3)");
}

#[test]
fn fadd_h_543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fadd.h X(29), X(21), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, FA, 04", "fadd.h X(29), X(21), X(15)");
}

#[test]
fn fadd_q_544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f0, f24, F(20), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 4C, 07", "fadd.q f0, f24, F(20), rtz");
}

#[test]
fn fadd_q_545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q F(31), f2, f26, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3F, A1, 07", "fadd.q F(31), f2, f26, rup");
}

#[test]
fn fadd_q_546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f16, f31, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, CF, 06", "fadd.q f16, f31, F(12)");
}

#[test]
fn fadd_q_547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q F(1), F(24), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, FC, 07", "fadd.q F(1), F(24), f31");
}

#[test]
fn fadd_s_548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(17), f14, F(26), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, A7, 01", "fadd.s F(17), f14, F(26), dyn");
}

#[test]
fn fadd_s_549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(28), F(18), F(20), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1E, 49, 01", "fadd.s F(28), F(18), F(20), rtz");
}

#[test]
fn fadd_s_550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fadd.s X(0), x24, X(24), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 30, 8C, 01", "fadd.s X(0), x24, X(24), rup");
}

#[test]
fn fadd_s_551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fadd.s x18, x2, X(17), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 39, 11, 01", "fadd.s x18, x2, X(17), rup");
}

#[test]
fn fadd_s_552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s f26, F(21), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, CA, 01", "fadd.s f26, F(21), F(28)");
}

#[test]
fn fadd_s_553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(19), F(5), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 32, 01", "fadd.s F(19), F(5), f19");
}

#[test]
fn fadd_s_554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fadd.s X(31), x29, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 0E, 01", "fadd.s X(31), x29, x16");
}

#[test]
fn fadd_s_555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fadd.s X(10), X(0), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 00, 01", "fadd.s X(10), X(0), X(16)");
}

#[test]
fn fclass_d_556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fclass.d X(4), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 92, 0F, E2", "fclass.d X(4), F(31)");
}

#[test]
fn fclass_d_557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fclass.d X(29), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1E, 06, E2", "fclass.d X(29), F(12)");
}

#[test]
fn fclass_d_558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fclass.d x11, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 15, 08, E2", "fclass.d x11, X(16)");
}

#[test]
fn fclass_d_559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fclass.d X(10), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 15, 07, E2", "fclass.d X(10), x14");
}

#[test]
fn fclass_h_560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fclass.h x24, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1C, 05, E4", "fclass.h x24, F(10)");
}

#[test]
fn fclass_h_561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fclass.h x16, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 98, 0E, E4", "fclass.h x16, f29");
}

#[test]
fn fclass_h_562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fclass.h X(10), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 15, 01, E4", "fclass.h X(10), x2");
}

#[test]
fn fclass_h_563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fclass.h X(17), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 18, 0D, E4", "fclass.h X(17), x26");
}

#[test]
fn fclass_q_564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fclass.q x10, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 15, 0F, E6", "fclass.q x10, F(30)");
}

#[test]
fn fclass_q_565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fclass.q X(16), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 98, 03, E6", "fclass.q X(16), F(7)");
}

#[test]
fn fclass_s_566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fclass.s x24, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9C, 07, E0", "fclass.s x24, F(15)");
}

#[test]
fn fclass_s_567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fclass.s x17, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 98, 08, E0", "fclass.s x17, F(17)");
}

#[test]
fn fclass_s_568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fclass.s X(13), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 96, 0A, E0", "fclass.s X(13), x21");
}

#[test]
fn fclass_s_569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fclass.s X(7), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 0D, E0", "fclass.s X(7), X(27)");
}

#[test]
fn fcvt_bf16_s_570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s f20, F(20), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4A, 8A, 44", "fcvt.bf16.s f20, F(20), rmm");
}

#[test]
fn fcvt_bf16_s_571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s f6, F(28), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 43, 8E, 44", "fcvt.bf16.s f6, F(28), rmm");
}

#[test]
fn fcvt_bf16_s_572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s F(12), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 8D, 44", "fcvt.bf16.s F(12), f27");
}

#[test]
fn fcvt_bf16_s_573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s f21, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, 82, 44", "fcvt.bf16.s f21, f4");
}

#[test]
fn fcvt_d_h_574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfhmin
        ; fcvt.d.h F(8), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, 25, 42", "fcvt.d.h F(8), f10");
}

#[test]
fn fcvt_d_h_575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfhmin
        ; fcvt.d.h f3, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 29, 42", "fcvt.d.h f3, F(18)");
}

#[test]
fn fcvt_d_h_576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx_zhinx
        ; fcvt.d.h x6, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 2D, 42", "fcvt.d.h x6, X(26)");
}

#[test]
fn fcvt_d_h_577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx_zhinx
        ; fcvt.d.h X(24), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0C, 2A, 42", "fcvt.d.h X(24), X(20)");
}

#[test]
fn fcvt_d_q_578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(7), f17, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B3, 38, 42", "fcvt.d.q F(7), f17, rup");
}

#[test]
fn fcvt_d_q_579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(17), f19, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 39, 42", "fcvt.d.q F(17), f19, rdn");
}

#[test]
fn fcvt_d_q_580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(5), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 3B, 42", "fcvt.d.q F(5), f23");
}

#[test]
fn fcvt_d_q_581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q f15, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 37, 42", "fcvt.d.q f15, F(15)");
}

#[test]
fn fcvt_d_s_582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.s F(1), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 03, 42", "fcvt.d.s F(1), F(6)");
}

#[test]
fn fcvt_d_s_583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.s F(7), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, 0F, 42", "fcvt.d.s F(7), f30");
}

#[test]
fn fcvt_d_s_584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.d.s X(30), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 05, 42", "fcvt.d.s X(30), X(10)");
}

#[test]
fn fcvt_d_s_585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.d.s X(16), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 07, 42", "fcvt.d.s X(16), x14");
}

#[test]
fn fcvt_d_w_586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.w f8, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 0D, D2", "fcvt.d.w f8, x27");
}

#[test]
fn fcvt_d_w_587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.w F(8), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, 0F, D2", "fcvt.d.w F(8), X(30)");
}

#[test]
fn fcvt_d_w_588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.d.w X(22), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 01, D2", "fcvt.d.w X(22), x3");
}

#[test]
fn fcvt_d_w_589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.d.w X(18), X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 06, D2", "fcvt.d.w X(18), X(12)");
}

#[test]
fn fcvt_d_wu_590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.wu f1, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 11, D2", "fcvt.d.wu f1, X(2)");
}

#[test]
fn fcvt_d_wu_591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.wu f8, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 1D, D2", "fcvt.d.wu f8, X(27)");
}

#[test]
fn fcvt_d_wu_592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.d.wu x30, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8F, 13, D2", "fcvt.d.wu x30, x7");
}

#[test]
fn fcvt_d_wu_593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.d.wu x24, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 11, D2", "fcvt.d.wu x24, x3");
}

#[test]
fn fcvt_h_d_594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d F(3), F(26), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 1D, 44", "fcvt.h.d F(3), F(26), rtz");
}

#[test]
fn fcvt_h_d_595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfhmin
        ; fcvt.h.d f26, f10, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4D, 15, 44", "fcvt.h.d f26, f10, rmm");
}

#[test]
fn fcvt_h_d_596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx_zhinx
        ; fcvt.h.d X(26), x10, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3D, 15, 44", "fcvt.h.d X(26), x10, rup");
}

#[test]
fn fcvt_h_d_597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx_zhinxmin
        ; fcvt.h.d x20, X(6), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4A, 13, 44", "fcvt.h.d x20, X(6), rmm");
}

#[test]
fn fcvt_h_d_598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d f13, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 1A, 44", "fcvt.h.d f13, F(21)");
}

#[test]
fn fcvt_h_d_599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfhmin
        ; fcvt.h.d F(2), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 10, 44", "fcvt.h.d F(2), f1");
}

#[test]
fn fcvt_h_d_600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx_zhinxmin
        ; fcvt.h.d x24, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 10, 44", "fcvt.h.d x24, x0");
}

#[test]
fn fcvt_h_d_601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx_zhinx
        ; fcvt.h.d X(16), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 17, 44", "fcvt.h.d X(16), x14");
}

#[test]
fn fcvt_h_q_602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q F(11), F(2), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 25, 31, 44", "fcvt.h.q F(11), F(2), rdn");
}

#[test]
fn fcvt_h_q_603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q f15, F(1), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C7, 30, 44", "fcvt.h.q f15, F(1), rmm");
}

#[test]
fn fcvt_h_q_604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfhmin
        ; fcvt.h.q f1, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, 3E, 44", "fcvt.h.q f1, F(29)");
}

#[test]
fn fcvt_h_q_605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfhmin
        ; fcvt.h.q f18, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 37, 44", "fcvt.h.q f18, F(14)");
}

#[test]
fn fcvt_h_s_606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s f27, f5, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CD, 02, 44", "fcvt.h.s f27, f5, rmm");
}

#[test]
fn fcvt_h_s_607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s F(22), F(12), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, 06, 44", "fcvt.h.s F(22), F(12), rtz");
}

#[test]
fn fcvt_h_s_608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinxmin
        ; fcvt.h.s x25, X(5), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 02, 44", "fcvt.h.s x25, X(5), rdn");
}

#[test]
fn fcvt_h_s_609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinxmin
        ; fcvt.h.s X(13), x29, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A6, 0E, 44", "fcvt.h.s X(13), x29, rdn");
}

#[test]
fn fcvt_h_s_610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s F(10), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 09, 44", "fcvt.h.s F(10), f19");
}

#[test]
fn fcvt_h_s_611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s f26, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 02, 44", "fcvt.h.s f26, F(5)");
}

#[test]
fn fcvt_h_s_612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinxmin
        ; fcvt.h.s x1, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 01, 44", "fcvt.h.s x1, x2");
}

#[test]
fn fcvt_h_s_613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinxmin
        ; fcvt.h.s x10, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 04, 44", "fcvt.h.s x10, x8");
}

#[test]
fn fcvt_h_w_614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f24, X(12), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3C, 06, D4", "fcvt.h.w f24, X(12), rup");
}

#[test]
fn fcvt_h_w_615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w F(20), x1, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 00, D4", "fcvt.h.w F(20), x1, dyn");
}

#[test]
fn fcvt_h_w_616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.w X(2), x24, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 41, 0C, D4", "fcvt.h.w X(2), x24, rmm");
}

#[test]
fn fcvt_h_w_617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.w x3, X(5), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C1, 02, D4", "fcvt.h.w x3, X(5), rmm");
}

#[test]
fn fcvt_h_w_618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f6, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, 02, D4", "fcvt.h.w f6, x5");
}

#[test]
fn fcvt_h_w_619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f4, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 09, D4", "fcvt.h.w f4, x18");
}

#[test]
fn fcvt_h_w_620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.w X(23), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 07, D4", "fcvt.h.w X(23), X(14)");
}

#[test]
fn fcvt_h_w_621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.w x0, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 0D, D4", "fcvt.h.w x0, X(27)");
}

#[test]
fn fcvt_h_wu_622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(0), X(3), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B0, 11, D4", "fcvt.h.wu F(0), X(3), rup");
}

#[test]
fn fcvt_h_wu_623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(27), x17, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 18, D4", "fcvt.h.wu F(27), x17, dyn");
}

#[test]
fn fcvt_h_wu_624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.wu x8, X(27), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B4, 1D, D4", "fcvt.h.wu x8, X(27), rup");
}

#[test]
fn fcvt_h_wu_625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.wu X(21), x1, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 10, D4", "fcvt.h.wu X(21), x1, rne");
}

#[test]
fn fcvt_h_wu_626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu f4, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 17, D4", "fcvt.h.wu f4, X(14)");
}

#[test]
fn fcvt_h_wu_627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu f30, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 14, D4", "fcvt.h.wu f30, X(8)");
}

#[test]
fn fcvt_h_wu_628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.wu X(1), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 19, D4", "fcvt.h.wu X(1), X(18)");
}

#[test]
fn fcvt_h_wu_629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.h.wu x16, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 15, D4", "fcvt.h.wu x16, X(11)");
}

#[test]
fn fcvt_q_d_630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.d f5, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 17, 46", "fcvt.q.d f5, F(14)");
}

#[test]
fn fcvt_q_d_631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.d f6, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 14, 46", "fcvt.q.d f6, f8");
}

#[test]
fn fcvt_q_h_632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfhmin
        ; fcvt.q.h f9, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 27, 46", "fcvt.q.h f9, F(14)");
}

#[test]
fn fcvt_q_h_633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfhmin
        ; fcvt.q.h f27, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 2A, 46", "fcvt.q.h f27, F(21)");
}

#[test]
fn fcvt_q_s_634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.s F(22), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, 00, 46", "fcvt.q.s F(22), f0");
}

#[test]
fn fcvt_q_s_635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.s f21, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 0F, 46", "fcvt.q.s f21, F(30)");
}

#[test]
fn fcvt_q_w_636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.w F(1), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 80, 05, D6", "fcvt.q.w F(1), x11");
}

#[test]
fn fcvt_q_w_637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.w f18, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 09, D6", "fcvt.q.w f18, x18");
}

#[test]
fn fcvt_q_wu_638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.wu F(6), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 1C, D6", "fcvt.q.wu F(6), x24");
}

#[test]
fn fcvt_q_wu_639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.wu f30, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 1D, D6", "fcvt.q.wu f30, x26");
}

#[test]
fn fcvt_s_bf16_640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.s.bf16 f27, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 60, 40", "fcvt.s.bf16 f27, F(1)");
}

#[test]
fn fcvt_s_bf16_641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.s.bf16 f4, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 82, 6F, 40", "fcvt.s.bf16 f4, F(31)");
}

#[test]
fn fcvt_s_d_642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d F(3), f15, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, 17, 40", "fcvt.s.d F(3), f15, rdn");
}

#[test]
fn fcvt_s_d_643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d F(7), f1, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A3, 10, 40", "fcvt.s.d F(7), f1, rdn");
}

#[test]
fn fcvt_s_d_644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.s.d X(22), x14, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2B, 17, 40", "fcvt.s.d X(22), x14, rdn");
}

#[test]
fn fcvt_s_d_645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.s.d x28, x28, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2E, 1E, 40", "fcvt.s.d x28, x28, rdn");
}

#[test]
fn fcvt_s_d_646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f17, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 17, 40", "fcvt.s.d f17, f15");
}

#[test]
fn fcvt_s_d_647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f20, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 1B, 40", "fcvt.s.d f20, f22");
}

#[test]
fn fcvt_s_d_648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.s.d x12, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 12, 40", "fcvt.s.d x12, x4");
}

#[test]
fn fcvt_s_d_649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.s.d x12, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 1B, 40", "fcvt.s.d x12, X(22)");
}

#[test]
fn fcvt_s_h_650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.s.h f13, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 86, 2B, 40", "fcvt.s.h f13, f23");
}

#[test]
fn fcvt_s_h_651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.s.h f1, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 24, 40", "fcvt.s.h f1, F(8)");
}

#[test]
fn fcvt_s_h_652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.s.h X(21), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 2F, 40", "fcvt.s.h X(21), x30");
}

#[test]
fn fcvt_s_h_653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.s.h X(6), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 2E, 40", "fcvt.s.h X(6), x29");
}

#[test]
fn fcvt_s_q_654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f5, F(26), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 72, 3D, 40", "fcvt.s.q f5, F(26), dyn");
}

#[test]
fn fcvt_s_q_655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f3, f7, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C1, 33, 40", "fcvt.s.q f3, f7, rmm");
}

#[test]
fn fcvt_s_q_656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f7, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 33, 40", "fcvt.s.q f7, F(7)");
}

#[test]
fn fcvt_s_q_657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f4, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 31, 40", "fcvt.s.q f4, F(2)");
}

#[test]
fn fcvt_s_w_658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w F(11), X(30), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 35, 0F, D0", "fcvt.s.w F(11), X(30), rup");
}

#[test]
fn fcvt_s_w_659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w f11, X(31), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 0F, D0", "fcvt.s.w f11, X(31), rne");
}

#[test]
fn fcvt_s_w_660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.w x5, X(7), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B2, 03, D0", "fcvt.s.w x5, X(7), rup");
}

#[test]
fn fcvt_s_w_661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.w X(31), x31, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9F, 0F, D0", "fcvt.s.w X(31), x31, rtz");
}

#[test]
fn fcvt_s_w_662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w F(5), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 72, 0E, D0", "fcvt.s.w F(5), x28");
}

#[test]
fn fcvt_s_w_663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w F(9), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 06, D0", "fcvt.s.w F(9), x13");
}

#[test]
fn fcvt_s_w_664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.w x1, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 0D, D0", "fcvt.s.w x1, x26");
}

#[test]
fn fcvt_s_w_665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.w x31, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 02, D0", "fcvt.s.w x31, x5");
}

#[test]
fn fcvt_s_wu_666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu f16, x31, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B8, 1F, D0", "fcvt.s.wu f16, x31, rup");
}

#[test]
fn fcvt_s_wu_667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(30), X(7), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 13, D0", "fcvt.s.wu F(30), X(7), dyn");
}

#[test]
fn fcvt_s_wu_668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.wu x26, x12, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2D, 16, D0", "fcvt.s.wu x26, x12, rdn");
}

#[test]
fn fcvt_s_wu_669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.wu x16, X(4), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 12, D0", "fcvt.s.wu x16, X(4), dyn");
}

#[test]
fn fcvt_s_wu_670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu f24, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 12, D0", "fcvt.s.wu f24, X(5)");
}

#[test]
fn fcvt_s_wu_671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(4), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 1E, D0", "fcvt.s.wu F(4), x29");
}

#[test]
fn fcvt_s_wu_672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.wu X(12), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 12, D0", "fcvt.s.wu X(12), X(5)");
}

#[test]
fn fcvt_s_wu_673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.s.wu x7, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 14, D0", "fcvt.s.wu x7, x8");
}

#[test]
fn fcvt_w_d_674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x12, f30, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 36, 0F, C2", "fcvt.w.d x12, f30, rup");
}

#[test]
fn fcvt_w_d_675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x14, f12, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 37, 06, C2", "fcvt.w.d x14, f12, rup");
}

#[test]
fn fcvt_w_d_676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.w.d X(27), X(0), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1D, 00, C2", "fcvt.w.d X(27), X(0), rtz");
}

#[test]
fn fcvt_w_d_677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.w.d x20, X(2), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4A, 01, C2", "fcvt.w.d x20, X(2), rmm");
}

#[test]
fn fcvt_w_d_678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x30, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 0E, C2", "fcvt.w.d x30, F(28)");
}

#[test]
fn fcvt_w_d_679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x4, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 0E, C2", "fcvt.w.d x4, F(29)");
}

#[test]
fn fcvt_w_d_680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.w.d X(7), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 03, C2", "fcvt.w.d X(7), x6");
}

#[test]
fn fcvt_w_d_681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.w.d X(23), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 0B, C2", "fcvt.w.d X(23), X(22)");
}

#[test]
fn fcvt_w_h_682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h X(28), f4, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4E, 02, C4", "fcvt.w.h X(28), f4, rmm");
}

#[test]
fn fcvt_w_h_683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x7, f10, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 23, 05, C4", "fcvt.w.h x7, f10, rdn");
}

#[test]
fn fcvt_w_h_684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.w.h X(21), x17, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CA, 08, C4", "fcvt.w.h X(21), x17, rmm");
}

#[test]
fn fcvt_w_h_685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.w.h X(0), x3, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C0, 01, C4", "fcvt.w.h X(0), x3, rmm");
}

#[test]
fn fcvt_w_h_686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x2, F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 0C, C4", "fcvt.w.h x2, F(25)");
}

#[test]
fn fcvt_w_h_687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x29, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 0B, C4", "fcvt.w.h x29, f23");
}

#[test]
fn fcvt_w_h_688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.w.h X(24), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 03, C4", "fcvt.w.h X(24), x7");
}

#[test]
fn fcvt_w_h_689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.w.h x7, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 0D, C4", "fcvt.w.h x7, x27");
}

#[test]
fn fcvt_w_q_690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(27), F(6), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1D, 03, C6", "fcvt.w.q X(27), F(6), rtz");
}

#[test]
fn fcvt_w_q_691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q x4, f31, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 92, 0F, C6", "fcvt.w.q x4, f31, rtz");
}

#[test]
fn fcvt_w_q_692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(6), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 0D, C6", "fcvt.w.q X(6), F(26)");
}

#[test]
fn fcvt_w_q_693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(14), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 0D, C6", "fcvt.w.q X(14), f26");
}

#[test]
fn fcvt_w_s_694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s x31, F(10), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3F, 05, C0", "fcvt.w.s x31, F(10), rup");
}

#[test]
fn fcvt_w_s_695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(29), F(14), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 07, C0", "fcvt.w.s X(29), F(14), dyn");
}

#[test]
fn fcvt_w_s_696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.w.s x27, X(1), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, 00, C0", "fcvt.w.s x27, X(1), rdn");
}

#[test]
fn fcvt_w_s_697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.w.s X(23), X(1), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 00, C0", "fcvt.w.s X(23), X(1), rdn");
}

#[test]
fn fcvt_w_s_698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s x31, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 05, C0", "fcvt.w.s x31, f10");
}

#[test]
fn fcvt_w_s_699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(26), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 0C, C0", "fcvt.w.s X(26), F(25)");
}

#[test]
fn fcvt_w_s_700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.w.s X(16), x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 00, C0", "fcvt.w.s X(16), x1");
}

#[test]
fn fcvt_w_s_701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.w.s X(0), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 09, C0", "fcvt.w.s X(0), x19");
}

#[test]
fn fcvt_wu_d_702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d X(26), F(8), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 14, C2", "fcvt.wu.d X(26), F(8), rne");
}

#[test]
fn fcvt_wu_d_703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x18, F(15), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 17, C2", "fcvt.wu.d x18, F(15), dyn");
}

#[test]
fn fcvt_wu_d_704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.wu.d x14, X(26), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 47, 1D, C2", "fcvt.wu.d x14, X(26), rmm");
}

#[test]
fn fcvt_wu_d_705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.wu.d X(28), x0, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1E, 10, C2", "fcvt.wu.d X(28), x0, rtz");
}

#[test]
fn fcvt_wu_d_706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x3, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 14, C2", "fcvt.wu.d x3, F(9)");
}

#[test]
fn fcvt_wu_d_707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x18, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 1D, C2", "fcvt.wu.d x18, f27");
}

#[test]
fn fcvt_wu_d_708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.wu.d X(2), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 13, C2", "fcvt.wu.d X(2), x6");
}

#[test]
fn fcvt_wu_d_709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fcvt.wu.d X(16), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 1F, C2", "fcvt.wu.d X(16), X(30)");
}

#[test]
fn fcvt_wu_h_710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x0, F(21), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 90, 1A, C4", "fcvt.wu.h x0, F(21), rtz");
}

#[test]
fn fcvt_wu_h_711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h X(18), f16, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 39, 18, C4", "fcvt.wu.h X(18), f16, rup");
}

#[test]
fn fcvt_wu_h_712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.wu.h X(14), x29, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B7, 1E, C4", "fcvt.wu.h X(14), x29, rup");
}

#[test]
fn fcvt_wu_h_713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.wu.h x4, X(7), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B2, 13, C4", "fcvt.wu.h x4, X(7), rup");
}

#[test]
fn fcvt_wu_h_714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x21, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FA, 1C, C4", "fcvt.wu.h x21, f25");
}

#[test]
fn fcvt_wu_h_715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h X(15), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 77, 16, C4", "fcvt.wu.h X(15), f12");
}

#[test]
fn fcvt_wu_h_716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.wu.h x20, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 12, C4", "fcvt.wu.h x20, X(5)");
}

#[test]
fn fcvt_wu_h_717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fcvt.wu.h X(8), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 10, C4", "fcvt.wu.h X(8), x0");
}

#[test]
fn fcvt_wu_q_718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(8), f9, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 14, C6", "fcvt.wu.q X(8), f9, dyn");
}

#[test]
fn fcvt_wu_q_719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(11), f23, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C5, 1B, C6", "fcvt.wu.q X(11), f23, rmm");
}

#[test]
fn fcvt_wu_q_720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(15), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 77, 10, C6", "fcvt.wu.q X(15), f0");
}

#[test]
fn fcvt_wu_q_721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(5), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 19, C6", "fcvt.wu.q X(5), F(19)");
}

#[test]
fn fcvt_wu_s_722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s x20, F(5), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 12, C0", "fcvt.wu.s x20, F(5), dyn");
}

#[test]
fn fcvt_wu_s_723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(13), f2, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 11, C0", "fcvt.wu.s X(13), f2, rne");
}

#[test]
fn fcvt_wu_s_724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.wu.s X(9), x14, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 17, C0", "fcvt.wu.s X(9), x14, dyn");
}

#[test]
fn fcvt_wu_s_725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.wu.s x6, x2, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 33, 11, C0", "fcvt.wu.s x6, x2, rup");
}

#[test]
fn fcvt_wu_s_726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(21), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FA, 14, C0", "fcvt.wu.s X(21), f9");
}

#[test]
fn fcvt_wu_s_727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(30), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 11, C0", "fcvt.wu.s X(30), F(2)");
}

#[test]
fn fcvt_wu_s_728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.wu.s X(23), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 15, C0", "fcvt.wu.s X(23), x10");
}

#[test]
fn fcvt_wu_s_729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fcvt.wu.s x1, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, 11, C0", "fcvt.wu.s x1, x3");
}

#[test]
fn fcvtmod_w_d_730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fcvtmod.w.d X(10), f1, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 95, 80, C2", "fcvtmod.w.d X(10), f1, rtz");
}

#[test]
fn fcvtmod_w_d_731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fcvtmod.w.d x1, f7, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 90, 83, C2", "fcvtmod.w.d x1, f7, rtz");
}

#[test]
fn fdiv_d_732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d F(2), F(16), F(3), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, 38, 1A", "fdiv.d F(2), F(16), F(3), rdn");
}

#[test]
fn fdiv_d_733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d F(5), f30, F(15), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 42, FF, 1A", "fdiv.d F(5), f30, F(15), rmm");
}

#[test]
fn fdiv_d_734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fdiv.d x14, X(24), X(0), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 47, 0C, 1A", "fdiv.d x14, X(24), X(0), rmm");
}

#[test]
fn fdiv_d_735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fdiv.d x26, X(26), X(12), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2D, CD, 1A", "fdiv.d x26, X(26), X(12), rdn");
}

#[test]
fn fdiv_d_736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f11, F(10), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 25, 1B", "fdiv.d f11, F(10), f18");
}

#[test]
fn fdiv_d_737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f18, F(29), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 1E, 1A", "fdiv.d f18, F(29), f1");
}

#[test]
fn fdiv_d_738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fdiv.d x0, x22, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 0B, 1A", "fdiv.d x0, x22, x0");
}

#[test]
fn fdiv_d_739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fdiv.d x22, X(20), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, CA, 1A", "fdiv.d x22, X(20), x12");
}

#[test]
fn fdiv_h_740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f26, F(19), F(14), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9D, E9, 1C", "fdiv.h f26, F(19), F(14), rtz");
}

#[test]
fn fdiv_h_741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f5, F(4), f2, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 42, 22, 1C", "fdiv.h f5, F(4), f2, rmm");
}

#[test]
fn fdiv_h_742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fdiv.h X(20), X(30), X(8), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 8F, 1C", "fdiv.h X(20), X(30), X(8), rne");
}

#[test]
fn fdiv_h_743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fdiv.h X(26), X(0), X(20), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4D, 40, 1D", "fdiv.h X(26), X(0), X(20), rmm");
}

#[test]
fn fdiv_h_744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f26, f11, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 95, 1D", "fdiv.h f26, f11, f25");
}

#[test]
fn fdiv_h_745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h F(31), f4, f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 42, 1D", "fdiv.h F(31), f4, f20");
}

#[test]
fn fdiv_h_746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fdiv.h X(24), x14, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 47, 1D", "fdiv.h X(24), x14, x20");
}

#[test]
fn fdiv_h_747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fdiv.h X(27), x2, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 71, 1C", "fdiv.h X(27), x2, X(7)");
}

#[test]
fn fdiv_q_748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q f3, f22, f3, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 41, 3B, 1E", "fdiv.q f3, f22, f3, rmm");
}

#[test]
fn fdiv_q_749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(11), F(17), f3, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 95, 38, 1E", "fdiv.q F(11), F(17), f3, rtz");
}

#[test]
fn fdiv_q_750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q f4, f14, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 07, 1F", "fdiv.q f4, f14, F(16)");
}

#[test]
fn fdiv_q_751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(13), f20, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, BA, 1E", "fdiv.q F(13), f20, f11");
}

#[test]
fn fdiv_s_752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(11), f19, F(6), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 69, 18", "fdiv.s F(11), f19, F(6), dyn");
}

#[test]
fn fdiv_s_753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s f22, f12, f17, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3B, 16, 19", "fdiv.s f22, f12, f17, rup");
}

#[test]
fn fdiv_s_754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fdiv.s x16, X(31), X(24), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B8, 8F, 19", "fdiv.s x16, X(31), X(24), rup");
}

#[test]
fn fdiv_s_755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fdiv.s X(8), x29, x13, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B4, DE, 18", "fdiv.s X(8), x29, x13, rup");
}

#[test]
fn fdiv_s_756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(11), f20, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, BA, 19", "fdiv.s F(11), f20, F(27)");
}

#[test]
fn fdiv_s_757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s f17, f25, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, AC, 18", "fdiv.s f17, f25, F(10)");
}

#[test]
fn fdiv_s_758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fdiv.s X(2), X(14), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 77, 19", "fdiv.s X(2), X(14), X(23)");
}

#[test]
fn fdiv_s_759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fdiv.s X(11), x11, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 85, 19", "fdiv.s X(11), x11, X(24)");
}

#[test]
fn fence_760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence io, r
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 20, 0C", "fence io, r");
}

#[test]
fn fence_761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence or, iorw
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 06", "fence or, iorw");
}

#[test]
fn fence_762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_i_764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_i_765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_tso_766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn fence_tso_767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn feq_d_768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; feq.d X(28), F(25), F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AE, FC, A2", "feq.d X(28), F(25), F(15)");
}

#[test]
fn feq_d_769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; feq.d X(15), F(14), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 27, B7, A2", "feq.d X(15), F(14), F(11)");
}

#[test]
fn feq_d_770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; feq.d X(20), X(2), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2A, 81, A3", "feq.d X(20), X(2), x24");
}

#[test]
fn feq_d_771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; feq.d x10, X(10), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 25, 85, A3", "feq.d x10, X(10), X(24)");
}

#[test]
fn feq_h_772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; feq.h X(30), f3, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AF, D1, A4", "feq.h X(30), f3, F(13)");
}

#[test]
fn feq_h_773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; feq.h x0, f2, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 20, A1, A4", "feq.h x0, f2, F(10)");
}

#[test]
fn feq_h_774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; feq.h x3, X(19), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, E9, A4", "feq.h x3, X(19), x14");
}

#[test]
fn feq_h_775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; feq.h X(7), x31, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A3, 1F, A5", "feq.h X(7), x31, x17");
}

#[test]
fn feq_q_776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; feq.q x2, f10, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, 75, A7", "feq.q x2, f10, F(23)");
}

#[test]
fn feq_q_777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; feq.q X(13), f17, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A6, D8, A6", "feq.q X(13), f17, f13");
}

#[test]
fn feq_s_778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; feq.s x15, f5, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A7, D2, A1", "feq.s x15, f5, f29");
}

#[test]
fn feq_s_779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; feq.s X(21), F(19), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 29, A0", "feq.s X(21), F(19), f2");
}

#[test]
fn feq_s_780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; feq.s x2, x16, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, 08, A0", "feq.s x2, x16, x0");
}

#[test]
fn feq_s_781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; feq.s x11, X(25), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A5, 7C, A1", "feq.s x11, X(25), X(23)");
}

#[test]
fn fld_782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld f20, [X(4), 1029]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 3A, 52, 40", "fld f20, [X(4), 1029]");
}

#[test]
fn fld_783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld f3, [X(24), -12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 31, 4C, FF", "fld f3, [X(24), -12]");
}

#[test]
fn fld_784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld F(6), 977798870, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 07, 48, 3A, 07, B3, 67, 6D", "fld F(6), 977798870, X(15)");
}

#[test]
fn fld_785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld F(16), 1027690540, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 54, 41, 3D, 07, B8, C4, 02", "fld F(16), 1027690540, x9");
}

#[test]
fn fle_d_786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fle.d X(2), F(16), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 68, A2", "fle.d X(2), F(16), f6");
}

#[test]
fn fle_d_787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fle.d x12, F(30), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 3F, A3", "fle.d x12, F(30), F(19)");
}

#[test]
fn fle_d_788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fle.d X(23), X(10), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, E5, A3", "fle.d X(23), X(10), X(30)");
}

#[test]
fn fle_d_789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zdinx
        ; fle.d X(0), X(10), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 85, A3", "fle.d X(0), X(10), x24");
}

#[test]
fn fle_h_790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fle.h x27, f24, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, EC, A4", "fle.h x27, f24, f14");
}

#[test]
fn fle_h_791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fle.h x19, f22, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 09, DB, A4", "fle.h x19, f22, F(13)");
}

#[test]
fn fle_h_792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fle.h X(13), x14, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 37, A4", "fle.h X(13), x14, X(3)");
}

#[test]
fn fle_h_793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zhinx
        ; fle.h X(22), X(15), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 97, A4", "fle.h X(22), X(15), X(9)");
}

#[test]
fn fle_q_794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fle.q x21, f12, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 56, A7", "fle.q x21, f12, f21");
}

#[test]
fn fle_q_795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fle.q X(8), F(14), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, 37, A7", "fle.q X(8), F(14), F(19)");
}

#[test]
fn fle_s_796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fle.s X(23), f16, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, A8, A1", "fle.s X(23), f16, f26");
}

#[test]
fn fle_s_797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fle.s X(10), f18, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 79, A1", "fle.s X(10), f18, f23");
}

#[test]
fn fle_s_798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fle.s X(1), x10, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 35, A0", "fle.s X(1), x10, x3");
}

#[test]
fn fle_s_799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfinx
        ; fle.s X(0), X(30), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 7F, A1", "fle.s X(0), X(30), x23");
}
