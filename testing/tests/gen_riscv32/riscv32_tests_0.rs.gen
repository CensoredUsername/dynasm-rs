
#[test]
fn add_0() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; add x11, x2, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 05, B1, 01", "add x11, x2, X(27)");
}

#[test]
fn add_1() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; add x30, X(15), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8F, 47, 01", "add x30, X(15), x20");
}

#[test]
fn addi_2() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; addi X(9), x7, -258
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 84, E3, EF", "addi X(9), x7, -258");
}

#[test]
fn addi_3() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; addi X(13), x23, 920
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 86, 8B, 39", "addi X(13), x23, 920");
}

#[test]
fn aes32dsi_4() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsi X(14), X(16), X(9), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 07, 98, 6A", "aes32dsi X(14), X(16), X(9), 1");
}

#[test]
fn aes32dsi_5() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsi x17, X(13), X(22), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 88, 66, EB", "aes32dsi x17, X(13), X(22), 3");
}

#[test]
fn aes32dsmi_6() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknd
        ; aes32dsmi X(21), x2, X(9), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0A, 91, 2E", "aes32dsmi X(21), x2, X(9), 0");
}

#[test]
fn aes32dsmi_7() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknd
        ; aes32dsmi x1, x30, X(10), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 00, AF, 6E", "aes32dsmi x1, x30, X(10), 1");
}

#[test]
fn aes32esi_8() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkne
        ; aes32esi x31, x28, X(16), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0F, 0E, E3", "aes32esi x31, x28, X(16), 3");
}

#[test]
fn aes32esi_9() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; aes32esi X(9), x25, X(21), 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 84, 5C, A3", "aes32esi X(9), x25, X(21), 2");
}

#[test]
fn aes32esmi_10() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32esmi x13, X(5), x21, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 86, 52, E7", "aes32esmi x13, X(5), x21, 3");
}

#[test]
fn aes32esmi_11() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32esmi x7, x1, X(22), 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 83, 60, A7", "aes32esmi x7, x1, X(22), 2");
}

#[test]
fn amoadd_b_12() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b x26, x6, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8D, 6B, 00", "amoadd.b x26, x6, [X(23)]");
}

#[test]
fn amoadd_b_13() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b x10, x30, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, E7, 01", "amoadd.b x10, x30, [x14]");
}

#[test]
fn amoadd_b_aq_14() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aq x28, X(14), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, E4, 04", "amoadd.b.aq x28, X(14), [X(8)]");
}

#[test]
fn amoadd_b_aq_15() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aq X(12), X(31), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, FE, 05", "amoadd.b.aq X(12), X(31), [x28]");
}

#[test]
fn amoadd_b_aqrl_16() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aqrl x6, X(25), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, 98, 07", "amoadd.b.aqrl x6, X(25), [X(17)]");
}

#[test]
fn amoadd_b_aqrl_17() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aqrl X(21), X(24), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0A, 87, 07", "amoadd.b.aqrl X(21), X(24), [X(14)]");
}

#[test]
fn amoadd_b_rl_18() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.rl x16, X(14), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 08, E9, 02", "amoadd.b.rl x16, X(14), [X(18)]");
}

#[test]
fn amoadd_b_rl_19() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.rl x13, X(11), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, BF, 02", "amoadd.b.rl x13, X(11), [X(30)]");
}

#[test]
fn amoadd_h_20() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h x7, x10, [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 93, A5, 00", "amoadd.h x7, x10, [X(11)]");
}

#[test]
fn amoadd_h_21() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h X(6), X(29), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, DB, 01", "amoadd.h X(6), X(29), [x23]");
}

#[test]
fn amoadd_h_aq_22() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aq X(28), x19, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1E, 3C, 05", "amoadd.h.aq X(28), x19, [x24]");
}

#[test]
fn amoadd_h_aq_23() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aq X(15), x2, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 17, 2E, 04", "amoadd.h.aq X(15), x2, [X(28)]");
}

#[test]
fn amoadd_h_aqrl_24() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aqrl X(27), X(2), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9D, 29, 06", "amoadd.h.aqrl X(27), X(2), [X(19)]");
}

#[test]
fn amoadd_h_aqrl_25() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aqrl x16, x11, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, B5, 06", "amoadd.h.aqrl x16, x11, [x11]");
}

#[test]
fn amoadd_h_rl_26() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.rl x24, X(14), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, ED, 02", "amoadd.h.rl x24, X(14), [X(26)]");
}

#[test]
fn amoadd_h_rl_27() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.rl X(1), x10, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, A2, 02", "amoadd.h.rl X(1), x10, [x4]");
}

#[test]
fn amoadd_w_28() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w x4, x20, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 22, 49, 01", "amoadd.w x4, x20, [X(18)]");
}

#[test]
fn amoadd_w_29() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w x30, X(15), [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AF, F2, 00", "amoadd.w x30, X(15), [X(5)]");
}

#[test]
fn amoadd_w_aq_30() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aq x25, x4, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 40, 04", "amoadd.w.aq x25, x4, [x1]");
}

#[test]
fn amoadd_w_aq_31() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aq X(21), X(31), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AA, F5, 05", "amoadd.w.aq X(21), X(31), [X(11)]");
}

#[test]
fn amoadd_w_aqrl_32() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aqrl X(6), x10, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A3, A9, 06", "amoadd.w.aqrl X(6), x10, [x19]");
}

#[test]
fn amoadd_w_aqrl_33() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aqrl x15, X(26), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, A1, 07", "amoadd.w.aqrl x15, X(26), [x2]");
}

#[test]
fn amoadd_w_rl_34() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.rl X(13), X(13), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A6, D3, 02", "amoadd.w.rl X(13), X(13), [x7]");
}

#[test]
fn amoadd_w_rl_35() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.rl X(10), X(20), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, 49, 03", "amoadd.w.rl X(10), X(20), [x18]");
}

#[test]
fn amoand_b_36() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b X(11), X(26), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 05, AF, 61", "amoand.b X(11), X(26), [X(30)]");
}

#[test]
fn amoand_b_37() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b X(3), x22, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 81, 6A, 61", "amoand.b X(3), x22, [x21]");
}

#[test]
fn amoand_b_aq_38() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aq x21, x15, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8A, F3, 64", "amoand.b.aq x21, x15, [x7]");
}

#[test]
fn amoand_b_aq_39() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aq x28, X(21), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, 58, 65", "amoand.b.aq x28, X(21), [x16]");
}

#[test]
fn amoand_b_aqrl_40() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aqrl x4, x18, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, 27, 67", "amoand.b.aqrl x4, x18, [X(15)]");
}

#[test]
fn amoand_b_aqrl_41() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aqrl X(18), x17, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, 1C, 67", "amoand.b.aqrl X(18), x17, [x24]");
}

#[test]
fn amoand_b_rl_42() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.rl x14, x23, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 07, 71, 63", "amoand.b.rl x14, x23, [X(2)]");
}

#[test]
fn amoand_b_rl_43() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.rl X(10), x29, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 85, DA, 63", "amoand.b.rl X(10), x29, [x21]");
}

#[test]
fn amoand_h_44() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h x14, x9, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 17, 9E, 60", "amoand.h x14, x9, [x28]");
}

#[test]
fn amoand_h_45() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h X(12), X(30), [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, E2, 61", "amoand.h X(12), X(30), [X(5)]");
}

#[test]
fn amoand_h_aq_46() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aq x19, x19, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 99, 38, 65", "amoand.h.aq x19, x19, [X(17)]");
}

#[test]
fn amoand_h_aq_47() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aq X(11), x27, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 95, BE, 65", "amoand.h.aq X(11), x27, [x29]");
}

#[test]
fn amoand_h_aqrl_48() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aqrl x31, X(5), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, 53, 66", "amoand.h.aqrl x31, X(5), [x7]");
}

#[test]
fn amoand_h_aqrl_49() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aqrl x28, X(3), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9E, 3B, 66", "amoand.h.aqrl x28, X(3), [X(23)]");
}

#[test]
fn amoand_h_rl_50() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.rl x27, X(30), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1D, EB, 63", "amoand.h.rl x27, X(30), [X(22)]");
}

#[test]
fn amoand_h_rl_51() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.rl x1, x19, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 32, 63", "amoand.h.rl x1, x19, [x4]");
}

#[test]
fn amoand_w_52() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w X(13), X(11), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, B9, 60", "amoand.w X(13), X(11), [X(18)]");
}

#[test]
fn amoand_w_53() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w x15, X(19), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 34, 61", "amoand.w x15, X(19), [x9]");
}

#[test]
fn amoand_w_aq_54() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aq x15, x31, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, F1, 65", "amoand.w.aq x15, x31, [X(2)]");
}

#[test]
fn amoand_w_aq_55() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aq X(12), X(7), [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, 72, 64", "amoand.w.aq X(12), X(7), [X(4)]");
}

#[test]
fn amoand_w_aqrl_56() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aqrl x11, X(7), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 7F, 66", "amoand.w.aqrl x11, X(7), [X(30)]");
}

#[test]
fn amoand_w_aqrl_57() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aqrl x18, X(22), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 60, 67", "amoand.w.aqrl x18, X(22), [x0]");
}

#[test]
fn amoand_w_rl_58() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.rl X(12), x7, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, 71, 62", "amoand.w.rl X(12), x7, [X(3)]");
}

#[test]
fn amoand_w_rl_59() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.rl X(4), x28, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A2, C7, 63", "amoand.w.rl X(4), x28, [X(15)]");
}

#[test]
fn amocas_b_60() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b X(3), X(7), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 81, 7F, 28", "amocas.b X(3), X(7), [x31]");
}

#[test]
fn amocas_b_61() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b x12, X(26), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, A2, 29", "amocas.b x12, X(26), [x4]");
}

#[test]
fn amocas_b_aq_62() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aq X(27), x1, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8D, 11, 2C", "amocas.b.aq X(27), x1, [X(3)]");
}

#[test]
fn amocas_b_aq_63() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aq X(12), x15, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, F6, 2C", "amocas.b.aq X(12), x15, [X(13)]");
}

#[test]
fn amocas_b_aqrl_64() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aqrl x18, x14, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, EB, 2E", "amocas.b.aqrl x18, x14, [x23]");
}

#[test]
fn amocas_b_aqrl_65() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aqrl x14, x31, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 07, F6, 2F", "amocas.b.aqrl x14, x31, [x12]");
}

#[test]
fn amocas_b_rl_66() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.rl X(20), x15, [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0A, F7, 2A", "amocas.b.rl X(20), x15, [X(14)]");
}

#[test]
fn amocas_b_rl_67() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.rl x31, x18, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8F, 22, 2B", "amocas.b.rl x31, x18, [X(5)]");
}

#[test]
fn amocas_d_68() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d X(8), x30, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 34, E9, 29", "amocas.d X(8), x30, [X(18)]");
}

#[test]
fn amocas_d_69() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d x10, X(4), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 35, 45, 28", "amocas.d x10, X(4), [X(10)]");
}

#[test]
fn amocas_d_aq_70() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aq x0, x30, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B0, EC, 2D", "amocas.d.aq x0, x30, [X(25)]");
}

#[test]
fn amocas_d_aq_71() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aq x12, X(8), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 36, 8D, 2C", "amocas.d.aq x12, X(8), [X(26)]");
}

#[test]
fn amocas_d_aqrl_72() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aqrl X(28), X(6), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3E, 64, 2E", "amocas.d.aqrl X(28), X(6), [X(8)]");
}

#[test]
fn amocas_d_aqrl_73() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aqrl x18, X(0), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 39, 04, 2E", "amocas.d.aqrl x18, X(0), [X(8)]");
}

#[test]
fn amocas_d_rl_74() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.rl X(30), X(26), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3F, A7, 2B", "amocas.d.rl X(30), X(26), [x14]");
}

#[test]
fn amocas_d_rl_75() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.rl X(6), x14, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 33, E5, 2A", "amocas.d.rl X(6), x14, [x10]");
}

#[test]
fn amocas_h_76() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h X(5), x10, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 12, A1, 28", "amocas.h X(5), x10, [x2]");
}

#[test]
fn amocas_h_77() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h x7, X(23), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 13, 77, 29", "amocas.h x7, X(23), [X(14)]");
}

#[test]
fn amocas_h_aq_78() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aq x7, X(23), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 13, 7C, 2D", "amocas.h.aq x7, X(23), [X(24)]");
}

#[test]
fn amocas_h_aq_79() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aq X(0), X(6), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 90, 64, 2C", "amocas.h.aq X(0), X(6), [x9]");
}

#[test]
fn amocas_h_aqrl_80() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aqrl X(0), x30, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 10, EC, 2F", "amocas.h.aqrl X(0), x30, [x24]");
}

#[test]
fn amocas_h_aqrl_81() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aqrl x23, X(28), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9B, CB, 2F", "amocas.h.aqrl x23, X(28), [x23]");
}

#[test]
fn amocas_h_rl_82() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.rl X(24), X(0), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, 03, 2A", "amocas.h.rl X(24), X(0), [X(6)]");
}

#[test]
fn amocas_h_rl_83() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.rl X(19), X(6), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 99, 61, 2A", "amocas.h.rl X(19), X(6), [x3]");
}

#[test]
fn amocas_w_84() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w x12, X(28), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, C5, 29", "amocas.w x12, X(28), [X(11)]");
}

#[test]
fn amocas_w_85() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w X(26), X(16), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 06, 29", "amocas.w X(26), X(16), [X(13)]");
}

#[test]
fn amocas_w_aq_86() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aq X(15), X(2), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, 26, 2C", "amocas.w.aq X(15), X(2), [x12]");
}

#[test]
fn amocas_w_aq_87() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aq x27, x27, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2D, B5, 2D", "amocas.w.aq x27, x27, [X(10)]");
}

#[test]
fn amocas_w_aqrl_88() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aqrl X(28), X(30), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AE, E7, 2F", "amocas.w.aqrl X(28), X(30), [X(15)]");
}

#[test]
fn amocas_w_aqrl_89() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aqrl X(16), X(12), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A8, C6, 2E", "amocas.w.aqrl X(16), X(12), [x13]");
}

#[test]
fn amocas_w_rl_90() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.rl x6, x25, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, 9F, 2B", "amocas.w.rl x6, x25, [x30]");
}

#[test]
fn amocas_w_rl_91() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.rl x18, X(23), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 78, 2B", "amocas.w.rl x18, X(23), [X(17)]");
}

#[test]
fn amomax_b_92() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b X(4), x30, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, E3, A1", "amomax.b X(4), x30, [x7]");
}

#[test]
fn amomax_b_93() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b x30, x29, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8F, D4, A1", "amomax.b x30, x29, [X(9)]");
}

#[test]
fn amomax_b_aq_94() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aq x21, x21, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8A, 5F, A5", "amomax.b.aq x21, x21, [X(31)]");
}

#[test]
fn amomax_b_aq_95() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aq x11, x19, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 05, 3C, A5", "amomax.b.aq x11, x19, [x24]");
}

#[test]
fn amomax_b_aqrl_96() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aqrl X(7), X(19), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, 35, A7", "amomax.b.aqrl X(7), X(19), [x11]");
}

#[test]
fn amomax_b_aqrl_97() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aqrl X(24), X(8), [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0C, 8A, A6", "amomax.b.aqrl X(24), X(8), [X(20)]");
}

#[test]
fn amomax_b_rl_98() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.rl X(22), x3, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8B, 34, A2", "amomax.b.rl X(22), x3, [x9]");
}

#[test]
fn amomax_b_rl_99() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.rl X(7), x23, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, 7A, A3", "amomax.b.rl X(7), x23, [X(21)]");
}

#[test]
fn amomax_h_100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h X(28), X(22), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9E, 64, A1", "amomax.h X(28), X(22), [x9]");
}

#[test]
fn amomax_h_101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h X(16), X(2), [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, 20, A0", "amomax.h X(16), X(2), [X(1)]");
}

#[test]
fn amomax_h_aq_102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aq x19, X(3), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, 3C, A4", "amomax.h.aq x19, X(3), [X(24)]");
}

#[test]
fn amomax_h_aq_103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aq x28, x18, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9E, 22, A5", "amomax.h.aq x28, x18, [x5]");
}

#[test]
fn amomax_h_aqrl_104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aqrl x1, X(28), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 90, CE, A7", "amomax.h.aqrl x1, X(28), [X(29)]");
}

#[test]
fn amomax_h_aqrl_105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aqrl X(10), X(11), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, B8, A6", "amomax.h.aqrl X(10), X(11), [X(17)]");
}

#[test]
fn amomax_h_rl_106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.rl X(2), x31, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, FC, A3", "amomax.h.rl X(2), x31, [x25]");
}

#[test]
fn amomax_h_rl_107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.rl X(20), X(19), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9A, 39, A3", "amomax.h.rl X(20), X(19), [X(19)]");
}

#[test]
fn amomax_w_108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w x12, x30, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, E5, A1", "amomax.w x12, x30, [X(10)]");
}

#[test]
fn amomax_w_109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w x18, x5, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 57, A0", "amomax.w x18, x5, [x14]");
}

#[test]
fn amomax_w_aq_110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aq x25, X(14), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2C, E8, A4", "amomax.w.aq x25, X(14), [x16]");
}

#[test]
fn amomax_w_aq_111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aq X(0), x14, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, EE, A4", "amomax.w.aq X(0), x14, [X(28)]");
}

#[test]
fn amomax_w_aqrl_112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aqrl x10, x11, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A5, BA, A6", "amomax.w.aqrl x10, x11, [X(21)]");
}

#[test]
fn amomax_w_aqrl_113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aqrl x16, x21, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A8, 5E, A7", "amomax.w.aqrl x16, x21, [x29]");
}

#[test]
fn amomax_w_rl_114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.rl X(20), X(15), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, F2, A2", "amomax.w.rl X(20), X(15), [x5]");
}

#[test]
fn amomax_w_rl_115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.rl X(1), X(27), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, B5, A3", "amomax.w.rl X(1), X(27), [x11]");
}

#[test]
fn amomaxu_b_116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b X(10), x15, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 85, FB, E0", "amomaxu.b X(10), x15, [x23]");
}

#[test]
fn amomaxu_b_117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b x14, X(16), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 87, 06, E1", "amomaxu.b x14, X(16), [X(13)]");
}

#[test]
fn amomaxu_b_aq_118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aq x0, x26, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, A0, E5", "amomaxu.b.aq x0, x26, [X(0)]");
}

#[test]
fn amomaxu_b_aq_119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aq x19, X(17), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 09, 14, E5", "amomaxu.b.aq x19, X(17), [x8]");
}

#[test]
fn amomaxu_b_aqrl_120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aqrl x27, x23, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8D, 72, E7", "amomaxu.b.aqrl x27, x23, [x5]");
}

#[test]
fn amomaxu_b_aqrl_121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aqrl x28, X(10), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, AD, E6", "amomaxu.b.aqrl x28, X(10), [x26]");
}

#[test]
fn amomaxu_b_rl_122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.rl X(12), x30, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, E1, E3", "amomaxu.b.rl X(12), x30, [x3]");
}

#[test]
fn amomaxu_b_rl_123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.rl x27, X(7), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0D, 78, E2", "amomaxu.b.rl x27, X(7), [x16]");
}

#[test]
fn amomaxu_h_124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h x27, x9, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1D, 90, E0", "amomaxu.h x27, x9, [X(0)]");
}

#[test]
fn amomaxu_h_125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h X(2), X(25), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, 96, E1", "amomaxu.h X(2), X(25), [x12]");
}

#[test]
fn amomaxu_h_aq_126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aq x25, x29, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9C, DF, E5", "amomaxu.h.aq x25, x29, [X(31)]");
}

#[test]
fn amomaxu_h_aq_127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aq x14, X(23), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 17, 77, E5", "amomaxu.h.aq x14, X(23), [X(14)]");
}

#[test]
fn amomaxu_h_aqrl_128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aqrl x2, x6, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, 69, E6", "amomaxu.h.aqrl x2, x6, [x19]");
}

#[test]
fn amomaxu_h_aqrl_129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aqrl X(6), X(14), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, E7, E6", "amomaxu.h.aqrl X(6), X(14), [x14]");
}

#[test]
fn amomaxu_h_rl_130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.rl X(6), X(13), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, D6, E2", "amomaxu.h.rl X(6), X(13), [X(13)]");
}

#[test]
fn amomaxu_h_rl_131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.rl X(18), X(6), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 99, 64, E2", "amomaxu.h.rl X(18), X(6), [x9]");
}

#[test]
fn amomaxu_w_132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w x31, x18, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AF, 2E, E1", "amomaxu.w x31, x18, [X(29)]");
}

#[test]
fn amomaxu_w_133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w x28, X(4), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, 4D, E0", "amomaxu.w x28, X(4), [x26]");
}

#[test]
fn amomaxu_w_aq_134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aq x12, X(9), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, 98, E4", "amomaxu.w.aq x12, X(9), [X(17)]");
}

#[test]
fn amomaxu_w_aq_135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aq x6, X(12), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, C5, E4", "amomaxu.w.aq x6, X(12), [X(10)]");
}

#[test]
fn amomaxu_w_aqrl_136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aqrl x3, x23, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 21, 7C, E7", "amomaxu.w.aqrl x3, x23, [x24]");
}

#[test]
fn amomaxu_w_aqrl_137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aqrl X(27), x23, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 7D, E7", "amomaxu.w.aqrl X(27), x23, [x27]");
}

#[test]
fn amomaxu_w_rl_138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.rl x11, X(13), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A5, D5, E2", "amomaxu.w.rl x11, X(13), [x11]");
}

#[test]
fn amomaxu_w_rl_139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.rl x29, X(3), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2E, 36, E2", "amomaxu.w.rl x29, X(3), [x12]");
}

#[test]
fn amomin_b_140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b x22, X(2), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, 21, 80", "amomin.b x22, X(2), [X(2)]");
}

#[test]
fn amomin_b_141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b X(10), X(23), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 85, 7E, 81", "amomin.b X(10), X(23), [x29]");
}

#[test]
fn amomin_b_aq_142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aq x8, X(7), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 84, 7D, 84", "amomin.b.aq x8, X(7), [x27]");
}

#[test]
fn amomin_b_aq_143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aq x1, X(24), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 8F, 85", "amomin.b.aq x1, X(24), [X(30)]");
}

#[test]
fn amomin_b_aqrl_144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aqrl x17, x29, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 08, D3, 87", "amomin.b.aqrl x17, x29, [x6]");
}

#[test]
fn amomin_b_aqrl_145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aqrl X(7), X(20), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 03, 40, 87", "amomin.b.aqrl X(7), X(20), [x0]");
}

#[test]
fn amomin_b_rl_146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.rl X(18), x0, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, 06, 82", "amomin.b.rl X(18), x0, [X(13)]");
}

#[test]
fn amomin_b_rl_147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.rl x30, x27, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0F, B2, 83", "amomin.b.rl x30, x27, [x4]");
}

#[test]
fn amomin_h_148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h x14, x31, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 17, FE, 81", "amomin.h x14, x31, [x28]");
}

#[test]
fn amomin_h_149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h X(25), X(14), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9C, EB, 80", "amomin.h X(25), X(14), [X(23)]");
}

#[test]
fn amomin_h_aq_150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aq X(3), X(1), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 11, 14, 84", "amomin.h.aq X(3), X(1), [x8]");
}

#[test]
fn amomin_h_aq_151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aq X(3), X(5), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 11, 55, 84", "amomin.h.aq X(3), X(5), [x10]");
}

#[test]
fn amomin_h_aqrl_152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aqrl X(6), x14, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, ED, 86", "amomin.h.aqrl X(6), x14, [X(27)]");
}

#[test]
fn amomin_h_aqrl_153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aqrl x22, X(6), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, 6B, 86", "amomin.h.aqrl x22, X(6), [X(22)]");
}

#[test]
fn amomin_h_rl_154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.rl X(12), X(15), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, F1, 82", "amomin.h.rl X(12), X(15), [x3]");
}

#[test]
fn amomin_h_rl_155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.rl x29, x27, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, BD, 83", "amomin.h.rl x29, x27, [x27]");
}

#[test]
fn amomin_w_156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w X(3), X(10), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A1, A1, 80", "amomin.w X(3), X(10), [x3]");
}

#[test]
fn amomin_w_157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w x7, x16, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 23, 0B, 81", "amomin.w x7, x16, [x22]");
}

#[test]
fn amomin_w_aq_158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aq X(22), x3, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AB, 3B, 84", "amomin.w.aq X(22), x3, [X(23)]");
}

#[test]
fn amomin_w_aq_159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aq X(15), X(3), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 38, 84", "amomin.w.aq X(15), X(3), [X(17)]");
}

#[test]
fn amomin_w_aqrl_160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aqrl X(11), x19, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 37, 87", "amomin.w.aqrl X(11), x19, [x14]");
}

#[test]
fn amomin_w_aqrl_161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aqrl X(22), X(1), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2B, 1D, 86", "amomin.w.aqrl X(22), X(1), [X(26)]");
}

#[test]
fn amomin_w_rl_162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.rl X(9), x20, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, 41, 83", "amomin.w.rl X(9), x20, [X(2)]");
}

#[test]
fn amomin_w_rl_163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.rl X(17), X(18), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, 20, 83", "amomin.w.rl X(17), X(18), [x1]");
}

#[test]
fn amominu_b_164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b x10, x17, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 85, 1E, C1", "amominu.b x10, x17, [X(29)]");
}

#[test]
fn amominu_b_165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b X(27), x23, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0D, 7E, C1", "amominu.b X(27), x23, [x28]");
}

#[test]
fn amominu_b_aq_166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aq x25, X(19), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8C, 35, C5", "amominu.b.aq x25, X(19), [X(11)]");
}

#[test]
fn amominu_b_aq_167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aq x19, x31, [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 89, FF, C5", "amominu.b.aq x19, x31, [x31]");
}

#[test]
fn amominu_b_aqrl_168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aqrl X(12), x2, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, 29, C6", "amominu.b.aqrl X(12), x2, [x19]");
}

#[test]
fn amominu_b_aqrl_169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aqrl x1, X(24), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 8D, C7", "amominu.b.aqrl x1, X(24), [x26]");
}

#[test]
fn amominu_b_rl_170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.rl x22, X(27), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8B, B9, C3", "amominu.b.rl x22, X(27), [x19]");
}

#[test]
fn amominu_b_rl_171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.rl x10, x27, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, B3, C3", "amominu.b.rl x10, x27, [X(6)]");
}

#[test]
fn amominu_h_172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h X(23), x2, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1B, 2A, C0", "amominu.h X(23), x2, [X(20)]");
}

#[test]
fn amominu_h_173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h X(10), x18, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 15, 21, C1", "amominu.h X(10), x18, [X(2)]");
}

#[test]
fn amominu_h_aq_174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aq X(26), x16, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9D, 04, C5", "amominu.h.aq X(26), x16, [X(9)]");
}

#[test]
fn amominu_h_aq_175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aq X(18), X(23), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 99, 76, C5", "amominu.h.aq X(18), X(23), [x13]");
}

#[test]
fn amominu_h_aqrl_176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aqrl x29, x17, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1E, 19, C7", "amominu.h.aqrl x29, x17, [X(18)]");
}

#[test]
fn amominu_h_aqrl_177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aqrl X(0), x13, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 90, D8, C6", "amominu.h.aqrl X(0), x13, [X(17)]");
}

#[test]
fn amominu_h_rl_178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.rl x9, x2, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 94, 20, C2", "amominu.h.rl x9, x2, [X(1)]");
}

#[test]
fn amominu_h_rl_179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.rl x24, X(30), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, E7, C3", "amominu.h.rl x24, X(30), [X(14)]");
}

#[test]
fn amominu_w_180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w x3, X(18), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A1, 2B, C1", "amominu.w x3, X(18), [X(23)]");
}

#[test]
fn amominu_w_181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w x29, x14, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AE, E3, C0", "amominu.w x29, x14, [X(7)]");
}

#[test]
fn amominu_w_aq_182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aq X(15), x3, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, 33, C4", "amominu.w.aq X(15), x3, [X(6)]");
}

#[test]
fn amominu_w_aq_183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aq X(24), x7, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, 78, C4", "amominu.w.aq X(24), x7, [X(16)]");
}

#[test]
fn amominu_w_aqrl_184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aqrl X(28), X(27), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, BC, C7", "amominu.w.aqrl X(28), X(27), [X(24)]");
}

#[test]
fn amominu_w_aqrl_185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aqrl X(24), X(11), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, B7, C6", "amominu.w.aqrl X(24), X(11), [x14]");
}

#[test]
fn amominu_w_rl_186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.rl X(29), X(13), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AE, DA, C2", "amominu.w.rl X(29), X(13), [x21]");
}

#[test]
fn amominu_w_rl_187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.rl X(10), X(15), [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A5, F2, C2", "amominu.w.rl X(10), X(15), [X(5)]");
}

#[test]
fn amoor_b_188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b x29, X(27), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0E, B0, 41", "amoor.b x29, X(27), [x0]");
}

#[test]
fn amoor_b_189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b X(13), x19, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, 35, 41", "amoor.b X(13), x19, [X(10)]");
}

#[test]
fn amoor_b_aq_190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aq X(29), x15, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8E, FD, 44", "amoor.b.aq X(29), x15, [x27]");
}

#[test]
fn amoor_b_aq_191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aq x18, x4, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, 4D, 44", "amoor.b.aq x18, x4, [X(27)]");
}

#[test]
fn amoor_b_aqrl_192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aqrl x26, x16, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, 05, 47", "amoor.b.aqrl x26, x16, [x10]");
}

#[test]
fn amoor_b_aqrl_193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aqrl X(11), X(5), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 85, 5E, 46", "amoor.b.aqrl X(11), X(5), [x29]");
}

#[test]
fn amoor_b_rl_194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.rl x30, x24, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8F, 83, 43", "amoor.b.rl x30, x24, [X(7)]");
}

#[test]
fn amoor_b_rl_195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.rl x28, x15, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8E, FC, 42", "amoor.b.rl x28, x15, [X(25)]");
}

#[test]
fn amoor_h_196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h X(21), x27, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1A, B4, 41", "amoor.h X(21), x27, [X(8)]");
}

#[test]
fn amoor_h_197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h X(28), X(10), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1E, A3, 40", "amoor.h X(28), X(10), [X(6)]");
}

#[test]
fn amoor_h_aq_198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aq x20, x24, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1A, 83, 45", "amoor.h.aq x20, x24, [X(6)]");
}

#[test]
fn amoor_h_aq_199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aq X(30), x15, [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1F, F7, 44", "amoor.h.aq X(30), x15, [X(14)]");
}

#[test]
fn amoor_h_aqrl_200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aqrl X(8), x20, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 94, 44, 47", "amoor.h.aqrl X(8), x20, [x9]");
}

#[test]
fn amoor_h_aqrl_201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aqrl X(27), x26, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1D, A1, 47", "amoor.h.aqrl X(27), x26, [x2]");
}

#[test]
fn amoor_h_rl_202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.rl X(13), x15, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, FD, 42", "amoor.h.rl X(13), x15, [x27]");
}

#[test]
fn amoor_h_rl_203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.rl X(7), X(30), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 13, E6, 43", "amoor.h.rl X(7), X(30), [x12]");
}

#[test]
fn amoor_w_204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w X(26), x22, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, 6B, 41", "amoor.w X(26), x22, [X(22)]");
}

#[test]
fn amoor_w_205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w x23, x1, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, 11, 40", "amoor.w x23, x1, [X(2)]");
}

#[test]
fn amoor_w_aq_206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aq x13, X(9), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, 9B, 44", "amoor.w.aq x13, X(9), [x22]");
}

#[test]
fn amoor_w_aq_207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aq X(8), X(20), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A4, 49, 45", "amoor.w.aq X(8), X(20), [X(19)]");
}

#[test]
fn amoor_w_aqrl_208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aqrl X(16), x14, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 28, EA, 46", "amoor.w.aqrl X(16), x14, [x20]");
}

#[test]
fn amoor_w_aqrl_209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aqrl X(2), X(13), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 21, D4, 46", "amoor.w.aqrl X(2), X(13), [x8]");
}

#[test]
fn amoor_w_rl_210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.rl x7, X(22), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 66, 43", "amoor.w.rl x7, X(22), [X(13)]");
}

#[test]
fn amoor_w_rl_211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.rl x27, X(20), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 4D, 43", "amoor.w.rl x27, X(20), [x27]");
}

#[test]
fn amoswap_b_212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b x21, x6, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0A, 6A, 08", "amoswap.b x21, x6, [X(20)]");
}

#[test]
fn amoswap_b_213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b x25, x1, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0C, 19, 08", "amoswap.b x25, x1, [x18]");
}

#[test]
fn amoswap_b_aq_214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aq x10, x14, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, E9, 0C", "amoswap.b.aq x10, x14, [X(18)]");
}

#[test]
fn amoswap_b_aq_215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aq X(13), x1, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, 1B, 0C", "amoswap.b.aq X(13), x1, [x22]");
}

#[test]
fn amoswap_b_aqrl_216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aqrl x11, X(4), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 05, 44, 0E", "amoswap.b.aqrl x11, X(4), [X(8)]");
}

#[test]
fn amoswap_b_aqrl_217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aqrl x0, x5, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 80, 53, 0E", "amoswap.b.aqrl x0, x5, [X(7)]");
}

#[test]
fn amoswap_b_rl_218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.rl X(8), X(18), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 04, 29, 0B", "amoswap.b.rl X(8), X(18), [X(18)]");
}

#[test]
fn amoswap_b_rl_219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.rl x0, X(1), [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 12, 0A", "amoswap.b.rl x0, X(1), [X(4)]");
}

#[test]
fn amoswap_h_220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h x19, X(11), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 99, BE, 08", "amoswap.h x19, X(11), [X(29)]");
}

#[test]
fn amoswap_h_221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h x24, X(5), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, 55, 08", "amoswap.h x24, X(5), [x10]");
}

#[test]
fn amoswap_h_aq_222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aq x18, X(6), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 19, 6B, 0C", "amoswap.h.aq x18, X(6), [x22]");
}

#[test]
fn amoswap_h_aq_223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aq X(4), x7, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 92, 7E, 0C", "amoswap.h.aq X(4), x7, [X(29)]");
}

#[test]
fn amoswap_h_aqrl_224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aqrl X(12), x18, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, 27, 0F", "amoswap.h.aqrl X(12), x18, [x15]");
}

#[test]
fn amoswap_h_aqrl_225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aqrl X(25), x14, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9C, E7, 0E", "amoswap.h.aqrl X(25), x14, [x15]");
}

#[test]
fn amoswap_h_rl_226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.rl X(27), X(6), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9D, 6E, 0A", "amoswap.h.rl X(27), X(6), [x29]");
}

#[test]
fn amoswap_h_rl_227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.rl X(28), X(13), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1E, DC, 0A", "amoswap.h.rl X(28), X(13), [x24]");
}

#[test]
fn amoswap_w_228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w x28, X(28), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, CD, 09", "amoswap.w x28, X(28), [X(26)]");
}

#[test]
fn amoswap_w_229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w X(18), x17, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 18, 09", "amoswap.w X(18), x17, [X(16)]");
}

#[test]
fn amoswap_w_aq_230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aq x27, X(11), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, B8, 0C", "amoswap.w.aq x27, X(11), [x17]");
}

#[test]
fn amoswap_w_aq_231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aq x15, X(25), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 9E, 0D", "amoswap.w.aq x15, X(25), [x29]");
}

#[test]
fn amoswap_w_aqrl_232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aqrl x12, x12, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, CA, 0E", "amoswap.w.aqrl x12, x12, [X(20)]");
}

#[test]
fn amoswap_w_aqrl_233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aqrl X(27), X(17), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 17, 0F", "amoswap.w.aqrl X(27), X(17), [X(15)]");
}

#[test]
fn amoswap_w_rl_234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.rl x23, X(29), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, D8, 0B", "amoswap.w.rl x23, X(29), [x16]");
}

#[test]
fn amoswap_w_rl_235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.rl X(27), x21, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2D, 56, 0B", "amoswap.w.rl X(27), x21, [x12]");
}

#[test]
fn amoxor_b_236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b X(3), X(20), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 01, 43, 21", "amoxor.b X(3), X(20), [X(6)]");
}

#[test]
fn amoxor_b_237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b X(3), X(22), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 81, 6D, 21", "amoxor.b X(3), X(22), [X(27)]");
}

#[test]
fn amoxor_b_aq_238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aq x13, x3, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, 32, 24", "amoxor.b.aq x13, x3, [x4]");
}

#[test]
fn amoxor_b_aq_239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aq X(9), X(1), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 84, 1A, 24", "amoxor.b.aq X(9), X(1), [X(21)]");
}

#[test]
fn amoxor_b_aqrl_240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aqrl x18, x26, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, A8, 27", "amoxor.b.aqrl x18, x26, [x16]");
}

#[test]
fn amoxor_b_aqrl_241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aqrl X(23), x18, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0B, 20, 27", "amoxor.b.aqrl X(23), x18, [x0]");
}

#[test]
fn amoxor_b_rl_242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.rl x28, X(7), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8E, 70, 22", "amoxor.b.rl x28, X(7), [x1]");
}

#[test]
fn amoxor_b_rl_243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.rl X(8), x11, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 04, B7, 22", "amoxor.b.rl X(8), x11, [x14]");
}

#[test]
fn amoxor_h_244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h X(16), X(16), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, 09, 21", "amoxor.h X(16), X(16), [X(19)]");
}

#[test]
fn amoxor_h_245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h X(11), x10, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 95, A9, 20", "amoxor.h X(11), x10, [X(19)]");
}

#[test]
fn amoxor_h_aq_246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aq X(4), X(19), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, 3A, 25", "amoxor.h.aq X(4), X(19), [x20]");
}

#[test]
fn amoxor_h_aq_247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aq X(21), x29, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9A, D9, 25", "amoxor.h.aq X(21), x29, [X(19)]");
}

#[test]
fn amoxor_h_aqrl_248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aqrl X(24), x17, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9C, 1E, 27", "amoxor.h.aqrl X(24), x17, [x29]");
}

#[test]
fn amoxor_h_aqrl_249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aqrl X(13), x9, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, 9D, 26", "amoxor.h.aqrl X(13), x9, [x27]");
}

#[test]
fn amoxor_h_rl_250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.rl X(17), x22, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 18, 68, 23", "amoxor.h.rl X(17), x22, [X(16)]");
}

#[test]
fn amoxor_h_rl_251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.rl x28, x30, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9E, E8, 23", "amoxor.h.rl x28, x30, [X(17)]");
}

#[test]
fn amoxor_w_252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w X(25), X(1), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 1E, 20", "amoxor.w X(25), X(1), [x29]");
}

#[test]
fn amoxor_w_253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w X(21), x29, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2A, D0, 21", "amoxor.w X(21), x29, [X(0)]");
}

#[test]
fn amoxor_w_aq_254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aq X(19), X(19), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A9, 33, 25", "amoxor.w.aq X(19), X(19), [X(7)]");
}

#[test]
fn amoxor_w_aq_255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aq X(1), x23, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, 7E, 25", "amoxor.w.aq X(1), x23, [X(29)]");
}

#[test]
fn amoxor_w_aqrl_256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aqrl X(23), x29, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AB, D9, 27", "amoxor.w.aqrl X(23), x29, [x19]");
}

#[test]
fn amoxor_w_aqrl_257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aqrl x7, x2, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 29, 26", "amoxor.w.aqrl x7, x2, [X(19)]");
}

#[test]
fn amoxor_w_rl_258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.rl X(12), X(0), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, 00, 22", "amoxor.w.rl X(12), X(0), [x0]");
}

#[test]
fn amoxor_w_rl_259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.rl x14, x7, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 76, 22", "amoxor.w.rl x14, x7, [X(13)]");
}

#[test]
fn and_260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; and x0, X(28), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 70, AE, 00", "and x0, X(28), X(10)");
}

#[test]
fn and_261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; and x25, x11, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, FC, 15, 01", "and x25, x11, x17");
}

#[test]
fn andi_262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; andi x13, X(24), -775
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 76, 9C, CF", "andi x13, X(24), -775");
}

#[test]
fn andi_263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; andi X(24), x13, 1845
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, FC, 56, 73", "andi X(24), x13, 1845");
}

#[test]
fn andn_264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; andn x24, x15, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, FC, A7, 41", "andn x24, x15, X(26)");
}

#[test]
fn andn_265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; andn x11, X(8), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 75, A4, 40", "andn x11, X(8), x10");
}

#[test]
fn bclr_266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclr X(14), X(20), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 17, 3A, 48", "bclr X(14), X(20), X(3)");
}

#[test]
fn bclr_267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclr X(18), X(5), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 99, 42, 48", "bclr X(18), X(5), x4");
}

#[test]
fn bclri_268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclri x11, X(4), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 15, 12, 48", "bclri x11, X(4), 1");
}

#[test]
fn bclri_269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclri x15, X(1), 22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 97, 60, 49", "bclri x15, X(1), 22");
}

#[test]
fn beq_270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beq X(27), X(3), -1300
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 86, 3D, AE", "beq X(27), X(3), -1300");
}

#[test]
fn beq_271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beq X(25), x30, 1406
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 8F, EC, 57", "beq X(25), x30, 1406");
}

#[test]
fn beqz_272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beqz X(27), 196
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 82, 0D, 0C", "beqz X(27), 196");
}

#[test]
fn beqz_273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beqz x12, -1194
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 0B, 06, B4", "beqz x12, -1194");
}

#[test]
fn bext_274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bext X(3), x2, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 51, 51, 49", "bext X(3), x2, X(21)");
}

#[test]
fn bext_275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bext X(21), x20, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 5A, 0A, 48", "bext X(21), x20, x0");
}

#[test]
fn bexti_276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bexti X(2), X(25), 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D1, DC, 49", "bexti X(2), X(25), 29");
}

#[test]
fn bexti_277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bexti x29, X(3), 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DE, 81, 48", "bexti x29, X(3), 8");
}

#[test]
fn bge_278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bge X(9), x2, 1496
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, DC, 24, 5C", "bge X(9), x2, 1496");
}

#[test]
fn bge_279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bge x15, x18, 2044
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, DE, 27, 7F", "bge x15, x18, 2044");
}

#[test]
fn bgeu_280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgeu X(9), x20, -1142
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, F5, 44, B9", "bgeu X(9), x20, -1142");
}

#[test]
fn bgeu_281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgeu X(29), x16, 182
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, FB, 0E, 0B", "bgeu X(29), x16, 182");
}

#[test]
fn bgez_282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgez x2, 1576
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 54, 01, 62", "bgez x2, 1576");
}

#[test]
fn bgez_283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgez X(4), 1488
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 58, 02, 5C", "bgez X(4), 1488");
}

#[test]
fn bgt_284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgt x4, X(24), 1310
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4F, 4C, 50", "bgt x4, X(24), 1310");
}

#[test]
fn bgt_285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgt X(24), x0, -1376
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 40, 80, AB", "bgt X(24), x0, -1376");
}

#[test]
fn bgtu_286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtu X(31), X(12), -1752
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 64, F6, 93", "bgtu X(31), X(12), -1752");
}

#[test]
fn bgtu_287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtu X(0), x8, 1466
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 6D, 04, 5A", "bgtu X(0), x8, 1466");
}

#[test]
fn bgtz_288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtz X(25), 1716
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4A, 90, 6B", "bgtz X(25), 1716");
}

#[test]
fn bgtz_289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtz X(19), 1098
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 45, 30, 45", "bgtz X(19), 1098");
}

#[test]
fn binv_290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binv x0, x12, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 10, 56, 69", "binv x0, x12, x21");
}

#[test]
fn binv_291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binv X(27), x7, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 9D, D3, 69", "binv X(27), x7, x29");
}

#[test]
fn binvi_292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binvi X(0), x16, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 10, F8, 68", "binvi X(0), x16, 15");
}

#[test]
fn binvi_293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binvi x30, X(20), 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 4A, 69", "binvi x30, X(20), 20");
}

#[test]
fn ble_294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ble x6, X(7), 1226
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D5, 63, 4C", "ble x6, X(7), 1226");
}

#[test]
fn ble_295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ble x28, x25, 680
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D4, CC, 2B", "ble x28, x25, 680");
}

#[test]
fn bleu_296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bleu X(20), x23, 1376
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, F0, 4B, 57", "bleu X(20), x23, 1376");
}

#[test]
fn bleu_297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bleu x15, X(15), 858
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, FD, F7, 34", "bleu x15, X(15), 858");
}

#[test]
fn blez_298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blez x5, -1736
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 5C, 50, 92", "blez x5, -1736");
}

#[test]
fn blez_299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blez x12, 990
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 5F, C0, 3C", "blez x12, 990");
}

#[test]
fn blt_300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blt X(11), x5, -166
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, CD, 55, F4", "blt X(11), x5, -166");
}

#[test]
fn blt_301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blt x27, X(0), -982
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, C5, 0D, C2", "blt x27, X(0), -982");
}

#[test]
fn bltu_302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltu x5, X(4), -1086
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, E1, 42, BC", "bltu x5, X(4), -1086");
}

#[test]
fn bltu_303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltu x0, x15, 980
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 6A, F0, 3C", "bltu x0, x15, 980");
}

#[test]
fn bltz_304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltz x27, -1886
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, C1, 0D, 8A", "bltz x27, -1886");
}

#[test]
fn bltz_305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltz X(1), -370
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, C7, 00, E8", "bltz X(1), -370");
}

#[test]
fn bne_306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bne X(19), x9, 1322
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 95, 99, 52", "bne X(19), x9, 1322");
}

#[test]
fn bne_307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bne X(12), X(2), 670
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 1F, 26, 28", "bne X(12), X(2), 670");
}

#[test]
fn bnez_308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bnez X(8), 506
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 1D, 04, 1E", "bnez X(8), 506");
}

#[test]
fn bnez_309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bnez X(25), -784
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 98, 0C, CE", "bnez X(25), -784");
}

#[test]
fn brev8_310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; brev8 x29, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DE, 79, 68", "brev8 x29, X(19)");
}

#[test]
fn brev8_311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; brev8 X(7), X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, D3, 70, 68", "brev8 X(7), X(1)");
}

#[test]
fn bset_312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bset X(29), X(19), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 9E, 19, 29", "bset X(29), X(19), x17");
}

#[test]
fn bset_313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bset x7, x21, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 93, 1A, 28", "bset x7, x21, x1");
}

#[test]
fn bseti_314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bseti X(9), x18, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 14, B9, 29", "bseti X(9), x18, 27");
}

#[test]
fn bseti_315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bseti X(24), x13, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9C, F6, 29", "bseti X(24), x13, 31");
}

#[test]
fn c_add_316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.add X(11), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 95", "c.add X(11), x10");
}

#[test]
fn c_add_317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.add X(20), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 9A", "c.add X(20), x4");
}

#[test]
fn c_addi_318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi X(19), -16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 19", "c.addi X(19), -16");
}

#[test]
fn c_addi_319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi X(26), 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 0D", "c.addi X(26), 13");
}

#[test]
fn c_addi16sp_320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi16sp x2, 352
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 61", "c.addi16sp x2, 352");
}

#[test]
fn c_addi16sp_321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi16sp x2, 352
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 61", "c.addi16sp x2, 352");
}

#[test]
fn c_addi4spn_322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi4spn X(14), x2, 860
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 0E", "c.addi4spn X(14), x2, 860");
}

#[test]
fn c_addi4spn_323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi4spn X(13), x2, 356
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, 12", "c.addi4spn X(13), x2, 356");
}

#[test]
fn c_and_324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.and x11, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 8D", "c.and x11, X(13)");
}

#[test]
fn c_and_325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.and x10, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 8D", "c.and x10, X(11)");
}

#[test]
fn c_andi_326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.andi X(10), 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 89", "c.andi X(10), 14");
}

#[test]
fn c_andi_327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.andi X(12), -3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 9A", "c.andi X(12), -3");
}

#[test]
fn c_beqz_328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.beqz X(13), -160
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, D2", "c.beqz X(13), -160");
}

#[test]
fn c_beqz_329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.beqz X(9), 54
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, C8", "c.beqz X(9), 54");
}

#[test]
fn c_bnez_330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.bnez x9, -6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, FC", "c.bnez x9, -6");
}

#[test]
fn c_bnez_331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.bnez x9, 174
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, E4", "c.bnez x9, 174");
}

#[test]
fn c_ebreak_332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_ebreak_333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_fld_334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fld f8, [X(10), 72]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 25", "c.fld f8, [X(10), 72]");
}

#[test]
fn c_fld_335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fld F(13), [X(12), 216]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 2E", "c.fld F(13), [X(12), 216]");
}

#[test]
fn c_fldsp_336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fldsp f17, [sp, 16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 28", "c.fldsp f17, [sp, 16]");
}

#[test]
fn c_fldsp_337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fldsp F(1), [sp, 416]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 30", "c.fldsp F(1), [sp, 416]");
}

#[test]
fn c_flw_338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flw F(12), [x14, 108]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 77", "c.flw F(12), [x14, 108]");
}

#[test]
fn c_flw_339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flw f15, [X(14), 92]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 6F", "c.flw f15, [X(14), 92]");
}

#[test]
fn c_flwsp_340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flwsp F(19), [sp, 104]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 79", "c.flwsp F(19), [sp, 104]");
}

#[test]
fn c_flwsp_341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flwsp f12, [sp, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 66", "c.flwsp f12, [sp, 0]");
}

#[test]
fn c_fsd_342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsd F(15), [X(9), 240]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, B8", "c.fsd F(15), [X(9), 240]");
}

#[test]
fn c_fsd_343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsd f15, [x15, 208]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, AB", "c.fsd f15, [x15, 208]");
}

#[test]
fn c_fsdsp_344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsdsp F(1), [sp, 312]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, BE", "c.fsdsp F(1), [sp, 312]");
}

#[test]
fn c_fsdsp_345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsdsp f7, [sp, 264]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, A6", "c.fsdsp f7, [sp, 264]");
}

#[test]
fn c_fsw_346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fsw f15, [x15, 72]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, E7", "c.fsw f15, [x15, 72]");
}

#[test]
fn c_fsw_347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fsw F(8), [x12, 92]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, EE", "c.fsw F(8), [x12, 92]");
}

#[test]
fn c_fswsp_348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fswsp F(19), [sp, 244]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, FB", "c.fswsp F(19), [sp, 244]");
}

#[test]
fn c_fswsp_349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fswsp F(10), [sp, 212]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, EB", "c.fswsp F(10), [sp, 212]");
}

#[test]
fn c_j_350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.j 772
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, A6", "c.j 772");
}

#[test]
fn c_j_351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.j 1642
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, A5", "c.j 1642");
}

#[test]
fn c_jal_352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jal 594
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 2C", "c.jal 594");
}

#[test]
fn c_jal_353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jal -1060
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 3E", "c.jal -1060");
}

#[test]
fn c_jalr_354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jalr x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 96", "c.jalr x12");
}

#[test]
fn c_jalr_355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jalr x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 96", "c.jalr x12");
}

#[test]
fn c_jr_356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jr X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 8A", "c.jr X(21)");
}

#[test]
fn c_jr_357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jr x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 8B", "c.jr x22");
}

#[test]
fn c_lbu_358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lbu x8, [x10, 1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 81", "c.lbu x8, [x10, 1]");
}

#[test]
fn c_lbu_359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lbu x13, [x9, 3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 80", "c.lbu x13, [x9, 3]");
}

#[test]
fn c_lh_360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lh X(10), [x14, 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 87", "c.lh X(10), [x14, 2]");
}

#[test]
fn c_lh_361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lh X(15), [X(11), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 85", "c.lh X(15), [X(11), 2]");
}

#[test]
fn c_lhu_362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lhu x12, [X(9), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 84", "c.lhu x12, [X(9), 0]");
}

#[test]
fn c_lhu_363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lhu x10, [X(12), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 86", "c.lhu x10, [X(12), 2]");
}

#[test]
fn c_li_364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.li x2, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 41", "c.li x2, 6");
}

#[test]
fn c_li_365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.li x10, 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 45", "c.li x10, 14");
}

#[test]
fn c_lw_366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lw x10, [x10, 112]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 59", "c.lw x10, [x10, 112]");
}

#[test]
fn c_lw_367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lw X(13), [X(14), 60]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 5F", "c.lw X(13), [X(14), 60]");
}

#[test]
fn c_lwsp_368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lwsp x2, [sp, 4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 41", "c.lwsp x2, [sp, 4]");
}

#[test]
fn c_lwsp_369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lwsp x10, [sp, 36]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 55", "c.lwsp x10, [sp, 36]");
}

#[test]
fn c_mop_1_370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_1_371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_11_372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_11_373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_13_374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_13_375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_15_376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_15_377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_3_378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_3_379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_5_380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_5_381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_7_382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_7_383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_9_384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_9_385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_n_386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.N 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.N 13");
}

#[test]
fn c_mop_n_387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.N 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.N 9");
}

#[test]
fn c_mul_388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature mzcb
        ; c.mul X(9), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 9C", "c.mul X(9), X(11)");
}

#[test]
fn c_mul_389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature mzcb
        ; c.mul x13, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 9E", "c.mul x13, x13");
}

#[test]
fn c_mv_390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.mv x22, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 8B", "c.mv x22, X(2)");
}

#[test]
fn c_mv_391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.mv x4, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 82", "c.mv x4, x28");
}

#[test]
fn c_nop_392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_nop_393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_not_394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.not x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 9E", "c.not x12");
}

#[test]
fn c_not_395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.not X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 9E", "c.not X(13)");
}

#[test]
fn c_ntl_all_396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_all_397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_p1_398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_p1_399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_pall_400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_pall_401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_s1_402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_ntl_s1_403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_or_404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.or x11, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 8D", "c.or x11, X(12)");
}

#[test]
fn c_or_405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.or x9, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 8C", "c.or x9, x8");
}

#[test]
fn c_sb_406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.sb X(10), [X(10), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 89", "c.sb X(10), [X(10), 0]");
}

#[test]
fn c_sb_407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.sb X(10), [X(13), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 8A", "c.sb X(10), [X(13), 2]");
}

#[test]
fn c_sext_b_408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.b x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 9F", "c.sext.b x15");
}

#[test]
fn c_sext_b_409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.b x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 9E", "c.sext.b x13");
}

#[test]
fn c_sext_h_410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.h x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 9E", "c.sext.h x12");
}

#[test]
fn c_sext_h_411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.h X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 9E", "c.sext.h X(13)");
}

#[test]
fn c_sh_412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sh X(12), [X(15), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 8F", "c.sh X(12), [X(15), 2]");
}

#[test]
fn c_sh_413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sh X(11), [x10, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 8D", "c.sh X(11), [x10, 0]");
}

#[test]
fn c_slli_414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.slli x4, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 02", "c.slli x4, 30");
}

#[test]
fn c_slli_415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.slli X(15), 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 07", "c.slli X(15), 26");
}

#[test]
fn c_srai_416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srai X(9), 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 84", "c.srai X(9), 12");
}

#[test]
fn c_srai_417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srai x13, 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 86", "c.srai x13, 14");
}

#[test]
fn c_srli_418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srli x8, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 80", "c.srli x8, 12");
}

#[test]
fn c_srli_419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srli x11, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 81", "c.srli x11, 3");
}

#[test]
fn c_sspopchk_420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspopchk_421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspush_422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sspush_423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sub_424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sub X(9), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 8C", "c.sub X(9), X(9)");
}

#[test]
fn c_sub_425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sub x8, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 8C", "c.sub x8, X(9)");
}

#[test]
fn c_sw_426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sw x10, [X(12), 44]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, D6", "c.sw x10, [X(12), 44]");
}

#[test]
fn c_sw_427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sw X(13), [X(15), 96]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, D3", "c.sw X(13), [X(15), 96]");
}

#[test]
fn c_swsp_428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.swsp x26, [sp, 144]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, C9", "c.swsp x26, [sp, 144]");
}

#[test]
fn c_swsp_429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.swsp x10, [sp, 176]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, D9", "c.swsp x10, [sp, 176]");
}

#[test]
fn c_xor_430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.xor x13, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 8E", "c.xor x13, x11");
}

#[test]
fn c_xor_431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.xor x11, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 8D", "c.xor x11, X(15)");
}

#[test]
fn c_zext_b_432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.zext.b X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 9F", "c.zext.b X(14)");
}

#[test]
fn c_zext_b_433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.zext.b X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 9E", "c.zext.b X(13)");
}

#[test]
fn c_zext_h_434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.zext.h x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 9F", "c.zext.h x15");
}

#[test]
fn c_zext_h_435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.zext.h X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 9F", "c.zext.h X(15)");
}

#[test]
fn cbo_clean_436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.clean [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 18, 00", "cbo.clean [x17]");
}

#[test]
fn cbo_clean_437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.clean [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 10, 00", "cbo.clean [X(1)]");
}

#[test]
fn cbo_flush_438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.flush [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 2A, 00", "cbo.flush [x20]");
}

#[test]
fn cbo_flush_439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.flush [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 26, 00", "cbo.flush [x13]");
}

#[test]
fn cbo_inval_440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.inval [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 00, 00", "cbo.inval [x1]");
}

#[test]
fn cbo_inval_441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.inval [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 02, 00", "cbo.inval [x4]");
}

#[test]
fn cbo_zero_442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicboz
        ; cbo.zero [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 4C, 00", "cbo.zero [x24]");
}

#[test]
fn cbo_zero_443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicboz
        ; cbo.zero [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 48, 00", "cbo.zero [X(17)]");
}

#[test]
fn clmul_444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmul X(10), x26, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 15, 5D, 0B", "clmul X(10), x26, X(21)");
}

#[test]
fn clmul_445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmul x16, x31, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 98, 2F, 0A", "clmul x16, x31, X(2)");
}

#[test]
fn clmulh_446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; clmulh X(28), X(12), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 3E, B6, 0B", "clmulh X(28), X(12), x27");
}

#[test]
fn clmulh_447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; clmulh x16, X(10), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 38, 45, 0B", "clmulh x16, X(10), X(20)");
}

#[test]
fn clmulr_448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulr x14, x24, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 27, EC, 0B", "clmulr x14, x24, x30");
}

#[test]
fn clmulr_449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulr x18, X(15), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A9, E7, 0B", "clmulr x18, X(15), X(30)");
}

#[test]
fn clz_450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; clz x26, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1D, 08, 60", "clz x26, X(16)");
}

#[test]
fn clz_451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; clz X(0), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 90, 07, 60", "clz X(0), X(15)");
}

#[test]
fn cm_jalt_452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jalt 180
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, A2", "cm.jalt 180");
}

#[test]
fn cm_jalt_453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jalt 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, A0", "cm.jalt 32");
}

#[test]
fn cm_jt_454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jt 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, A0", "cm.jt 1");
}

#[test]
fn cm_jt_455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jt 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, A0", "cm.jt 31");
}

#[test]
fn cm_mva01s_456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mva01s x23, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, AF", "cm.mva01s x23, X(9)");
}

#[test]
fn cm_mva01s_457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mva01s x9, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, AC", "cm.mva01s x9, x21");
}

#[test]
fn cm_mvsa01_458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mvsa01 x21, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, AE", "cm.mvsa01 x21, X(18)");
}

#[test]
fn cm_mvsa01_459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mvsa01 x22, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, AF", "cm.mvsa01 x22, x8");
}

#[test]
fn cm_pop_460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.pop {ra; 6}, 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, BA", "cm.pop {{ra; 6}}, 48");
}

#[test]
fn cm_pop_461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.pop {ra, s0-s2}, 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, BA", "cm.pop {{ra, s0-s2}}, 64");
}

#[test]
fn cm_popret_462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popret {ra; 2}, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, BE", "cm.popret {{ra; 2}}, 16");
}

#[test]
fn cm_popret_463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popret {ra, s0-s5}, 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, BE", "cm.popret {{ra, s0-s5}}, 32");
}

#[test]
fn cm_popretz_464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popretz {ra; 10}, 80
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, BC", "cm.popretz {{ra; 10}}, 80");
}

#[test]
fn cm_popretz_465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popretz {ra, s0-s8}, 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, BC", "cm.popretz {{ra, s0-s8}}, 48");
}

#[test]
fn cm_push_466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.push {ra, s0-s9}, -80
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, B8", "cm.push {{ra, s0-s9}}, -80");
}

#[test]
fn cm_push_467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.push {ra; 6}, -48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, B8", "cm.push {{ra; 6}}, -48");
}

#[test]
fn cpop_468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; cpop X(30), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9F, 2E, 60", "cpop X(30), x29");
}

#[test]
fn cpop_469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; cpop x1, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 10, 22, 60", "cpop x1, X(4)");
}

#[test]
fn csrc_470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrc 3078, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, B0, 6A, C0", "csrc 3078, X(21)");
}

#[test]
fn csrc_471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrc 21, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 30, 5F, 01", "csrc 21, X(30)");
}

#[test]
fn csrci_472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrci hpmcounter8, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, F0, 88, C0", "csrci hpmcounter8, 17");
}

#[test]
fn csrci_473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrci hpmcounter27, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 70, B4, C1", "csrci hpmcounter27, 8");
}

#[test]
fn csrr_474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrr x4, hpmcounter17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 22, 10, C1", "csrr x4, hpmcounter17");
}

#[test]
fn csrr_475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrr X(6), 3078
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 23, 60, C0", "csrr X(6), 3078");
}

#[test]
fn csrrc_476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrc x6, hpmcounter3, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, B3, 38, C0", "csrrc x6, hpmcounter3, X(17)");
}

#[test]
fn csrrc_477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrc X(11), hpmcounter14, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, B5, EF, C0", "csrrc X(11), hpmcounter14, X(31)");
}

#[test]
fn csrrci_478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrci x26, hpmcounter22, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 7D, 6C, C1", "csrrci x26, hpmcounter22, 24");
}

#[test]
fn csrrci_479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrci x25, hpmcounter13, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 7C, D6, C0", "csrrci x25, hpmcounter13, 12");
}

#[test]
fn csrrs_480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrs X(27), 3089, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2D, 1D, C1", "csrrs X(27), 3089, x26");
}

#[test]
fn csrrs_481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrs x17, fflags, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 28, 11, 00", "csrrs x17, fflags, X(2)");
}

#[test]
fn csrrsi_482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrsi X(12), frm, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, E6, 25, 00", "csrrsi X(12), frm, 11");
}

#[test]
fn csrrsi_483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrsi x14, hpmcounter25, 22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 67, 9B, C1", "csrrsi x14, hpmcounter25, 22");
}

#[test]
fn csrrw_484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrw x5, hpmcounter3, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 92, 33, C0", "csrrw x5, hpmcounter3, x7");
}

#[test]
fn csrrw_485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrw X(31), 3095, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 1F, 76, C1", "csrrw X(31), 3095, x12");
}

#[test]
fn csrrwi_486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrwi x22, 17, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 5B, 1F, 01", "csrrwi x22, 17, 30");
}

#[test]
fn csrrwi_487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrwi X(13), 1, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 56, 14, 00", "csrrwi X(13), 1, 8");
}

#[test]
fn csrs_488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrs hpmcounter5, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 20, 56, C0", "csrs hpmcounter5, x12");
}

#[test]
fn csrs_489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrs 21, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A0, 5E, 01", "csrs 21, x29");
}

#[test]
fn csrsi_490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrsi hpmcounter3, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 60, 3A, C0", "csrsi hpmcounter3, 20");
}

#[test]
fn csrsi_491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrsi 3076, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 60, 4F, C0", "csrsi 3076, 30");
}

#[test]
fn csrw_492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrw 3099, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, BC, C1", "csrw 3099, X(24)");
}

#[test]
fn csrw_493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrw 3096, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 8A, C1", "csrw 3096, x20");
}

#[test]
fn csrwi_494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrwi hpmcounter31, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, D0, FD, C1", "csrwi hpmcounter31, 27");
}

#[test]
fn csrwi_495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrwi hpmcounter9, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 50, 95, C0", "csrwi hpmcounter9, 10");
}

#[test]
fn ctz_496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; ctz X(24), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1C, 12, 60", "ctz X(24), X(4)");
}

#[test]
fn ctz_497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; ctz X(23), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1B, 13, 60", "ctz X(23), x6");
}

#[test]
fn czero_eqz_498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.eqz X(23), X(15), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DB, A7, 0F", "czero.eqz X(23), X(15), x26");
}

#[test]
fn czero_eqz_499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.eqz X(23), x17, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DB, 18, 0E", "czero.eqz X(23), x17, x1");
}

#[test]
fn czero_nez_500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.nez X(17), X(16), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 78, 38, 0E", "czero.nez X(17), X(16), X(3)");
}

#[test]
fn czero_nez_501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.nez x26, X(25), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, FD, FC, 0F", "czero.nez x26, X(25), X(31)");
}

#[test]
fn div_502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; div x23, X(30), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4B, AF, 03", "div x23, X(30), X(26)");
}

#[test]
fn div_503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; div x24, x8, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 4C, 54, 03", "div x24, x8, x21");
}

#[test]
fn divu_504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; divu X(27), x13, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DD, 46, 02", "divu X(27), x13, X(4)");
}

#[test]
fn divu_505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; divu X(13), X(28), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 56, 8E, 03", "divu X(13), X(28), x24");
}

#[test]
fn ebreak_506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ebreak_507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ecall_508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn ecall_509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn fabs_d_510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fabs.d f9, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 24, 29, 23", "fabs.d f9, f18");
}

#[test]
fn fabs_d_511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fabs.d F(2), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, AD, 23", "fabs.d F(2), F(26)");
}

#[test]
fn fabs_h_512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fabs.h f18, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 29, AD, 25", "fabs.h f18, f26");
}

#[test]
fn fabs_h_513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fabs.h F(27), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, DE, 25", "fabs.h F(27), F(29)");
}

#[test]
fn fabs_q_514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fabs.q f3, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 21, EF, 27", "fabs.q f3, F(30)");
}

#[test]
fn fabs_q_515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fabs.q F(25), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 94, 26", "fabs.q F(25), f9");
}

#[test]
fn fabs_s_516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fabs.s F(21), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, C6, 20", "fabs.s F(21), F(12)");
}

#[test]
fn fabs_s_517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fabs.s F(31), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2F, C6, 20", "fabs.s F(31), f12");
}

#[test]
fn fadd_d_518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d f24, f21, f11, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CC, BA, 02", "fadd.d f24, f21, f11, rmm");
}

#[test]
fn fadd_d_519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d F(29), f23, F(20), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AE, 4B, 03", "fadd.d F(29), f23, F(20), rdn");
}

#[test]
fn fadd_d_520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d F(1), f2, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 91, 03", "fadd.d F(1), f2, f25");
}

#[test]
fn fadd_d_521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d f1, F(21), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, AA, 03", "fadd.d f1, F(21), F(26)");
}

#[test]
fn fadd_h_522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h f6, F(21), f1, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, 1A, 04", "fadd.h f6, F(21), f1, rtz");
}

#[test]
fn fadd_h_523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(27), F(1), F(9), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 90, 04", "fadd.h F(27), F(1), F(9), rne");
}

#[test]
fn fadd_h_524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h f17, f24, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, 9C, 04", "fadd.h f17, f24, f9");
}

#[test]
fn fadd_h_525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(12), f6, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 03, 04", "fadd.h F(12), f6, f0");
}

#[test]
fn fadd_q_526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q F(29), f26, f18, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4E, 2D, 07", "fadd.q F(29), f26, f18, rmm");
}

#[test]
fn fadd_q_527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f19, f16, F(18), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 49, 28, 07", "fadd.q f19, f16, F(18), rmm");
}

#[test]
fn fadd_q_528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f6, F(24), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 7C, 06", "fadd.q f6, F(24), F(7)");
}

#[test]
fn fadd_q_529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q F(22), F(24), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 1C, 06", "fadd.q F(22), F(24), f1");
}

#[test]
fn fadd_s_530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(15), F(28), f7, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 17, 7E, 00", "fadd.s F(15), F(28), f7, rtz");
}

#[test]
fn fadd_s_531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(19), F(21), F(10), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, AA, 00", "fadd.s F(19), F(21), F(10), rdn");
}

#[test]
fn fadd_s_532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s f2, F(23), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, BB, 01", "fadd.s f2, F(23), F(27)");
}

#[test]
fn fadd_s_533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(24), F(16), F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 58, 00", "fadd.s F(24), F(16), F(5)");
}

#[test]
fn fclass_d_534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fclass.d x20, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, 0D, E2", "fclass.d x20, F(27)");
}

#[test]
fn fclass_d_535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fclass.d x9, F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 14, 0C, E2", "fclass.d x9, F(24)");
}

#[test]
fn fclass_h_536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fclass.h X(8), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 94, 0C, E4", "fclass.h X(8), f25");
}

#[test]
fn fclass_h_537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fclass.h X(22), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, 0C, E4", "fclass.h X(22), f24");
}

#[test]
fn fclass_q_538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fclass.q X(14), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 0A, E6", "fclass.q X(14), f21");
}

#[test]
fn fclass_q_539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fclass.q X(12), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 96, 00, E6", "fclass.q X(12), f1");
}

#[test]
fn fclass_s_540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fclass.s X(7), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 0C, E0", "fclass.s X(7), f25");
}

#[test]
fn fclass_s_541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fclass.s X(9), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 14, 0E, E0", "fclass.s X(9), F(28)");
}

#[test]
fn fcvt_bf16_s_542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s F(10), f18, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 35, 89, 44", "fcvt.bf16.s F(10), f18, rup");
}

#[test]
fn fcvt_bf16_s_543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s f16, f28, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 18, 8E, 44", "fcvt.bf16.s f16, f28, rtz");
}

#[test]
fn fcvt_bf16_s_544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s f17, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 8F, 44", "fcvt.bf16.s f17, F(31)");
}

#[test]
fn fcvt_bf16_s_545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s F(15), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 89, 44", "fcvt.bf16.s F(15), F(19)");
}

#[test]
fn fcvt_d_h_546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.d.h F(21), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 2B, 42", "fcvt.d.h F(21), f22");
}

#[test]
fn fcvt_d_h_547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.d.h F(4), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 24, 42", "fcvt.d.h F(4), f8");
}

#[test]
fn fcvt_d_q_548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q f2, f9, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 34, 42", "fcvt.d.q f2, f9, rne");
}

#[test]
fn fcvt_d_q_549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q f15, f17, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B7, 38, 42", "fcvt.d.q f15, f17, rup");
}

#[test]
fn fcvt_d_q_550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(14), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 3E, 42", "fcvt.d.q F(14), f29");
}

#[test]
fn fcvt_d_q_551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q f11, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 38, 42", "fcvt.d.q f11, f17");
}

#[test]
fn fcvt_d_s_552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.s f30, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8F, 03, 42", "fcvt.d.s f30, F(7)");
}

#[test]
fn fcvt_d_s_553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.s F(0), F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 80, 02, 42", "fcvt.d.s F(0), F(5)");
}

#[test]
fn fcvt_d_w_554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.w f2, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 0E, D2", "fcvt.d.w f2, x28");
}

#[test]
fn fcvt_d_w_555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.w F(29), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0E, 04, D2", "fcvt.d.w F(29), X(8)");
}

#[test]
fn fcvt_d_wu_556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.wu f18, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 1E, D2", "fcvt.d.wu f18, x28");
}

#[test]
fn fcvt_d_wu_557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.wu F(9), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 1B, D2", "fcvt.d.wu F(9), X(23)");
}

#[test]
fn fcvt_h_d_558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d F(3), F(9), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, 14, 44", "fcvt.h.d F(3), F(9), rdn");
}

#[test]
fn fcvt_h_d_559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d f15, F(11), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B7, 15, 44", "fcvt.h.d f15, F(11), rup");
}

#[test]
fn fcvt_h_d_560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d f17, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 11, 44", "fcvt.h.d f17, F(3)");
}

#[test]
fn fcvt_h_d_561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d F(5), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 1A, 44", "fcvt.h.d F(5), F(21)");
}

#[test]
fn fcvt_h_q_562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q f7, F(21), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 3A, 44", "fcvt.h.q f7, F(21), rtz");
}

#[test]
fn fcvt_h_q_563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q F(28), f14, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 37, 44", "fcvt.h.q F(28), f14, dyn");
}

#[test]
fn fcvt_h_q_564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q F(6), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 37, 44", "fcvt.h.q F(6), f14");
}

#[test]
fn fcvt_h_q_565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q f13, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 3E, 44", "fcvt.h.q f13, F(29)");
}

#[test]
fn fcvt_h_s_566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s F(4), F(6), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 03, 44", "fcvt.h.s F(4), F(6), dyn");
}

#[test]
fn fcvt_h_s_567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s F(1), F(12), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 40, 06, 44", "fcvt.h.s F(1), F(12), rmm");
}

#[test]
fn fcvt_h_s_568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s f20, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 02, 44", "fcvt.h.s f20, f4");
}

#[test]
fn fcvt_h_s_569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s F(22), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 02, 44", "fcvt.h.s F(22), f4");
}

#[test]
fn fcvt_h_w_570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w F(4), X(12), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 42, 06, D4", "fcvt.h.w F(4), X(12), rmm");
}

#[test]
fn fcvt_h_w_571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f28, x11, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BE, 05, D4", "fcvt.h.w f28, x11, rup");
}

#[test]
fn fcvt_h_w_572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f28, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 03, D4", "fcvt.h.w f28, x7");
}

#[test]
fn fcvt_h_w_573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f14, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 02, D4", "fcvt.h.w f14, X(5)");
}

#[test]
fn fcvt_h_wu_574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(17), X(4), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 48, 12, D4", "fcvt.h.wu F(17), X(4), rmm");
}

#[test]
fn fcvt_h_wu_575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu f0, X(6), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 13, D4", "fcvt.h.wu f0, X(6), rtz");
}

#[test]
fn fcvt_h_wu_576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(29), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 12, D4", "fcvt.h.wu F(29), X(5)");
}

#[test]
fn fcvt_h_wu_577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(5), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 72, 17, D4", "fcvt.h.wu F(5), x14");
}

#[test]
fn fcvt_q_d_578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.d f6, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 16, 46", "fcvt.q.d f6, F(12)");
}

#[test]
fn fcvt_q_d_579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.d f22, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 19, 46", "fcvt.q.d f22, f19");
}

#[test]
fn fcvt_q_h_580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.q.h f27, f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, 2A, 46", "fcvt.q.h f27, f20");
}

#[test]
fn fcvt_q_h_581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.q.h F(1), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 2D, 46", "fcvt.q.h F(1), F(26)");
}

#[test]
fn fcvt_q_s_582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.s f4, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 01, 46", "fcvt.q.s f4, f2");
}

#[test]
fn fcvt_q_s_583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.s F(24), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 0C, 46", "fcvt.q.s F(24), F(25)");
}

#[test]
fn fcvt_q_w_584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.w F(27), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 0D, D6", "fcvt.q.w F(27), x27");
}

#[test]
fn fcvt_q_w_585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.w f21, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 01, D6", "fcvt.q.w f21, x3");
}

#[test]
fn fcvt_q_wu_586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.wu f23, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 12, D6", "fcvt.q.wu f23, x5");
}

#[test]
fn fcvt_q_wu_587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.wu f5, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 1A, D6", "fcvt.q.wu f5, x20");
}

#[test]
fn fcvt_s_bf16_588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.s.bf16 f0, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 63, 40", "fcvt.s.bf16 f0, f6");
}

#[test]
fn fcvt_s_bf16_589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.s.bf16 f3, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 81, 6E, 40", "fcvt.s.bf16 f3, f29");
}

#[test]
fn fcvt_s_d_590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d F(9), f0, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 34, 10, 40", "fcvt.s.d F(9), f0, rup");
}

#[test]
fn fcvt_s_d_591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f5, f7, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A2, 13, 40", "fcvt.s.d f5, f7, rdn");
}

#[test]
fn fcvt_s_d_592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f3, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 1B, 40", "fcvt.s.d f3, F(23)");
}

#[test]
fn fcvt_s_d_593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f21, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FA, 1E, 40", "fcvt.s.d f21, F(29)");
}

#[test]
fn fcvt_s_h_594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.s.h f22, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, 26, 40", "fcvt.s.h f22, F(12)");
}

#[test]
fn fcvt_s_h_595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.s.h F(29), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0E, 22, 40", "fcvt.s.h F(29), F(4)");
}

#[test]
fn fcvt_s_q_596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f5, F(0), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 30, 40", "fcvt.s.q f5, F(0), rne");
}

#[test]
fn fcvt_s_q_597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f15, f0, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 37, 30, 40", "fcvt.s.q f15, f0, rup");
}

#[test]
fn fcvt_s_q_598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f19, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 33, 40", "fcvt.s.q f19, F(6)");
}

#[test]
fn fcvt_s_q_599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q f9, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 39, 40", "fcvt.s.q f9, F(19)");
}

#[test]
fn fcvt_s_w_600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w f25, x13, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 06, D0", "fcvt.s.w f25, x13, dyn");
}

#[test]
fn fcvt_s_w_601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w F(30), x5, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BF, 02, D0", "fcvt.s.w F(30), x5, rup");
}

#[test]
fn fcvt_s_w_602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w f8, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 0C, D0", "fcvt.s.w f8, X(25)");
}

#[test]
fn fcvt_s_w_603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w f18, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 07, D0", "fcvt.s.w f18, x15");
}

#[test]
fn fcvt_s_wu_604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(4), X(11), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 92, 15, D0", "fcvt.s.wu F(4), X(11), rtz");
}

#[test]
fn fcvt_s_wu_605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu f25, X(19), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 19, D0", "fcvt.s.wu f25, X(19), rdn");
}

#[test]
fn fcvt_s_wu_606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(26), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 1C, D0", "fcvt.s.wu F(26), X(25)");
}

#[test]
fn fcvt_s_wu_607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu f0, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 1F, D0", "fcvt.s.wu f0, X(31)");
}

#[test]
fn fcvt_w_d_608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x12, F(16), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 08, C2", "fcvt.w.d x12, F(16), rne");
}

#[test]
fn fcvt_w_d_609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x1, F(15), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 90, 07, C2", "fcvt.w.d x1, F(15), rtz");
}

#[test]
fn fcvt_w_d_610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d X(7), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 0D, C2", "fcvt.w.d X(7), F(27)");
}

#[test]
fn fcvt_w_d_611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x11, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 0D, C2", "fcvt.w.d x11, F(26)");
}

#[test]
fn fcvt_w_h_612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h X(15), F(11), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 97, 05, C4", "fcvt.w.h X(15), F(11), rtz");
}

#[test]
fn fcvt_w_h_613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x0, F(10), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 05, C4", "fcvt.w.h x0, F(10), rtz");
}

#[test]
fn fcvt_w_h_614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x21, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, 06, C4", "fcvt.w.h x21, F(12)");
}

#[test]
fn fcvt_w_h_615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x13, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 01, C4", "fcvt.w.h x13, F(2)");
}

#[test]
fn fcvt_w_q_616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(28), F(0), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4E, 00, C6", "fcvt.w.q X(28), F(0), rmm");
}

#[test]
fn fcvt_w_q_617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q x26, F(17), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 08, C6", "fcvt.w.q x26, F(17), dyn");
}

#[test]
fn fcvt_w_q_618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q x6, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 07, C6", "fcvt.w.q x6, F(14)");
}

#[test]
fn fcvt_w_q_619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(10), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 05, C6", "fcvt.w.q X(10), f11");
}

#[test]
fn fcvt_w_s_620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(10), F(21), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 95, 0A, C0", "fcvt.w.s X(10), F(21), rtz");
}

#[test]
fn fcvt_w_s_621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(19), f11, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 05, C0", "fcvt.w.s X(19), f11, rne");
}

#[test]
fn fcvt_w_s_622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(8), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 0F, C0", "fcvt.w.s X(8), F(31)");
}

#[test]
fn fcvt_w_s_623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(30), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 0E, C0", "fcvt.w.s X(30), f29");
}

#[test]
fn fcvt_wu_d_624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d X(26), f26, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4D, 1D, C2", "fcvt.wu.d X(26), f26, rmm");
}

#[test]
fn fcvt_wu_d_625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x14, f15, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B7, 17, C2", "fcvt.wu.d x14, f15, rup");
}

#[test]
fn fcvt_wu_d_626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x23, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 1C, C2", "fcvt.wu.d x23, f25");
}

#[test]
fn fcvt_wu_d_627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x17, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, 10, C2", "fcvt.wu.d x17, F(0)");
}

#[test]
fn fcvt_wu_h_628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h X(13), F(23), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C6, 1B, C4", "fcvt.wu.h X(13), F(23), rmm");
}

#[test]
fn fcvt_wu_h_629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x3, F(4), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 12, C4", "fcvt.wu.h x3, F(4), rtz");
}

#[test]
fn fcvt_wu_h_630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x3, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 71, 17, C4", "fcvt.wu.h x3, f14");
}

#[test]
fn fcvt_wu_h_631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h X(11), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 1A, C4", "fcvt.wu.h X(11), f21");
}

#[test]
fn fcvt_wu_q_632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(16), f0, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 48, 10, C6", "fcvt.wu.q X(16), f0, rmm");
}

#[test]
fn fcvt_wu_q_633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(12), F(24), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 26, 1C, C6", "fcvt.wu.q X(12), F(24), rdn");
}

#[test]
fn fcvt_wu_q_634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(17), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, 13, C6", "fcvt.wu.q X(17), f6");
}

#[test]
fn fcvt_wu_q_635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q x2, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 11, C6", "fcvt.wu.q x2, f3");
}

#[test]
fn fcvt_wu_s_636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s x30, f31, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 1F, C0", "fcvt.wu.s x30, f31, dyn");
}

#[test]
fn fcvt_wu_s_637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(20), f22, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 1B, C0", "fcvt.wu.s X(20), f22, dyn");
}

#[test]
fn fcvt_wu_s_638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(4), F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 17, C0", "fcvt.wu.s X(4), F(14)");
}

#[test]
fn fcvt_wu_s_639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(2), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 13, C0", "fcvt.wu.s X(2), F(7)");
}

#[test]
fn fcvtmod_w_d_640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fcvtmod.w.d X(26), f3, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9D, 81, C2", "fcvtmod.w.d X(26), f3, rtz");
}

#[test]
fn fcvtmod_w_d_641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fcvtmod.w.d X(5), f5, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 92, 82, C2", "fcvtmod.w.d X(5), f5, rtz");
}

#[test]
fn fdiv_d_642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f23, f28, f25, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2B, 9E, 1B", "fdiv.d f23, f28, f25, rdn");
}

#[test]
fn fdiv_d_643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f23, F(9), F(28), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CB, C4, 1B", "fdiv.d f23, F(9), F(28), rmm");
}

#[test]
fn fdiv_d_644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d F(0), F(29), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, CE, 1B", "fdiv.d F(0), F(29), F(28)");
}

#[test]
fn fdiv_d_645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f26, F(27), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 4D, 1B", "fdiv.d f26, F(27), F(20)");
}

#[test]
fn fdiv_h_646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h F(11), F(21), F(9), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C5, 9A, 1C", "fdiv.h F(11), F(21), F(9), rmm");
}

#[test]
fn fdiv_h_647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h F(19), F(1), F(1), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C9, 10, 1C", "fdiv.h F(19), F(1), F(1), rmm");
}

#[test]
fn fdiv_h_648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f28, F(31), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 6F, 1D", "fdiv.h f28, F(31), f22");
}

#[test]
fn fdiv_h_649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h F(12), F(12), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 26, 1D", "fdiv.h F(12), F(12), F(18)");
}

#[test]
fn fdiv_q_650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(12), f1, f9, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 90, 1E", "fdiv.q F(12), f1, f9, dyn");
}

#[test]
fn fdiv_q_651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(10), f13, f18, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 95, 26, 1F", "fdiv.q F(10), f13, f18, rtz");
}

#[test]
fn fdiv_q_652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(13), f9, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 84, 1E", "fdiv.q F(13), f9, f8");
}

#[test]
fn fdiv_q_653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(16), f14, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 17, 1F", "fdiv.q F(16), f14, F(17)");
}

#[test]
fn fdiv_s_654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s f18, F(1), f24, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C9, 80, 19", "fdiv.s f18, F(1), f24, rmm");
}

#[test]
fn fdiv_s_655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(21), F(7), f27, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9A, B3, 19", "fdiv.s F(21), F(7), f27, rtz");
}

#[test]
fn fdiv_s_656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(31), f11, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, A5, 19", "fdiv.s F(31), f11, F(26)");
}

#[test]
fn fdiv_s_657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(27), f3, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, B1, 19", "fdiv.s F(27), f3, F(27)");
}

#[test]
fn fence_658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence or, or
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 60, 06", "fence or, or");
}

#[test]
fn fence_659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence ior, o
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 40, 0E", "fence ior, o");
}

#[test]
fn fence_i_660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_i_661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_tso_662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn fence_tso_663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn feq_d_664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; feq.d X(4), f24, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 22, BC, A2", "feq.d X(4), f24, F(11)");
}

#[test]
fn feq_d_665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; feq.d x9, F(30), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 24, AF, A2", "feq.d x9, F(30), f10");
}

#[test]
fn feq_h_666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; feq.h X(28), F(20), f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2E, DA, A4", "feq.h X(28), F(20), f13");
}

#[test]
fn feq_h_667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; feq.h X(17), f21, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 5A, A4", "feq.h X(17), f21, F(5)");
}

#[test]
fn feq_q_668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; feq.q x1, F(30), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 20, AF, A6", "feq.q x1, F(30), F(10)");
}

#[test]
fn feq_q_669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; feq.q x10, F(11), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A5, 55, A7", "feq.q x10, F(11), F(21)");
}

#[test]
fn feq_s_670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; feq.s x18, f2, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 29, 11, A0", "feq.s x18, f2, F(1)");
}

#[test]
fn feq_s_671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; feq.s X(11), F(4), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 25, B2, A0", "feq.s X(11), F(4), F(11)");
}

#[test]
fn fld_672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld F(31), [x10, -146]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 3F, E5, F6", "fld F(31), [x10, -146]");
}

#[test]
fn fld_673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld F(10), [x13, -1038]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, B5, 26, BF", "fld F(10), [x13, -1038]");
}

#[test]
fn fle_d_674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fle.d x23, F(7), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 03, A2", "fle.d x23, F(7), f0");
}

#[test]
fn fle_d_675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fle.d x12, f30, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, DF, A2", "fle.d x12, f30, F(13)");
}

#[test]
fn fle_h_676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fle.h x2, f26, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, FD, A5", "fle.h x2, f26, F(31)");
}

#[test]
fn fle_h_677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fle.h X(28), F(3), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, B1, A4", "fle.h X(28), F(3), F(11)");
}

#[test]
fn fle_q_678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fle.q x30, F(28), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, FE, A6", "fle.q x30, F(28), f15");
}

#[test]
fn fle_q_679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fle.q x30, F(7), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8F, 93, A6", "fle.q x30, F(7), f9");
}

#[test]
fn fle_s_680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fle.s X(0), F(29), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 80, 5E, A1", "fle.s X(0), F(29), f21");
}

#[test]
fn fle_s_681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fle.s x26, f25, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, DC, A0", "fle.s x26, f25, f13");
}

#[test]
fn fleq_d_682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fleq.d x13, f30, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 46, EF, A3", "fleq.d x13, f30, F(30)");
}

#[test]
fn fleq_d_683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fleq.d x19, f18, f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 49, C9, A2", "fleq.d x19, f18, f12");
}

#[test]
fn fleq_h_684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fleq.h X(23), F(12), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4B, 36, A4", "fleq.h X(23), F(12), F(3)");
}

#[test]
fn fleq_h_685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fleq.h x27, f26, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4D, FD, A4", "fleq.h x27, f26, f15");
}

#[test]
fn fleq_q_686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fleq.q X(5), f15, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C2, C7, A6", "fleq.q X(5), f15, F(12)");
}

#[test]
fn fleq_q_687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fleq.q x3, F(17), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C1, 78, A6", "fleq.q x3, F(17), f7");
}

#[test]
fn fleq_s_688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fleq.s X(22), f14, f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4B, 87, A1", "fleq.s X(22), f14, f24");
}

#[test]
fn fleq_s_689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fleq.s x28, f2, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4E, 51, A1", "fleq.s x28, f2, F(21)");
}

#[test]
fn flh_690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flh F(13), [X(25), -1858]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 96, EC, 8B", "flh F(13), [X(25), -1858]");
}

#[test]
fn flh_691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flh F(17), [x4, -283]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 18, 52, EE", "flh F(17), [x4, -283]");
}

#[test]
fn fli_d_692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fli.d F(28), 0.875
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, 17, F2", "fli.d F(28), 0.875");
}

#[test]
fn fli_d_693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fli.d f26, 4.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 1B, F2", "fli.d f26, 4.0");
}

#[test]
fn fli_h_694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fli.h F(1), 3.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 1B, F4", "fli.h F(1), 3.0");
}

#[test]
fn fli_h_695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fli.h f29, 3.90625e-03
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0E, 12, F4", "fli.h f29, 3.90625e-03");
}

#[test]
fn fli_q_696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fli.q f12, 16.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 1C, F6", "fli.q f12, 16.0");
}

#[test]
fn fli_q_697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fli.q F(2), 256.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 1D, F6", "fli.q F(2), 256.0");
}

#[test]
fn fli_s_698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fli.s F(4), 2.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 1A, F0", "fli.s F(4), 2.0");
}

#[test]
fn fli_s_699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fli.s f5, inf
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 1F, F0", "fli.s f5, inf");
}

#[test]
fn flq_700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flq f2, [X(18), -1513]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 41, 79, A1", "flq f2, [X(18), -1513]");
}

#[test]
fn flq_701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flq F(7), [X(5), -1247]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, C3, 12, B2", "flq F(7), [X(5), -1247]");
}

#[test]
fn flt_d_702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; flt.d X(24), F(21), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9C, AA, A2", "flt.d X(24), F(21), f10");
}

#[test]
fn flt_d_703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; flt.d x9, F(2), f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 14, 51, A2", "flt.d x9, F(2), f5");
}

#[test]
fn flt_h_704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flt.h x14, F(4), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 12, A4", "flt.h x14, F(4), f1");
}

#[test]
fn flt_h_705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flt.h X(25), f16, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, D8, A5", "flt.h X(25), f16, F(29)");
}

#[test]
fn flt_q_706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flt.q X(11), F(18), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 15, D9, A6", "flt.q X(11), F(18), F(13)");
}

#[test]
fn flt_q_707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flt.q X(9), F(7), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 94, 13, A6", "flt.q X(9), F(7), f1");
}

#[test]
fn flt_s_708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flt.s X(2), F(21), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 91, FA, A1", "flt.s X(2), F(21), f31");
}

#[test]
fn flt_s_709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flt.s X(22), f4, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, 52, A0", "flt.s X(22), f4, F(5)");
}

#[test]
fn fltq_d_710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fltq.d x10, F(6), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 55, 53, A3", "fltq.d x10, F(6), F(21)");
}

#[test]
fn fltq_d_711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fltq.d X(20), F(6), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 5A, 73, A3", "fltq.d X(20), F(6), F(23)");
}

#[test]
fn fltq_h_712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fltq.h X(4), F(30), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 52, 1F, A4", "fltq.h X(4), F(30), F(1)");
}

#[test]
fn fltq_h_713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fltq.h x18, F(0), F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 59, 50, A4", "fltq.h x18, F(0), F(5)");
}

#[test]
fn fltq_q_714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fltq.q X(18), F(2), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 59, 71, A6", "fltq.q X(18), F(2), f7");
}

#[test]
fn fltq_q_715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fltq.q x15, f7, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D7, 63, A6", "fltq.q x15, f7, F(6)");
}

#[test]
fn fltq_s_716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fltq.s X(12), f14, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 56, 37, A1", "fltq.s X(12), f14, f19");
}

#[test]
fn fltq_s_717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fltq.s x15, F(25), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D7, 6C, A0", "fltq.s x15, F(25), F(6)");
}

#[test]
fn flw_718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flw F(21), [x19, -208]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, AA, 09, F3", "flw F(21), [x19, -208]");
}

#[test]
fn flw_719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flw F(18), [x6, -490]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 29, 63, E1", "flw F(18), [x6, -490]");
}

#[test]
fn fmadd_d_720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d F(0), F(5), F(29), F(18), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, B0, D2, 93", "fmadd.d F(0), F(5), F(29), F(18), rup");
}

#[test]
fn fmadd_d_721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d F(7), f5, F(20), F(12), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 83, 42, 63", "fmadd.d F(7), f5, F(20), F(12), rne");
}

#[test]
fn fmadd_d_722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d f21, f9, f2, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, FA, 24, 4A", "fmadd.d f21, f9, f2, F(9)");
}

#[test]
fn fmadd_d_723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d f17, f7, f27, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F8, B3, 6B", "fmadd.d f17, f7, f27, f13");
}

#[test]
fn fmadd_h_724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h f28, f7, f6, F(30), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, BE, 63, F4", "fmadd.h f28, f7, f6, F(30), rup");
}

#[test]
fn fmadd_h_725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h F(21), f14, F(10), F(28), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 2A, A7, E4", "fmadd.h F(21), f14, F(10), F(28), rdn");
}

#[test]
fn fmadd_h_726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h F(26), F(16), f11, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7D, B8, 3C", "fmadd.h F(26), F(16), f11, F(7)");
}

#[test]
fn fmadd_h_727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h F(27), f6, F(8), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7D, 83, 54", "fmadd.h F(27), f6, F(8), F(10)");
}

#[test]
fn fmadd_q_728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q f1, f3, F(11), F(14), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F0, B1, 76", "fmadd.q f1, f3, F(11), F(14), dyn");
}

#[test]
fn fmadd_q_729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q F(18), F(19), F(0), F(4), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, C9, 09, 26", "fmadd.q F(18), F(19), F(0), F(4), rmm");
}

#[test]
fn fmadd_q_730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q F(16), f22, F(19), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 78, 3B, 57", "fmadd.q F(16), f22, F(19), F(10)");
}

#[test]
fn fmadd_q_731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q F(18), f14, f16, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 79, 07, 1F", "fmadd.q F(18), f14, f16, f3");
}

#[test]
fn fmadd_s_732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s F(8), F(15), f15, F(4), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F4, F7, 20", "fmadd.s F(8), F(15), f15, F(4), dyn");
}

#[test]
fn fmadd_s_733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s f15, F(20), f13, F(16), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 17, DA, 80", "fmadd.s f15, F(20), f13, F(16), rtz");
}

#[test]
fn fmadd_s_734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s f27, F(28), F(11), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7D, BE, E8", "fmadd.s f27, F(28), F(11), F(29)");
}

#[test]
fn fmadd_s_735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s F(24), f4, F(9), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7C, 92, A0", "fmadd.s F(24), f4, F(9), f20");
}

#[test]
fn fmax_d_736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmax.d F(20), f4, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1A, 92, 2A", "fmax.d F(20), f4, f9");
}

#[test]
fn fmax_d_737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmax.d f7, F(18), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 13, 29, 2B", "fmax.d f7, F(18), f18");
}

#[test]
fn fmax_h_738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmax.h F(11), F(3), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 95, 31, 2C", "fmax.h F(11), F(3), f3");
}

#[test]
fn fmax_h_739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmax.h F(14), f18, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 19, 2C", "fmax.h F(14), f18, F(1)");
}

#[test]
fn fmax_q_740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmax.q F(12), F(6), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 16, B3, 2E", "fmax.q F(12), F(6), F(11)");
}

#[test]
fn fmax_q_741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmax.q f29, F(0), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1E, A0, 2E", "fmax.q f29, F(0), F(10)");
}

#[test]
fn fmax_s_742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmax.s f17, f21, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 98, AA, 29", "fmax.s f17, f21, f26");
}

#[test]
fn fmax_s_743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmax.s f23, F(16), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1B, 78, 28", "fmax.s f23, F(16), f7");
}

#[test]
fn fmaxm_d_744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmaxm.d f22, f16, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3B, 28, 2B", "fmaxm.d f22, f16, f18");
}

#[test]
fn fmaxm_d_745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmaxm.d F(7), f4, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 33, 22, 2A", "fmaxm.d F(7), f4, f2");
}

#[test]
fn fmaxm_h_746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fmaxm.h F(27), F(24), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3D, 1C, 2C", "fmaxm.h F(27), F(24), F(1)");
}

#[test]
fn fmaxm_h_747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fmaxm.h F(27), f8, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3D, 24, 2D", "fmaxm.h F(27), f8, f18");
}

#[test]
fn fmaxm_q_748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fmaxm.q f11, f18, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 35, 69, 2F", "fmaxm.q f11, f18, F(22)");
}

#[test]
fn fmaxm_q_749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fmaxm.q f15, f25, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B7, CC, 2F", "fmaxm.q f15, f25, f28");
}

#[test]
fn fmaxm_s_750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fmaxm.s f17, f19, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B8, 29, 28", "fmaxm.s f17, f19, F(2)");
}

#[test]
fn fmaxm_s_751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fmaxm.s F(9), F(4), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 34, 32, 29", "fmaxm.s F(9), F(4), F(19)");
}

#[test]
fn fmin_d_752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmin.d F(2), F(14), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, C7, 2B", "fmin.d F(2), F(14), f28");
}

#[test]
fn fmin_d_753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmin.d F(1), f23, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 80, 5B, 2B", "fmin.d F(1), f23, F(21)");
}

#[test]
fn fmin_h_754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmin.h F(0), f6, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 13, 2C", "fmin.h F(0), f6, f1");
}

#[test]
fn fmin_h_755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmin.h f25, F(16), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0C, D8, 2C", "fmin.h f25, F(16), F(13)");
}

#[test]
fn fmin_q_756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmin.q F(1), F(2), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 11, 2F", "fmin.q F(1), F(2), f17");
}

#[test]
fn fmin_q_757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmin.q F(2), F(6), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 33, 2E", "fmin.q F(2), F(6), F(3)");
}

#[test]
fn fmin_s_758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmin.s f18, f23, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 89, 0B, 29", "fmin.s f18, f23, F(16)");
}

#[test]
fn fmin_s_759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmin.s F(11), f11, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 35, 28", "fmin.s F(11), f11, F(3)");
}

#[test]
fn fminm_d_760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fminm.d f22, f11, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AB, 45, 2A", "fminm.d f22, f11, f4");
}

#[test]
fn fminm_d_761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fminm.d f14, f14, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 27, A7, 2A", "fminm.d f14, f14, F(10)");
}

#[test]
fn fminm_h_762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fminm.h f25, f23, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 3B, 2C", "fminm.h f25, f23, F(3)");
}

#[test]
fn fminm_h_763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fminm.h F(27), f28, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2D, 9E, 2C", "fminm.h F(27), f28, F(9)");
}

#[test]
fn fminm_q_764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fminm.q f13, f22, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 26, 9B, 2E", "fminm.q f13, f22, f9");
}

#[test]
fn fminm_q_765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fminm.q F(26), F(30), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2D, BF, 2F", "fminm.q F(26), F(30), f27");
}

#[test]
fn fminm_s_766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fminm.s F(26), F(22), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2D, 9B, 29", "fminm.s F(26), F(22), f25");
}

#[test]
fn fminm_s_767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fminm.s F(9), f20, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 24, EA, 28", "fminm.s F(9), f20, f14");
}

#[test]
fn fmsub_d_768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d f13, F(19), f15, f29, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, C6, F9, EA", "fmsub.d f13, F(19), f15, f29, rmm");
}

#[test]
fn fmsub_d_769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d F(20), F(12), f6, f27, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 4A, 66, DA", "fmsub.d F(20), F(12), f6, f27, rmm");
}

#[test]
fn fmsub_d_770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d f24, f22, f25, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 7C, 9B, E3", "fmsub.d f24, f22, f25, F(28)");
}

#[test]
fn fmsub_d_771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d F(10), F(29), f31, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F5, FE, A3", "fmsub.d F(10), F(29), f31, F(20)");
}

#[test]
fn fmsub_h_772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h F(27), F(21), f11, F(3), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, FD, BA, 1C", "fmsub.h F(27), F(21), f11, F(3), dyn");
}

#[test]
fn fmsub_h_773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h F(6), F(21), f15, f6, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, C3, FA, 34", "fmsub.h F(6), F(21), f15, f6, rmm");
}

#[test]
fn fmsub_h_774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h f2, F(12), f26, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 71, A6, 15", "fmsub.h f2, F(12), f26, F(2)");
}

#[test]
fn fmsub_h_775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h f24, F(26), f7, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 7C, 7D, 14", "fmsub.h f24, F(26), f7, f2");
}

#[test]
fn fmsub_q_776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q F(16), f10, f29, f20, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 78, D5, A7", "fmsub.q F(16), f10, f29, f20, dyn");
}

#[test]
fn fmsub_q_777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q f27, f3, F(30), f7, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, BD, E1, 3F", "fmsub.q f27, f3, F(30), f7, rup");
}

#[test]
fn fmsub_q_778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q f15, f19, f6, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F7, 69, A6", "fmsub.q f15, f19, f6, F(20)");
}

#[test]
fn fmsub_q_779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q f30, F(11), f31, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, FF, F5, 67", "fmsub.q f30, F(11), f31, F(12)");
}

#[test]
fn fmsub_s_780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s F(2), F(15), f28, F(27), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 81, C7, D9", "fmsub.s F(2), F(15), f28, F(27), rne");
}

#[test]
fn fmsub_s_781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s F(16), f22, F(10), f5, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 38, AB, 28", "fmsub.s F(16), f22, F(10), f5, rup");
}

#[test]
fn fmsub_s_782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s f2, f12, F(13), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 71, D6, 80", "fmsub.s f2, f12, F(13), f16");
}

#[test]
fn fmsub_s_783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s F(0), f5, f7, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F0, 72, A8", "fmsub.s F(0), f5, f7, f21");
}

#[test]
fn fmul_d_784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d F(31), F(0), f4, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4F, 40, 12", "fmul.d F(31), F(0), f4, rmm");
}

#[test]
fn fmul_d_785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d F(7), f20, F(15), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, FA, 12", "fmul.d F(7), f20, F(15), dyn");
}

#[test]
fn fmul_d_786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d f12, F(0), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, D0, 13", "fmul.d f12, F(0), f29");
}

#[test]
fn fmul_d_787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d f5, f9, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, F4, 12", "fmul.d f5, f9, F(15)");
}

#[test]
fn fmul_h_788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h F(10), F(14), f7, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 45, 77, 14", "fmul.h F(10), F(14), f7, rmm");
}

#[test]
fn fmul_h_789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h f20, F(28), f15, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1A, FE, 14", "fmul.h f20, F(28), f15, rtz");
}

#[test]
fn fmul_h_790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h f8, f15, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 47, 15", "fmul.h f8, f15, F(20)");
}

#[test]
fn fmul_h_791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h F(31), f13, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, B6, 15", "fmul.h F(31), f13, f27");
}

#[test]
fn fmul_q_792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q f30, F(5), F(11), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BF, B2, 16", "fmul.q f30, F(5), F(11), rup");
}

#[test]
fn fmul_q_793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q F(9), F(16), f21, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 44, 58, 17", "fmul.q F(9), F(16), f21, rmm");
}

#[test]
fn fmul_q_794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q F(9), F(13), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 86, 16", "fmul.q F(9), F(13), f8");
}

#[test]
fn fmul_q_795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q f15, F(9), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 74, 16", "fmul.q f15, F(9), f7");
}

#[test]
fn fmul_s_796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s f26, f13, f7, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BD, 76, 10", "fmul.s f26, f13, f7, rup");
}

#[test]
fn fmul_s_797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s F(11), f20, F(30), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, EA, 11", "fmul.s F(11), f20, F(30), dyn");
}

#[test]
fn fmul_s_798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s f17, F(1), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, D0, 10", "fmul.s f17, F(1), F(13)");
}

#[test]
fn fmul_s_799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s f11, F(14), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 87, 10", "fmul.s f11, F(14), f8");
}
