
#[test]
fn add_0() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; add x22, x28, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0B, 6E, 00", "add x22, x28, x6");
}

#[test]
fn add_1() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; add x6, X(29), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 83, 0E, 01", "add x6, X(29), X(16)");
}

#[test]
fn addi_2() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; addi x0, x2, 666
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, A1, 29", "addi x0, x2, 666");
}

#[test]
fn addi_3() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; addi X(23), x19, 281
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 8B, 99, 11", "addi X(23), x19, 281");
}

#[test]
fn aes32dsi_4() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsi x9, x9, X(9), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 84, 94, 6A", "aes32dsi x9, x9, X(9), 1");
}

#[test]
fn aes32dsi_5() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsi X(25), X(1), X(4), 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8C, 40, AA", "aes32dsi X(25), X(1), X(4), 2");
}

#[test]
fn aes32dsmi_6() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32dsmi X(25), X(15), x16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8C, 07, 2F", "aes32dsmi X(25), X(15), x16, 0");
}

#[test]
fn aes32dsmi_7() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; aes32dsmi x11, x23, x3, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 85, 3B, EE", "aes32dsmi x11, x23, x3, 3");
}

#[test]
fn aes32esi_8() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkne
        ; aes32esi x23, x9, X(14), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8B, E4, 22", "aes32esi x23, x9, X(14), 0");
}

#[test]
fn aes32esi_9() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkne
        ; aes32esi x0, X(1), x18, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 80, 20, A3", "aes32esi x0, X(1), x18, 2");
}

#[test]
fn aes32esmi_10() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32esmi x6, x28, X(17), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 03, 1E, 27", "aes32esmi x6, x28, X(17), 0");
}

#[test]
fn aes32esmi_11() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; aes32esmi x25, x4, x11, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0C, B2, E6", "aes32esmi x25, x4, x11, 3");
}

#[test]
fn amoadd_b_12() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b X(30), X(23), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8F, 7E, 01", "amoadd.b X(30), X(23), [X(29)]");
}

#[test]
fn amoadd_b_13() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b x26, X(8), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8D, 84, 00", "amoadd.b x26, X(8), [x9]");
}

#[test]
fn amoadd_b_aq_14() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aq x0, x22, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 60, 05", "amoadd.b.aq x0, x22, [X(0)]");
}

#[test]
fn amoadd_b_aq_15() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aq X(5), x19, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 02, 39, 05", "amoadd.b.aq X(5), x19, [X(18)]");
}

#[test]
fn amoadd_b_aqrl_16() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aqrl X(10), X(27), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 85, B3, 07", "amoadd.b.aqrl X(10), X(27), [X(7)]");
}

#[test]
fn amoadd_b_aqrl_17() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.aqrl x14, x4, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 07, 42, 06", "amoadd.b.aqrl x14, x4, [x4]");
}

#[test]
fn amoadd_b_rl_18() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.rl X(16), X(26), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 08, AC, 03", "amoadd.b.rl X(16), X(26), [X(24)]");
}

#[test]
fn amoadd_b_rl_19() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.b.rl X(12), x4, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, 48, 02", "amoadd.b.rl X(12), x4, [X(16)]");
}

#[test]
fn amoadd_h_20() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h X(11), x14, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 15, E9, 00", "amoadd.h X(11), x14, [X(18)]");
}

#[test]
fn amoadd_h_21() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h X(22), X(10), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, A6, 00", "amoadd.h X(22), X(10), [X(12)]");
}

#[test]
fn amoadd_h_aq_22() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aq x26, X(17), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1D, 1D, 05", "amoadd.h.aq x26, X(17), [X(26)]");
}

#[test]
fn amoadd_h_aq_23() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aq X(29), x26, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, A8, 05", "amoadd.h.aq X(29), x26, [X(17)]");
}

#[test]
fn amoadd_h_aqrl_24() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aqrl X(29), x15, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1E, F0, 06", "amoadd.h.aqrl X(29), x15, [X(0)]");
}

#[test]
fn amoadd_h_aqrl_25() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.aqrl X(4), x19, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, 33, 07", "amoadd.h.aqrl X(4), x19, [X(6)]");
}

#[test]
fn amoadd_h_rl_26() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.rl X(9), x19, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, 32, 03", "amoadd.h.rl X(9), x19, [x4]");
}

#[test]
fn amoadd_h_rl_27() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoadd.h.rl X(6), X(4), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, 48, 02", "amoadd.h.rl X(6), X(4), [x16]");
}

#[test]
fn amoadd_w_28() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w x27, X(7), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 73, 00", "amoadd.w x27, X(7), [x7]");
}

#[test]
fn amoadd_w_29() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w X(2), X(4), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 21, 4E, 00", "amoadd.w X(2), X(4), [x28]");
}

#[test]
fn amoadd_w_aq_30() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aq x4, X(17), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 22, 16, 05", "amoadd.w.aq x4, X(17), [X(12)]");
}

#[test]
fn amoadd_w_aq_31() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aq X(30), X(7), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AF, 71, 04", "amoadd.w.aq X(30), X(7), [x3]");
}

#[test]
fn amoadd_w_aqrl_32() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aqrl x18, X(20), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 49, 07", "amoadd.w.aqrl x18, X(20), [X(19)]");
}

#[test]
fn amoadd_w_aqrl_33() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.aqrl x12, x7, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, 7D, 06", "amoadd.w.aqrl x12, x7, [x27]");
}

#[test]
fn amoadd_w_rl_34() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.rl X(15), X(12), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, C5, 02", "amoadd.w.rl X(15), X(12), [x11]");
}

#[test]
fn amoadd_w_rl_35() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoadd.w.rl x8, x6, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 24, 6C, 02", "amoadd.w.rl x8, x6, [X(24)]");
}

#[test]
fn amoand_b_36() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b x16, x30, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 88, E2, 61", "amoand.b x16, x30, [X(5)]");
}

#[test]
fn amoand_b_37() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b X(8), x3, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 84, 32, 60", "amoand.b X(8), x3, [X(5)]");
}

#[test]
fn amoand_b_aq_38() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aq X(31), x17, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, 14, 65", "amoand.b.aq X(31), x17, [x8]");
}

#[test]
fn amoand_b_aq_39() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aq x9, X(25), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 84, 98, 65", "amoand.b.aq x9, X(25), [x17]");
}

#[test]
fn amoand_b_aqrl_40() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aqrl X(7), x29, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 03, D5, 67", "amoand.b.aqrl X(7), x29, [X(10)]");
}

#[test]
fn amoand_b_aqrl_41() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.aqrl x4, x30, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, ED, 67", "amoand.b.aqrl x4, x30, [X(27)]");
}

#[test]
fn amoand_b_rl_42() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.rl x23, x17, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8B, 13, 63", "amoand.b.rl x23, x17, [X(7)]");
}

#[test]
fn amoand_b_rl_43() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.b.rl x24, x14, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8C, E9, 62", "amoand.b.rl x24, x14, [X(19)]");
}

#[test]
fn amoand_h_44() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h X(11), x9, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 95, 9C, 60", "amoand.h X(11), x9, [X(25)]");
}

#[test]
fn amoand_h_45() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h X(10), X(26), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, A3, 61", "amoand.h X(10), X(26), [x7]");
}

#[test]
fn amoand_h_aq_46() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aq X(11), x6, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 95, 62, 64", "amoand.h.aq X(11), x6, [x5]");
}

#[test]
fn amoand_h_aq_47() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aq x8, x14, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 94, E2, 64", "amoand.h.aq x8, x14, [x5]");
}

#[test]
fn amoand_h_aqrl_48() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aqrl X(1), x18, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 23, 67", "amoand.h.aqrl X(1), x18, [x6]");
}

#[test]
fn amoand_h_aqrl_49() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.aqrl X(31), X(17), [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, 12, 67", "amoand.h.aqrl X(31), X(17), [X(5)]");
}

#[test]
fn amoand_h_rl_50() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.rl X(26), X(7), [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9D, 76, 62", "amoand.h.rl X(26), X(7), [X(13)]");
}

#[test]
fn amoand_h_rl_51() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoand.h.rl X(28), X(9), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1E, 90, 62", "amoand.h.rl X(28), X(9), [x0]");
}

#[test]
fn amoand_w_52() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w X(15), X(26), [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, A4, 61", "amoand.w X(15), X(26), [X(9)]");
}

#[test]
fn amoand_w_53() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w X(3), x20, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 21, 45, 61", "amoand.w X(3), x20, [X(10)]");
}

#[test]
fn amoand_w_aq_54() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aq x20, X(11), [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, BF, 64", "amoand.w.aq x20, X(11), [X(31)]");
}

#[test]
fn amoand_w_aq_55() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aq X(27), x11, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2D, BA, 64", "amoand.w.aq X(27), x11, [X(20)]");
}

#[test]
fn amoand_w_aqrl_56() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aqrl x2, x27, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A1, B3, 67", "amoand.w.aqrl x2, x27, [x7]");
}

#[test]
fn amoand_w_aqrl_57() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.aqrl x2, x22, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A1, 60, 67", "amoand.w.aqrl x2, x22, [X(1)]");
}

#[test]
fn amoand_w_rl_58() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.rl X(4), x19, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A2, 39, 63", "amoand.w.rl X(4), x19, [X(19)]");
}

#[test]
fn amoand_w_rl_59() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoand.w.rl X(30), X(25), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AF, 9D, 63", "amoand.w.rl X(30), X(25), [X(27)]");
}

#[test]
fn amocas_b_60() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b x29, x11, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0E, BC, 28", "amocas.b x29, x11, [X(24)]");
}

#[test]
fn amocas_b_61() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b X(10), x10, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, AB, 28", "amocas.b X(10), x10, [X(22)]");
}

#[test]
fn amocas_b_aq_62() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aq X(7), x15, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, F9, 2C", "amocas.b.aq X(7), x15, [X(19)]");
}

#[test]
fn amocas_b_aq_63() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aq X(13), X(12), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, CB, 2C", "amocas.b.aq X(13), X(12), [x22]");
}

#[test]
fn amocas_b_aqrl_64() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aqrl X(3), X(3), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 01, 31, 2E", "amocas.b.aqrl X(3), X(3), [x2]");
}

#[test]
fn amocas_b_aqrl_65() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.aqrl X(28), x14, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, EA, 2E", "amocas.b.aqrl X(28), x14, [X(20)]");
}

#[test]
fn amocas_b_rl_66() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.rl X(7), x2, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, 28, 2A", "amocas.b.rl X(7), x2, [X(17)]");
}

#[test]
fn amocas_b_rl_67() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.b.rl x0, x21, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 55, 2B", "amocas.b.rl x0, x21, [X(10)]");
}

#[test]
fn amocas_d_68() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d x10, X(30), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B5, E3, 29", "amocas.d x10, X(30), [x7]");
}

#[test]
fn amocas_d_69() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d X(22), x18, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3B, 29, 29", "amocas.d X(22), x18, [X(18)]");
}

#[test]
fn amocas_d_aq_70() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aq x14, X(14), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B7, EC, 2C", "amocas.d.aq x14, X(14), [x25]");
}

#[test]
fn amocas_d_aq_71() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aq X(10), x6, [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 35, 6F, 2C", "amocas.d.aq X(10), x6, [X(30)]");
}

#[test]
fn amocas_d_aqrl_72() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aqrl X(6), X(8), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 33, 80, 2E", "amocas.d.aqrl X(6), X(8), [X(0)]");
}

#[test]
fn amocas_d_aqrl_73() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.aqrl x2, x26, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B1, AA, 2F", "amocas.d.aqrl x2, x26, [X(21)]");
}

#[test]
fn amocas_d_rl_74() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.rl x6, x12, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B3, C1, 2A", "amocas.d.rl x6, x12, [X(3)]");
}

#[test]
fn amocas_d_rl_75() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.d.rl X(28), X(0), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BE, 0D, 2A", "amocas.d.rl X(28), X(0), [X(27)]");
}

#[test]
fn amocas_h_76() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h x6, x29, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, D1, 29", "amocas.h x6, x29, [x2]");
}

#[test]
fn amocas_h_77() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h x12, X(26), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, A6, 29", "amocas.h x12, X(26), [x13]");
}

#[test]
fn amocas_h_aq_78() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aq X(21), X(13), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9A, D0, 2C", "amocas.h.aq X(21), X(13), [x1]");
}

#[test]
fn amocas_h_aq_79() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aq x0, X(4), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 90, 48, 2C", "amocas.h.aq x0, X(4), [x17]");
}

#[test]
fn amocas_h_aqrl_80() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aqrl x15, x6, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 17, 61, 2E", "amocas.h.aqrl x15, x6, [X(2)]");
}

#[test]
fn amocas_h_aqrl_81() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.aqrl X(11), X(1), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 15, 17, 2E", "amocas.h.aqrl X(11), X(1), [x14]");
}

#[test]
fn amocas_h_rl_82() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.rl X(19), x0, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 99, 0E, 2A", "amocas.h.rl X(19), x0, [X(29)]");
}

#[test]
fn amocas_h_rl_83() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha_zacas
        ; amocas.h.rl X(9), X(5), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, 54, 2A", "amocas.h.rl X(9), X(5), [x8]");
}

#[test]
fn amocas_w_84() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w x19, x10, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A9, AD, 28", "amocas.w x19, x10, [X(27)]");
}

#[test]
fn amocas_w_85() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w x31, X(24), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2F, 89, 29", "amocas.w x31, X(24), [x18]");
}

#[test]
fn amocas_w_aq_86() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aq x13, X(3), [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, 38, 2C", "amocas.w.aq x13, X(3), [X(16)]");
}

#[test]
fn amocas_w_aq_87() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aq X(26), X(19), [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, 3A, 2D", "amocas.w.aq X(26), X(19), [X(20)]");
}

#[test]
fn amocas_w_aqrl_88() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aqrl X(25), x0, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 04, 2E", "amocas.w.aqrl X(25), x0, [X(9)]");
}

#[test]
fn amocas_w_aqrl_89() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.aqrl X(28), X(29), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AE, D0, 2F", "amocas.w.aqrl X(28), X(29), [x1]");
}

#[test]
fn amocas_w_rl_90() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.rl X(3), X(27), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A1, B9, 2B", "amocas.w.rl X(3), X(27), [X(19)]");
}

#[test]
fn amocas_w_rl_91() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zacas
        ; amocas.w.rl X(21), x2, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AA, 21, 2A", "amocas.w.rl X(21), x2, [x3]");
}

#[test]
fn amomax_b_92() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b X(10), X(0), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, 03, A0", "amomax.b X(10), X(0), [X(6)]");
}

#[test]
fn amomax_b_93() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b x12, X(16), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 06, 04, A1", "amomax.b x12, X(16), [X(8)]");
}

#[test]
fn amomax_b_aq_94() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aq x28, X(30), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, EB, A5", "amomax.b.aq x28, X(30), [X(22)]");
}

#[test]
fn amomax_b_aq_95() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aq x16, X(5), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 88, 57, A4", "amomax.b.aq x16, X(5), [X(15)]");
}

#[test]
fn amomax_b_aqrl_96() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aqrl X(19), x21, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 89, 51, A7", "amomax.b.aqrl X(19), x21, [X(3)]");
}

#[test]
fn amomax_b_aqrl_97() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.aqrl x7, X(3), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 03, 30, A6", "amomax.b.aqrl x7, X(3), [x0]");
}

#[test]
fn amomax_b_rl_98() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.rl x16, X(26), [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 88, A1, A3", "amomax.b.rl x16, X(26), [X(3)]");
}

#[test]
fn amomax_b_rl_99() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.b.rl x12, X(14), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, E7, A2", "amomax.b.rl x12, X(14), [x15]");
}

#[test]
fn amomax_h_100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h X(31), X(22), [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1F, 6A, A1", "amomax.h X(31), X(22), [X(20)]");
}

#[test]
fn amomax_h_101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h X(24), x30, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9C, E1, A1", "amomax.h X(24), x30, [x3]");
}

#[test]
fn amomax_h_aq_102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aq x26, X(21), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9D, 57, A5", "amomax.h.aq x26, X(21), [X(15)]");
}

#[test]
fn amomax_h_aq_103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aq x20, X(9), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9A, 95, A4", "amomax.h.aq x20, X(9), [X(11)]");
}

#[test]
fn amomax_h_aqrl_104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aqrl x24, x28, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9C, CB, A7", "amomax.h.aqrl x24, x28, [x23]");
}

#[test]
fn amomax_h_aqrl_105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.aqrl x4, X(2), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, 20, A6", "amomax.h.aqrl x4, X(2), [X(0)]");
}

#[test]
fn amomax_h_rl_106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.rl X(13), x14, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, EB, A2", "amomax.h.rl X(13), x14, [x23]");
}

#[test]
fn amomax_h_rl_107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomax.h.rl x2, X(27), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, BA, A3", "amomax.h.rl x2, X(27), [x21]");
}

#[test]
fn amomax_w_108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w X(29), X(7), [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2E, 7D, A0", "amomax.w X(29), X(7), [x26]");
}

#[test]
fn amomax_w_109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w X(9), X(12), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, C5, A0", "amomax.w X(9), X(12), [x10]");
}

#[test]
fn amomax_w_aq_110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aq x0, X(1), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, 13, A4", "amomax.w.aq x0, X(1), [X(6)]");
}

#[test]
fn amomax_w_aq_111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aq x8, x25, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 24, 96, A5", "amomax.w.aq x8, x25, [x12]");
}

#[test]
fn amomax_w_aqrl_112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aqrl X(17), X(13), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, D5, A6", "amomax.w.aqrl X(17), X(13), [x10]");
}

#[test]
fn amomax_w_aqrl_113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.aqrl X(27), x28, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, C2, A7", "amomax.w.aqrl X(27), x28, [X(5)]");
}

#[test]
fn amomax_w_rl_114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.rl x21, X(7), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AA, 78, A2", "amomax.w.rl x21, X(7), [x17]");
}

#[test]
fn amomax_w_rl_115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomax.w.rl X(7), X(6), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 6A, A2", "amomax.w.rl X(7), X(6), [x21]");
}

#[test]
fn amomaxu_b_116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b X(1), X(19), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 35, E1", "amomaxu.b X(1), X(19), [x10]");
}

#[test]
fn amomaxu_b_117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b x7, X(15), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 03, F0, E0", "amomaxu.b x7, X(15), [X(0)]");
}

#[test]
fn amomaxu_b_aq_118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aq X(3), X(24), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 81, 85, E5", "amomaxu.b.aq X(3), X(24), [X(11)]");
}

#[test]
fn amomaxu_b_aq_119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aq x0, x2, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 80, 24, E4", "amomaxu.b.aq x0, x2, [X(9)]");
}

#[test]
fn amomaxu_b_aqrl_120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aqrl x16, X(19), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 08, 39, E7", "amomaxu.b.aqrl x16, X(19), [X(18)]");
}

#[test]
fn amomaxu_b_aqrl_121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.aqrl x16, x1, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 88, 12, E6", "amomaxu.b.aqrl x16, x1, [X(5)]");
}

#[test]
fn amomaxu_b_rl_122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.rl X(14), X(24), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 07, 80, E3", "amomaxu.b.rl X(14), X(24), [x0]");
}

#[test]
fn amomaxu_b_rl_123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.b.rl X(27), x10, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8D, A3, E2", "amomaxu.b.rl X(27), x10, [X(7)]");
}

#[test]
fn amomaxu_h_124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h x23, X(1), [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9B, 1C, E0", "amomaxu.h x23, X(1), [X(25)]");
}

#[test]
fn amomaxu_h_125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h X(31), X(29), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1F, D6, E1", "amomaxu.h X(31), X(29), [x12]");
}

#[test]
fn amomaxu_h_aq_126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aq x17, X(29), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 98, D7, E5", "amomaxu.h.aq x17, X(29), [X(15)]");
}

#[test]
fn amomaxu_h_aq_127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aq X(22), X(3), [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, 32, E4", "amomaxu.h.aq X(22), X(3), [X(4)]");
}

#[test]
fn amomaxu_h_aqrl_128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aqrl x8, X(19), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 14, 34, E7", "amomaxu.h.aqrl x8, X(19), [x8]");
}

#[test]
fn amomaxu_h_aqrl_129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.aqrl x4, X(15), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, F0, E6", "amomaxu.h.aqrl x4, X(15), [X(0)]");
}

#[test]
fn amomaxu_h_rl_130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.rl x7, X(22), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 93, 6A, E3", "amomaxu.h.rl x7, X(22), [x21]");
}

#[test]
fn amomaxu_h_rl_131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomaxu.h.rl X(6), x1, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, 1A, E2", "amomaxu.h.rl X(6), x1, [X(21)]");
}

#[test]
fn amomaxu_w_132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w x14, x21, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 56, E1", "amomaxu.w x14, x21, [X(13)]");
}

#[test]
fn amomaxu_w_133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w x15, X(8), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 89, E0", "amomaxu.w x15, X(8), [x19]");
}

#[test]
fn amomaxu_w_aq_134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aq X(5), x18, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 22, 27, E5", "amomaxu.w.aq X(5), x18, [x14]");
}

#[test]
fn amomaxu_w_aq_135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aq x12, x6, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, 65, E4", "amomaxu.w.aq x12, x6, [x10]");
}

#[test]
fn amomaxu_w_aqrl_136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aqrl x21, X(18), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2A, 28, E7", "amomaxu.w.aqrl x21, X(18), [x16]");
}

#[test]
fn amomaxu_w_aqrl_137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.aqrl x11, x2, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A5, 22, E6", "amomaxu.w.aqrl x11, x2, [x5]");
}

#[test]
fn amomaxu_w_rl_138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.rl x7, X(26), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, A9, E3", "amomaxu.w.rl x7, X(26), [X(19)]");
}

#[test]
fn amomaxu_w_rl_139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomaxu.w.rl X(11), X(23), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 71, E3", "amomaxu.w.rl X(11), X(23), [x2]");
}

#[test]
fn amomin_b_140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b X(26), x27, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8D, B5, 81", "amomin.b X(26), x27, [x11]");
}

#[test]
fn amomin_b_141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b x6, X(31), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, FE, 81", "amomin.b x6, X(31), [x29]");
}

#[test]
fn amomin_b_aq_142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aq X(12), X(31), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, FA, 85", "amomin.b.aq X(12), X(31), [x21]");
}

#[test]
fn amomin_b_aq_143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aq X(6), X(30), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, E2, 85", "amomin.b.aq X(6), X(30), [x5]");
}

#[test]
fn amomin_b_aqrl_144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aqrl X(14), x27, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 07, B3, 87", "amomin.b.aqrl X(14), x27, [X(6)]");
}

#[test]
fn amomin_b_aqrl_145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.aqrl X(17), x14, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 08, E2, 86", "amomin.b.aqrl X(17), x14, [x4]");
}

#[test]
fn amomin_b_rl_146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.rl X(7), x29, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, D3, 83", "amomin.b.rl X(7), x29, [x7]");
}

#[test]
fn amomin_b_rl_147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.b.rl X(14), x18, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 87, 2D, 83", "amomin.b.rl X(14), x18, [x27]");
}

#[test]
fn amomin_h_148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h x26, X(24), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9D, 8B, 81", "amomin.h x26, X(24), [x23]");
}

#[test]
fn amomin_h_149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h X(10), x4, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, 46, 80", "amomin.h X(10), x4, [x13]");
}

#[test]
fn amomin_h_aq_150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aq x3, X(13), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 91, D5, 84", "amomin.h.aq x3, X(13), [X(11)]");
}

#[test]
fn amomin_h_aq_151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aq x25, X(10), [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9C, AC, 84", "amomin.h.aq x25, X(10), [X(25)]");
}

#[test]
fn amomin_h_aqrl_152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aqrl X(21), x12, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9A, C2, 86", "amomin.h.aqrl X(21), x12, [X(5)]");
}

#[test]
fn amomin_h_aqrl_153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.aqrl x9, X(7), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 94, 7C, 86", "amomin.h.aqrl x9, X(7), [x25]");
}

#[test]
fn amomin_h_rl_154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.rl X(14), X(5), [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, 5F, 82", "amomin.h.rl X(14), X(5), [X(31)]");
}

#[test]
fn amomin_h_rl_155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amomin.h.rl x17, x8, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 18, 8E, 82", "amomin.h.rl x17, x8, [X(28)]");
}

#[test]
fn amomin_w_156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w x9, X(23), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, 74, 81", "amomin.w x9, X(23), [x8]");
}

#[test]
fn amomin_w_157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w x5, X(2), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 22, 20, 80", "amomin.w x5, X(2), [X(0)]");
}

#[test]
fn amomin_w_aq_158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aq X(21), x20, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AA, 4D, 85", "amomin.w.aq X(21), x20, [x27]");
}

#[test]
fn amomin_w_aq_159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aq x23, X(27), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, B0, 85", "amomin.w.aq x23, X(27), [x0]");
}

#[test]
fn amomin_w_aqrl_160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aqrl X(1), X(24), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, 8B, 87", "amomin.w.aqrl X(1), X(24), [X(23)]");
}

#[test]
fn amomin_w_aqrl_161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.aqrl X(5), X(13), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A2, D3, 86", "amomin.w.aqrl X(5), X(13), [x7]");
}

#[test]
fn amomin_w_rl_162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.rl X(1), X(18), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, 24, 83", "amomin.w.rl X(1), X(18), [x9]");
}

#[test]
fn amomin_w_rl_163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amomin.w.rl x19, X(9), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A9, 9D, 82", "amomin.w.rl x19, X(9), [X(27)]");
}

#[test]
fn amominu_b_164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b X(16), x19, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 08, 3B, C1", "amominu.b X(16), x19, [x22]");
}

#[test]
fn amominu_b_165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b X(23), X(15), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0B, F5, C0", "amominu.b X(23), X(15), [X(10)]");
}

#[test]
fn amominu_b_aq_166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aq x4, x17, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 02, 17, C5", "amominu.b.aq x4, x17, [x14]");
}

#[test]
fn amominu_b_aq_167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aq X(3), x11, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 01, B9, C4", "amominu.b.aq X(3), x11, [x18]");
}

#[test]
fn amominu_b_aqrl_168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aqrl x5, x5, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 82, 55, C6", "amominu.b.aqrl x5, x5, [x11]");
}

#[test]
fn amominu_b_aqrl_169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.aqrl X(1), X(7), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 80, 73, C6", "amominu.b.aqrl X(1), X(7), [x7]");
}

#[test]
fn amominu_b_rl_170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.rl x13, x11, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, B0, C2", "amominu.b.rl x13, x11, [x0]");
}

#[test]
fn amominu_b_rl_171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.b.rl x1, X(2), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 2D, C2", "amominu.b.rl x1, X(2), [X(26)]");
}

#[test]
fn amominu_h_172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h X(24), x21, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, 52, C1", "amominu.h X(24), x21, [x4]");
}

#[test]
fn amominu_h_173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h X(13), X(20), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, 4E, C1", "amominu.h X(13), X(20), [x29]");
}

#[test]
fn amominu_h_aq_174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aq x12, x3, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 96, 3E, C4", "amominu.h.aq x12, x3, [x29]");
}

#[test]
fn amominu_h_aq_175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aq X(28), x23, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9E, 71, C5", "amominu.h.aq X(28), x23, [x3]");
}

#[test]
fn amominu_h_aqrl_176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aqrl x19, X(30), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, E7, C7", "amominu.h.aqrl x19, X(30), [X(14)]");
}

#[test]
fn amominu_h_aqrl_177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.aqrl X(3), x1, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 11, 15, C6", "amominu.h.aqrl X(3), x1, [X(10)]");
}

#[test]
fn amominu_h_rl_178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.rl x6, x15, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 13, FA, C2", "amominu.h.rl x6, x15, [x20]");
}

#[test]
fn amominu_h_rl_179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amominu.h.rl x0, X(22), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 10, 6A, C3", "amominu.h.rl x0, X(22), [x20]");
}

#[test]
fn amominu_w_180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w x28, x21, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, 50, C1", "amominu.w x28, x21, [X(0)]");
}

#[test]
fn amominu_w_181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w X(11), x6, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A5, 68, C0", "amominu.w X(11), x6, [X(17)]");
}

#[test]
fn amominu_w_aq_182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aq X(26), x25, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 9E, C5", "amominu.w.aq X(26), x25, [X(29)]");
}

#[test]
fn amominu_w_aq_183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aq X(17), x23, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, 73, C5", "amominu.w.aq X(17), x23, [x7]");
}

#[test]
fn amominu_w_aqrl_184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aqrl X(12), X(30), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, EA, C7", "amominu.w.aqrl X(12), X(30), [x21]");
}

#[test]
fn amominu_w_aqrl_185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.aqrl X(27), x8, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 80, C6", "amominu.w.aqrl X(27), x8, [X(1)]");
}

#[test]
fn amominu_w_rl_186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.rl X(15), x24, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 85, C3", "amominu.w.rl X(15), x24, [x11]");
}

#[test]
fn amominu_w_rl_187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amominu.w.rl x26, X(31), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, F6, C3", "amominu.w.rl x26, X(31), [X(12)]");
}

#[test]
fn amoor_b_188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b x6, X(3), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 03, 36, 40", "amoor.b x6, X(3), [X(12)]");
}

#[test]
fn amoor_b_189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b x25, x1, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0C, 1A, 40", "amoor.b x25, x1, [X(20)]");
}

#[test]
fn amoor_b_aq_190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aq X(0), x20, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 00, 43, 45", "amoor.b.aq X(0), x20, [x6]");
}

#[test]
fn amoor_b_aq_191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aq x29, x24, [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8E, 89, 45", "amoor.b.aq x29, x24, [X(19)]");
}

#[test]
fn amoor_b_aqrl_192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aqrl x16, x11, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 88, BA, 46", "amoor.b.aqrl x16, x11, [x21]");
}

#[test]
fn amoor_b_aqrl_193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.aqrl x4, X(30), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 02, E3, 47", "amoor.b.aqrl x4, X(30), [X(6)]");
}

#[test]
fn amoor_b_rl_194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.rl x28, X(29), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, D7, 43", "amoor.b.rl x28, X(29), [X(14)]");
}

#[test]
fn amoor_b_rl_195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.b.rl X(10), x15, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, FC, 42", "amoor.b.rl X(10), x15, [X(24)]");
}

#[test]
fn amoor_h_196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h X(6), X(0), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, 0E, 40", "amoor.h X(6), X(0), [X(29)]");
}

#[test]
fn amoor_h_197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h x5, X(9), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 92, 98, 40", "amoor.h x5, X(9), [x17]");
}

#[test]
fn amoor_h_aq_198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aq X(8), X(23), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 14, 74, 45", "amoor.h.aq X(8), X(23), [x8]");
}

#[test]
fn amoor_h_aq_199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aq x1, X(0), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 0F, 44", "amoor.h.aq x1, X(0), [X(30)]");
}

#[test]
fn amoor_h_aqrl_200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aqrl X(24), x21, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9C, 56, 47", "amoor.h.aqrl X(24), x21, [x13]");
}

#[test]
fn amoor_h_aqrl_201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.aqrl X(30), x6, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1F, 64, 46", "amoor.h.aqrl X(30), x6, [X(8)]");
}

#[test]
fn amoor_h_rl_202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.rl x1, X(4), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 4B, 42", "amoor.h.rl x1, X(4), [X(22)]");
}

#[test]
fn amoor_h_rl_203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoor.h.rl x21, x22, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1A, 62, 43", "amoor.h.rl x21, x22, [x4]");
}

#[test]
fn amoor_w_204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w x8, X(26), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 24, A6, 41", "amoor.w x8, X(26), [x12]");
}

#[test]
fn amoor_w_205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w X(27), X(15), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, F3, 40", "amoor.w X(27), X(15), [x7]");
}

#[test]
fn amoor_w_aq_206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aq X(10), x11, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, BC, 44", "amoor.w.aq X(10), x11, [X(24)]");
}

#[test]
fn amoor_w_aq_207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aq x26, X(0), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, 0F, 44", "amoor.w.aq x26, X(0), [x30]");
}

#[test]
fn amoor_w_aqrl_208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aqrl X(23), X(6), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, 67, 46", "amoor.w.aqrl X(23), X(6), [x14]");
}

#[test]
fn amoor_w_aqrl_209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.aqrl X(9), X(1), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A4, 1E, 46", "amoor.w.aqrl X(9), X(1), [x29]");
}

#[test]
fn amoor_w_rl_210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.rl X(3), X(22), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A1, 6D, 43", "amoor.w.rl X(3), X(22), [X(27)]");
}

#[test]
fn amoor_w_rl_211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoor.w.rl x18, x23, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A9, 7E, 43", "amoor.w.rl x18, x23, [X(29)]");
}

#[test]
fn amoswap_b_212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b X(15), X(9), [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 87, 9C, 08", "amoswap.b X(15), X(9), [X(25)]");
}

#[test]
fn amoswap_b_213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b x19, x22, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 09, 6C, 09", "amoswap.b x19, x22, [x24]");
}

#[test]
fn amoswap_b_aq_214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aq x26, X(5), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, 50, 0C", "amoswap.b.aq x26, X(5), [x0]");
}

#[test]
fn amoswap_b_aq_215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aq x31, x11, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8F, B0, 0C", "amoswap.b.aq x31, x11, [x1]");
}

#[test]
fn amoswap_b_aqrl_216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aqrl x28, x31, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0E, F5, 0F", "amoswap.b.aqrl x28, x31, [X(10)]");
}

#[test]
fn amoswap_b_aqrl_217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.aqrl X(22), X(24), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, 85, 0F", "amoswap.b.aqrl X(22), X(24), [X(10)]");
}

#[test]
fn amoswap_b_rl_218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.rl x21, X(20), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8A, 4C, 0B", "amoswap.b.rl x21, X(20), [x25]");
}

#[test]
fn amoswap_b_rl_219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.b.rl X(29), x26, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8E, AD, 0B", "amoswap.b.rl X(29), x26, [x27]");
}

#[test]
fn amoswap_h_220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h x2, X(13), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, D6, 08", "amoswap.h x2, X(13), [x12]");
}

#[test]
fn amoswap_h_221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h X(27), x22, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1D, 65, 09", "amoswap.h X(27), x22, [x10]");
}

#[test]
fn amoswap_h_aq_222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aq x14, x23, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 17, 73, 0D", "amoswap.h.aq x14, x23, [x6]");
}

#[test]
fn amoswap_h_aq_223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aq x30, x28, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9F, CA, 0D", "amoswap.h.aq x30, x28, [X(21)]");
}

#[test]
fn amoswap_h_aqrl_224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aqrl X(17), x28, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 98, C3, 0F", "amoswap.h.aqrl X(17), x28, [X(7)]");
}

#[test]
fn amoswap_h_aqrl_225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.aqrl x1, X(30), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, EC, 0F", "amoswap.h.aqrl x1, X(30), [x24]");
}

#[test]
fn amoswap_h_rl_226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.rl x30, X(19), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1F, 3B, 0B", "amoswap.h.rl x30, X(19), [x22]");
}

#[test]
fn amoswap_h_rl_227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoswap.h.rl X(30), x2, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9F, 27, 0A", "amoswap.h.rl X(30), x2, [x15]");
}

#[test]
fn amoswap_w_228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w x29, X(0), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2E, 07, 08", "amoswap.w x29, X(0), [X(14)]");
}

#[test]
fn amoswap_w_229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w x10, X(26), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A5, A9, 09", "amoswap.w x10, X(26), [x19]");
}

#[test]
fn amoswap_w_aq_230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aq X(17), x8, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, 80, 0C", "amoswap.w.aq X(17), x8, [X(0)]");
}

#[test]
fn amoswap_w_aq_231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aq X(31), x9, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2F, 91, 0C", "amoswap.w.aq X(31), x9, [x2]");
}

#[test]
fn amoswap_w_aqrl_232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aqrl X(17), x16, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, 02, 0F", "amoswap.w.aqrl X(17), x16, [x4]");
}

#[test]
fn amoswap_w_aqrl_233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.aqrl X(14), X(16), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 27, 0D, 0F", "amoswap.w.aqrl X(14), X(16), [X(26)]");
}

#[test]
fn amoswap_w_rl_234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.rl X(20), X(29), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2A, D3, 0B", "amoswap.w.rl X(20), X(29), [x6]");
}

#[test]
fn amoswap_w_rl_235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoswap.w.rl X(24), x5, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AC, 5D, 0A", "amoswap.w.rl X(24), x5, [X(27)]");
}

#[test]
fn amoxor_b_236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b X(9), x9, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 84, 9A, 20", "amoxor.b X(9), x9, [x21]");
}

#[test]
fn amoxor_b_237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b x1, x12, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, C4, 20", "amoxor.b x1, x12, [X(8)]");
}

#[test]
fn amoxor_b_aq_238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aq X(26), x12, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, CD, 24", "amoxor.b.aq X(26), x12, [x26]");
}

#[test]
fn amoxor_b_aq_239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aq x15, X(20), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 87, 49, 25", "amoxor.b.aq x15, X(20), [X(19)]");
}

#[test]
fn amoxor_b_aqrl_240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aqrl x15, x11, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 87, B4, 26", "amoxor.b.aqrl x15, x11, [X(9)]");
}

#[test]
fn amoxor_b_aqrl_241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.aqrl X(13), x23, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, 7F, 27", "amoxor.b.aqrl X(13), x23, [x30]");
}

#[test]
fn amoxor_b_rl_242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.rl x13, x1, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, 18, 22", "amoxor.b.rl x13, x1, [x16]");
}

#[test]
fn amoxor_b_rl_243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.b.rl x29, x14, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8E, EC, 22", "amoxor.b.rl x29, x14, [x25]");
}

#[test]
fn amoxor_h_244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h x14, X(28), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, C1, 21", "amoxor.h x14, X(28), [x3]");
}

#[test]
fn amoxor_h_245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h X(19), X(9), [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, 92, 20", "amoxor.h X(19), X(9), [X(4)]");
}

#[test]
fn amoxor_h_aq_246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aq X(22), X(27), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9B, B4, 25", "amoxor.h.aq X(22), X(27), [x9]");
}

#[test]
fn amoxor_h_aq_247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aq X(20), X(23), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1A, 7F, 25", "amoxor.h.aq X(20), X(23), [X(30)]");
}

#[test]
fn amoxor_h_aqrl_248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aqrl X(19), x15, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, F5, 26", "amoxor.h.aqrl X(19), x15, [x10]");
}

#[test]
fn amoxor_h_aqrl_249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.aqrl x24, X(0), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, 09, 26", "amoxor.h.aqrl x24, X(0), [x18]");
}

#[test]
fn amoxor_h_rl_250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.rl x18, X(10), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 99, AE, 22", "amoxor.h.rl x18, X(10), [X(29)]");
}

#[test]
fn amoxor_h_rl_251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zabha
        ; amoxor.h.rl X(15), X(20), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 17, 4C, 23", "amoxor.h.rl X(15), X(20), [x24]");
}

#[test]
fn amoxor_w_252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w X(21), X(13), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2A, D9, 20", "amoxor.w X(21), X(13), [X(18)]");
}

#[test]
fn amoxor_w_253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w x31, X(18), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AF, 23, 21", "amoxor.w x31, X(18), [X(7)]");
}

#[test]
fn amoxor_w_aq_254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aq x11, X(6), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 63, 24", "amoxor.w.aq x11, X(6), [x6]");
}

#[test]
fn amoxor_w_aq_255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aq X(8), x25, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 24, 98, 25", "amoxor.w.aq X(8), x25, [x16]");
}

#[test]
fn amoxor_w_aqrl_256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aqrl X(27), X(21), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 59, 27", "amoxor.w.aqrl X(27), X(21), [X(19)]");
}

#[test]
fn amoxor_w_aqrl_257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.aqrl x27, x1, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 1B, 26", "amoxor.w.aqrl x27, x1, [X(23)]");
}

#[test]
fn amoxor_w_rl_258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.rl x22, X(26), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AB, A7, 23", "amoxor.w.rl x22, X(26), [x15]");
}

#[test]
fn amoxor_w_rl_259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; amoxor.w.rl X(24), X(22), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, 67, 23", "amoxor.w.rl X(24), X(22), [X(14)]");
}

#[test]
fn and_260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; and x11, x14, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 75, 47, 00", "and x11, x14, X(4)");
}

#[test]
fn and_261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; and x15, X(16), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 77, 28, 00", "and x15, X(16), X(2)");
}

#[test]
fn andi_262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; andi x27, X(12), 2027
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 7D, B6, 7E", "andi x27, X(12), 2027");
}

#[test]
fn andi_263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; andi X(24), X(27), 1722
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, FC, AD, 6B", "andi X(24), X(27), 1722");
}

#[test]
fn andn_264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; andn X(8), x1, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, F4, 20, 40", "andn X(8), x1, x2");
}

#[test]
fn andn_265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; andn x29, x2, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 7E, 81, 41", "andn x29, x2, X(24)");
}

#[test]
fn bclr_266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclr X(31), x2, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1F, 61, 49", "bclr X(31), x2, X(22)");
}

#[test]
fn bclr_267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclr X(0), X(23), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 90, CB, 48", "bclr X(0), X(23), x12");
}

#[test]
fn bclri_268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclri X(27), x20, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1D, 2A, 48", "bclri X(27), x20, 2");
}

#[test]
fn bclri_269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bclri X(13), X(0), 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 16, 30, 49", "bclri X(13), X(0), 19");
}

#[test]
fn beq_270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beq X(31), X(7), -1954
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 8F, 7F, 84", "beq X(31), X(7), -1954");
}

#[test]
fn beq_271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beq X(1), x17, 1080
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 8C, 10, 43", "beq X(1), x17, 1080");
}

#[test]
fn beqz_272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beqz X(8), -1934
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 09, 04, 86", "beqz X(8), -1934");
}

#[test]
fn beqz_273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; beqz x27, -1824
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 80, 0D, 8E", "beqz x27, -1824");
}

#[test]
fn bext_274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bext X(3), x31, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D1, 1F, 48", "bext X(3), x31, X(1)");
}

#[test]
fn bext_275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bext x16, X(21), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D8, 6A, 48", "bext x16, X(21), x6");
}

#[test]
fn bexti_276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bexti x20, X(6), 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5A, 93, 48", "bexti x20, X(6), 9");
}

#[test]
fn bexti_277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bexti x26, x2, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5D, A1, 48", "bexti x26, x2, 10");
}

#[test]
fn bge_278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bge x28, x0, 132
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 52, 0E, 08", "bge x28, x0, 132");
}

#[test]
fn bge_279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bge x10, x21, -1876
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 56, 55, 8B", "bge x10, x21, -1876");
}

#[test]
fn bgeu_280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgeu X(9), x1, 1802
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, F5, 14, 70", "bgeu X(9), x1, 1802");
}

#[test]
fn bgeu_281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgeu x4, x15, -372
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 76, F2, E8", "bgeu x4, x15, -372");
}

#[test]
fn bgez_282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgez x3, -1496
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, D4, 01, A2", "bgez x3, -1496");
}

#[test]
fn bgez_283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgez x25, 352
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D0, 0C, 16", "bgez x25, 352");
}

#[test]
fn bgt_284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgt X(9), x16, 598
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4B, 98, 24", "bgt X(9), x16, 598");
}

#[test]
fn bgt_285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgt x0, X(18), 1496
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4C, 09, 5C", "bgt x0, X(18), 1496");
}

#[test]
fn bgtu_286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtu X(10), x23, -472
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, E4, AB, E2", "bgtu X(10), x23, -472");
}

#[test]
fn bgtu_287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtu X(14), X(2), -798
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 61, E1, CE", "bgtu X(14), X(2), -798");
}

#[test]
fn bgtz_288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtz X(30), 1980
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4E, E0, 7B", "bgtz X(30), 1980");
}

#[test]
fn bgtz_289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bgtz x28, 1214
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4F, C0, 4B", "bgtz x28, 1214");
}

#[test]
fn binv_290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binv x27, X(25), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 9D, 7C, 68", "binv x27, X(25), x7");
}

#[test]
fn binv_291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binv x2, x21, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 91, CA, 69", "binv x2, x21, X(28)");
}

#[test]
fn binvi_292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binvi x5, X(15), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 92, 07, 68", "binvi x5, X(15), 0");
}

#[test]
fn binvi_293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; binvi X(9), x27, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 94, 1D, 69", "binvi X(9), x27, 17");
}

#[test]
fn ble_294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ble x6, X(27), -1884
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, D2, 6D, 8A", "ble x6, X(27), -1884");
}

#[test]
fn ble_295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ble X(12), X(29), 336
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D8, CE, 14", "ble X(12), X(29), 336");
}

#[test]
fn bleu_296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bleu X(20), X(20), 1070
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 77, 4A, 43", "bleu X(20), X(20), 1070");
}

#[test]
fn bleu_297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bleu x0, x25, -1412
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, FE, 0C, A6", "bleu x0, x25, -1412");
}

#[test]
fn blez_298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blez x10, 974
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 57, A0, 3C", "blez x10, 974");
}

#[test]
fn blez_299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blez X(12), 1190
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 53, C0, 4A", "blez X(12), 1190");
}

#[test]
fn blt_300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blt X(16), X(15), 186
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4D, F8, 0A", "blt X(16), X(15), 186");
}

#[test]
fn blt_301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; blt X(16), x30, 1466
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 4D, E8, 5B", "blt X(16), x30, 1466");
}

#[test]
fn bltu_302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltu X(30), X(3), -1840
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 68, 3F, 8C", "bltu X(30), X(3), -1840");
}

#[test]
fn bltu_303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltu x21, X(26), 720
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, E8, AA, 2D", "bltu x21, X(26), 720");
}

#[test]
fn bltz_304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltz x26, -560
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 48, 0D, DC", "bltz x26, -560");
}

#[test]
fn bltz_305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bltz X(17), 1142
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, CB, 08, 46", "bltz X(17), 1142");
}

#[test]
fn bne_306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bne x21, X(4), 1438
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 9F, 4A, 58", "bne x21, X(4), 1438");
}

#[test]
fn bne_307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bne X(11), x28, 110
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 97, C5, 07", "bne X(11), x28, 110");
}

#[test]
fn bnez_308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bnez X(22), 758
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 1B, 0B, 2E", "bnez X(22), 758");
}

#[test]
fn bnez_309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; bnez X(10), 1830
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 13, 05, 72", "bnez X(10), 1830");
}

#[test]
fn brev8_310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkb
        ; brev8 X(12), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D6, 7F, 68", "brev8 X(12), X(31)");
}

#[test]
fn brev8_311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; brev8 x11, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, D5, 75, 68", "brev8 x11, X(11)");
}

#[test]
fn bset_312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bset x21, x19, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 9A, 49, 29", "bset x21, x19, X(20)");
}

#[test]
fn bset_313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bset x0, X(22), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 10, 9B, 28", "bset x0, X(22), x9");
}

#[test]
fn bseti_314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bseti X(30), X(26), 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 9D, 28", "bseti X(30), X(26), 9");
}

#[test]
fn bseti_315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbs
        ; bseti x13, X(11), 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 96, 95, 28", "bseti x13, X(11), 9");
}

#[test]
fn c_add_316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.add X(8), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 94", "c.add X(8), x28");
}

#[test]
fn c_add_317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.add x17, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, 98", "c.add x17, x19");
}

#[test]
fn c_addi_318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi x3, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 01", "c.addi x3, 17");
}

#[test]
fn c_addi_319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi x1, 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B9, 00", "c.addi x1, 14");
}

#[test]
fn c_addi16sp_320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi16sp x2, -288
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 71", "c.addi16sp x2, -288");
}

#[test]
fn c_addi16sp_321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi16sp x2, -512
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 71", "c.addi16sp x2, -512");
}

#[test]
fn c_addi4spn_322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi4spn X(9), x2, 116
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 18", "c.addi4spn X(9), x2, 116");
}

#[test]
fn c_addi4spn_323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.addi4spn X(10), x2, 460
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 03", "c.addi4spn X(10), x2, 460");
}

#[test]
fn c_and_324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.and X(14), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 8F", "c.and X(14), X(11)");
}

#[test]
fn c_and_325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.and x15, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 8F", "c.and x15, X(15)");
}

#[test]
fn c_andi_326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.andi x10, -4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 99", "c.andi x10, -4");
}

#[test]
fn c_andi_327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.andi x9, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 88", "c.andi x9, 16");
}

#[test]
fn c_beqz_328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.beqz x10, -236
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, D9", "c.beqz x10, -236");
}

#[test]
fn c_beqz_329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.beqz X(9), -220
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, D0", "c.beqz X(9), -220");
}

#[test]
fn c_bnez_330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.bnez x14, 204
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, E7", "c.bnez x14, 204");
}

#[test]
fn c_bnez_331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.bnez X(9), -110
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, F8", "c.bnez X(9), -110");
}

#[test]
fn c_ebreak_332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_ebreak_333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_fld_334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fld F(12), [x12, 72]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 26", "c.fld F(12), [x12, 72]");
}

#[test]
fn c_fld_335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fld f14, [X(13), 192]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 22", "c.fld f14, [X(13), 192]");
}

#[test]
fn c_fldsp_336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fldsp f31, [sp, 320]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 2F", "c.fldsp f31, [sp, 320]");
}

#[test]
fn c_fldsp_337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fldsp F(0), [sp, 16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 20", "c.fldsp F(0), [sp, 16]");
}

#[test]
fn c_flw_338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flw F(11), [X(11), 92]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 6D", "c.flw F(11), [X(11), 92]");
}

#[test]
fn c_flw_339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flw F(14), [x8, 76]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 64", "c.flw F(14), [x8, 76]");
}

#[test]
fn c_flwsp_340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flwsp f24, [sp, 104]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 7C", "c.flwsp f24, [sp, 104]");
}

#[test]
fn c_flwsp_341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.flwsp f3, [sp, 4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 61", "c.flwsp f3, [sp, 4]");
}

#[test]
fn c_fsd_342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsd f14, [x8, 240]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, B8", "c.fsd f14, [x8, 240]");
}

#[test]
fn c_fsd_343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsd f9, [X(10), 168]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, B5", "c.fsd f9, [X(10), 168]");
}

#[test]
fn c_fsdsp_344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsdsp f29, [sp, 64]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, A0", "c.fsdsp f29, [sp, 64]");
}

#[test]
fn c_fsdsp_345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cd
        ; c.fsdsp F(8), [sp, 176]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, B9", "c.fsdsp F(8), [sp, 176]");
}

#[test]
fn c_fsw_346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fsw F(15), [X(10), 60]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, FD", "c.fsw F(15), [X(10), 60]");
}

#[test]
fn c_fsw_347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fsw F(14), [x11, 8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, E5", "c.fsw F(14), [x11, 8]");
}

#[test]
fn c_fswsp_348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fswsp f20, [sp, 120]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, FC", "c.fswsp f20, [sp, 120]");
}

#[test]
fn c_fswsp_349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature cf
        ; c.fswsp F(7), [sp, 72]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, E4", "c.fswsp F(7), [sp, 72]");
}

#[test]
fn c_j_350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.j 492
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, A2", "c.j 492");
}

#[test]
fn c_j_351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.j -1490
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, B4", "c.j -1490");
}

#[test]
fn c_jal_352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jal 570
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 2C", "c.jal 570");
}

#[test]
fn c_jal_353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jal 150
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 28", "c.jal 150");
}

#[test]
fn c_jalr_354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jalr X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 94", "c.jalr X(8)");
}

#[test]
fn c_jalr_355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jalr x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 97", "c.jalr x14");
}

#[test]
fn c_jr_356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jr x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 8F", "c.jr x30");
}

#[test]
fn c_jr_357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.jr X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 8A", "c.jr X(21)");
}

#[test]
fn c_lbu_358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lbu x15, [X(8), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 80", "c.lbu x15, [X(8), 2]");
}

#[test]
fn c_lbu_359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lbu X(8), [X(10), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 81", "c.lbu X(8), [X(10), 2]");
}

#[test]
fn c_lh_360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lh x15, [x12, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 86", "c.lh x15, [x12, 0]");
}

#[test]
fn c_lh_361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lh X(13), [x15, 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F4, 87", "c.lh X(13), [x15, 2]");
}

#[test]
fn c_lhu_362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lhu x10, [x14, 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "28, 87", "c.lhu x10, [x14, 2]");
}

#[test]
fn c_lhu_363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.lhu x12, [x10, 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 85", "c.lhu x12, [x10, 2]");
}

#[test]
fn c_li_364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.li x25, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 4C", "c.li x25, 7");
}

#[test]
fn c_li_365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.li x28, -25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1D, 5E", "c.li x28, -25");
}

#[test]
fn c_lw_366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lw x8, [x8, 28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 4C", "c.lw x8, [x8, 28]");
}

#[test]
fn c_lw_367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lw X(13), [X(11), 80]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 49", "c.lw X(13), [X(11), 80]");
}

#[test]
fn c_lwsp_368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lwsp X(2), [sp, 132]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 41", "c.lwsp X(2), [sp, 132]");
}

#[test]
fn c_lwsp_369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.lwsp X(24), [sp, 144]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 4C", "c.lwsp X(24), [sp, 144]");
}

#[test]
fn c_mop_1_370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_1_371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_11_372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_11_373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_13_374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_13_375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_15_376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_15_377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_3_378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_3_379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_5_380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_5_381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_7_382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_7_383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_9_384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_9_385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_n_386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.N 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.N 1");
}

#[test]
fn c_mop_n_387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop
        ; c.mop.N 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.N 1");
}

#[test]
fn c_mul_388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature mzcb
        ; c.mul x8, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 9C", "c.mul x8, X(8)");
}

#[test]
fn c_mul_389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature mzcb
        ; c.mul X(13), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 9E", "c.mul X(13), X(10)");
}

#[test]
fn c_mv_390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.mv x16, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1A, 88", "c.mv x16, X(6)");
}

#[test]
fn c_mv_391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.mv X(20), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 8A", "c.mv X(20), X(28)");
}

#[test]
fn c_nop_392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_nop_393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_not_394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.not X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 9C", "c.not X(9)");
}

#[test]
fn c_not_395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.not X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 9D", "c.not X(10)");
}

#[test]
fn c_ntl_all_396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_all_397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_p1_398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_p1_399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_pall_400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_pall_401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_s1_402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_ntl_s1_403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_or_404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.or x8, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 8C", "c.or x8, x8");
}

#[test]
fn c_or_405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.or X(15), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, 8F", "c.or X(15), X(15)");
}

#[test]
fn c_sb_406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.sb x10, [x14, 1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 8B", "c.sb x10, [x14, 1]");
}

#[test]
fn c_sb_407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.sb X(15), [X(9), 3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FC, 88", "c.sb X(15), [X(9), 3]");
}

#[test]
fn c_sext_b_408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.b x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 9F", "c.sext.b x15");
}

#[test]
fn c_sext_b_409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.b X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 9C", "c.sext.b X(9)");
}

#[test]
fn c_sext_h_410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.h X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 9F", "c.sext.h X(15)");
}

#[test]
fn c_sext_h_411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sext.h x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 9E", "c.sext.h x13");
}

#[test]
fn c_sh_412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sh x15, [x9, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 8C", "c.sh x15, [x9, 0]");
}

#[test]
fn c_sh_413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.sh x8, [x15, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 8F", "c.sh x8, [x15, 0]");
}

#[test]
fn c_slli_414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.slli x10, 22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 05", "c.slli x10, 22");
}

#[test]
fn c_slli_415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.slli x17, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 08", "c.slli x17, 8");
}

#[test]
fn c_srai_416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srai X(13), 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 86", "c.srai X(13), 15");
}

#[test]
fn c_srai_417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srai X(11), 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 85", "c.srai X(11), 17");
}

#[test]
fn c_srli_418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srli x9, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 80", "c.srli x9, 19");
}

#[test]
fn c_srli_419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.srli x15, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 83", "c.srli x15, 31");
}

#[test]
fn c_sspopchk_420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspopchk_421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspush_422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sspush_423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sub_424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sub x14, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, 8F", "c.sub x14, X(13)");
}

#[test]
fn c_sub_425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sub X(14), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 8F", "c.sub X(14), X(9)");
}

#[test]
fn c_sw_426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sw X(9), [x15, 12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, C7", "c.sw X(9), [x15, 12]");
}

#[test]
fn c_sw_427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.sw X(11), [x10, 16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, C9", "c.sw X(11), [x10, 16]");
}

#[test]
fn c_swsp_428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.swsp x18, [sp, 116]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, DA", "c.swsp x18, [sp, 116]");
}

#[test]
fn c_swsp_429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.swsp x19, [sp, 100]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CE, D2", "c.swsp x19, [sp, 100]");
}

#[test]
fn c_unimp_430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00", "c.unimp");
}

#[test]
fn c_unimp_431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00", "c.unimp");
}

#[test]
fn c_xor_432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.xor x9, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 8C", "c.xor x9, x8");
}

#[test]
fn c_xor_433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature c
        ; c.xor x12, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 8E", "c.xor x12, x12");
}

#[test]
fn c_zext_b_434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.zext.b x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 9C", "c.zext.b x9");
}

#[test]
fn c_zext_b_435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcb
        ; c.zext.b X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 9F", "c.zext.b X(14)");
}

#[test]
fn c_zext_h_436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.zext.h x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 9F", "c.zext.h x15");
}

#[test]
fn c_zext_h_437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb_zcb
        ; c.zext.h x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 9F", "c.zext.h x15");
}

#[test]
fn call_438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; call 1212118168
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 70, 3F, 48, E7, 80, 80, 49", "call 1212118168");
}

#[test]
fn call_439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; call -590717763
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 60, CA, DC, E7, 80, D0, CB", "call -590717763");
}

#[test]
fn cbo_clean_440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.clean [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 1E, 00", "cbo.clean [x29]");
}

#[test]
fn cbo_clean_441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.clean [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 15, 00", "cbo.clean [X(10)]");
}

#[test]
fn cbo_flush_442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.flush [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 2D, 00", "cbo.flush [X(27)]");
}

#[test]
fn cbo_flush_443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.flush [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 26, 00", "cbo.flush [X(13)]");
}

#[test]
fn cbo_inval_444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.inval [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 09, 00", "cbo.inval [X(19)]");
}

#[test]
fn cbo_inval_445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbom
        ; cbo.inval [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 02, 00", "cbo.inval [X(4)]");
}

#[test]
fn cbo_zero_446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicboz
        ; cbo.zero [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 47, 00", "cbo.zero [X(14)]");
}

#[test]
fn cbo_zero_447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicboz
        ; cbo.zero [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 42, 00", "cbo.zero [X(4)]");
}

#[test]
fn clmul_448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkc
        ; clmul x11, X(2), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 15, 31, 0A", "clmul x11, X(2), X(3)");
}

#[test]
fn clmul_449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmul x9, X(3), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 94, F1, 0A", "clmul x9, X(3), X(15)");
}

#[test]
fn clmulh_450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; clmulh x15, X(29), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, B7, FE, 0B", "clmulh x15, X(29), X(31)");
}

#[test]
fn clmulh_451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulh X(5), X(20), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 32, 8A, 0A", "clmulh X(5), X(20), x8");
}

#[test]
fn clmulr_452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulr X(21), x10, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 2A, 25, 0A", "clmulr X(21), x10, x2");
}

#[test]
fn clmulr_453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbc
        ; clmulr x0, x17, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A0, 88, 0A", "clmulr x0, x17, x8");
}

#[test]
fn clz_454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; clz X(16), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 98, 07, 60", "clz X(16), X(15)");
}

#[test]
fn clz_455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; clz X(9), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 94, 07, 60", "clz X(9), X(15)");
}

#[test]
fn cm_jalt_456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jalt 200
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, A3", "cm.jalt 200");
}

#[test]
fn cm_jalt_457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jalt 202
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, A3", "cm.jalt 202");
}

#[test]
fn cm_jt_458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jt 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, A0", "cm.jt 15");
}

#[test]
fn cm_jt_459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmt
        ; cm.jt 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, A0", "cm.jt 28");
}

#[test]
fn cm_mva01s_460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mva01s X(8), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, AC", "cm.mva01s X(8), X(19)");
}

#[test]
fn cm_mva01s_461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mva01s x9, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, AC", "cm.mva01s x9, x21");
}

#[test]
fn cm_mvsa01_462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mvsa01 X(18), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, AD", "cm.mvsa01 X(18), x20");
}

#[test]
fn cm_mvsa01_463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.mvsa01 x9, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, AC", "cm.mvsa01 x9, x20");
}

#[test]
fn cm_pop_464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.pop {ra, s0-s7}, 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, BA", "cm.pop {{ra, s0-s7}}, 64");
}

#[test]
fn cm_pop_465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.pop {ra, s0}, 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, BA", "cm.pop {{ra, s0}}, 48");
}

#[test]
fn cm_popret_466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popret {ra, s0-s3}, 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, BE", "cm.popret {{ra, s0-s3}}, 48");
}

#[test]
fn cm_popret_467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popret {ra, s0-s5}, 32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, BE", "cm.popret {{ra, s0-s5}}, 32");
}

#[test]
fn cm_popretz_468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popretz {ra, s0-s11}, 96
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, BC", "cm.popretz {{ra, s0-s11}}, 96");
}

#[test]
fn cm_popretz_469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.popretz {ra; 2}, 64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, BC", "cm.popretz {{ra; 2}}, 64");
}

#[test]
fn cm_push_470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.push {ra; 0}, -64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, B8", "cm.push {{ra; 0}}, -64");
}

#[test]
fn cm_push_471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zcmp
        ; cm.push {ra, s0-s3}, -80
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, B8", "cm.push {{ra, s0-s3}}, -80");
}

#[test]
fn cpop_472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; cpop X(18), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 99, 25, 60", "cpop X(18), x11");
}

#[test]
fn cpop_473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; cpop x7, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 13, 23, 60", "cpop x7, x6");
}

#[test]
fn csrc_474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrc 3, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 30, 36, 00", "csrc 3, x12");
}

#[test]
fn csrc_475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrc time, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 30, 1D, C0", "csrc time, x26");
}

#[test]
fn csrci_476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrci 3088, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, F0, 03, C1", "csrci 3088, 7");
}

#[test]
fn csrci_477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrci hpmcounter12, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 70, C3, C0", "csrci hpmcounter12, 6");
}

#[test]
fn csrr_478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrr X(19), ssp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 29, 10, 01", "csrr X(19), ssp");
}

#[test]
fn csrr_479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrr x29, hpmcounter15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2E, F0, C0", "csrr x29, hpmcounter15");
}

#[test]
fn csrrc_480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrc X(5), 3103, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 32, F8, C1", "csrrc X(5), 3103, x16");
}

#[test]
fn csrrc_481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrc x10, 3103, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 35, FA, C1", "csrrc x10, 3103, X(20)");
}

#[test]
fn csrrci_482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrci X(15), hpmcounter7, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, F7, 78, C0", "csrrci X(15), hpmcounter7, 17");
}

#[test]
fn csrrci_483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrci x16, hpmcounter3, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, F8, 35, C0", "csrrci x16, hpmcounter3, 11");
}

#[test]
fn csrrs_484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrs X(12), 23, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 26, 7C, 01", "csrrs X(12), 23, x24");
}

#[test]
fn csrrs_485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrs x19, 1, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 29, 12, 00", "csrrs x19, 1, x4");
}

#[test]
fn csrrsi_486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrsi x9, 9, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, E4, 90, 00", "csrrsi x9, 9, 1");
}

#[test]
fn csrrsi_487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrsi x27, hpmcounter22, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, ED, 69, C1", "csrrsi x27, hpmcounter22, 19");
}

#[test]
fn csrrw_488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrw X(1), 3090, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 10, 2E, C1", "csrrw X(1), 3090, x28");
}

#[test]
fn csrrw_489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrw x0, hpmcounter7, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 90, 72, C0", "csrrw x0, hpmcounter7, X(5)");
}

#[test]
fn csrrwi_490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrwi x7, hpmcounter29, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 53, D9, C1", "csrrwi x7, hpmcounter29, 18");
}

#[test]
fn csrrwi_491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrrwi X(12), vstart, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 56, 8D, 00", "csrrwi X(12), vstart, 26");
}

#[test]
fn csrs_492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrs 3084, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 20, C8, C0", "csrs 3084, X(16)");
}

#[test]
fn csrs_493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrs 8, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 20, 8C, 00", "csrs 8, x24");
}

#[test]
fn csrsi_494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrsi vxrm, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 60, AA, 00", "csrsi vxrm, 20");
}

#[test]
fn csrsi_495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrsi hpmcounter6, 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, E0, 6B, C0", "csrsi hpmcounter6, 23");
}

#[test]
fn csrw_496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrw hpmcounter19, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 39, C1", "csrw hpmcounter19, x18");
}

#[test]
fn csrw_497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrw fcsr, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 3E, 00", "csrw fcsr, x28");
}

#[test]
fn csrwi_498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrwi hpmcounter4, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, D0, 40, C0", "csrwi hpmcounter4, 1");
}

#[test]
fn csrwi_499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicsr
        ; csrwi hpmcounter29, 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, D0, DE, C1", "csrwi hpmcounter29, 29");
}

#[test]
fn ctz_500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; ctz x13, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 96, 18, 60", "ctz x13, X(17)");
}

#[test]
fn ctz_501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; ctz x15, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 97, 13, 60", "ctz x15, X(7)");
}

#[test]
fn czero_eqz_502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.eqz X(9), x15, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D4, 77, 0F", "czero.eqz X(9), x15, x23");
}

#[test]
fn czero_eqz_503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.eqz x31, x25, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DF, 9C, 0E", "czero.eqz x31, x25, X(9)");
}

#[test]
fn czero_nez_504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.nez x13, x0, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 76, 20, 0F", "czero.nez x13, x0, X(18)");
}

#[test]
fn czero_nez_505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicond
        ; czero.nez x16, x25, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, F8, 5C, 0F", "czero.nez x16, x25, X(21)");
}

#[test]
fn div_506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; div x8, X(22), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 44, 0B, 02", "div x8, X(22), X(0)");
}

#[test]
fn div_507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; div X(8), X(24), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 44, 9C, 02", "div X(8), X(24), x9");
}

#[test]
fn divu_508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; divu x17, x0, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 58, E0, 03", "divu x17, x0, X(30)");
}

#[test]
fn divu_509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; divu x0, X(10), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 50, 55, 03", "divu x0, X(10), X(21)");
}

#[test]
fn ebreak_510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ebreak_511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ecall_512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn ecall_513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn fabs_d_514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fabs.d f23, f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 73, 22", "fabs.d f23, f7");
}

#[test]
fn fabs_d_515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fabs.d f17, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 94, 22", "fabs.d f17, F(9)");
}

#[test]
fn fabs_h_516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fabs.h F(25), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2C, 00, 24", "fabs.h F(25), f0");
}

#[test]
fn fabs_h_517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fabs.h f1, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 20, C6, 24", "fabs.h f1, F(12)");
}

#[test]
fn fabs_q_518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fabs.q f24, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AC, 10, 26", "fabs.q f24, F(1)");
}

#[test]
fn fabs_q_519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fabs.q f26, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, F7, 26", "fabs.q f26, f15");
}

#[test]
fn fabs_s_520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fabs.s f24, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2C, E7, 20", "fabs.s f24, F(14)");
}

#[test]
fn fabs_s_521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fabs.s F(25), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 31, 20", "fabs.s F(25), f3");
}

#[test]
fn fadd_d_522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d F(14), F(22), F(18), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 2B, 03", "fadd.d F(14), F(22), F(18), rtz");
}

#[test]
fn fadd_d_523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d f25, f15, F(9), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BC, 97, 02", "fadd.d f25, f15, F(9), rup");
}

#[test]
fn fadd_d_524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d F(15), F(23), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, CB, 02", "fadd.d F(15), F(23), f12");
}

#[test]
fn fadd_d_525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fadd.d F(27), F(21), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 2A, 02", "fadd.d F(27), F(21), F(2)");
}

#[test]
fn fadd_h_526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(3), F(15), f16, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, 07, 05", "fadd.h F(3), F(15), f16, rtz");
}

#[test]
fn fadd_h_527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(15), F(1), f4, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C7, 40, 04", "fadd.h F(15), F(1), f4, rmm");
}

#[test]
fn fadd_h_528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(12), F(27), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 6D, 05", "fadd.h F(12), F(27), f22");
}

#[test]
fn fadd_h_529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fadd.h F(13), F(3), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 61, 05", "fadd.h F(13), F(3), f22");
}

#[test]
fn fadd_q_530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f8, f29, f30, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B4, EE, 07", "fadd.q f8, f29, f30, rup");
}

#[test]
fn fadd_q_531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f30, f5, F(31), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CF, F2, 07", "fadd.q f30, f5, F(31), rmm");
}

#[test]
fn fadd_q_532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f28, F(29), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 3E, 07", "fadd.q f28, F(29), F(19)");
}

#[test]
fn fadd_q_533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fadd.q f9, f17, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, D8, 07", "fadd.q f9, f17, F(29)");
}

#[test]
fn fadd_s_534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(8), F(28), F(9), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 34, 9E, 00", "fadd.s F(8), F(28), F(9), rup");
}

#[test]
fn fadd_s_535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(0), f18, F(21), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 59, 01", "fadd.s F(0), f18, F(21), rne");
}

#[test]
fn fadd_s_536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s f6, f10, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 25, 00", "fadd.s f6, f10, F(2)");
}

#[test]
fn fadd_s_537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fadd.s F(2), f8, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, F4, 00", "fadd.s F(2), f8, f15");
}

#[test]
fn fclass_d_538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fclass.d X(1), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 10, 05, E2", "fclass.d X(1), F(10)");
}

#[test]
fn fclass_d_539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fclass.d x19, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 19, 04, E2", "fclass.d x19, f8");
}

#[test]
fn fclass_h_540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fclass.h x28, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9E, 0D, E4", "fclass.h x28, f27");
}

#[test]
fn fclass_h_541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fclass.h X(7), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 13, 03, E4", "fclass.h X(7), f6");
}

#[test]
fn fclass_q_542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fclass.q X(0), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 06, E6", "fclass.q X(0), f12");
}

#[test]
fn fclass_q_543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fclass.q x20, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, 01, E6", "fclass.q x20, F(3)");
}

#[test]
fn fclass_s_544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fclass.s x18, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 99, 06, E0", "fclass.s x18, f13");
}

#[test]
fn fclass_s_545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fclass.s x28, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1E, 04, E0", "fclass.s x28, F(8)");
}

#[test]
fn fcvt_bf16_s_546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s F(5), F(6), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 32, 83, 44", "fcvt.bf16.s F(5), F(6), rup");
}

#[test]
fn fcvt_bf16_s_547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s f19, f7, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 83, 44", "fcvt.bf16.s f19, f7, dyn");
}

#[test]
fn fcvt_bf16_s_548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s F(20), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 8F, 44", "fcvt.bf16.s F(20), F(30)");
}

#[test]
fn fcvt_bf16_s_549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.bf16.s F(27), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 8E, 44", "fcvt.bf16.s F(27), F(29)");
}

#[test]
fn fcvt_d_h_550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.d.h F(8), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 29, 42", "fcvt.d.h F(8), F(19)");
}

#[test]
fn fcvt_d_h_551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.d.h f23, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 24, 42", "fcvt.d.h f23, f9");
}

#[test]
fn fcvt_d_q_552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(14), f20, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 07, 3A, 42", "fcvt.d.q F(14), f20, rne");
}

#[test]
fn fcvt_d_q_553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(17), F(7), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 33, 42", "fcvt.d.q F(17), F(7), rdn");
}

#[test]
fn fcvt_d_q_554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q f11, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 3B, 42", "fcvt.d.q f11, F(22)");
}

#[test]
fn fcvt_d_q_555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.d.q F(23), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 33, 42", "fcvt.d.q F(23), F(7)");
}

#[test]
fn fcvt_d_s_556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.s F(24), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 04, 42", "fcvt.d.s F(24), f9");
}

#[test]
fn fcvt_d_s_557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.s F(6), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 0B, 42", "fcvt.d.s F(6), f22");
}

#[test]
fn fcvt_d_w_558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.w f2, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 04, D2", "fcvt.d.w f2, X(8)");
}

#[test]
fn fcvt_d_w_559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.w f20, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 06, D2", "fcvt.d.w f20, X(12)");
}

#[test]
fn fcvt_d_wu_560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.wu F(25), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0C, 1A, D2", "fcvt.d.wu F(25), x20");
}

#[test]
fn fcvt_d_wu_561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.d.wu f10, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 16, D2", "fcvt.d.wu f10, X(13)");
}

#[test]
fn fcvt_h_d_562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d f4, f2, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 11, 44", "fcvt.h.d f4, f2, dyn");
}

#[test]
fn fcvt_h_d_563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d f11, f25, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B5, 1C, 44", "fcvt.h.d f11, f25, rup");
}

#[test]
fn fcvt_h_d_564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d f5, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 1A, 44", "fcvt.h.d f5, f21");
}

#[test]
fn fcvt_h_d_565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfh
        ; fcvt.h.d F(5), f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 16, 44", "fcvt.h.d F(5), f13");
}

#[test]
fn fcvt_h_q_566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q F(14), f28, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 3E, 44", "fcvt.h.q F(14), f28, dyn");
}

#[test]
fn fcvt_h_q_567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q f14, f21, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 3A, 44", "fcvt.h.q f14, f21, rne");
}

#[test]
fn fcvt_h_q_568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q F(31), F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 37, 44", "fcvt.h.q F(31), F(15)");
}

#[test]
fn fcvt_h_q_569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.h.q f20, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 39, 44", "fcvt.h.q f20, F(18)");
}

#[test]
fn fcvt_h_s_570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s f11, F(18), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 45, 09, 44", "fcvt.h.s f11, F(18), rmm");
}

#[test]
fn fcvt_h_s_571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s f5, F(5), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C2, 02, 44", "fcvt.h.s f5, F(5), rmm");
}

#[test]
fn fcvt_h_s_572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s f20, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 0E, 44", "fcvt.h.s f20, f29");
}

#[test]
fn fcvt_h_s_573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.s F(13), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 0E, 44", "fcvt.h.s F(13), f29");
}

#[test]
fn fcvt_h_w_574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f17, x2, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 28, 01, D4", "fcvt.h.w f17, x2, rdn");
}

#[test]
fn fcvt_h_w_575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f10, X(16), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 35, 08, D4", "fcvt.h.w f10, X(16), rup");
}

#[test]
fn fcvt_h_w_576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f22, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 07, D4", "fcvt.h.w f22, x15");
}

#[test]
fn fcvt_h_w_577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.w f13, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 0F, D4", "fcvt.h.w f13, X(30)");
}

#[test]
fn fcvt_h_wu_578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(9), x26, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 24, 1D, D4", "fcvt.h.wu F(9), x26, rdn");
}

#[test]
fn fcvt_h_wu_579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu f26, x11, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 15, D4", "fcvt.h.wu f26, x11, dyn");
}

#[test]
fn fcvt_h_wu_580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(9), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 18, D4", "fcvt.h.wu F(9), x17");
}

#[test]
fn fcvt_h_wu_581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.h.wu F(9), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 13, D4", "fcvt.h.wu F(9), x6");
}

#[test]
fn fcvt_q_d_582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.d F(2), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 13, 46", "fcvt.q.d F(2), f6");
}

#[test]
fn fcvt_q_d_583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.d F(28), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, 18, 46", "fcvt.q.d F(28), F(17)");
}

#[test]
fn fcvt_q_h_584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.q.h F(31), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0F, 2B, 46", "fcvt.q.h F(31), F(22)");
}

#[test]
fn fcvt_q_h_585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfh
        ; fcvt.q.h f14, f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 07, 2C, 46", "fcvt.q.h f14, f24");
}

#[test]
fn fcvt_q_s_586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.s F(15), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 87, 05, 46", "fcvt.q.s F(15), F(11)");
}

#[test]
fn fcvt_q_s_587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.s F(7), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 83, 0F, 46", "fcvt.q.s F(7), F(31)");
}

#[test]
fn fcvt_q_w_588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.w f21, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 0B, D6", "fcvt.q.w f21, X(23)");
}

#[test]
fn fcvt_q_w_589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.w f26, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 0E, D6", "fcvt.q.w f26, X(29)");
}

#[test]
fn fcvt_q_wu_590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.wu f28, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 18, D6", "fcvt.q.wu f28, x16");
}

#[test]
fn fcvt_q_wu_591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.q.wu F(20), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 10, D6", "fcvt.q.wu F(20), x0");
}

#[test]
fn fcvt_s_bf16_592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.s.bf16 F(5), F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 68, 40", "fcvt.s.bf16 F(5), F(16)");
}

#[test]
fn fcvt_s_bf16_593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfbfmin
        ; fcvt.s.bf16 f26, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 61, 40", "fcvt.s.bf16 f26, f2");
}

#[test]
fn fcvt_s_d_594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d F(23), F(16), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4B, 18, 40", "fcvt.s.d F(23), F(16), rmm");
}

#[test]
fn fcvt_s_d_595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d F(6), f28, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 1E, 40", "fcvt.s.d F(6), f28, dyn");
}

#[test]
fn fcvt_s_d_596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f19, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 1D, 40", "fcvt.s.d f19, f26");
}

#[test]
fn fcvt_s_d_597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.s.d f25, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 18, 40", "fcvt.s.d f25, f17");
}

#[test]
fn fcvt_s_h_598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.s.h F(20), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8A, 21, 40", "fcvt.s.h F(20), F(3)");
}

#[test]
fn fcvt_s_h_599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.s.h f23, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 20, 40", "fcvt.s.h f23, f1");
}

#[test]
fn fcvt_s_q_600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q F(25), F(2), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, 31, 40", "fcvt.s.q F(25), F(2), rtz");
}

#[test]
fn fcvt_s_q_601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q F(3), F(13), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 36, 40", "fcvt.s.q F(3), F(13), dyn");
}

#[test]
fn fcvt_s_q_602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q F(14), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 38, 40", "fcvt.s.q F(14), f17");
}

#[test]
fn fcvt_s_q_603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.s.q F(2), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 3E, 40", "fcvt.s.q F(2), f29");
}

#[test]
fn fcvt_s_w_604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w f19, x29, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 0E, D0", "fcvt.s.w f19, x29, rne");
}

#[test]
fn fcvt_s_w_605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w F(2), x22, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 0B, D0", "fcvt.s.w F(2), x22, rne");
}

#[test]
fn fcvt_s_w_606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w F(17), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 04, D0", "fcvt.s.w F(17), x9");
}

#[test]
fn fcvt_s_w_607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.w f19, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 00, D0", "fcvt.s.w f19, x0");
}

#[test]
fn fcvt_s_wu_608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(1), X(5), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A0, 12, D0", "fcvt.s.wu F(1), X(5), rdn");
}

#[test]
fn fcvt_s_wu_609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(9), x1, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B4, 10, D0", "fcvt.s.wu F(9), x1, rup");
}

#[test]
fn fcvt_s_wu_610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu f6, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, 1B, D0", "fcvt.s.wu f6, X(23)");
}

#[test]
fn fcvt_s_wu_611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.s.wu F(22), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 12, D0", "fcvt.s.wu F(22), X(4)");
}

#[test]
fn fcvt_w_d_612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x20, F(7), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AA, 03, C2", "fcvt.w.d x20, F(7), rdn");
}

#[test]
fn fcvt_w_d_613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x19, f23, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 0B, C2", "fcvt.w.d x19, f23, rne");
}

#[test]
fn fcvt_w_d_614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d x2, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 09, C2", "fcvt.w.d x2, f18");
}

#[test]
fn fcvt_w_d_615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.w.d X(26), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 0C, C2", "fcvt.w.d X(26), F(25)");
}

#[test]
fn fcvt_w_h_616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h X(0), f27, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A0, 0D, C4", "fcvt.w.h X(0), f27, rdn");
}

#[test]
fn fcvt_w_h_617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h X(13), f4, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 02, C4", "fcvt.w.h X(13), f4, dyn");
}

#[test]
fn fcvt_w_h_618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h X(19), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 00, C4", "fcvt.w.h X(19), f1");
}

#[test]
fn fcvt_w_h_619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.w.h x23, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 0B, C4", "fcvt.w.h x23, F(23)");
}

#[test]
fn fcvt_w_q_620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q x22, f2, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4B, 01, C6", "fcvt.w.q x22, f2, rmm");
}

#[test]
fn fcvt_w_q_621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(17), f17, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 08, C6", "fcvt.w.q X(17), f17, rdn");
}

#[test]
fn fcvt_w_q_622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q X(30), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 06, C6", "fcvt.w.q X(30), F(12)");
}

#[test]
fn fcvt_w_q_623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.w.q x9, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 01, C6", "fcvt.w.q x9, f2");
}

#[test]
fn fcvt_w_s_624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s x3, F(15), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, 07, C0", "fcvt.w.s x3, F(15), rdn");
}

#[test]
fn fcvt_w_s_625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(21), F(16), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3A, 08, C0", "fcvt.w.s X(21), F(16), rup");
}

#[test]
fn fcvt_w_s_626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(18), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 0F, C0", "fcvt.w.s X(18), f31");
}

#[test]
fn fcvt_w_s_627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.w.s X(27), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 04, C0", "fcvt.w.s X(27), f8");
}

#[test]
fn fcvt_wu_d_628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x10, F(29), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 1E, C2", "fcvt.wu.d x10, F(29), rne");
}

#[test]
fn fcvt_wu_d_629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x4, F(2), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 32, 11, C2", "fcvt.wu.d x4, F(2), rup");
}

#[test]
fn fcvt_wu_d_630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d X(7), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 1D, C2", "fcvt.wu.d X(7), f27");
}

#[test]
fn fcvt_wu_d_631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fcvt.wu.d x9, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 18, C2", "fcvt.wu.d x9, F(17)");
}

#[test]
fn fcvt_wu_h_632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x1, f7, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 90, 13, C4", "fcvt.wu.h x1, f7, rtz");
}

#[test]
fn fcvt_wu_h_633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h X(15), f29, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A7, 1E, C4", "fcvt.wu.h X(15), f29, rdn");
}

#[test]
fn fcvt_wu_h_634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x28, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 15, C4", "fcvt.wu.h x28, F(10)");
}

#[test]
fn fcvt_wu_h_635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fcvt.wu.h x16, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 1A, C4", "fcvt.wu.h x16, F(20)");
}

#[test]
fn fcvt_wu_q_636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q x16, F(18), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 48, 19, C6", "fcvt.wu.q x16, F(18), rmm");
}

#[test]
fn fcvt_wu_q_637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q X(18), f1, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 10, C6", "fcvt.wu.q X(18), f1, dyn");
}

#[test]
fn fcvt_wu_q_638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q x7, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 14, C6", "fcvt.wu.q x7, f8");
}

#[test]
fn fcvt_wu_q_639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fcvt.wu.q x18, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 10, C6", "fcvt.wu.q x18, F(0)");
}

#[test]
fn fcvt_wu_s_640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(15), f26, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 47, 1D, C0", "fcvt.wu.s X(15), f26, rmm");
}

#[test]
fn fcvt_wu_s_641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s x22, f28, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2B, 1E, C0", "fcvt.wu.s x22, f28, rdn");
}

#[test]
fn fcvt_wu_s_642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(12), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 1E, C0", "fcvt.wu.s X(12), f29");
}

#[test]
fn fcvt_wu_s_643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fcvt.wu.s X(1), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 19, C0", "fcvt.wu.s X(1), f18");
}

#[test]
fn fcvtmod_w_d_644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fcvtmod.w.d x20, F(24), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1A, 8C, C2", "fcvtmod.w.d x20, F(24), rtz");
}

#[test]
fn fcvtmod_w_d_645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fcvtmod.w.d x20, f30, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1A, 8F, C2", "fcvtmod.w.d x20, f30, rtz");
}

#[test]
fn fdiv_d_646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f7, f13, f26, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B3, A6, 1B", "fdiv.d f7, f13, f26, rup");
}

#[test]
fn fdiv_d_647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d F(29), f28, F(28), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4E, CE, 1B", "fdiv.d F(29), f28, F(28), rmm");
}

#[test]
fn fdiv_d_648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d f18, F(6), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, B3, 1A", "fdiv.d f18, F(6), F(11)");
}

#[test]
fn fdiv_d_649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fdiv.d F(20), F(3), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 51, 1B", "fdiv.d F(20), F(3), F(21)");
}

#[test]
fn fdiv_h_650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f25, F(16), F(11), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, B8, 1C", "fdiv.h f25, F(16), F(11), rtz");
}

#[test]
fn fdiv_h_651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f28, f3, F(9), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CE, 91, 1C", "fdiv.h f28, f3, F(9), rmm");
}

#[test]
fn fdiv_h_652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h F(14), F(22), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 9B, 1D", "fdiv.h F(14), F(22), F(25)");
}

#[test]
fn fdiv_h_653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fdiv.h f23, F(22), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 4B, 1C", "fdiv.h f23, F(22), f4");
}

#[test]
fn fdiv_q_654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(4), f23, f16, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B2, 0B, 1F", "fdiv.q F(4), f23, f16, rup");
}

#[test]
fn fdiv_q_655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q f8, f13, F(12), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, C6, 1E", "fdiv.q f8, f13, F(12), rne");
}

#[test]
fn fdiv_q_656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q F(9), F(0), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, F0, 1F", "fdiv.q F(9), F(0), F(31)");
}

#[test]
fn fdiv_q_657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fdiv.q f12, F(4), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, E2, 1F", "fdiv.q f12, F(4), F(30)");
}

#[test]
fn fdiv_s_658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s f15, F(7), f1, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 97, 13, 18", "fdiv.s f15, F(7), f1, rtz");
}

#[test]
fn fdiv_s_659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(27), f24, F(27), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2D, BC, 19", "fdiv.s F(27), f24, F(27), rdn");
}

#[test]
fn fdiv_s_660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s F(1), f14, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, D7, 18", "fdiv.s F(1), f14, F(13)");
}

#[test]
fn fdiv_s_661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fdiv.s f3, F(8), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 71, B4, 18", "fdiv.s f3, F(8), F(11)");
}

#[test]
fn fence_662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence w, ow
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 50, 01", "fence w, ow");
}

#[test]
fn fence_663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence or, io
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, C0, 06", "fence or, io");
}

#[test]
fn fence_664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_i_666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_i_667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_tso_668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn fence_tso_669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn feq_d_670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; feq.d X(25), F(21), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 2A, A2", "feq.d X(25), F(21), F(2)");
}

#[test]
fn feq_d_671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; feq.d X(19), F(2), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 29, 61, A3", "feq.d X(19), F(2), f22");
}

#[test]
fn feq_h_672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; feq.h X(12), F(0), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 26, 60, A5", "feq.h X(12), F(0), F(22)");
}

#[test]
fn feq_h_673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; feq.h X(31), F(8), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2F, 84, A4", "feq.h X(31), F(8), f8");
}

#[test]
fn feq_q_674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; feq.q x2, f25, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, BC, A7", "feq.q x2, f25, f27");
}

#[test]
fn feq_q_675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; feq.q x21, F(10), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, 65, A6", "feq.q x21, F(10), F(6)");
}

#[test]
fn feq_s_676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; feq.s x24, f0, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2C, C0, A1", "feq.s x24, f0, f28");
}

#[test]
fn feq_s_677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; feq.s X(21), f1, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 30, A1", "feq.s X(21), f1, f19");
}

#[test]
fn fld_678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld F(20), [X(2), 274]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 3A, 21, 11", "fld F(20), [X(2), 274]");
}

#[test]
fn fld_679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld F(14), [x30, -775]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 37, 9F, CF", "fld F(14), [x30, -775]");
}

#[test]
fn fld_680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld f31, -1978934247, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E9, 0B, 8A, 87, 3F, 99, C1", "fld f31, -1978934247, X(18)");
}

#[test]
fn fld_681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fld f2, 1908767987, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 87, C5, 71, 07, 31, 37, CF", "fld f2, 1908767987, X(14)");
}

#[test]
fn fle_d_682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fle.d x16, f4, f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 82, A3", "fle.d x16, f4, f24");
}

#[test]
fn fle_d_683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fle.d x18, F(5), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 89, 82, A2", "fle.d x18, F(5), f8");
}

#[test]
fn fle_h_684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fle.h x30, f7, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8F, 23, A5", "fle.h x30, f7, f18");
}

#[test]
fn fle_h_685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fle.h X(11), f10, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 05, 35, A4", "fle.h X(11), f10, f3");
}

#[test]
fn fle_q_686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fle.q x0, f4, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, A2, A7", "fle.q x0, f4, F(26)");
}

#[test]
fn fle_q_687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fle.q X(18), f14, F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 47, A6", "fle.q X(18), f14, F(4)");
}

#[test]
fn fle_s_688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fle.s x15, F(12), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 07, E6, A1", "fle.s x15, F(12), f30");
}

#[test]
fn fle_s_689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fle.s X(3), f6, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 93, A1", "fle.s X(3), f6, f25");
}

#[test]
fn fleq_d_690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fleq.d x2, f29, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C1, AE, A2", "fleq.d x2, f29, F(10)");
}

#[test]
fn fleq_d_691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fleq.d x30, f27, f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CF, 7D, A2", "fleq.d x30, f27, f7");
}

#[test]
fn fleq_h_692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fleq.h x10, F(1), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C5, 50, A5", "fleq.h x10, F(1), f21");
}

#[test]
fn fleq_h_693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fleq.h x0, F(17), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C0, 88, A4", "fleq.h x0, F(17), f8");
}

#[test]
fn fleq_q_694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fleq.q x24, f24, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4C, AC, A7", "fleq.q x24, f24, f26");
}

#[test]
fn fleq_q_695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fleq.q X(19), f16, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 49, 18, A6", "fleq.q X(19), f16, F(1)");
}

#[test]
fn fleq_s_696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fleq.s X(11), f28, F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 45, 8E, A1", "fleq.s X(11), f28, F(24)");
}

#[test]
fn fleq_s_697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fleq.s x0, F(5), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C0, C2, A0", "fleq.s x0, F(5), f12");
}

#[test]
fn flh_698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flh f22, [X(16), -941]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 1B, 38, C5", "flh f22, [X(16), -941]");
}

#[test]
fn flh_699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flh f28, [X(0), -104]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 1E, 80, F9", "flh f28, [X(0), -104]");
}

#[test]
fn flh_700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flh f11, 984605112, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, E7, AF, 3A, 87, 95, 87, 1B", "flh f11, 984605112, X(15)");
}

#[test]
fn flh_701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flh f3, 1263320366, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, C8, 4C, 4B, 87, 91, E8, D2", "flh f3, 1263320366, X(17)");
}

#[test]
fn fli_d_702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fli.d F(20), 0.625
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8A, 16, F2", "fli.d F(20), 0.625");
}

#[test]
fn fli_d_703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fli.d f18, 1.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 18, F2", "fli.d f18, 1.0");
}

#[test]
fn fli_h_704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fli.h F(23), 0.875
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 17, F4", "fli.h F(23), 0.875");
}

#[test]
fn fli_h_705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fli.h f5, nan
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 82, 1F, F4", "fli.h f5, nan");
}

#[test]
fn fli_q_706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fli.q F(24), 0.3125
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 14, F6", "fli.q F(24), 0.3125");
}

#[test]
fn fli_q_707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fli.q F(10), 0.375
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 15, F6", "fli.q F(10), 0.375");
}

#[test]
fn fli_s_708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fli.s f19, 0.75
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 09, 17, F0", "fli.s f19, 0.75");
}

#[test]
fn fli_s_709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fli.s F(27), 2.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 1A, F0", "fli.s F(27), 2.5");
}

#[test]
fn flq_710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flq f19, [X(25), 87]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, C9, 7C, 05", "flq f19, [X(25), 87]");
}

#[test]
fn flq_711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flq f2, [x1, -524]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, C1, 40, DF", "flq f2, [x1, -524]");
}

#[test]
fn flq_712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flq F(22), -1356234933, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 8A, 29, AF, 07, 4B, BA, F4", "flq F(22), -1356234933, X(20)");
}

#[test]
fn flq_713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flq f28, -1069555309, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E1, 3F, C0, 07, 4E, 31, 19", "flq f28, -1069555309, x2");
}

#[test]
fn flt_d_714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; flt.d X(12), F(10), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 16, 95, A2", "flt.d X(12), F(10), F(9)");
}

#[test]
fn flt_d_715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; flt.d X(12), f8, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 16, D4, A2", "flt.d X(12), f8, F(13)");
}

#[test]
fn flt_h_716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flt.h X(0), f28, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, AE, A4", "flt.h X(0), f28, f10");
}

#[test]
fn flt_h_717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; flt.h X(11), F(31), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 95, 8F, A4", "flt.h X(11), F(31), f8");
}

#[test]
fn flt_q_718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flt.q x14, f29, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 3E, A6", "flt.q x14, f29, f3");
}

#[test]
fn flt_q_719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; flt.q X(17), f14, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 18, 07, A7", "flt.q X(17), f14, F(16)");
}

#[test]
fn flt_s_720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flt.s X(3), F(30), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 1F, A0", "flt.s X(3), F(30), F(1)");
}

#[test]
fn flt_s_721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flt.s X(21), f15, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9A, D7, A1", "flt.s X(21), f15, F(29)");
}

#[test]
fn fltq_d_722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fltq.d X(19), F(16), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 59, B8, A3", "fltq.d X(19), F(16), F(27)");
}

#[test]
fn fltq_d_723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fltq.d x26, f9, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, DD, 94, A2", "fltq.d x26, f9, F(9)");
}

#[test]
fn fltq_h_724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fltq.h x10, f9, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D5, 04, A5", "fltq.h x10, f9, f16");
}

#[test]
fn fltq_h_725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fltq.h x27, F(2), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 5D, 01, A4", "fltq.h x27, F(2), f0");
}

#[test]
fn fltq_q_726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fltq.q x8, F(18), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 54, C9, A7", "fltq.q x8, F(18), f28");
}

#[test]
fn fltq_q_727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fltq.q X(0), f29, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D0, 5E, A7", "fltq.q X(0), f29, F(21)");
}

#[test]
fn fltq_s_728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fltq.s x5, f13, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D2, B6, A0", "fltq.s x5, f13, f11");
}

#[test]
fn fltq_s_729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fltq.s x25, F(19), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, DC, 49, A0", "fltq.s x25, F(19), F(4)");
}

#[test]
fn flw_730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flw f21, [x2, 520]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 2A, 81, 20", "flw f21, [x2, 520]");
}

#[test]
fn flw_731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flw F(3), [x9, 897]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, A1, 14, 38", "flw F(3), [x9, 897]");
}

#[test]
fn flw_732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flw F(20), -1973798233, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 44, 5A, 8A, 07, 2A, 74, AA", "flw F(20), -1973798233, x8");
}

#[test]
fn flw_733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; flw F(11), 1023970818, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 92, 08, 3D, 87, A5, 22, E0", "flw F(11), 1023970818, x5");
}

#[test]
fn fmadd_d_734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d f8, F(4), F(11), f23, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 44, B2, BA", "fmadd.d f8, F(4), F(11), f23, rmm");
}

#[test]
fn fmadd_d_735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d F(26), f4, f31, f9, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 1D, F2, 4B", "fmadd.d F(26), f4, f31, f9, rtz");
}

#[test]
fn fmadd_d_736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d F(0), F(18), f1, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 70, 19, F2", "fmadd.d F(0), F(18), f1, f30");
}

#[test]
fn fmadd_d_737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmadd.d f5, f18, F(14), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 72, E9, B2", "fmadd.d f5, f18, F(14), f22");
}

#[test]
fn fmadd_h_738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h f0, f24, F(8), f12, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 10, 8C, 64", "fmadd.h f0, f24, F(8), f12, rtz");
}

#[test]
fn fmadd_h_739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h f17, F(30), f4, f20, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 08, 4F, A4", "fmadd.h f17, F(30), f4, f20, rne");
}

#[test]
fn fmadd_h_740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h f24, F(4), f15, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7C, F2, FC", "fmadd.h f24, F(4), f15, F(31)");
}

#[test]
fn fmadd_h_741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmadd.h f22, f6, f1, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7B, 13, 44", "fmadd.h f22, f6, f1, F(8)");
}

#[test]
fn fmadd_q_742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q f19, f16, f20, f6, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 19, 48, 37", "fmadd.q f19, f16, f20, f6, rtz");
}

#[test]
fn fmadd_q_743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q F(4), f13, f2, f18, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, C2, 26, 96", "fmadd.q F(4), f13, f2, f18, rmm");
}

#[test]
fn fmadd_q_744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q F(15), F(24), f10, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 77, AC, F6", "fmadd.q F(15), F(24), f10, F(30)");
}

#[test]
fn fmadd_q_745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmadd.q F(27), f19, F(2), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, FD, 29, B6", "fmadd.q F(27), f19, F(2), f22");
}

#[test]
fn fmadd_s_746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s F(0), F(8), F(22), F(3), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 20, 64, 19", "fmadd.s F(0), F(8), F(22), F(3), rdn");
}

#[test]
fn fmadd_s_747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s F(22), F(13), f23, F(29), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, BB, 76, E9", "fmadd.s F(22), F(13), f23, F(29), rup");
}

#[test]
fn fmadd_s_748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s F(18), f27, F(18), f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F9, 2D, 69", "fmadd.s F(18), f27, F(18), f13");
}

#[test]
fn fmadd_s_749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmadd.s f3, f22, F(1), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 71, 1B, 38", "fmadd.s f3, f22, F(1), f7");
}

#[test]
fn fmax_d_750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmax.d F(16), F(20), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 18, 6A, 2A", "fmax.d F(16), F(20), f6");
}

#[test]
fn fmax_d_751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmax.d f14, f3, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, B1, 2A", "fmax.d f14, f3, f11");
}

#[test]
fn fmax_h_752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmax.h F(23), f21, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, BA, 2C", "fmax.h F(23), f21, f11");
}

#[test]
fn fmax_h_753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmax.h f29, F(25), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9E, 4C, 2D", "fmax.h f29, F(25), F(20)");
}

#[test]
fn fmax_q_754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmax.q F(31), F(28), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1F, CE, 2E", "fmax.q F(31), F(28), f12");
}

#[test]
fn fmax_q_755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmax.q F(1), f4, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 10, E2, 2F", "fmax.q F(1), f4, F(30)");
}

#[test]
fn fmax_s_756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmax.s f30, f18, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1F, F9, 28", "fmax.s f30, f18, f15");
}

#[test]
fn fmax_s_757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmax.s F(29), F(11), F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9E, 05, 29", "fmax.s F(29), F(11), F(16)");
}

#[test]
fn fmaxm_d_758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmaxm.d f30, f9, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BF, 54, 2B", "fmaxm.d f30, f9, F(21)");
}

#[test]
fn fmaxm_d_759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmaxm.d F(9), f28, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 34, EE, 2B", "fmaxm.d F(9), f28, f30");
}

#[test]
fn fmaxm_h_760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fmaxm.h f19, f10, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 39, B5, 2C", "fmaxm.h f19, f10, F(11)");
}

#[test]
fn fmaxm_h_761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fmaxm.h F(15), f8, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 37, 94, 2C", "fmaxm.h F(15), f8, F(9)");
}

#[test]
fn fmaxm_q_762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fmaxm.q F(14), f5, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B7, 32, 2F", "fmaxm.q F(14), f5, F(19)");
}

#[test]
fn fmaxm_q_763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fmaxm.q F(17), f21, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B8, CA, 2F", "fmaxm.q F(17), f21, f28");
}

#[test]
fn fmaxm_s_764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fmaxm.s F(3), F(24), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 31, AC, 29", "fmaxm.s F(3), F(24), f26");
}

#[test]
fn fmaxm_s_765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fmaxm.s F(5), f15, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B2, 17, 28", "fmaxm.s F(5), f15, f1");
}

#[test]
fn fmin_d_766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmin.d f25, f4, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0C, 32, 2B", "fmin.d f25, f4, F(19)");
}

#[test]
fn fmin_d_767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmin.d F(9), F(5), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 32, 2A", "fmin.d F(9), F(5), f3");
}

#[test]
fn fmin_h_768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmin.h F(16), F(16), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 88, 2D", "fmin.h F(16), F(16), F(24)");
}

#[test]
fn fmin_h_769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmin.h F(6), f15, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, E7, 2D", "fmin.h F(6), f15, f30");
}

#[test]
fn fmin_q_770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmin.q f6, f20, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, BA, 2F", "fmin.q f6, f20, f27");
}

#[test]
fn fmin_q_771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmin.q f2, f4, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 32, 2E", "fmin.q f2, f4, f3");
}

#[test]
fn fmin_s_772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmin.s f8, F(23), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 0B, 29", "fmin.s f8, F(23), f16");
}

#[test]
fn fmin_s_773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmin.s F(10), F(26), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 4D, 29", "fmin.s F(10), F(26), f20");
}

#[test]
fn fminm_d_774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fminm.d f30, f18, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2F, 19, 2A", "fminm.d f30, f18, f1");
}

#[test]
fn fminm_d_775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fminm.d F(2), F(16), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, 68, 2A", "fminm.d F(2), F(16), f6");
}

#[test]
fn fminm_h_776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fminm.h F(0), f14, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 20, E7, 2D", "fminm.h F(0), f14, F(30)");
}

#[test]
fn fminm_h_777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fminm.h f1, F(12), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 20, E6, 2D", "fminm.h f1, F(12), F(30)");
}

#[test]
fn fminm_q_778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fminm.q f19, f9, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, 84, 2E", "fminm.q f19, f9, F(8)");
}

#[test]
fn fminm_q_779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fminm.q f18, F(27), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A9, AD, 2F", "fminm.q f18, F(27), F(26)");
}

#[test]
fn fminm_s_780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fminm.s f4, F(13), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A2, A6, 29", "fminm.s f4, F(13), f26");
}

#[test]
fn fminm_s_781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fminm.s F(8), F(27), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A4, AD, 29", "fminm.s F(8), F(27), f26");
}

#[test]
fn fmsub_d_782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d F(18), f29, F(6), f7, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 99, 6E, 3A", "fmsub.d F(18), f29, F(6), f7, rtz");
}

#[test]
fn fmsub_d_783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d f1, F(24), F(6), f1, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 00, 6C, 0A", "fmsub.d f1, F(24), F(6), f1, rne");
}

#[test]
fn fmsub_d_784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d f7, F(14), F(9), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 73, 97, 52", "fmsub.d f7, F(14), F(9), F(10)");
}

#[test]
fn fmsub_d_785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmsub.d f17, f2, F(22), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 78, 61, 1B", "fmsub.d f17, f2, F(22), f3");
}

#[test]
fn fmsub_h_786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h f18, F(28), F(17), F(6), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 29, 1E, 35", "fmsub.h f18, F(28), F(17), F(6), rdn");
}

#[test]
fn fmsub_h_787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h f18, f30, F(11), f23, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 19, BF, BC", "fmsub.h f18, f30, F(11), f23, rtz");
}

#[test]
fn fmsub_h_788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h F(5), F(22), F(21), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 72, 5B, 35", "fmsub.h F(5), F(22), F(21), f6");
}

#[test]
fn fmsub_h_789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmsub.h F(1), F(7), F(21), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F0, 53, 65", "fmsub.h F(1), F(7), F(21), F(12)");
}

#[test]
fn fmsub_q_790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q f19, f6, F(16), f28, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 09, 03, E7", "fmsub.q f19, f6, F(16), f28, rne");
}

#[test]
fn fmsub_q_791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q f9, f23, f6, F(15), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 94, 6B, 7E", "fmsub.q f9, f23, f6, F(15), rtz");
}

#[test]
fn fmsub_q_792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q F(18), f11, F(6), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F9, 65, C6", "fmsub.q F(18), f11, F(6), F(24)");
}

#[test]
fn fmsub_q_793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmsub.q F(8), F(0), f18, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 74, 20, 17", "fmsub.q F(8), F(0), f18, F(2)");
}

#[test]
fn fmsub_s_794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s F(5), F(6), F(5), f27, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 02, 53, D8", "fmsub.s F(5), F(6), F(5), f27, rne");
}

#[test]
fn fmsub_s_795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s f10, F(24), f18, F(0), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 75, 2C, 01", "fmsub.s f10, F(24), f18, F(0), dyn");
}

#[test]
fn fmsub_s_796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s F(16), f20, f5, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 78, 5A, 40", "fmsub.s F(16), f20, f5, f8");
}

#[test]
fn fmsub_s_797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmsub.s f5, f3, F(20), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F2, 41, 89", "fmsub.s f5, f3, F(20), F(17)");
}

#[test]
fn fmul_d_798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d F(19), F(18), f29, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 29, D9, 13", "fmul.d F(19), F(18), f29, rdn");
}

#[test]
fn fmul_d_799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d f19, F(2), f16, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 39, 01, 13", "fmul.d f19, F(2), f16, rup");
}
