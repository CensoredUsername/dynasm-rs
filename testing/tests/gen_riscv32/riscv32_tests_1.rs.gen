
#[test]
fn fmul_d_800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d F(31), F(22), f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 5B, 12", "fmul.d F(31), F(22), f5");
}

#[test]
fn fmul_d_801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmul.d f23, f13, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 26, 12", "fmul.d f23, f13, F(2)");
}

#[test]
fn fmul_h_802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h F(0), F(12), f4, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 40, 46, 14", "fmul.h F(0), F(12), f4, rmm");
}

#[test]
fn fmul_h_803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h F(19), f16, F(31), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 09, F8, 15", "fmul.h F(19), f16, F(31), rne");
}

#[test]
fn fmul_h_804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h f26, f14, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 57, 15", "fmul.h f26, f14, F(21)");
}

#[test]
fn fmul_h_805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmul.h f21, F(15), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FA, E7, 14", "fmul.h f21, F(15), f14");
}

#[test]
fn fmul_q_806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q f7, f21, f9, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C3, 9A, 16", "fmul.q f7, f21, f9, rmm");
}

#[test]
fn fmul_q_807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q F(24), f2, f31, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3C, F1, 17", "fmul.q F(24), f2, f31, rup");
}

#[test]
fn fmul_q_808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q f17, F(2), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, 41, 17", "fmul.q f17, F(2), f20");
}

#[test]
fn fmul_q_809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmul.q F(29), F(6), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, C3, 16", "fmul.q F(29), F(6), F(12)");
}

#[test]
fn fmul_s_810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s f29, F(11), F(16), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CE, 05, 11", "fmul.s f29, F(11), F(16), rmm");
}

#[test]
fn fmul_s_811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s F(13), f0, f5, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 50, 10", "fmul.s F(13), f0, f5, dyn");
}

#[test]
fn fmul_s_812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s F(26), F(4), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 12, 11", "fmul.s F(26), F(4), F(17)");
}

#[test]
fn fmul_s_813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmul.s F(7), f5, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, A2, 11", "fmul.s F(7), f5, f26");
}

#[test]
fn fmv_d_814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmv.d F(14), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 5A, 23", "fmv.d F(14), F(21)");
}

#[test]
fn fmv_d_815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fmv.d F(28), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, C6, 22", "fmv.d F(28), f12");
}

#[test]
fn fmv_h_816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmv.h f11, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 10, 24", "fmv.h f11, f1");
}

#[test]
fn fmv_h_817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmv.h f27, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, 00, 24", "fmv.h f27, F(0)");
}

#[test]
fn fmv_h_x_818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmv.h.x f24, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 07, F4", "fmv.h.x f24, X(15)");
}

#[test]
fn fmv_h_x_819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmv.h.x F(9), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 07, F4", "fmv.h.x F(9), X(14)");
}

#[test]
fn fmv_q_820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmv.q f28, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 4A, 27", "fmv.q f28, F(20)");
}

#[test]
fn fmv_q_821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fmv.q f2, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 7B, 27", "fmv.q f2, F(23)");
}

#[test]
fn fmv_s_822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.s f1, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, EF, 21", "fmv.s f1, f30");
}

#[test]
fn fmv_s_823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.s f21, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 6B, 21", "fmv.s f21, F(22)");
}

#[test]
fn fmv_s_x_824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.s.x f8, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, 0F, F0", "fmv.s.x f8, X(30)");
}

#[test]
fn fmv_s_x_825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.s.x f31, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8F, 03, F0", "fmv.s.x f31, x7");
}

#[test]
fn fmv_w_x_826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.w.x f7, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, 0B, F0", "fmv.w.x f7, x22");
}

#[test]
fn fmv_w_x_827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.w.x F(10), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 0E, F0", "fmv.w.x F(10), x29");
}

#[test]
fn fmv_x_h_828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmv.x.h x11, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 05, 0D, E4", "fmv.x.h x11, F(26)");
}

#[test]
fn fmv_x_h_829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fmv.x.h X(19), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 00, E4", "fmv.x.h X(19), f1");
}

#[test]
fn fmv_x_s_830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.x.s x25, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0C, 0F, E0", "fmv.x.s x25, f30");
}

#[test]
fn fmv_x_s_831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.x.s x24, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0C, 00, E0", "fmv.x.s x24, F(0)");
}

#[test]
fn fmv_x_w_832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.x.w x28, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 08, E0", "fmv.x.w x28, F(16)");
}

#[test]
fn fmv_x_w_833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fmv.x.w X(21), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 0B, E0", "fmv.x.w X(21), F(23)");
}

#[test]
fn fmvh_x_d_834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmvh.x.d X(20), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 13, E2", "fmvh.x.d X(20), f6");
}

#[test]
fn fmvh_x_d_835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmvh.x.d x22, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, 15, E2", "fmvh.x.d x22, f10");
}

#[test]
fn fmvp_d_x_836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmvp.d.x F(9), x28, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 8E, B3", "fmvp.d.x F(9), x28, x24");
}

#[test]
fn fmvp_d_x_837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fmvp.d.x F(7), X(0), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, 70, B2", "fmvp.d.x F(7), X(0), x7");
}

#[test]
fn fneg_d_838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fneg.d F(22), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, 42, 22", "fneg.d F(22), F(4)");
}

#[test]
fn fneg_d_839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fneg.d F(26), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9D, FF, 23", "fneg.d F(26), F(31)");
}

#[test]
fn fneg_h_840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fneg.h F(18), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 19, 6B, 25", "fneg.h F(18), F(22)");
}

#[test]
fn fneg_h_841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fneg.h F(3), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 8C, 25", "fneg.h F(3), f24");
}

#[test]
fn fneg_q_842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fneg.q F(21), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9A, 7B, 27", "fneg.q F(21), F(23)");
}

#[test]
fn fneg_q_843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fneg.q f5, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 12, 00, 26", "fneg.q f5, F(0)");
}

#[test]
fn fneg_s_844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fneg.s F(21), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9A, B5, 20", "fneg.s F(21), F(11)");
}

#[test]
fn fneg_s_845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fneg.s F(6), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 13, CE, 21", "fneg.s F(6), F(28)");
}

#[test]
fn fnmadd_d_846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmadd.d f26, f6, F(9), F(15), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 2D, 93, 7A", "fnmadd.d f26, f6, F(9), F(15), rdn");
}

#[test]
fn fnmadd_d_847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmadd.d F(29), F(25), F(1), f17, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, BE, 1C, 8A", "fnmadd.d F(29), F(25), F(1), f17, rup");
}

#[test]
fn fnmadd_d_848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmadd.d f21, F(20), f16, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 7A, 0A, 7B", "fnmadd.d f21, F(20), f16, f15");
}

#[test]
fn fnmadd_d_849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmadd.d F(17), f8, f5, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 78, 54, 9A", "fnmadd.d F(17), f8, f5, f19");
}

#[test]
fn fnmadd_h_850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmadd.h f4, f4, F(0), f13, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 32, 02, 6C", "fnmadd.h f4, f4, F(0), f13, rup");
}

#[test]
fn fnmadd_h_851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmadd.h F(6), F(22), f19, F(3), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 33, 3B, 1D", "fnmadd.h F(6), F(22), f19, F(3), rup");
}

#[test]
fn fnmadd_h_852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmadd.h F(21), F(13), f21, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, FA, 56, E5", "fnmadd.h F(21), F(13), f21, F(28)");
}

#[test]
fn fnmadd_h_853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmadd.h f3, f22, f12, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 71, CB, 3C", "fnmadd.h f3, f22, f12, F(7)");
}

#[test]
fn fnmadd_q_854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmadd.q F(24), F(31), f1, f26, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, AC, 1F, D6", "fnmadd.q F(24), F(31), f1, f26, rdn");
}

#[test]
fn fnmadd_q_855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmadd.q f0, f4, f7, f15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 70, 72, 7E", "fnmadd.q f0, f4, f7, f15, dyn");
}

#[test]
fn fnmadd_q_856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmadd.q f10, f1, F(13), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F5, D0, 3E", "fnmadd.q f10, f1, F(13), f7");
}

#[test]
fn fnmadd_q_857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmadd.q F(27), f5, F(4), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, FD, 42, 36", "fnmadd.q F(27), f5, F(4), f6");
}

#[test]
fn fnmadd_s_858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmadd.s F(5), f15, F(3), F(2), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 92, 37, 10", "fnmadd.s F(5), f15, F(3), F(2), rtz");
}

#[test]
fn fnmadd_s_859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmadd.s f12, F(17), f5, F(20), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F6, 58, A0", "fnmadd.s f12, F(17), f5, F(20), dyn");
}

#[test]
fn fnmadd_s_860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmadd.s f24, F(29), F(10), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, FC, AE, 20", "fnmadd.s f24, F(29), F(10), f4");
}

#[test]
fn fnmadd_s_861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmadd.s f5, F(4), f6, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 72, 62, 20", "fnmadd.s f5, F(4), f6, f4");
}

#[test]
fn fnmsub_d_862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmsub.d F(10), F(19), F(17), f25, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 95, 19, CB", "fnmsub.d F(10), F(19), F(17), f25, rtz");
}

#[test]
fn fnmsub_d_863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmsub.d f23, f3, f21, F(26), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, CB, 51, D3", "fnmsub.d f23, f3, f21, F(26), rmm");
}

#[test]
fn fnmsub_d_864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmsub.d F(10), f18, F(18), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 75, 29, DB", "fnmsub.d F(10), f18, F(18), F(27)");
}

#[test]
fn fnmsub_d_865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fnmsub.d f9, f5, f16, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, F4, 02, 43", "fnmsub.d f9, f5, f16, F(8)");
}

#[test]
fn fnmsub_h_866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmsub.h f21, f19, f2, F(22), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 8A, 29, B4", "fnmsub.h f21, f19, f2, F(22), rne");
}

#[test]
fn fnmsub_h_867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmsub.h f2, F(13), F(11), F(31), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 91, B6, FC", "fnmsub.h f2, F(13), F(11), F(31), rtz");
}

#[test]
fn fnmsub_h_868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmsub.h F(12), f10, F(4), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 76, 45, 6C", "fnmsub.h F(12), f10, F(4), F(13)");
}

#[test]
fn fnmsub_h_869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fnmsub.h F(25), F(11), F(17), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FC, 15, 5D", "fnmsub.h F(25), F(11), F(17), f11");
}

#[test]
fn fnmsub_q_870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmsub.q f22, f13, f4, f0, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 9B, 46, 06", "fnmsub.q f22, f13, f4, f0, rtz");
}

#[test]
fn fnmsub_q_871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmsub.q f15, f6, F(21), F(13), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 07, 53, 6F", "fnmsub.q f15, f6, F(21), F(13), rne");
}

#[test]
fn fnmsub_q_872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmsub.q F(15), F(4), f20, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 77, 42, 37", "fnmsub.q F(15), F(4), f20, f6");
}

#[test]
fn fnmsub_q_873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fnmsub.q f7, F(6), F(21), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 73, 53, F7", "fnmsub.q f7, F(6), F(21), f30");
}

#[test]
fn fnmsub_s_874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmsub.s f15, f17, f11, f13, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, B7, B8, 68", "fnmsub.s f15, f17, f11, f13, rup");
}

#[test]
fn fnmsub_s_875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmsub.s F(21), f0, f16, f7, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 3A, 00, 39", "fnmsub.s F(21), f0, f16, f7, rup");
}

#[test]
fn fnmsub_s_876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmsub.s f9, f28, F(3), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 74, 3E, 10", "fnmsub.s f9, f28, F(3), f2");
}

#[test]
fn fnmsub_s_877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fnmsub.s F(21), f30, F(25), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 7A, 9F, 91", "fnmsub.s F(21), f30, F(25), f18");
}

#[test]
fn frcsr_878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; frcsr X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2D, 30, 00", "frcsr X(26)");
}

#[test]
fn frcsr_879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; frcsr X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 20, 30, 00", "frcsr X(1)");
}

#[test]
fn frflags_880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; frflags x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 23, 10, 00", "frflags x6");
}

#[test]
fn frflags_881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; frflags X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2B, 10, 00", "frflags X(22)");
}

#[test]
fn fround_d_882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fround.d f4, F(21), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 4A, 42", "fround.d f4, F(21), dyn");
}

#[test]
fn fround_d_883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fround.d f1, F(24), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 10, 4C, 42", "fround.d f1, F(24), rtz");
}

#[test]
fn fround_d_884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fround.d F(6), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, 46, 42", "fround.d F(6), F(13)");
}

#[test]
fn fround_d_885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; fround.d F(7), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 44, 42", "fround.d F(7), F(9)");
}

#[test]
fn fround_h_886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fround.h F(20), f7, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, 43, 44", "fround.h F(20), f7, rtz");
}

#[test]
fn fround_h_887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fround.h f1, F(4), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 30, 42, 44", "fround.h f1, F(4), rup");
}

#[test]
fn fround_h_888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fround.h f22, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 47, 44", "fround.h f22, F(15)");
}

#[test]
fn fround_h_889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; fround.h F(24), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 4A, 44", "fround.h F(24), f20");
}

#[test]
fn fround_q_890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fround.q F(27), f19, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CD, 49, 46", "fround.q F(27), f19, rmm");
}

#[test]
fn fround_q_891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fround.q f27, F(25), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 4C, 46", "fround.q f27, F(25), rne");
}

#[test]
fn fround_q_892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fround.q F(28), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 4B, 46", "fround.q F(28), F(23)");
}

#[test]
fn fround_q_893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; fround.q f31, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 45, 46", "fround.q f31, F(11)");
}

#[test]
fn fround_s_894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fround.s f23, F(17), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 48, 40", "fround.s f23, F(17), rne");
}

#[test]
fn fround_s_895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fround.s F(26), F(25), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9D, 4C, 40", "fround.s F(26), F(25), rtz");
}

#[test]
fn fround_s_896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fround.s f24, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 4D, 40", "fround.s f24, F(27)");
}

#[test]
fn fround_s_897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; fround.s f11, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 40, 40", "fround.s f11, f1");
}

#[test]
fn froundnx_d_898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; froundnx.d F(19), f10, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 55, 42", "froundnx.d F(19), f10, dyn");
}

#[test]
fn froundnx_d_899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; froundnx.d f3, F(3), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 51, 42", "froundnx.d f3, F(3), dyn");
}

#[test]
fn froundnx_d_900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; froundnx.d f11, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 5A, 42", "froundnx.d f11, F(21)");
}

#[test]
fn froundnx_d_901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature dzfa
        ; froundnx.d F(5), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 58, 42", "froundnx.d F(5), F(17)");
}

#[test]
fn froundnx_h_902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; froundnx.h F(2), f14, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 41, 57, 44", "froundnx.h F(2), f14, rmm");
}

#[test]
fn froundnx_h_903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; froundnx.h F(12), F(2), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 46, 51, 44", "froundnx.h F(12), F(2), rmm");
}

#[test]
fn froundnx_h_904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; froundnx.h f15, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 58, 44", "froundnx.h f15, f17");
}

#[test]
fn froundnx_h_905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfa_zfh
        ; froundnx.h f29, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 58, 44", "froundnx.h f29, F(16)");
}

#[test]
fn froundnx_q_906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; froundnx.q f0, F(10), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 20, 55, 46", "froundnx.q f0, F(10), rdn");
}

#[test]
fn froundnx_q_907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; froundnx.q f19, f20, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 49, 5A, 46", "froundnx.q f19, f20, rmm");
}

#[test]
fn froundnx_q_908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; froundnx.q f25, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 52, 46", "froundnx.q f25, F(5)");
}

#[test]
fn froundnx_q_909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature qzfa
        ; froundnx.q F(10), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 58, 46", "froundnx.q F(10), f16");
}

#[test]
fn froundnx_s_910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; froundnx.s f28, F(10), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2E, 55, 40", "froundnx.s f28, F(10), rdn");
}

#[test]
fn froundnx_s_911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; froundnx.s f3, F(8), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 54, 40", "froundnx.s f3, F(8), rtz");
}

#[test]
fn froundnx_s_912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; froundnx.s F(26), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 56, 40", "froundnx.s F(26), F(12)");
}

#[test]
fn froundnx_s_913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature fzfa
        ; froundnx.s f25, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 54, 40", "froundnx.s f25, f9");
}

#[test]
fn frrm_914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; frrm x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 24, 20, 00", "frrm x9");
}

#[test]
fn frrm_915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; frrm X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 26, 20, 00", "frrm X(12)");
}

#[test]
fn fscsr_916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fscsr X(11), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 15, 3E, 00", "fscsr X(11), x28");
}

#[test]
fn fscsr_917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fscsr x20, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 9A, 3F, 00", "fscsr x20, X(31)");
}

#[test]
fn fsd_918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsd F(7), [X(24), -1118]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 31, 7C, BA", "fsd F(7), [X(24), -1118]");
}

#[test]
fn fsd_919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsd f25, [X(5), -671]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, B0, 92, D7", "fsd f25, [X(5), -671]");
}

#[test]
fn fsd_920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsd f12, 1588416675, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 51, AD, 5E, A7, 31, C1, 0A", "fsd f12, 1588416675, x2");
}

#[test]
fn fsd_921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsd f7, -727733867, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, B8, 9F, D4, A7, 3A, 78, 98", "fsd f7, -727733867, X(16)");
}

#[test]
fn fsflags_922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsflags X(29), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 9E, 1A, 00", "fsflags X(29), X(21)");
}

#[test]
fn fsflags_923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsflags x20, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 1A, 16, 00", "fsflags x20, X(12)");
}

#[test]
fn fsflagsi_924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsflagsi x28, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 5E, 1F, 00", "fsflagsi x28, 30");
}

#[test]
fn fsflagsi_925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsflagsi X(17), 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, D8, 1A, 00", "fsflagsi X(17), 21");
}

#[test]
fn fsgnj_d_926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsgnj.d f20, f0, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 10, 23", "fsgnj.d f20, f0, f17");
}

#[test]
fn fsgnj_d_927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsgnj.d f15, F(3), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 87, 61, 22", "fsgnj.d f15, F(3), F(6)");
}

#[test]
fn fsgnj_h_928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsgnj.h f7, f20, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, BA, 24", "fsgnj.h f7, f20, f11");
}

#[test]
fn fsgnj_h_929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsgnj.h F(19), f10, f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 09, F5, 25", "fsgnj.h F(19), f10, f31");
}

#[test]
fn fsgnj_q_930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsgnj.q F(9), F(29), F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 8E, 26", "fsgnj.q F(9), F(29), F(8)");
}

#[test]
fn fsgnj_q_931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsgnj.q F(24), f9, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 34, 26", "fsgnj.q F(24), f9, F(3)");
}

#[test]
fn fsgnj_s_932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsgnj.s f10, F(30), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 9F, 20", "fsgnj.s f10, F(30), f9");
}

#[test]
fn fsgnj_s_933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsgnj.s f6, f18, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, F9, 20", "fsgnj.s f6, f18, f15");
}

#[test]
fn fsgnjn_d_934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsgnjn.d F(8), F(31), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 94, 6F, 22", "fsgnjn.d F(8), F(31), F(6)");
}

#[test]
fn fsgnjn_d_935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsgnjn.d F(7), F(3), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 61, 23", "fsgnjn.d F(7), F(3), f22");
}

#[test]
fn fsgnjn_h_936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsgnjn.h f13, f8, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 16, A4, 24", "fsgnjn.h f13, f8, f10");
}

#[test]
fn fsgnjn_h_937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsgnjn.h F(4), F(16), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 12, 48, 24", "fsgnjn.h F(4), F(16), F(4)");
}

#[test]
fn fsgnjn_q_938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsgnjn.q f26, f6, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1D, 13, 26", "fsgnjn.q f26, f6, f1");
}

#[test]
fn fsgnjn_q_939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsgnjn.q f6, f4, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 13, 32, 27", "fsgnjn.q f6, f4, f19");
}

#[test]
fn fsgnjn_s_940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsgnjn.s f30, f19, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9F, 79, 20", "fsgnjn.s f30, f19, F(7)");
}

#[test]
fn fsgnjn_s_941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsgnjn.s f4, F(4), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 12, 02, 20", "fsgnjn.s f4, F(4), F(0)");
}

#[test]
fn fsgnjx_d_942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsgnjx.d f2, f12, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, B6, 23", "fsgnjx.d f2, f12, F(27)");
}

#[test]
fn fsgnjx_d_943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsgnjx.d f17, f17, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 88, 22", "fsgnjx.d f17, f17, f8");
}

#[test]
fn fsgnjx_h_944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsgnjx.h F(27), f21, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, 9A, 25", "fsgnjx.h F(27), f21, f25");
}

#[test]
fn fsgnjx_h_945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsgnjx.h f23, f5, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 22, 25", "fsgnjx.h f23, f5, f18");
}

#[test]
fn fsgnjx_q_946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsgnjx.q f9, f2, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 24, 61, 26", "fsgnjx.q f9, f2, F(6)");
}

#[test]
fn fsgnjx_q_947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsgnjx.q f7, F(6), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 23, 43, 26", "fsgnjx.q f7, F(6), f4");
}

#[test]
fn fsgnjx_s_948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsgnjx.s F(23), f20, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2B, 9A, 20", "fsgnjx.s F(23), f20, f9");
}

#[test]
fn fsgnjx_s_949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsgnjx.s F(25), f15, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 37, 20", "fsgnjx.s F(25), f15, f3");
}

#[test]
fn fsh_950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsh f11, [x4, 828]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 1E, B2, 32", "fsh f11, [x4, 828]");
}

#[test]
fn fsh_951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsh f28, [X(14), 138]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 15, C7, 09", "fsh f28, [X(14), 138]");
}

#[test]
fn fsh_952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsh F(16), -412715656, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 73, 66, E7, 27, 1C, 03, 57", "fsh F(16), -412715656, X(6)");
}

#[test]
fn fsh_953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsh F(11), -55147880, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 87, B6, FC, 27, 1C, B7, 28", "fsh F(11), -55147880, X(14)");
}

#[test]
fn fsq_954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsq F(9), [x1, 2012]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, CE, 90, 7C", "fsq F(9), [x1, 2012]");
}

#[test]
fn fsq_955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsq F(2), [X(0), -30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 41, 20, FE", "fsq F(2), [X(0), -30]");
}

#[test]
fn fsq_956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsq F(12), 1421603160, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, FB, BB, 54, 27, 4C, CB, 14", "fsq F(12), 1421603160, x22");
}

#[test]
fn fsq_957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsq F(25), -918527165, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 60, 40, C9, A7, C1, 90, 35", "fsq F(25), -918527165, x1");
}

#[test]
fn fsqrt_d_958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsqrt.d f3, f1, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C1, 00, 5A", "fsqrt.d f3, f1, rmm");
}

#[test]
fn fsqrt_d_959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsqrt.d F(6), F(27), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, 0D, 5A", "fsqrt.d F(6), F(27), dyn");
}

#[test]
fn fsqrt_d_960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsqrt.d F(25), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 0F, 5A", "fsqrt.d F(25), f31");
}

#[test]
fn fsqrt_d_961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsqrt.d f20, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 00, 5A", "fsqrt.d f20, F(1)");
}

#[test]
fn fsqrt_h_962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsqrt.h f14, f31, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A7, 0F, 5C", "fsqrt.h f14, f31, rdn");
}

#[test]
fn fsqrt_h_963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsqrt.h f25, f17, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CC, 08, 5C", "fsqrt.h f25, f17, rmm");
}

#[test]
fn fsqrt_h_964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsqrt.h F(23), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 00, 5C", "fsqrt.h F(23), F(0)");
}

#[test]
fn fsqrt_h_965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsqrt.h F(12), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 0E, 5C", "fsqrt.h F(12), F(29)");
}

#[test]
fn fsqrt_q_966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsqrt.q f26, f9, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 04, 5E", "fsqrt.q f26, f9, rne");
}

#[test]
fn fsqrt_q_967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsqrt.q f24, f6, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3C, 03, 5E", "fsqrt.q f24, f6, rup");
}

#[test]
fn fsqrt_q_968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsqrt.q F(4), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 00, 5E", "fsqrt.q F(4), f0");
}

#[test]
fn fsqrt_q_969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsqrt.q F(20), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 0A, 5E", "fsqrt.q F(20), f21");
}

#[test]
fn fsqrt_s_970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsqrt.s F(0), f0, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 40, 00, 58", "fsqrt.s F(0), f0, rmm");
}

#[test]
fn fsqrt_s_971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsqrt.s F(6), F(11), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 05, 58", "fsqrt.s F(6), F(11), rne");
}

#[test]
fn fsqrt_s_972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsqrt.s f25, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 06, 58", "fsqrt.s f25, F(13)");
}

#[test]
fn fsqrt_s_973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsqrt.s f10, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 0E, 58", "fsqrt.s f10, f29");
}

#[test]
fn fsrm_974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsrm x5, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 12, 20, 00", "fsrm x5, X(0)");
}

#[test]
fn fsrm_975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsrm x23, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 9B, 2A, 00", "fsrm x23, x21");
}

#[test]
fn fsrmi_976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsrmi x28, 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 5E, 2F, 00", "fsrmi x28, 30");
}

#[test]
fn fsrmi_977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsrmi X(27), 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 5D, 28, 00", "fsrmi X(27), 16");
}

#[test]
fn fsub_d_978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsub.d f24, f1, f5, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 50, 0A", "fsub.d f24, f1, f5, dyn");
}

#[test]
fn fsub_d_979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsub.d F(21), f9, f13, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BA, D4, 0A", "fsub.d F(21), f9, f13, rup");
}

#[test]
fn fsub_d_980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsub.d f6, F(24), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 1C, 0A", "fsub.d f6, F(24), f1");
}

#[test]
fn fsub_d_981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature d
        ; fsub.d F(13), F(29), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 6E, 0B", "fsub.d F(13), F(29), F(22)");
}

#[test]
fn fsub_h_982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsub.h F(13), f18, F(23), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 26, 79, 0D", "fsub.h F(13), f18, F(23), rdn");
}

#[test]
fn fsub_h_983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsub.h f27, F(21), f24, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CD, 8A, 0D", "fsub.h f27, F(21), f24, rmm");
}

#[test]
fn fsub_h_984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsub.h F(4), F(3), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 01, 0C", "fsub.h F(4), F(3), f0");
}

#[test]
fn fsub_h_985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zfh
        ; fsub.h f22, F(23), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 1B, 0D", "fsub.h f22, F(23), F(17)");
}

#[test]
fn fsub_q_986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsub.q f26, F(0), F(27), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, B0, 0F", "fsub.q f26, F(0), F(27), rne");
}

#[test]
fn fsub_q_987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsub.q f1, f26, F(12), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 10, CD, 0E", "fsub.q f1, f26, F(12), rtz");
}

#[test]
fn fsub_q_988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsub.q f7, f16, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 28, 0F", "fsub.q f7, f16, F(18)");
}

#[test]
fn fsub_q_989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature q
        ; fsub.q f22, f27, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 7D, 0F", "fsub.q f22, f27, f23");
}

#[test]
fn fsub_s_990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsub.s f24, F(27), F(6), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 6D, 08", "fsub.s f24, F(27), F(6), rne");
}

#[test]
fn fsub_s_991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsub.s f20, F(21), F(27), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, BA, 09", "fsub.s f20, F(21), F(27), dyn");
}

#[test]
fn fsub_s_992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsub.s F(6), f12, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 46, 08", "fsub.s F(6), f12, f4");
}

#[test]
fn fsub_s_993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsub.s f6, F(3), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, E1, 09", "fsub.s f6, F(3), F(30)");
}

#[test]
fn fsw_994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsw F(16), [X(19), -1952]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, A0, 09, 87", "fsw F(16), [X(19), -1952]");
}

#[test]
fn fsw_995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsw F(0), [X(31), 1869]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, A6, 0F, 74", "fsw F(0), [X(31), 1869]");
}

#[test]
fn fsw_996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsw f4, -1558823439, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 45, 16, A3, A7, A8, 45, DE", "fsw f4, -1558823439, X(11)");
}

#[test]
fn fsw_997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature f
        ; fsw f23, -1454512926, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E4, 4D, A9, 27, 21, 74, 4F", "fsw f23, -1454512926, X(8)");
}

#[test]
fn j_998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; j -398882
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, E0, F9, 9D", "j -398882");
}

#[test]
fn j_999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; j -250256
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 20, 1C, E7", "j -250256");
}

#[test]
fn jal_1000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jal x28, -300320
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 6E, 1B, AE", "jal x28, -300320");
}

#[test]
fn jal_1001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jal x21, -242746
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 4A, 7C, BC", "jal x21, -242746");
}

#[test]
fn jal_1002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jal -524274
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 00, E8, 80", "jal -524274");
}

#[test]
fn jal_1003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jal 184492
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, D0, C2, 0A", "jal 184492");
}

#[test]
fn jalr_1004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jalr X(29), X(24), 685
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 0E, DC, 2A", "jalr X(29), X(24), 685");
}

#[test]
fn jalr_1005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jalr x24, X(13), -1951
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 8C, 16, 86", "jalr x24, X(13), -1951");
}

#[test]
fn jalr_1006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jalr x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 80, 0C, 00", "jalr x25");
}

#[test]
fn jalr_1007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jalr x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 80, 08, 00", "jalr x17");
}

#[test]
fn jr_1008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jr X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 0A, 00", "jr X(21)");
}

#[test]
fn jr_1009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jr x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 00, 0F, 00", "jr x30");
}

#[test]
fn jump_1010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jump -818778387, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 78, 32, CF, 67, 80, D8, EE", "jump -818778387, x17");
}

#[test]
fn jump_1011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; jump 547347171, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, E6, 9F, 20, 67, 80, 36, AE", "jump 547347171, x13");
}

#[test]
fn la_1012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; la X(6), 1530279172
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 33, 36, 5B, 13, 03, 43, 50", "la X(6), 1530279172");
}

#[test]
fn la_1013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; la X(3), -1247269166
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 31, A8, B5, 93, 81, 21, ED", "la X(3), -1247269166");
}

#[test]
fn lb_1014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lb X(14), [x25, 1925]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 87, 5C, 78", "lb X(14), [x25, 1925]");
}

#[test]
fn lb_1015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lb X(18), [X(8), -181]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 09, B4, F4", "lb X(18), [X(8), -181]");
}

#[test]
fn lb_1016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lb X(6), -1563853310
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 83, C9, A2, 03, 03, 23, E0", "lb X(6), -1563853310");
}

#[test]
fn lb_1017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lb X(14), 474325663
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, A7, 45, 1C, 03, 07, F7, 29", "lb X(14), 474325663");
}

#[test]
fn lbu_1018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lbu x6, [x21, 2002]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, C3, 2A, 7D", "lbu x6, [x21, 2002]");
}

#[test]
fn lbu_1019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lbu X(8), [X(2), -310]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 44, A1, EC", "lbu X(8), [X(2), -310]");
}

#[test]
fn lbu_1020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lbu x29, 117906809
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 2E, 07, 07, 83, CE, 9E, D7", "lbu x29, 117906809");
}

#[test]
fn lbu_1021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lbu X(29), 896085207
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 3E, 69, 35, 83, CE, 7E, CD", "lbu X(29), 896085207");
}

#[test]
fn lh_1022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lh x12, [x19, 458]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 96, A9, 1C", "lh x12, [x19, 458]");
}

#[test]
fn lh_1023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lh X(21), [X(1), -243]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 9A, D0, F0", "lh X(21), [X(1), -243]");
}

#[test]
fn lh_1024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lh x21, -1856468544
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 9A, 58, 91, 83, 9A, 0A, 9C", "lh x21, -1856468544");
}

#[test]
fn lh_1025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lh x3, 930356399
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 21, 74, 37, 83, 91, F1, CA", "lh x3, 930356399");
}

#[test]
fn lhu_1026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lhu x14, [X(2), 1561]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 57, 91, 61", "lhu x14, [X(2), 1561]");
}

#[test]
fn lhu_1027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lhu x1, [x4, -1474]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 50, E2, A3", "lhu x1, [x4, -1474]");
}

#[test]
fn lhu_1028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lhu X(15), -1266993336
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 37, 7B, B4, 83, D7, 87, 74", "lhu X(15), -1266993336");
}

#[test]
fn lhu_1029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lhu X(2), -1193801690
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 11, D8, B8, 03, 51, 61, 82", "lhu X(2), -1193801690");
}

#[test]
fn lpad_1030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfilp
        ; lpad 149321
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 90, 74, 24", "lpad 149321");
}

#[test]
fn lpad_1031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfilp
        ; lpad 819621
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 50, 1A, C8", "lpad 819621");
}

#[test]
fn lr_w_1032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w x5, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 22, 08, 10", "lr.w x5, [x16]");
}

#[test]
fn lr_w_1033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w x28, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, 0D, 10", "lr.w x28, [x26]");
}

#[test]
fn lr_w_aq_1034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w.aq X(0), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, 05, 14", "lr.w.aq X(0), [x10]");
}

#[test]
fn lr_w_aq_1035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w.aq x24, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, 04, 14", "lr.w.aq x24, [X(8)]");
}

#[test]
fn lr_w_aqrl_1036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w.aqrl x14, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 0E, 16", "lr.w.aqrl x14, [x29]");
}

#[test]
fn lr_w_aqrl_1037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w.aqrl X(23), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, 05, 16", "lr.w.aqrl X(23), [X(10)]");
}

#[test]
fn lr_w_rl_1038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w.rl X(20), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, 07, 12", "lr.w.rl X(20), [X(15)]");
}

#[test]
fn lr_w_rl_1039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; lr.w.rl x6, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, 0E, 12", "lr.w.rl x6, [x28]");
}

#[test]
fn lw_1040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lw x31, [X(16), 369]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 2F, 18, 17", "lw x31, [X(16), 369]");
}

#[test]
fn lw_1041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lw x24, [X(22), -535]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 2C, 9B, DE", "lw x24, [X(22), -535]");
}

#[test]
fn lw_1042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lw X(3), 392741356
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, C1, 68, 17, 83, A1, C1, 1E", "lw X(3), 392741356");
}

#[test]
fn lw_1043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; lw x4, 1515828192
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, B2, 59, 5A, 03, 22, 02, 3E", "lw x4, 1515828192");
}

#[test]
fn max_1044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; max X(7), x2, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 63, A1, 0B", "max X(7), x2, x26");
}

#[test]
fn max_1045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; max X(6), x17, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E3, 38, 0A", "max X(6), x17, x3");
}

#[test]
fn maxu_1046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; maxu x25, X(5), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, FC, 52, 0B", "maxu x25, X(5), x21");
}

#[test]
fn maxu_1047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; maxu x31, x2, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 7F, 51, 0B", "maxu x31, x2, x21");
}

#[test]
fn min_1048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; min x4, x19, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C2, E9, 0A", "min x4, x19, X(14)");
}

#[test]
fn min_1049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; min X(2), x7, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C1, 23, 0A", "min X(2), x7, x2");
}

#[test]
fn minu_1050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; minu x12, X(14), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 56, 07, 0A", "minu x12, X(14), X(0)");
}

#[test]
fn minu_1051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; minu x30, X(30), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 5F, 9F, 0B", "minu x30, X(30), x25");
}

#[test]
fn mop_r_0_1052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.0 x22, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CB, C3, 81", "mop.r.0 x22, X(7)");
}

#[test]
fn mop_r_0_1053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.0 x6, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C3, C4, 81", "mop.r.0 x6, x9");
}

#[test]
fn mop_r_1_1054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.1 x10, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 45, DE, 81", "mop.r.1 x10, x28");
}

#[test]
fn mop_r_1_1055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.1 x21, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4A, D8, 81", "mop.r.1 x21, x16");
}

#[test]
fn mop_r_10_1056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.10 x1, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C0, E7, 89", "mop.r.10 x1, X(15)");
}

#[test]
fn mop_r_10_1057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.10 X(1), x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 40, EB, 89", "mop.r.10 X(1), x22");
}

#[test]
fn mop_r_11_1058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.11 X(16), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, FD, 89", "mop.r.11 X(16), X(27)");
}

#[test]
fn mop_r_11_1059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.11 X(28), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, FC, 89", "mop.r.11 X(28), X(25)");
}

#[test]
fn mop_r_12_1060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.12 X(31), x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, C0, 8D", "mop.r.12 X(31), x1");
}

#[test]
fn mop_r_12_1061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.12 x27, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CD, C6, 8D", "mop.r.12 x27, X(13)");
}

#[test]
fn mop_r_13_1062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.13 x9, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C4, DF, 8D", "mop.r.13 x9, x31");
}

#[test]
fn mop_r_13_1063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.13 x31, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, DB, 8D", "mop.r.13 x31, x22");
}

#[test]
fn mop_r_14_1064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.14 X(6), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, E7, 8D", "mop.r.14 X(6), x14");
}

#[test]
fn mop_r_14_1065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.14 X(18), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 49, E4, 8D", "mop.r.14 X(18), X(8)");
}

#[test]
fn mop_r_15_1066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.15 X(2), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, FA, 8D", "mop.r.15 X(2), X(20)");
}

#[test]
fn mop_r_15_1067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.15 x9, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C4, F6, 8D", "mop.r.15 x9, x13");
}

#[test]
fn mop_r_16_1068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.16 X(26), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CD, CC, C1", "mop.r.16 X(26), x25");
}

#[test]
fn mop_r_16_1069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.16 x25, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CC, CE, C1", "mop.r.16 x25, x29");
}

#[test]
fn mop_r_17_1070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.17 x28, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4E, DD, C1", "mop.r.17 x28, x26");
}

#[test]
fn mop_r_17_1071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.17 x16, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, DE, C1", "mop.r.17 x16, x29");
}

#[test]
fn mop_r_18_1072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.18 x13, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C6, EE, C1", "mop.r.18 x13, x29");
}

#[test]
fn mop_r_18_1073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.18 X(20), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4A, EA, C1", "mop.r.18 X(20), X(20)");
}

#[test]
fn mop_r_19_1074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.19 X(3), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 41, F1, C1", "mop.r.19 X(3), x2");
}

#[test]
fn mop_r_19_1075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.19 X(15), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, F3, C1", "mop.r.19 X(15), x7");
}

#[test]
fn mop_r_2_1076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.2 x9, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C4, EF, 81", "mop.r.2 x9, X(31)");
}

#[test]
fn mop_r_2_1077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.2 X(29), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, EE, 81", "mop.r.2 X(29), x28");
}

#[test]
fn mop_r_20_1078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.20 X(20), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CA, C6, C5", "mop.r.20 X(20), X(13)");
}

#[test]
fn mop_r_20_1079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.20 X(18), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 49, CD, C5", "mop.r.20 X(18), X(26)");
}

#[test]
fn mop_r_21_1080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.21 X(1), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C0, D5, C5", "mop.r.21 X(1), x11");
}

#[test]
fn mop_r_21_1081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.21 x26, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CD, DA, C5", "mop.r.21 x26, X(21)");
}

#[test]
fn mop_r_22_1082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.22 x18, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 49, ED, C5", "mop.r.22 x18, X(26)");
}

#[test]
fn mop_r_22_1083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.22 x20, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CA, EE, C5", "mop.r.22 x20, x29");
}

#[test]
fn mop_r_23_1084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.23 x13, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, F4, C5", "mop.r.23 x13, x8");
}

#[test]
fn mop_r_23_1085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.23 X(16), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, F4, C5", "mop.r.23 X(16), X(8)");
}

#[test]
fn mop_r_24_1086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.24 x2, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, C3, C9", "mop.r.24 x2, x6");
}

#[test]
fn mop_r_24_1087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.24 x27, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, CB, C9", "mop.r.24 x27, x22");
}

#[test]
fn mop_r_25_1088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.25 x12, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C6, D1, C9", "mop.r.25 x12, X(3)");
}

#[test]
fn mop_r_25_1089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.25 x16, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, D3, C9", "mop.r.25 x16, X(6)");
}

#[test]
fn mop_r_26_1090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.26 x15, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 47, E2, C9", "mop.r.26 x15, x4");
}

#[test]
fn mop_r_26_1091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.26 x23, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4B, E3, C9", "mop.r.26 x23, x6");
}

#[test]
fn mop_r_27_1092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.27 X(27), X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, F6, C9", "mop.r.27 X(27), X(12)");
}

#[test]
fn mop_r_27_1093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.27 X(27), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, F4, C9", "mop.r.27 X(27), X(8)");
}

#[test]
fn mop_r_28_1094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.28 x16, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, CB, CD", "mop.r.28 x16, x22");
}

#[test]
fn mop_r_28_1095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.28 X(13), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, C2, CD", "mop.r.28 X(13), X(4)");
}

#[test]
fn mop_r_29_1096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.29 x24, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CC, DE, CD", "mop.r.29 x24, X(29)");
}

#[test]
fn mop_r_29_1097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.29 X(23), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CB, D3, CD", "mop.r.29 X(23), X(7)");
}

#[test]
fn mop_r_3_1098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.3 x20, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4A, F7, 81", "mop.r.3 x20, X(14)");
}

#[test]
fn mop_r_3_1099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.3 x17, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 48, F4, 81", "mop.r.3 x17, X(8)");
}

#[test]
fn mop_r_30_1100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.30 X(1), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 40, EF, CD", "mop.r.30 X(1), X(30)");
}

#[test]
fn mop_r_30_1101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.30 x22, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CB, E8, CD", "mop.r.30 x22, x17");
}

#[test]
fn mop_r_31_1102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.31 X(28), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, F6, CD", "mop.r.31 X(28), x13");
}

#[test]
fn mop_r_31_1103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.31 x4, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C2, FC, CD", "mop.r.31 x4, X(25)");
}

#[test]
fn mop_r_4_1104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.4 x2, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, C8, 85", "mop.r.4 x2, X(16)");
}

#[test]
fn mop_r_4_1105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.4 x18, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C9, C0, 85", "mop.r.4 x18, x1");
}

#[test]
fn mop_r_5_1106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.5 x29, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CE, DD, 85", "mop.r.5 x29, X(27)");
}

#[test]
fn mop_r_5_1107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.5 X(25), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, D9, 85", "mop.r.5 X(25), x18");
}

#[test]
fn mop_r_6_1108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.6 x27, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, E1, 85", "mop.r.6 x27, X(2)");
}

#[test]
fn mop_r_6_1109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.6 X(25), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, E1, 85", "mop.r.6 X(25), x2");
}

#[test]
fn mop_r_7_1110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.7 x15, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, F9, 85", "mop.r.7 x15, x19");
}

#[test]
fn mop_r_7_1111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.7 x24, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CC, F7, 85", "mop.r.7 x24, x15");
}

#[test]
fn mop_r_8_1112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.8 X(30), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4F, C2, 89", "mop.r.8 X(30), X(4)");
}

#[test]
fn mop_r_8_1113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.8 x8, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C4, C4, 89", "mop.r.8 x8, X(9)");
}

#[test]
fn mop_r_9_1114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.9 X(5), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C2, D3, 89", "mop.r.9 X(5), X(7)");
}

#[test]
fn mop_r_9_1115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.9 X(30), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, D1, 89", "mop.r.9 X(30), x3");
}

#[test]
fn mop_r_n_1116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.N 14, x25, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CC, E4, 8D", "mop.r.N 14, x25, x9");
}

#[test]
fn mop_r_n_1117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.r.N 2, X(28), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, EC, 81", "mop.r.N 2, X(28), X(25)");
}

#[test]
fn mop_rr_0_1118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.0 X(11), x12, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 45, 96, 83", "mop.rr.0 X(11), x12, x25");
}

#[test]
fn mop_rr_0_1119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.0 X(31), x0, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, B0, 83", "mop.rr.0 X(31), x0, X(27)");
}

#[test]
fn mop_rr_1_1120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.1 x21, X(7), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CA, E3, 86", "mop.rr.1 x21, X(7), x14");
}

#[test]
fn mop_rr_1_1121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.1 X(21), x25, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CA, AC, 87", "mop.rr.1 X(21), x25, x26");
}

#[test]
fn mop_rr_2_1122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.2 X(16), x17, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, E8, 8B", "mop.rr.2 X(16), x17, X(30)");
}

#[test]
fn mop_rr_2_1123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.2 x26, x25, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CD, 9C, 8B", "mop.rr.2 x26, x25, X(25)");
}

#[test]
fn mop_rr_3_1124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.3 x28, X(13), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, 96, 8E", "mop.rr.3 x28, X(13), X(9)");
}

#[test]
fn mop_rr_3_1125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.3 x25, X(8), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, 84, 8E", "mop.rr.3 x25, X(8), X(8)");
}

#[test]
fn mop_rr_4_1126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.4 x26, X(20), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4D, 0A, C2", "mop.rr.4 x26, X(20), x0");
}

#[test]
fn mop_rr_4_1127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.4 x17, X(29), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C8, 0E, C2", "mop.rr.4 x17, X(29), X(0)");
}

#[test]
fn mop_rr_5_1128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.5 X(8), X(6), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 44, 73, C7", "mop.rr.5 X(8), X(6), x23");
}

#[test]
fn mop_rr_5_1129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.5 X(31), x27, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, BD, C7", "mop.rr.5 X(31), x27, x27");
}

#[test]
fn mop_rr_6_1130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.6 X(3), X(30), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 41, 3F, CA", "mop.rr.6 X(3), X(30), x3");
}

#[test]
fn mop_rr_6_1131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.6 x27, x4, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, 32, CA", "mop.rr.6 x27, x4, X(3)");
}

#[test]
fn mop_rr_7_1132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.7 x2, x13, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C1, 36, CF", "mop.rr.7 x2, x13, X(19)");
}

#[test]
fn mop_rr_7_1133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.7 x30, x26, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4F, 5D, CE", "mop.rr.7 x30, x26, x5");
}

#[test]
fn mop_rr_n_1134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.N 1, X(13), x17, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C6, D8, 86", "mop.rr.N 1, X(13), x17, x13");
}

#[test]
fn mop_rr_n_1135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zimop
        ; mop.rr.N 0, x25, x19, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CC, 99, 82", "mop.rr.N 0, x25, x19, X(9)");
}

#[test]
fn mul_1136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mul x5, x23, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 82, 2B, 02", "mul x5, x23, X(2)");
}

#[test]
fn mul_1137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mul x18, X(2), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 09, 31, 02", "mul x18, X(2), x3");
}

#[test]
fn mulh_1138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mulh x6, X(26), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 13, AD, 02", "mulh x6, X(26), X(10)");
}

#[test]
fn mulh_1139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mulh X(6), X(5), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 93, B2, 03", "mulh X(6), X(5), X(27)");
}

#[test]
fn mulhsu_1140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mulhsu X(5), X(3), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A2, B1, 02", "mulhsu X(5), X(3), x11");
}

#[test]
fn mulhsu_1141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mulhsu X(11), X(20), x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 25, 0A, 03", "mulhsu X(11), X(20), x16");
}

#[test]
fn mulhu_1142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mulhu x18, X(25), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, B9, CC, 03", "mulhu x18, X(25), x28");
}

#[test]
fn mulhu_1143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; mulhu X(9), X(2), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 34, A1, 02", "mulhu X(9), X(2), x10");
}

#[test]
fn mv_1144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; mv X(9), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 04, 0C, 00", "mv X(9), x24");
}

#[test]
fn mv_1145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; mv X(12), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 86, 0D, 00", "mv X(12), x27");
}

#[test]
fn neg_1146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; neg x25, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0C, 30, 40", "neg x25, X(3)");
}

#[test]
fn neg_1147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; neg x27, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0D, B0, 41", "neg x27, X(27)");
}

#[test]
fn nop_1148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, 00, 00", "nop");
}

#[test]
fn nop_1149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, 00, 00", "nop");
}

#[test]
fn not_1150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; not X(3), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, C1, FA, FF", "not X(3), X(21)");
}

#[test]
fn not_1151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; not x8, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 44, FA, FF", "not x8, x20");
}

#[test]
fn ntl_all_1152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 50, 00", "ntl.all");
}

#[test]
fn ntl_all_1153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 50, 00", "ntl.all");
}

#[test]
fn ntl_p1_1154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 20, 00", "ntl.p1");
}

#[test]
fn ntl_p1_1155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 20, 00", "ntl.p1");
}

#[test]
fn ntl_pall_1156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 30, 00", "ntl.pall");
}

#[test]
fn ntl_pall_1157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 30, 00", "ntl.pall");
}

#[test]
fn ntl_s1_1158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 40, 00", "ntl.s1");
}

#[test]
fn ntl_s1_1159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintntl
        ; ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 40, 00", "ntl.s1");
}

#[test]
fn or_1160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; or x12, X(27), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E6, AD, 01", "or x12, X(27), X(26)");
}

#[test]
fn or_1161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; or X(29), x23, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, EE, CB, 00", "or X(29), x23, X(12)");
}

#[test]
fn orc_b_1162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; orc.b X(14), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D7, 7E, 28", "orc.b X(14), X(29)");
}

#[test]
fn orc_b_1163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; orc.b x11, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, D5, 75, 28", "orc.b x11, X(11)");
}

#[test]
fn ori_1164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ori X(8), X(12), -220
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 64, 46, F2", "ori X(8), X(12), -220");
}

#[test]
fn ori_1165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ori x13, X(4), 1080
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 66, 82, 43", "ori x13, X(4), 1080");
}

#[test]
fn orn_1166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; orn x1, X(17), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E0, 38, 40", "orn x1, X(17), X(3)");
}

#[test]
fn orn_1167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; orn x15, x18, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 67, D9, 41", "orn x15, x18, X(29)");
}

#[test]
fn pack_1168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; pack X(9), x20, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 44, 1A, 08", "pack X(9), x20, x1");
}

#[test]
fn pack_1169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; pack X(9), X(5), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, C4, 22, 08", "pack X(9), X(5), x2");
}

#[test]
fn packh_1170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; packh x5, x10, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 72, D5, 08", "packh x5, x10, X(13)");
}

#[test]
fn packh_1171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; packh X(26), X(27), x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, FD, FD, 08", "packh X(26), X(27), x15");
}

#[test]
fn pause_1172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintpause
        ; pause
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 01", "pause");
}

#[test]
fn pause_1173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zihintpause
        ; pause
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 01", "pause");
}

#[test]
fn prefetch_i_1174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbop
        ; prefetch.i [X(10), -32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 60, 05, FE", "prefetch.i [X(10), -32]");
}

#[test]
fn prefetch_i_1175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbop
        ; prefetch.i [X(19), 288]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 09, 12", "prefetch.i [X(19), 288]");
}

#[test]
fn prefetch_r_1176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbop
        ; prefetch.r [X(21), 1408]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 1A, 58", "prefetch.r [X(21), 1408]");
}

#[test]
fn prefetch_r_1177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbop
        ; prefetch.r [x23, -864]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 1B, CA", "prefetch.r [x23, -864]");
}

#[test]
fn prefetch_w_1178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbop
        ; prefetch.w [X(29), -2016]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 3E, 82", "prefetch.w [X(29), -2016]");
}

#[test]
fn prefetch_w_1179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicbop
        ; prefetch.w [x23, 160]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 3B, 0A", "prefetch.w [x23, 160]");
}

#[test]
fn rdcycle_1180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdcycle X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 25, 00, C0", "rdcycle X(10)");
}

#[test]
fn rdcycle_1181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdcycle X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2C, 00, C0", "rdcycle X(25)");
}

#[test]
fn rdcycleh_1182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdcycleh x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2F, 00, C8", "rdcycleh x31");
}

#[test]
fn rdcycleh_1183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdcycleh x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 21, 00, C8", "rdcycleh x3");
}

#[test]
fn rdinstret_1184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdinstret x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2C, 20, C0", "rdinstret x24");
}

#[test]
fn rdinstret_1185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdinstret X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2D, 20, C0", "rdinstret X(27)");
}

#[test]
fn rdinstreth_1186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdinstreth X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 29, 20, C8", "rdinstreth X(18)");
}

#[test]
fn rdinstreth_1187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdinstreth X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2D, 20, C8", "rdinstreth X(26)");
}

#[test]
fn rdtime_1188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdtime x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 28, 10, C0", "rdtime x17");
}

#[test]
fn rdtime_1189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdtime x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 28, 10, C0", "rdtime x17");
}

#[test]
fn rdtimeh_1190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdtimeh x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2C, 10, C8", "rdtimeh x24");
}

#[test]
fn rdtimeh_1191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicntr
        ; rdtimeh X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2F, 10, C8", "rdtimeh X(30)");
}

#[test]
fn rem_1192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; rem x25, X(4), X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 6C, 12, 02", "rem x25, X(4), X(1)");
}

#[test]
fn rem_1193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; rem x2, x31, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E1, 5F, 03", "rem x2, x31, X(21)");
}

#[test]
fn remu_1194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; remu X(18), X(29), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, F9, CE, 02", "remu X(18), X(29), x12");
}

#[test]
fn remu_1195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature m
        ; remu X(25), X(4), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 7C, A2, 03", "remu X(25), X(4), X(26)");
}

#[test]
fn ret_1196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 00, 00", "ret");
}

#[test]
fn ret_1197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; ret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 00, 00", "ret");
}

#[test]
fn rev8_1198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; rev8 X(11), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, D5, 84, 69", "rev8 X(11), x9");
}

#[test]
fn rev8_1199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; rev8 X(4), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 52, 8E, 69", "rev8 X(4), x28");
}

#[test]
fn rol_1200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; rol x20, X(14), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 1A, 77, 60", "rol x20, X(14), X(7)");
}

#[test]
fn rol_1201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkb
        ; rol x18, X(22), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 19, 0B, 60", "rol x18, X(22), x0");
}

#[test]
fn ror_1202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkb
        ; ror X(12), x4, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 56, 72, 61", "ror X(12), x4, x23");
}

#[test]
fn ror_1203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; ror X(28), X(14), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 5E, E7, 61", "ror X(28), X(14), X(30)");
}

#[test]
fn rori_1204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; rori X(21), x26, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 5A, 0D, 60", "rori X(21), x26, 0");
}

#[test]
fn rori_1205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkb
        ; rori X(10), x2, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 55, C1, 61", "rori X(10), x2, 28");
}

#[test]
fn sb_1206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sb x15, [X(23), 319]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 8F, FB, 12", "sb x15, [X(23), 319]");
}

#[test]
fn sb_1207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sb X(27), [X(5), -1638]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 8D, B2, 99", "sb X(27), [X(5), -1638]");
}

#[test]
fn sb_1208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sb x28, 1730784097, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, B4, 29, 67, A3, 00, C4, B7", "sb x28, 1730784097, X(8)");
}

#[test]
fn sb_1209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sb x0, 605102141, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 2C, 11, 24, A3, 0E, 0C, 02", "sb x0, 605102141, x24");
}

#[test]
fn sbreak_1210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sbreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "sbreak");
}

#[test]
fn sbreak_1211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sbreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "sbreak");
}

#[test]
fn sc_w_1212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w x8, x11, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 24, B5, 18", "sc.w x8, x11, [X(10)]");
}

#[test]
fn sc_w_1213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w x13, x10, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A6, AA, 18", "sc.w x13, x10, [x21]");
}

#[test]
fn sc_w_aq_1214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w.aq x31, x12, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2F, C1, 1C", "sc.w.aq x31, x12, [X(2)]");
}

#[test]
fn sc_w_aq_1215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w.aq x6, x26, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, A1, 1D", "sc.w.aq x6, x26, [X(2)]");
}

#[test]
fn sc_w_aqrl_1216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w.aqrl x16, x7, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A8, 7D, 1E", "sc.w.aqrl x16, x7, [X(27)]");
}

#[test]
fn sc_w_aqrl_1217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w.aqrl X(4), X(23), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 22, 77, 1F", "sc.w.aqrl X(4), X(23), [x14]");
}

#[test]
fn sc_w_rl_1218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w.rl x26, X(13), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, D0, 1A", "sc.w.rl x26, X(13), [x1]");
}

#[test]
fn sc_w_rl_1219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature a
        ; sc.w.rl x17, x3, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, 37, 1A", "sc.w.rl x17, x3, [x14]");
}

#[test]
fn scall_1220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; scall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "scall");
}

#[test]
fn scall_1221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; scall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "scall");
}

#[test]
fn seqz_1222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; seqz x10, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, B5, 10, 00", "seqz x10, X(1)");
}

#[test]
fn seqz_1223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; seqz x7, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, B3, 1F, 00", "seqz x7, X(31)");
}

#[test]
fn sext_b_1224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; sext.b X(7), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 13, 46, 60", "sext.b X(7), x12");
}

#[test]
fn sext_b_1225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; sext.b X(9), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 14, 4C, 60", "sext.b X(9), x24");
}

#[test]
fn sext_h_1226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; sext.h x27, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9D, 5B, 60", "sext.h x27, x23");
}

#[test]
fn sext_h_1227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; sext.h X(30), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 53, 60", "sext.h X(30), x6");
}

#[test]
fn sgtz_1228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sgtz x15, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 27, E0, 01", "sgtz x15, x30");
}

#[test]
fn sgtz_1229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sgtz x9, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 24, B0, 00", "sgtz x9, X(11)");
}

#[test]
fn sh_1230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sh x31, [x3, -483]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 9E, F1, E1", "sh x31, [x3, -483]");
}

#[test]
fn sh_1231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sh X(12), [x12, -426]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 1B, C6, E4", "sh X(12), [x12, -426]");
}

#[test]
fn sh_1232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sh x5, 1920733113, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 1A, 7C, 72, A3, 1C, 5A, FA", "sh x5, 1920733113, X(20)");
}

#[test]
fn sh_1233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sh x8, -1840837200, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 15, 47, 92, 23, 98, 85, DA", "sh x8, -1840837200, x11");
}

#[test]
fn sh1add_1234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zba
        ; sh1add x15, X(30), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 27, AF, 21", "sh1add x15, X(30), X(26)");
}

#[test]
fn sh1add_1235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zba
        ; sh1add X(9), X(3), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A4, B1, 21", "sh1add X(9), X(3), X(27)");
}

#[test]
fn sh2add_1236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zba
        ; sh2add x12, x16, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 46, F8, 20", "sh2add x12, x16, x15");
}

#[test]
fn sh2add_1237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zba
        ; sh2add X(1), x12, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 40, 46, 20", "sh2add X(1), x12, x4");
}

#[test]
fn sh3add_1238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zba
        ; sh3add X(11), x27, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E5, 1D, 21", "sh3add X(11), x27, X(17)");
}

#[test]
fn sh3add_1239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zba
        ; sh3add x22, X(16), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 6B, 28, 20", "sh3add x22, X(16), x2");
}

#[test]
fn sha256sig0_1240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha256sig0 X(20), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1A, 29, 10", "sha256sig0 X(20), X(18)");
}

#[test]
fn sha256sig0_1241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha256sig0 X(12), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 96, 29, 10", "sha256sig0 X(12), X(19)");
}

#[test]
fn sha256sig1_1242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha256sig1 x30, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 34, 10", "sha256sig1 x30, X(8)");
}

#[test]
fn sha256sig1_1243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha256sig1 x4, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 92, 3A, 10", "sha256sig1 x4, x21");
}

#[test]
fn sha256sum0_1244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha256sum0 x29, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1E, 02, 10", "sha256sum0 x29, X(4)");
}

#[test]
fn sha256sum0_1245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha256sum0 x17, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 18, 00, 10", "sha256sum0 x17, X(0)");
}

#[test]
fn sha256sum1_1246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; sha256sum1 X(17), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 18, 11, 10", "sha256sum1 X(17), X(2)");
}

#[test]
fn sha256sum1_1247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha256sum1 X(9), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 14, 1D, 10", "sha256sum1 X(9), X(26)");
}

#[test]
fn sha512sig0h_1248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha512sig0h X(0), X(2), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 21, 5C", "sha512sig0h X(0), X(2), x2");
}

#[test]
fn sha512sig0h_1249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha512sig0h x4, X(29), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 82, AE, 5C", "sha512sig0h x4, X(29), X(10)");
}

#[test]
fn sha512sig0l_1250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha512sig0l x22, X(16), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0B, 38, 54", "sha512sig0l x22, X(16), x3");
}

#[test]
fn sha512sig0l_1251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; sha512sig0l x13, X(23), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 86, DB, 54", "sha512sig0l x13, X(23), x13");
}

#[test]
fn sha512sig1h_1252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha512sig1h X(31), X(0), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0F, E0, 5E", "sha512sig1h X(31), X(0), x14");
}

#[test]
fn sha512sig1h_1253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; sha512sig1h x0, x28, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 3E, 5F", "sha512sig1h x0, x28, x19");
}

#[test]
fn sha512sig1l_1254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha512sig1l x10, x29, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 85, 4E, 57", "sha512sig1l x10, x29, X(20)");
}

#[test]
fn sha512sig1l_1255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha512sig1l x30, x16, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0F, 48, 56", "sha512sig1l x30, x16, x4");
}

#[test]
fn sha512sum0r_1256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; sha512sum0r x6, X(28), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 03, 4E, 51", "sha512sum0r x6, X(28), X(20)");
}

#[test]
fn sha512sum0r_1257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; sha512sum0r X(6), x30, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 03, 4F, 51", "sha512sum0r X(6), x30, X(20)");
}

#[test]
fn sha512sum1r_1258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zknh
        ; sha512sum1r X(9), x26, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 04, 1D, 53", "sha512sum1r X(9), x26, x17");
}

#[test]
fn sha512sum1r_1259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; sha512sum1r X(1), x25, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 80, FC, 52", "sha512sum1r X(1), x25, X(15)");
}

#[test]
fn sll_1260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sll x27, x2, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1D, D1, 01", "sll x27, x2, X(29)");
}

#[test]
fn sll_1261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sll x7, X(15), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 93, D7, 00", "sll x7, X(15), x13");
}

#[test]
fn slli_1262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; slli X(5), x28, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 12, 9E, 00", "slli X(5), x28, 9");
}

#[test]
fn slli_1263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; slli X(26), X(25), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9D, 7C, 00", "slli X(26), X(25), 7");
}

#[test]
fn slt_1264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; slt X(31), X(4), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 2F, F2, 01", "slt X(31), X(4), X(31)");
}

#[test]
fn slt_1265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; slt X(17), X(8), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 28, 84, 00", "slt X(17), X(8), x8");
}

#[test]
fn slti_1266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; slti x23, x12, 2024
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 2B, 86, 7E", "slti x23, x12, 2024");
}

#[test]
fn slti_1267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; slti X(2), x12, 914
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 21, 26, 39", "slti X(2), x12, 914");
}

#[test]
fn sltiu_1268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sltiu X(8), X(9), 717
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, B4, D4, 2C", "sltiu X(8), X(9), 717");
}

#[test]
fn sltiu_1269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sltiu x24, X(9), 1455
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, BC, F4, 5A", "sltiu x24, X(9), 1455");
}

#[test]
fn sltu_1270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sltu x1, x10, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 30, A5, 01", "sltu x1, x10, x26");
}

#[test]
fn sltu_1271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sltu X(15), x22, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 37, 3B, 00", "sltu X(15), x22, x3");
}

#[test]
fn sltz_1272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sltz x18, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A9, 07, 00", "sltz x18, x15");
}

#[test]
fn sltz_1273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sltz X(13), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 26, 0A, 00", "sltz X(13), x20");
}

#[test]
fn sm3p0_1274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; sm3p0 x8, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 94, 82, 10", "sm3p0 x8, x5");
}

#[test]
fn sm3p0_1275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zksh
        ; sm3p0 x10, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 15, 84, 10", "sm3p0 x10, x8");
}

#[test]
fn sm3p1_1276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zksh
        ; sm3p1 X(29), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9E, 94, 10", "sm3p1 X(29), X(9)");
}

#[test]
fn sm3p1_1277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zksh
        ; sm3p1 X(1), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 90, 92, 10", "sm3p1 X(1), x5");
}

#[test]
fn sm4ed_1278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; sm4ed x23, x9, X(15), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8B, F4, 70", "sm4ed x23, x9, X(15), 1");
}

#[test]
fn sm4ed_1279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; sm4ed X(18), X(13), X(9), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 89, 96, 70", "sm4ed X(18), X(13), X(9), 1");
}

#[test]
fn sm4ks_1280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zksed
        ; sm4ks X(23), X(24), x2, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0B, 2C, B4", "sm4ks X(23), X(24), x2, 2");
}

#[test]
fn sm4ks_1281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zksed
        ; sm4ks X(15), x20, x5, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 07, 5A, F4", "sm4ks X(15), x20, x5, 3");
}

#[test]
fn snez_1282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; snez X(10), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 35, B0, 01", "snez X(10), x27");
}

#[test]
fn snez_1283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; snez X(28), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 3E, 20, 00", "snez X(28), X(2)");
}

#[test]
fn sra_1284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sra x8, X(28), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 54, 3E, 41", "sra x8, X(28), X(19)");
}

#[test]
fn sra_1285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sra X(10), X(7), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D5, 93, 41", "sra X(10), X(7), x25");
}

#[test]
fn srai_1286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; srai x24, X(29), 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, DC, 5E, 41", "srai x24, X(29), 21");
}

#[test]
fn srai_1287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; srai X(10), X(10), 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 55, 65, 40", "srai X(10), X(10), 6");
}

#[test]
fn srl_1288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; srl X(3), x23, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D1, BB, 01", "srl X(3), x23, x27");
}

#[test]
fn srl_1289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; srl X(8), x31, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D4, EF, 01", "srl X(8), x31, x30");
}

#[test]
fn srli_1290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; srli X(10), X(13), 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D5, 16, 01", "srli X(10), X(13), 17");
}

#[test]
fn srli_1291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; srli X(21), x1, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DA, A0, 01", "srli X(21), x1, 26");
}

#[test]
fn ssamoswap_w_1292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w X(20), X(16), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2A, 09, 49", "ssamoswap.w X(20), X(16), [x18]");
}

#[test]
fn ssamoswap_w_1293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w x20, x7, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, 70, 48", "ssamoswap.w x20, x7, [X(1)]");
}

#[test]
fn ssamoswap_w_aq_1294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w.aq x31, x13, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AF, D1, 4C", "ssamoswap.w.aq x31, x13, [X(3)]");
}

#[test]
fn ssamoswap_w_aq_1295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w.aq X(15), x14, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, EA, 4C", "ssamoswap.w.aq X(15), x14, [X(20)]");
}

#[test]
fn ssamoswap_w_aqrl_1296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w.aqrl x1, x10, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 20, A4, 4E", "ssamoswap.w.aqrl x1, x10, [X(8)]");
}

#[test]
fn ssamoswap_w_aqrl_1297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w.aqrl x21, x7, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2A, 70, 4E", "ssamoswap.w.aqrl x21, x7, [x0]");
}

#[test]
fn ssamoswap_w_rl_1298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w.rl X(1), X(13), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 20, D2, 4A", "ssamoswap.w.rl X(1), X(13), [x4]");
}

#[test]
fn ssamoswap_w_rl_1299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssamoswap.w.rl x10, x21, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, 50, 4B", "ssamoswap.w.rl x10, x21, [X(0)]");
}

#[test]
fn sspopchk_1300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspopchk x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C0, CD", "sspopchk x1");
}

#[test]
fn sspopchk_1301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspopchk x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C0, CD", "sspopchk x1");
}

#[test]
fn sspopchk_1302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C2, CD", "sspopchk x5");
}

#[test]
fn sspopchk_1303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C2, CD", "sspopchk x5");
}

#[test]
fn sspush_1304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 10, CE", "sspush x1");
}

#[test]
fn sspush_1305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 10, CE", "sspush x1");
}

#[test]
fn sspush_1306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspush x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 50, CE", "sspush x5");
}

#[test]
fn sspush_1307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; sspush x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 50, CE", "sspush x5");
}

#[test]
fn ssrdp_1308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssrdp X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, C0, CD", "ssrdp X(6)");
}

#[test]
fn ssrdp_1309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfiss
        ; ssrdp X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 49, C0, CD", "ssrdp X(19)");
}

#[test]
fn sub_1310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sub x0, x2, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 51, 41", "sub x0, x2, X(21)");
}

#[test]
fn sub_1311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sub x26, x15, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8D, C7, 40", "sub x26, x15, x12");
}

#[test]
fn sw_1312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sw X(23), [x20, 693]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 2A, 7A, 2B", "sw X(23), [x20, 693]");
}

#[test]
fn sw_1313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sw x27, [X(19), -259]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, AE, B9, EF", "sw x27, [X(19), -259]");
}

#[test]
fn sw_1314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sw x26, 716886623, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, D6, BA, 2A, A3, AF, A6, 25", "sw x26, 716886623, x13");
}

#[test]
fn sw_1315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; sw x19, 385073732, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, CA, F3, 16, 23, 22, 3A, 25", "sw x19, 385073732, X(20)");
}

#[test]
fn tail_1316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfilp
        ; tail -1550088876
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 83, 9B, A3, 67, 80, 43, 55", "tail -1550088876");
}

#[test]
fn tail_1317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zicfilp
        ; tail -2140455872
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 43, 6B, 80, 67, 80, 03, C4", "tail -2140455872");
}

#[test]
fn tail_1318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; tail -110360769
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 03, 6C, F9, 67, 00, F3, 73", "tail -110360769");
}

#[test]
fn tail_1319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; tail 1154657605
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, B3, D2, 44, 67, 00, 53, D4", "tail 1154657605");
}

#[test]
fn unimp_1320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 00, C0", "unimp");
}

#[test]
fn unimp_1321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 00, C0", "unimp");
}

#[test]
fn unzip_1322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; unzip x8, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 54, FD, 08", "unzip x8, x26");
}

#[test]
fn unzip_1323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; unzip X(28), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5E, F3, 08", "unzip X(28), x6");
}

#[test]
fn wrs_nto_1324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zawrs
        ; wrs.nto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 00", "wrs.nto");
}

#[test]
fn wrs_nto_1325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zawrs
        ; wrs.nto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 00", "wrs.nto");
}

#[test]
fn wrs_sto_1326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zawrs
        ; wrs.sto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 01", "wrs.sto");
}

#[test]
fn wrs_sto_1327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zawrs
        ; wrs.sto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 01", "wrs.sto");
}

#[test]
fn xnor_1328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zks
        ; xnor X(26), x8, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 4D, A4, 40", "xnor X(26), x8, X(10)");
}

#[test]
fn xnor_1329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; xnor X(6), X(9), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C3, 54, 40", "xnor X(6), X(9), x5");
}

#[test]
fn xor_1330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; xor x27, X(31), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, CD, DF, 01", "xor x27, X(31), X(29)");
}

#[test]
fn xor_1331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; xor X(14), X(21), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C7, 2A, 01", "xor X(14), X(21), X(18)");
}

#[test]
fn xori_1332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; xori X(29), x9, 284
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, CE, C4, 11", "xori X(29), x9, 284");
}

#[test]
fn xori_1333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; xori X(4), x25, 53
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, C2, 5C, 03", "xori X(4), x25, 53");
}

#[test]
fn xperm4_1334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; xperm4 x2, X(23), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A1, 5B, 28", "xperm4 x2, X(23), X(5)");
}

#[test]
fn xperm4_1335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; xperm4 x10, X(0), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 25, C0, 28", "xperm4 x10, X(0), x12");
}

#[test]
fn xperm8_1336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; xperm8 X(31), x9, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, CF, 04, 29", "xperm8 X(31), x9, X(16)");
}

#[test]
fn xperm8_1337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zkn
        ; xperm8 X(23), X(14), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4B, 87, 28", "xperm8 X(23), X(14), x8");
}

#[test]
fn zext_b_1338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; zext.b X(11), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, F5, F3, 0F", "zext.b X(11), X(7)");
}

#[test]
fn zext_b_1339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature i
        ; zext.b x5, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, F2, FB, 0F", "zext.b x5, X(23)");
}

#[test]
fn zext_h_1340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; zext.h X(26), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, CD, 0F, 08", "zext.h X(26), X(31)");
}

#[test]
fn zext_h_1341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbb
        ; zext.h x21, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4A, 01, 08", "zext.h x21, X(2)");
}

#[test]
fn zip_1342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zbkb
        ; zip X(15), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 17, F5, 08", "zip X(15), x10");
}

#[test]
fn zip_1343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv32
        ; .feature zk
        ; zip X(19), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 99, FB, 08", "zip X(19), x23");
}
