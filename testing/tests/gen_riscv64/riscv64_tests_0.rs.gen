
#[test]
fn add_0() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; add x27, X(26), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0D, DD, 00", "add x27, X(26), x13");
}

#[test]
fn add_1() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; add x15, x16, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 07, 38, 01", "add x15, x16, x19");
}

#[test]
fn add_uw_2() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; add.uw x17, X(10), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 08, 75, 08", "add.uw x17, X(10), x7");
}

#[test]
fn add_uw_3() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; add.uw X(9), X(26), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 04, AD, 09", "add.uw X(9), X(26), x26");
}

#[test]
fn addi_4() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; addi x5, x15, 263
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 82, 77, 10", "addi x5, x15, 263");
}

#[test]
fn addi_5() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; addi x21, X(12), 1201
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 0A, 16, 4B", "addi x21, X(12), 1201");
}

#[test]
fn addiw_6() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; addiw X(10), X(19), -1049
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 85, 79, BE", "addiw X(10), X(19), -1049");
}

#[test]
fn addiw_7() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; addiw X(4), X(31), 1418
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 82, AF, 58", "addiw X(4), X(31), 1418");
}

#[test]
fn addw_8() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; addw X(20), X(28), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 0A, BE, 01", "addw X(20), X(28), X(27)");
}

#[test]
fn addw_9() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; addw x14, X(30), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 07, AF, 00", "addw x14, X(30), X(10)");
}

#[test]
fn aes64ds_10() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; aes64ds x24, x8, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0C, D4, 3A", "aes64ds x24, x8, X(13)");
}

#[test]
fn aes64ds_11() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; aes64ds x28, x15, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8E, 67, 3A", "aes64ds x28, x15, x6");
}

#[test]
fn aes64dsm_12() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknd
        ; aes64dsm X(3), x29, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 81, AE, 3F", "aes64dsm X(3), x29, X(26)");
}

#[test]
fn aes64dsm_13() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; aes64dsm x14, X(31), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 87, 3F, 3E", "aes64dsm x14, X(31), X(3)");
}

#[test]
fn aes64es_14() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkne
        ; aes64es x16, x13, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 88, A6, 33", "aes64es x16, x13, X(26)");
}

#[test]
fn aes64es_15() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; aes64es X(14), X(13), X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 87, 16, 32", "aes64es X(14), X(13), X(1)");
}

#[test]
fn aes64esm_16() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; aes64esm X(28), X(24), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0E, CC, 36", "aes64esm X(28), X(24), x12");
}

#[test]
fn aes64esm_17() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkne
        ; aes64esm x29, x18, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0E, B9, 37", "aes64esm x29, x18, x27");
}

#[test]
fn aes64im_18() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; aes64im x26, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1D, 05, 30", "aes64im x26, x10");
}

#[test]
fn aes64im_19() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; aes64im x15, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 97, 01, 30", "aes64im x15, X(3)");
}

#[test]
fn aes64ks1i_20() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; aes64ks1i X(18), X(2), 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 19, 71, 31", "aes64ks1i X(18), X(2), 7");
}

#[test]
fn aes64ks1i_21() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; aes64ks1i x12, x2, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 16, 61, 31", "aes64ks1i x12, x2, 6");
}

#[test]
fn aes64ks2_22() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkne
        ; aes64ks2 x27, x8, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0D, 74, 7E", "aes64ks2 x27, x8, x7");
}

#[test]
fn aes64ks2_23() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknd
        ; aes64ks2 x4, x28, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 02, FE, 7E", "aes64ks2 x4, x28, X(15)");
}

#[test]
fn amoadd_b_24() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b X(22), X(30), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, EA, 01", "amoadd.b X(22), X(30), [x20]");
}

#[test]
fn amoadd_b_25() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b x21, x8, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8A, 82, 00", "amoadd.b x21, x8, [X(5)]");
}

#[test]
fn amoadd_b_aq_26() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b.aq X(3), x9, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 01, 9A, 04", "amoadd.b.aq X(3), x9, [X(20)]");
}

#[test]
fn amoadd_b_aq_27() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b.aq X(25), X(29), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8C, D6, 05", "amoadd.b.aq X(25), X(29), [x13]");
}

#[test]
fn amoadd_b_aqrl_28() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b.aqrl x4, X(14), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, EB, 06", "amoadd.b.aqrl x4, X(14), [X(23)]");
}

#[test]
fn amoadd_b_aqrl_29() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b.aqrl X(4), x6, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 82, 6D, 06", "amoadd.b.aqrl X(4), x6, [x27]");
}

#[test]
fn amoadd_b_rl_30() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b.rl X(27), x19, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0D, 38, 03", "amoadd.b.rl X(27), x19, [x16]");
}

#[test]
fn amoadd_b_rl_31() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.b.rl X(19), X(31), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 89, F5, 03", "amoadd.b.rl X(19), X(31), [X(11)]");
}

#[test]
fn amoadd_d_32() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d X(2), X(25), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 31, 92, 01", "amoadd.d X(2), X(25), [x4]");
}

#[test]
fn amoadd_d_33() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d x7, x10, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 33, AB, 00", "amoadd.d x7, x10, [X(22)]");
}

#[test]
fn amoadd_d_aq_34() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d.aq X(15), x16, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B7, 06, 05", "amoadd.d.aq X(15), x16, [x13]");
}

#[test]
fn amoadd_d_aq_35() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d.aq x26, x23, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3D, 72, 05", "amoadd.d.aq x26, x23, [x4]");
}

#[test]
fn amoadd_d_aqrl_36() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d.aqrl x2, x29, [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 31, DD, 07", "amoadd.d.aqrl x2, x29, [X(26)]");
}

#[test]
fn amoadd_d_aqrl_37() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d.aqrl x28, x11, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3E, B8, 06", "amoadd.d.aqrl x28, x11, [X(16)]");
}

#[test]
fn amoadd_d_rl_38() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d.rl x23, x8, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3B, 81, 02", "amoadd.d.rl x23, x8, [X(2)]");
}

#[test]
fn amoadd_d_rl_39() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.d.rl X(26), x15, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BD, FC, 02", "amoadd.d.rl X(26), x15, [x25]");
}

#[test]
fn amoadd_h_40() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h X(0), x21, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 10, 5B, 01", "amoadd.h X(0), x21, [X(22)]");
}

#[test]
fn amoadd_h_41() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h x12, X(21), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, 5A, 01", "amoadd.h x12, X(21), [x20]");
}

#[test]
fn amoadd_h_aq_42() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h.aq X(13), x30, [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, EF, 05", "amoadd.h.aq X(13), x30, [x31]");
}

#[test]
fn amoadd_h_aq_43() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h.aq x25, X(16), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1C, 02, 05", "amoadd.h.aq x25, X(16), [x4]");
}

#[test]
fn amoadd_h_aqrl_44() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h.aqrl X(0), X(20), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 10, 47, 07", "amoadd.h.aqrl X(0), X(20), [X(14)]");
}

#[test]
fn amoadd_h_aqrl_45() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h.aqrl X(30), X(29), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1F, DB, 07", "amoadd.h.aqrl X(30), X(29), [x22]");
}

#[test]
fn amoadd_h_rl_46() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h.rl x2, X(10), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 91, A8, 02", "amoadd.h.rl x2, X(10), [X(17)]");
}

#[test]
fn amoadd_h_rl_47() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoadd.h.rl x12, x13, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, D8, 02", "amoadd.h.rl x12, x13, [X(16)]");
}

#[test]
fn amoadd_w_48() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w X(18), X(18), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 21, 01", "amoadd.w X(18), X(18), [X(2)]");
}

#[test]
fn amoadd_w_49() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w x7, x2, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 27, 00", "amoadd.w x7, x2, [X(15)]");
}

#[test]
fn amoadd_w_aq_50() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w.aq x24, X(15), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, FB, 04", "amoadd.w.aq x24, X(15), [X(22)]");
}

#[test]
fn amoadd_w_aq_51() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w.aq x11, X(20), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 44, 05", "amoadd.w.aq x11, X(20), [X(8)]");
}

#[test]
fn amoadd_w_aqrl_52() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w.aqrl x17, x16, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, 07, 07", "amoadd.w.aqrl x17, x16, [x15]");
}

#[test]
fn amoadd_w_aqrl_53() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w.aqrl x28, X(18), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, 20, 07", "amoadd.w.aqrl x28, X(18), [x0]");
}

#[test]
fn amoadd_w_rl_54() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w.rl x0, X(16), [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, 04, 03", "amoadd.w.rl x0, X(16), [X(9)]");
}

#[test]
fn amoadd_w_rl_55() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoadd.w.rl x24, x4, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AC, 4C, 02", "amoadd.w.rl x24, x4, [x25]");
}

#[test]
fn amoand_b_56() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b X(30), X(4), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0F, 42, 60", "amoand.b X(30), X(4), [x4]");
}

#[test]
fn amoand_b_57() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b X(6), X(7), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 83, 71, 60", "amoand.b X(6), X(7), [x3]");
}

#[test]
fn amoand_b_aq_58() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b.aq x8, X(28), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 84, CC, 65", "amoand.b.aq x8, X(28), [x25]");
}

#[test]
fn amoand_b_aq_59() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b.aq X(15), X(6), [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 87, 6C, 64", "amoand.b.aq X(15), X(6), [X(25)]");
}

#[test]
fn amoand_b_aqrl_60() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b.aqrl x4, X(15), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 02, F2, 66", "amoand.b.aqrl x4, X(15), [x4]");
}

#[test]
fn amoand_b_aqrl_61() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b.aqrl X(9), x0, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 04, 01, 66", "amoand.b.aqrl X(9), x0, [X(2)]");
}

#[test]
fn amoand_b_rl_62() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b.rl X(18), x7, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, 7C, 62", "amoand.b.rl X(18), x7, [X(24)]");
}

#[test]
fn amoand_b_rl_63() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.b.rl X(29), x31, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8E, FD, 63", "amoand.b.rl X(29), x31, [x27]");
}

#[test]
fn amoand_d_64() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d X(31), x23, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BF, 7E, 61", "amoand.d X(31), x23, [X(29)]");
}

#[test]
fn amoand_d_65() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d X(9), x12, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B4, C9, 60", "amoand.d X(9), x12, [x19]");
}

#[test]
fn amoand_d_aq_66() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d.aq x24, X(29), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3C, D2, 65", "amoand.d.aq x24, X(29), [x4]");
}

#[test]
fn amoand_d_aq_67() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d.aq x12, X(21), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 36, 55, 65", "amoand.d.aq x12, X(21), [X(10)]");
}

#[test]
fn amoand_d_aqrl_68() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d.aqrl x3, X(24), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 31, 87, 67", "amoand.d.aqrl x3, X(24), [X(14)]");
}

#[test]
fn amoand_d_aqrl_69() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d.aqrl X(29), X(19), [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BE, 37, 67", "amoand.d.aqrl X(29), X(19), [X(15)]");
}

#[test]
fn amoand_d_rl_70() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d.rl X(23), X(22), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3B, 69, 63", "amoand.d.rl X(23), X(22), [x18]");
}

#[test]
fn amoand_d_rl_71() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.d.rl x29, x3, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BE, 3E, 62", "amoand.d.rl x29, x3, [x29]");
}

#[test]
fn amoand_h_72() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h x8, X(14), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 14, E2, 60", "amoand.h x8, X(14), [x4]");
}

#[test]
fn amoand_h_73() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h X(3), x23, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 11, 7A, 61", "amoand.h X(3), x23, [X(20)]");
}

#[test]
fn amoand_h_aq_74() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h.aq X(26), X(3), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1D, 31, 64", "amoand.h.aq X(26), X(3), [x2]");
}

#[test]
fn amoand_h_aq_75() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h.aq x4, x22, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, 69, 65", "amoand.h.aq x4, x22, [X(18)]");
}

#[test]
fn amoand_h_aqrl_76() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h.aqrl x16, x5, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, 5A, 66", "amoand.h.aqrl x16, x5, [X(21)]");
}

#[test]
fn amoand_h_aqrl_77() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h.aqrl x10, X(8), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 15, 86, 66", "amoand.h.aqrl x10, X(8), [X(12)]");
}

#[test]
fn amoand_h_rl_78() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h.rl x28, X(27), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1E, B7, 63", "amoand.h.rl x28, X(27), [X(14)]");
}

#[test]
fn amoand_h_rl_79() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoand.h.rl x22, x10, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9B, AA, 62", "amoand.h.rl x22, x10, [X(21)]");
}

#[test]
fn amoand_w_80() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w x6, X(25), [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 23, 9E, 61", "amoand.w x6, X(25), [X(28)]");
}

#[test]
fn amoand_w_81() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w x2, X(8), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 21, 89, 60", "amoand.w x2, X(8), [X(18)]");
}

#[test]
fn amoand_w_aq_82() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w.aq x28, x19, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, 33, 65", "amoand.w.aq x28, x19, [x6]");
}

#[test]
fn amoand_w_aq_83() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w.aq X(29), x16, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2E, 0B, 65", "amoand.w.aq X(29), x16, [x22]");
}

#[test]
fn amoand_w_aqrl_84() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w.aqrl x10, x31, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A5, FA, 67", "amoand.w.aqrl x10, x31, [x21]");
}

#[test]
fn amoand_w_aqrl_85() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w.aqrl X(14), x18, [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 27, 23, 67", "amoand.w.aqrl X(14), x18, [X(6)]");
}

#[test]
fn amoand_w_rl_86() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w.rl X(23), X(18), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AB, 29, 63", "amoand.w.rl X(23), X(18), [x19]");
}

#[test]
fn amoand_w_rl_87() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoand.w.rl X(9), x14, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A4, E4, 62", "amoand.w.rl X(9), x14, [X(9)]");
}

#[test]
fn amocas_b_88() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b X(9), X(27), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 04, B9, 29", "amocas.b X(9), X(27), [X(18)]");
}

#[test]
fn amocas_b_89() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b x20, X(15), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0A, FB, 28", "amocas.b x20, X(15), [x22]");
}

#[test]
fn amocas_b_aq_90() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b.aq x3, x13, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 81, DD, 2C", "amocas.b.aq x3, x13, [x27]");
}

#[test]
fn amocas_b_aq_91() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b.aq X(16), X(3), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 88, 3E, 2C", "amocas.b.aq X(16), X(3), [X(29)]");
}

#[test]
fn amocas_b_aqrl_92() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b.aqrl x31, x30, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, E4, 2F", "amocas.b.aqrl x31, x30, [X(8)]");
}

#[test]
fn amocas_b_aqrl_93() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b.aqrl x0, X(10), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 80, AD, 2E", "amocas.b.aqrl x0, X(10), [X(27)]");
}

#[test]
fn amocas_b_rl_94() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b.rl x8, x5, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 84, 57, 2A", "amocas.b.rl x8, x5, [x15]");
}

#[test]
fn amocas_b_rl_95() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.b.rl X(1), x27, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 80, B8, 2B", "amocas.b.rl X(1), x27, [X(17)]");
}

#[test]
fn amocas_d_96() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d x19, X(21), [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B9, 50, 29", "amocas.d x19, X(21), [X(1)]");
}

#[test]
fn amocas_d_97() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d x6, X(9), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B3, 9E, 28", "amocas.d x6, X(9), [x29]");
}

#[test]
fn amocas_d_aq_98() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d.aq X(28), x27, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3E, B9, 2D", "amocas.d.aq X(28), x27, [x18]");
}

#[test]
fn amocas_d_aq_99() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d.aq x28, X(3), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BE, 3F, 2C", "amocas.d.aq x28, X(3), [x31]");
}

#[test]
fn amocas_d_aqrl_100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d.aqrl x7, x26, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B3, A6, 2F", "amocas.d.aqrl x7, x26, [x13]");
}

#[test]
fn amocas_d_aqrl_101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d.aqrl x18, x22, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B9, 65, 2F", "amocas.d.aqrl x18, x22, [x11]");
}

#[test]
fn amocas_d_rl_102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d.rl X(25), X(3), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3C, 38, 2A", "amocas.d.rl X(25), X(3), [x16]");
}

#[test]
fn amocas_d_rl_103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.d.rl X(28), x28, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BE, C0, 2B", "amocas.d.rl X(28), x28, [x1]");
}

#[test]
fn amocas_h_104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h x12, X(18), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 16, 26, 29", "amocas.h x12, X(18), [x12]");
}

#[test]
fn amocas_h_105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h X(30), X(17), [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1F, 11, 29", "amocas.h X(30), X(17), [X(2)]");
}

#[test]
fn amocas_h_aq_106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h.aq X(14), X(12), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 97, C5, 2C", "amocas.h.aq X(14), X(12), [X(11)]");
}

#[test]
fn amocas_h_aq_107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h.aq x15, X(10), [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 97, A4, 2C", "amocas.h.aq x15, X(10), [X(9)]");
}

#[test]
fn amocas_h_aqrl_108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h.aqrl X(2), X(26), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, A7, 2F", "amocas.h.aqrl X(2), X(26), [X(14)]");
}

#[test]
fn amocas_h_aqrl_109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h.aqrl x5, x21, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 92, 5A, 2F", "amocas.h.aqrl x5, x21, [x21]");
}

#[test]
fn amocas_h_rl_110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h.rl X(15), X(22), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 97, 6D, 2B", "amocas.h.rl X(15), X(22), [x27]");
}

#[test]
fn amocas_h_rl_111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha_zacas
        ; amocas.h.rl X(15), X(8), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 97, 84, 2A", "amocas.h.rl X(15), X(8), [x9]");
}

#[test]
fn amocas_q_112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q x4, x10, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 42, A5, 28", "amocas.q x4, x10, [X(10)]");
}

#[test]
fn amocas_q_113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q X(2), x10, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, C1, A7, 28", "amocas.q X(2), x10, [x15]");
}

#[test]
fn amocas_q_aq_114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q.aq x0, X(2), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 40, 23, 2C", "amocas.q.aq x0, X(2), [X(6)]");
}

#[test]
fn amocas_q_aq_115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q.aq X(12), X(24), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 46, 8F, 2D", "amocas.q.aq X(12), X(24), [x30]");
}

#[test]
fn amocas_q_aqrl_116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q.aqrl X(24), x4, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 4C, 49, 2E", "amocas.q.aqrl X(24), x4, [x18]");
}

#[test]
fn amocas_q_aqrl_117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q.aqrl x6, x16, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 43, 07, 2F", "amocas.q.aqrl x6, x16, [x14]");
}

#[test]
fn amocas_q_rl_118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q.rl x2, x4, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 41, 49, 2A", "amocas.q.rl x2, x4, [x18]");
}

#[test]
fn amocas_q_rl_119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.q.rl x14, X(2), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 47, 27, 2A", "amocas.q.rl x14, X(2), [X(14)]");
}

#[test]
fn amocas_w_120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w x23, X(8), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, 86, 28", "amocas.w x23, X(8), [x12]");
}

#[test]
fn amocas_w_121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w X(26), X(21), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 54, 29", "amocas.w X(26), X(21), [x9]");
}

#[test]
fn amocas_w_aq_122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w.aq x23, X(29), [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, D5, 2D", "amocas.w.aq x23, X(29), [X(10)]");
}

#[test]
fn amocas_w_aq_123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w.aq X(25), X(7), [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 70, 2C", "amocas.w.aq X(25), X(7), [X(1)]");
}

#[test]
fn amocas_w_aqrl_124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w.aqrl X(20), X(3), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, 3D, 2E", "amocas.w.aqrl X(20), X(3), [X(27)]");
}

#[test]
fn amocas_w_aqrl_125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w.aqrl x0, X(4), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 20, 4E, 2E", "amocas.w.aqrl x0, X(4), [x28]");
}

#[test]
fn amocas_w_rl_126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w.rl X(19), x10, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A9, AD, 2A", "amocas.w.rl X(19), x10, [X(27)]");
}

#[test]
fn amocas_w_rl_127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zacas
        ; amocas.w.rl X(14), x12, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 27, C5, 2A", "amocas.w.rl X(14), x12, [x10]");
}

#[test]
fn amomax_b_128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b X(9), X(25), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 84, 9A, A1", "amomax.b X(9), X(25), [X(21)]");
}

#[test]
fn amomax_b_129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b X(2), x22, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 01, 6A, A1", "amomax.b X(2), x22, [x20]");
}

#[test]
fn amomax_b_aq_130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b.aq X(27), X(12), [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8D, C0, A4", "amomax.b.aq X(27), X(12), [X(1)]");
}

#[test]
fn amomax_b_aq_131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b.aq x14, X(9), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 07, 90, A4", "amomax.b.aq x14, X(9), [X(0)]");
}

#[test]
fn amomax_b_aqrl_132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b.aqrl x19, X(8), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 09, 8D, A6", "amomax.b.aqrl x19, X(8), [X(26)]");
}

#[test]
fn amomax_b_aqrl_133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b.aqrl X(22), X(2), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, 2D, A6", "amomax.b.aqrl X(22), X(2), [X(26)]");
}

#[test]
fn amomax_b_rl_134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b.rl X(23), X(1), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0B, 15, A2", "amomax.b.rl X(23), X(1), [x10]");
}

#[test]
fn amomax_b_rl_135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.b.rl x10, X(13), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, D9, A2", "amomax.b.rl x10, X(13), [x18]");
}

#[test]
fn amomax_d_136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d X(13), X(3), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B6, 3A, A0", "amomax.d X(13), X(3), [X(21)]");
}

#[test]
fn amomax_d_137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d x29, X(28), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BE, CE, A1", "amomax.d x29, X(28), [x29]");
}

#[test]
fn amomax_d_aq_138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d.aq X(3), X(31), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B1, F3, A5", "amomax.d.aq X(3), X(31), [X(7)]");
}

#[test]
fn amomax_d_aq_139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d.aq x3, X(29), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B1, D8, A5", "amomax.d.aq x3, X(29), [X(17)]");
}

#[test]
fn amomax_d_aqrl_140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d.aqrl X(7), x21, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 33, 51, A7", "amomax.d.aqrl X(7), x21, [X(2)]");
}

#[test]
fn amomax_d_aqrl_141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d.aqrl x2, X(20), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 31, 44, A7", "amomax.d.aqrl x2, X(20), [X(8)]");
}

#[test]
fn amomax_d_rl_142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d.rl X(2), x18, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 31, 2B, A3", "amomax.d.rl X(2), x18, [X(22)]");
}

#[test]
fn amomax_d_rl_143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.d.rl X(17), X(19), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 38, 31, A3", "amomax.d.rl X(17), X(19), [x2]");
}

#[test]
fn amomax_h_144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h x19, X(21), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, 55, A1", "amomax.h x19, X(21), [x10]");
}

#[test]
fn amomax_h_145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h X(19), x12, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 19, CC, A0", "amomax.h X(19), x12, [X(24)]");
}

#[test]
fn amomax_h_aq_146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h.aq X(31), X(24), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, 8A, A5", "amomax.h.aq X(31), X(24), [x21]");
}

#[test]
fn amomax_h_aq_147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h.aq x28, X(28), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1E, C2, A5", "amomax.h.aq x28, X(28), [x4]");
}

#[test]
fn amomax_h_aqrl_148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h.aqrl X(10), X(30), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 95, EB, A7", "amomax.h.aqrl X(10), X(30), [X(23)]");
}

#[test]
fn amomax_h_aqrl_149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h.aqrl X(8), x31, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 14, F8, A7", "amomax.h.aqrl X(8), x31, [x16]");
}

#[test]
fn amomax_h_rl_150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h.rl X(16), X(10), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, A8, A2", "amomax.h.rl X(16), X(10), [X(17)]");
}

#[test]
fn amomax_h_rl_151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomax.h.rl x29, x24, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, 8B, A3", "amomax.h.rl x29, x24, [x23]");
}

#[test]
fn amomax_w_152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w x18, x2, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 2C, A0", "amomax.w x18, x2, [X(24)]");
}

#[test]
fn amomax_w_153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w X(25), X(24), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 84, A1", "amomax.w X(25), X(24), [x9]");
}

#[test]
fn amomax_w_aq_154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w.aq X(15), X(22), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 6F, A5", "amomax.w.aq X(15), X(22), [x31]");
}

#[test]
fn amomax_w_aq_155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w.aq X(28), X(8), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AE, 89, A4", "amomax.w.aq X(28), X(8), [X(19)]");
}

#[test]
fn amomax_w_aqrl_156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w.aqrl x25, x31, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, F6, A7", "amomax.w.aqrl x25, x31, [x13]");
}

#[test]
fn amomax_w_aqrl_157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w.aqrl x17, x24, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, 87, A7", "amomax.w.aqrl x17, x24, [x15]");
}

#[test]
fn amomax_w_rl_158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w.rl X(11), X(21), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 25, 56, A3", "amomax.w.rl X(11), X(21), [x12]");
}

#[test]
fn amomax_w_rl_159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomax.w.rl x3, X(12), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 21, C4, A2", "amomax.w.rl x3, X(12), [X(8)]");
}

#[test]
fn amomaxu_b_160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b x19, x13, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 89, D3, E0", "amomaxu.b x19, x13, [x7]");
}

#[test]
fn amomaxu_b_161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b x31, X(16), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, 0F, E1", "amomaxu.b x31, X(16), [x30]");
}

#[test]
fn amomaxu_b_aq_162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b.aq x18, X(28), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, C9, E5", "amomaxu.b.aq x18, X(28), [x19]");
}

#[test]
fn amomaxu_b_aq_163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b.aq X(3), x22, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 01, 6E, E5", "amomaxu.b.aq X(3), x22, [X(28)]");
}

#[test]
fn amomaxu_b_aqrl_164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b.aqrl x18, x29, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, D2, E7", "amomaxu.b.aqrl x18, x29, [x5]");
}

#[test]
fn amomaxu_b_aqrl_165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b.aqrl x31, x2, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0F, 25, E6", "amomaxu.b.aqrl x31, x2, [x10]");
}

#[test]
fn amomaxu_b_rl_166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b.rl x24, X(8), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8C, 89, E2", "amomaxu.b.rl x24, X(8), [X(19)]");
}

#[test]
fn amomaxu_b_rl_167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.b.rl X(10), X(23), [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, 7E, E3", "amomaxu.b.rl X(10), X(23), [X(28)]");
}

#[test]
fn amomaxu_d_168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d x19, x8, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 39, 85, E0", "amomaxu.d x19, x8, [x10]");
}

#[test]
fn amomaxu_d_169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d X(3), x23, [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B1, 75, E1", "amomaxu.d X(3), x23, [X(11)]");
}

#[test]
fn amomaxu_d_aq_170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d.aq x25, X(5), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BC, 5A, E4", "amomaxu.d.aq x25, X(5), [X(21)]");
}

#[test]
fn amomaxu_d_aq_171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d.aq X(15), X(20), [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B7, 4C, E5", "amomaxu.d.aq X(15), X(20), [X(25)]");
}

#[test]
fn amomaxu_d_aqrl_172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d.aqrl X(2), X(18), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B1, 22, E7", "amomaxu.d.aqrl X(2), X(18), [x5]");
}

#[test]
fn amomaxu_d_aqrl_173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d.aqrl X(17), X(19), [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 38, 34, E7", "amomaxu.d.aqrl X(17), X(19), [x8]");
}

#[test]
fn amomaxu_d_rl_174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d.rl X(9), x6, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B4, 61, E2", "amomaxu.d.rl X(9), x6, [x3]");
}

#[test]
fn amomaxu_d_rl_175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.d.rl X(20), x30, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BA, E2, E3", "amomaxu.d.rl X(20), x30, [x5]");
}

#[test]
fn amomaxu_h_176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h x1, x9, [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 96, E0", "amomaxu.h x1, x9, [X(12)]");
}

#[test]
fn amomaxu_h_177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h x26, X(1), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9D, 13, E0", "amomaxu.h x26, X(1), [x7]");
}

#[test]
fn amomaxu_h_aq_178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h.aq x1, x23, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 10, 75, E5", "amomaxu.h.aq x1, x23, [X(10)]");
}

#[test]
fn amomaxu_h_aq_179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h.aq x11, x17, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 95, 17, E5", "amomaxu.h.aq x11, x17, [X(15)]");
}

#[test]
fn amomaxu_h_aqrl_180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h.aqrl X(2), X(21), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, 56, E7", "amomaxu.h.aqrl X(2), X(21), [x12]");
}

#[test]
fn amomaxu_h_aqrl_181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h.aqrl X(9), X(23), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 14, 73, E7", "amomaxu.h.aqrl X(9), X(23), [x6]");
}

#[test]
fn amomaxu_h_rl_182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h.rl x17, X(12), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 98, C1, E2", "amomaxu.h.rl x17, X(12), [x3]");
}

#[test]
fn amomaxu_h_rl_183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomaxu.h.rl X(5), X(11), [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 92, BF, E2", "amomaxu.h.rl X(5), X(11), [X(31)]");
}

#[test]
fn amomaxu_w_184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w x26, X(15), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, FC, E0", "amomaxu.w x26, X(15), [x24]");
}

#[test]
fn amomaxu_w_185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w X(20), x21, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2A, 52, E1", "amomaxu.w X(20), x21, [x4]");
}

#[test]
fn amomaxu_w_aq_186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w.aq X(3), X(30), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 21, E9, E5", "amomaxu.w.aq X(3), X(30), [X(18)]");
}

#[test]
fn amomaxu_w_aq_187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w.aq X(18), X(25), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 99, E5", "amomaxu.w.aq X(18), X(25), [x18]");
}

#[test]
fn amomaxu_w_aqrl_188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w.aqrl X(27), X(13), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, DC, E6", "amomaxu.w.aqrl X(27), X(13), [x25]");
}

#[test]
fn amomaxu_w_aqrl_189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w.aqrl x5, x23, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 22, 72, E7", "amomaxu.w.aqrl x5, x23, [x4]");
}

#[test]
fn amomaxu_w_rl_190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w.rl X(4), X(31), [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 22, FE, E3", "amomaxu.w.rl X(4), X(31), [x28]");
}

#[test]
fn amomaxu_w_rl_191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomaxu.w.rl X(28), X(14), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AE, E5, E2", "amomaxu.w.rl X(28), X(14), [x11]");
}

#[test]
fn amomin_b_192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b X(1), x3, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 3B, 80", "amomin.b X(1), x3, [X(22)]");
}

#[test]
fn amomin_b_193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b x17, x20, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 88, 43, 81", "amomin.b x17, x20, [X(7)]");
}

#[test]
fn amomin_b_aq_194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b.aq X(13), x18, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 06, 2C, 85", "amomin.b.aq X(13), x18, [X(24)]");
}

#[test]
fn amomin_b_aq_195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b.aq X(22), x14, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, E1, 84", "amomin.b.aq X(22), x14, [X(2)]");
}

#[test]
fn amomin_b_aqrl_196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b.aqrl x16, x7, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 08, 7B, 86", "amomin.b.aqrl x16, x7, [x22]");
}

#[test]
fn amomin_b_aqrl_197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b.aqrl x4, X(24), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 02, 8C, 87", "amomin.b.aqrl x4, X(24), [x24]");
}

#[test]
fn amomin_b_rl_198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b.rl x21, X(25), [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0A, 9E, 83", "amomin.b.rl x21, X(25), [X(28)]");
}

#[test]
fn amomin_b_rl_199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.b.rl X(18), x13, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, D5, 82", "amomin.b.rl X(18), x13, [x10]");
}

#[test]
fn amomin_d_200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d x30, X(14), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3F, E4, 80", "amomin.d x30, X(14), [X(8)]");
}

#[test]
fn amomin_d_201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d x20, x17, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3A, 19, 81", "amomin.d x20, x17, [X(18)]");
}

#[test]
fn amomin_d_aq_202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d.aq X(5), x4, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 32, 4B, 84", "amomin.d.aq X(5), x4, [x22]");
}

#[test]
fn amomin_d_aq_203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d.aq x27, X(18), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3D, 2F, 85", "amomin.d.aq x27, X(18), [x30]");
}

#[test]
fn amomin_d_aqrl_204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d.aqrl x7, x14, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 33, E0, 86", "amomin.d.aqrl x7, x14, [X(0)]");
}

#[test]
fn amomin_d_aqrl_205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d.aqrl x24, x20, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BC, 43, 87", "amomin.d.aqrl x24, x20, [X(7)]");
}

#[test]
fn amomin_d_rl_206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d.rl X(26), x29, [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BD, D8, 83", "amomin.d.rl X(26), x29, [x17]");
}

#[test]
fn amomin_d_rl_207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.d.rl X(13), x29, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B6, DC, 83", "amomin.d.rl X(13), x29, [x25]");
}

#[test]
fn amomin_h_208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h x29, X(10), [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, AD, 80", "amomin.h x29, X(10), [X(27)]");
}

#[test]
fn amomin_h_209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h x11, x9, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 15, 9E, 80", "amomin.h x11, x9, [x28]");
}

#[test]
fn amomin_h_aq_210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h.aq x7, X(5), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 13, 51, 84", "amomin.h.aq x7, X(5), [x2]");
}

#[test]
fn amomin_h_aq_211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h.aq X(4), X(20), [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 92, 4E, 85", "amomin.h.aq X(4), X(20), [X(29)]");
}

#[test]
fn amomin_h_aqrl_212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h.aqrl X(30), x25, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1F, 9E, 87", "amomin.h.aqrl X(30), x25, [x28]");
}

#[test]
fn amomin_h_aqrl_213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h.aqrl x25, X(28), [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9C, CB, 87", "amomin.h.aqrl x25, X(28), [X(23)]");
}

#[test]
fn amomin_h_rl_214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h.rl X(26), x0, [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1D, 02, 82", "amomin.h.rl X(26), x0, [X(4)]");
}

#[test]
fn amomin_h_rl_215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amomin.h.rl x31, x9, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, 9B, 82", "amomin.h.rl x31, x9, [X(23)]");
}

#[test]
fn amomin_w_216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w x2, x7, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 21, 70, 80", "amomin.w x2, x7, [x0]");
}

#[test]
fn amomin_w_217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w X(26), x15, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, FC, 80", "amomin.w X(26), x15, [X(25)]");
}

#[test]
fn amomin_w_aq_218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w.aq X(9), X(29), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, D7, 85", "amomin.w.aq X(9), X(29), [x14]");
}

#[test]
fn amomin_w_aq_219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w.aq x29, x16, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2E, 07, 85", "amomin.w.aq x29, x16, [x14]");
}

#[test]
fn amomin_w_aqrl_220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w.aqrl x20, X(1), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2A, 17, 86", "amomin.w.aqrl x20, X(1), [X(14)]");
}

#[test]
fn amomin_w_aqrl_221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w.aqrl x9, x13, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, DF, 86", "amomin.w.aqrl x9, x13, [x30]");
}

#[test]
fn amomin_w_rl_222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w.rl x26, x6, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 62, 82", "amomin.w.rl x26, x6, [x5]");
}

#[test]
fn amomin_w_rl_223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amomin.w.rl x7, x23, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 7D, 83", "amomin.w.rl x7, x23, [X(27)]");
}

#[test]
fn amominu_b_224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b x7, x12, [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 83, CF, C0", "amominu.b x7, x12, [x31]");
}

#[test]
fn amominu_b_225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b X(2), X(3), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 01, 34, C0", "amominu.b X(2), X(3), [X(8)]");
}

#[test]
fn amominu_b_aq_226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b.aq x12, x15, [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, F8, C4", "amominu.b.aq x12, x15, [X(17)]");
}

#[test]
fn amominu_b_aq_227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b.aq x12, x16, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, 09, C5", "amominu.b.aq x12, x16, [x19]");
}

#[test]
fn amominu_b_aqrl_228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b.aqrl X(31), X(4), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8F, 40, C6", "amominu.b.aqrl X(31), X(4), [x1]");
}

#[test]
fn amominu_b_aqrl_229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b.aqrl x15, x6, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 07, 64, C6", "amominu.b.aqrl x15, x6, [x8]");
}

#[test]
fn amominu_b_rl_230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b.rl x13, X(2), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 86, 29, C2", "amominu.b.rl x13, X(2), [X(19)]");
}

#[test]
fn amominu_b_rl_231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.b.rl x14, X(9), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 87, 99, C2", "amominu.b.rl x14, X(9), [X(19)]");
}

#[test]
fn amominu_d_232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d X(12), X(19), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B6, 33, C1", "amominu.d X(12), X(19), [x7]");
}

#[test]
fn amominu_d_233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d x23, x28, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BB, C7, C1", "amominu.d x23, x28, [x15]");
}

#[test]
fn amominu_d_aq_234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d.aq x7, X(19), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B3, 33, C5", "amominu.d.aq x7, X(19), [x7]");
}

#[test]
fn amominu_d_aq_235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d.aq X(20), x12, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3A, C5, C4", "amominu.d.aq X(20), x12, [X(10)]");
}

#[test]
fn amominu_d_aqrl_236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d.aqrl x25, x25, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3C, 96, C7", "amominu.d.aqrl x25, x25, [x12]");
}

#[test]
fn amominu_d_aqrl_237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d.aqrl X(3), X(28), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 31, CB, C7", "amominu.d.aqrl X(3), X(28), [x22]");
}

#[test]
fn amominu_d_rl_238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d.rl X(16), x8, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 38, 86, C2", "amominu.d.rl X(16), x8, [x12]");
}

#[test]
fn amominu_d_rl_239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.d.rl X(14), x8, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 37, 81, C2", "amominu.d.rl X(14), x8, [X(2)]");
}

#[test]
fn amominu_h_240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h x2, X(24), [X(4)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 11, 82, C1", "amominu.h x2, X(24), [X(4)]");
}

#[test]
fn amominu_h_241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h X(9), x19, [X(29)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 94, 3E, C1", "amominu.h X(9), x19, [X(29)]");
}

#[test]
fn amominu_h_aq_242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h.aq X(25), X(21), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1C, 58, C5", "amominu.h.aq X(25), X(21), [x16]");
}

#[test]
fn amominu_h_aq_243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h.aq X(18), X(2), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 19, 28, C4", "amominu.h.aq X(18), X(2), [x16]");
}

#[test]
fn amominu_h_aqrl_244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h.aqrl x22, x10, [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1B, A9, C6", "amominu.h.aqrl x22, x10, [X(18)]");
}

#[test]
fn amominu_h_aqrl_245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h.aqrl X(5), x19, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 12, 3F, C7", "amominu.h.aqrl X(5), x19, [x30]");
}

#[test]
fn amominu_h_rl_246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h.rl X(17), x13, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 18, D0, C2", "amominu.h.rl X(17), x13, [X(0)]");
}

#[test]
fn amominu_h_rl_247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amominu.h.rl x18, X(8), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 19, 87, C2", "amominu.h.rl x18, X(8), [x14]");
}

#[test]
fn amominu_w_248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w X(9), X(2), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 24, 2C, C0", "amominu.w X(9), X(2), [x24]");
}

#[test]
fn amominu_w_249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w x17, X(13), [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, D5, C0", "amominu.w x17, X(13), [x10]");
}

#[test]
fn amominu_w_aq_250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w.aq X(25), X(9), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 99, C4", "amominu.w.aq X(25), X(9), [x19]");
}

#[test]
fn amominu_w_aq_251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w.aq X(4), x16, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 22, 0D, C5", "amominu.w.aq X(4), x16, [x26]");
}

#[test]
fn amominu_w_aqrl_252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w.aqrl x24, x1, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2C, 14, C6", "amominu.w.aqrl x24, x1, [X(8)]");
}

#[test]
fn amominu_w_aqrl_253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w.aqrl X(13), X(31), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, F1, C7", "amominu.w.aqrl X(13), X(31), [x2]");
}

#[test]
fn amominu_w_rl_254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w.rl X(14), x8, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 27, 81, C2", "amominu.w.rl X(14), x8, [x2]");
}

#[test]
fn amominu_w_rl_255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amominu.w.rl x25, X(9), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AC, 95, C2", "amominu.w.rl x25, X(9), [X(11)]");
}

#[test]
fn amoor_b_256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b X(17), x19, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 08, 3C, 41", "amoor.b X(17), x19, [X(24)]");
}

#[test]
fn amoor_b_257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b x10, x17, [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 85, 15, 41", "amoor.b x10, x17, [X(11)]");
}

#[test]
fn amoor_b_aq_258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b.aq x17, x19, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 08, 37, 45", "amoor.b.aq x17, x19, [x14]");
}

#[test]
fn amoor_b_aq_259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b.aq X(14), x30, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 87, E7, 45", "amoor.b.aq X(14), x30, [x15]");
}

#[test]
fn amoor_b_aqrl_260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b.aqrl x19, X(11), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 89, B0, 46", "amoor.b.aqrl x19, X(11), [x1]");
}

#[test]
fn amoor_b_aqrl_261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b.aqrl X(10), x10, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 05, A8, 46", "amoor.b.aqrl X(10), x10, [X(16)]");
}

#[test]
fn amoor_b_rl_262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b.rl x21, X(6), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0A, 62, 42", "amoor.b.rl x21, X(6), [x4]");
}

#[test]
fn amoor_b_rl_263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.b.rl x22, x19, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0B, 3F, 43", "amoor.b.rl x22, x19, [x30]");
}

#[test]
fn amoor_d_264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d x25, X(15), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BC, F6, 40", "amoor.d x25, X(15), [x13]");
}

#[test]
fn amoor_d_265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d x12, x27, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 36, B8, 41", "amoor.d x12, x27, [X(16)]");
}

#[test]
fn amoor_d_aq_266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d.aq X(14), x28, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 37, C5, 45", "amoor.d.aq X(14), x28, [x10]");
}

#[test]
fn amoor_d_aq_267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d.aq X(4), x19, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B2, 33, 45", "amoor.d.aq X(4), x19, [X(7)]");
}

#[test]
fn amoor_d_aqrl_268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d.aqrl X(16), x2, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B8, 2F, 46", "amoor.d.aqrl X(16), x2, [X(31)]");
}

#[test]
fn amoor_d_aqrl_269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d.aqrl x12, X(16), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 36, 07, 47", "amoor.d.aqrl x12, X(16), [x14]");
}

#[test]
fn amoor_d_rl_270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d.rl X(18), x8, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 39, 80, 42", "amoor.d.rl X(18), x8, [x0]");
}

#[test]
fn amoor_d_rl_271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.d.rl x20, X(27), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BA, B3, 43", "amoor.d.rl x20, X(27), [X(7)]");
}

#[test]
fn amoor_h_272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h x26, X(14), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1D, E9, 40", "amoor.h x26, X(14), [X(18)]");
}

#[test]
fn amoor_h_273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h X(10), X(10), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 15, AF, 40", "amoor.h X(10), X(10), [X(30)]");
}

#[test]
fn amoor_h_aq_274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h.aq x25, x12, [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1C, C6, 44", "amoor.h.aq x25, x12, [X(12)]");
}

#[test]
fn amoor_h_aq_275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h.aq X(21), x26, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9A, A1, 45", "amoor.h.aq X(21), x26, [x3]");
}

#[test]
fn amoor_h_aqrl_276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h.aqrl x11, X(9), [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 95, 92, 46", "amoor.h.aqrl x11, X(9), [X(5)]");
}

#[test]
fn amoor_h_aqrl_277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h.aqrl X(4), X(3), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, 3C, 46", "amoor.h.aqrl X(4), X(3), [X(24)]");
}

#[test]
fn amoor_h_rl_278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h.rl X(26), x19, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1D, 3C, 43", "amoor.h.rl X(26), x19, [X(24)]");
}

#[test]
fn amoor_h_rl_279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoor.h.rl X(5), X(31), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 92, F8, 43", "amoor.h.rl X(5), X(31), [x17]");
}

#[test]
fn amoor_w_280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w x13, x14, [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, E0, 40", "amoor.w x13, x14, [X(0)]");
}

#[test]
fn amoor_w_281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w x28, X(14), [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, EC, 40", "amoor.w x28, X(14), [X(24)]");
}

#[test]
fn amoor_w_aq_282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w.aq X(26), x27, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, BF, 45", "amoor.w.aq X(26), x27, [X(31)]");
}

#[test]
fn amoor_w_aq_283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w.aq X(21), x0, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2A, 05, 44", "amoor.w.aq X(21), x0, [X(10)]");
}

#[test]
fn amoor_w_aqrl_284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w.aqrl X(27), x5, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 53, 46", "amoor.w.aqrl X(27), x5, [X(7)]");
}

#[test]
fn amoor_w_aqrl_285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w.aqrl x4, x21, [X(13)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A2, 56, 47", "amoor.w.aqrl x4, x21, [X(13)]");
}

#[test]
fn amoor_w_rl_286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w.rl x11, x7, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A5, 76, 42", "amoor.w.rl x11, x7, [x13]");
}

#[test]
fn amoor_w_rl_287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoor.w.rl X(14), X(16), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, 00, 43", "amoor.w.rl X(14), X(16), [x1]");
}

#[test]
fn amoswap_b_288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b x1, X(19), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 38, 09", "amoswap.b x1, X(19), [x16]");
}

#[test]
fn amoswap_b_289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b X(15), x27, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 87, B9, 09", "amoswap.b X(15), x27, [x19]");
}

#[test]
fn amoswap_b_aq_290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b.aq X(12), X(7), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 86, 7C, 0C", "amoswap.b.aq X(12), X(7), [x25]");
}

#[test]
fn amoswap_b_aq_291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b.aq x5, X(3), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 02, 39, 0C", "amoswap.b.aq x5, X(3), [X(18)]");
}

#[test]
fn amoswap_b_aqrl_292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b.aqrl x21, X(15), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8A, F9, 0E", "amoswap.b.aqrl x21, X(15), [X(19)]");
}

#[test]
fn amoswap_b_aqrl_293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b.aqrl X(26), X(4), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 0D, 46, 0E", "amoswap.b.aqrl X(26), X(4), [X(12)]");
}

#[test]
fn amoswap_b_rl_294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b.rl X(18), X(30), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, E4, 0B", "amoswap.b.rl X(18), X(30), [x9]");
}

#[test]
fn amoswap_b_rl_295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.b.rl x8, X(7), [X(6)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 04, 73, 0A", "amoswap.b.rl x8, X(7), [X(6)]");
}

#[test]
fn amoswap_d_296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d x29, x13, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3E, DE, 08", "amoswap.d x29, x13, [x28]");
}

#[test]
fn amoswap_d_297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d x0, X(8), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B0, 8C, 08", "amoswap.d x0, X(8), [x25]");
}

#[test]
fn amoswap_d_aq_298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d.aq X(21), X(20), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3A, 46, 0D", "amoswap.d.aq X(21), X(20), [X(12)]");
}

#[test]
fn amoswap_d_aq_299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d.aq X(6), X(11), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 33, BF, 0C", "amoswap.d.aq X(6), X(11), [X(30)]");
}

#[test]
fn amoswap_d_aqrl_300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d.aqrl X(22), X(14), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BB, E5, 0E", "amoswap.d.aqrl X(22), X(14), [X(11)]");
}

#[test]
fn amoswap_d_aqrl_301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d.aqrl X(5), x16, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 32, 0E, 0F", "amoswap.d.aqrl X(5), x16, [X(28)]");
}

#[test]
fn amoswap_d_rl_302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d.rl x13, x7, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B6, 77, 0A", "amoswap.d.rl x13, x7, [X(15)]");
}

#[test]
fn amoswap_d_rl_303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.d.rl x6, X(30), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 33, E9, 0B", "amoswap.d.rl x6, X(30), [X(18)]");
}

#[test]
fn amoswap_h_304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h x31, x31, [X(25)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9F, FC, 09", "amoswap.h x31, x31, [X(25)]");
}

#[test]
fn amoswap_h_305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h X(29), X(25), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 9E, 9A, 09", "amoswap.h X(29), X(25), [X(21)]");
}

#[test]
fn amoswap_h_aq_306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h.aq X(24), x23, [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 1C, 7F, 0D", "amoswap.h.aq X(24), x23, [X(30)]");
}

#[test]
fn amoswap_h_aq_307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h.aq x23, X(15), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1B, F1, 0C", "amoswap.h.aq x23, X(15), [x2]");
}

#[test]
fn amoswap_h_aqrl_308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h.aqrl X(13), X(10), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 96, A8, 0E", "amoswap.h.aqrl X(13), X(10), [X(17)]");
}

#[test]
fn amoswap_h_aqrl_309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h.aqrl X(30), x31, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 9F, F6, 0F", "amoswap.h.aqrl X(30), x31, [x13]");
}

#[test]
fn amoswap_h_rl_310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h.rl X(16), x9, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 98, 9A, 0A", "amoswap.h.rl X(16), x9, [X(21)]");
}

#[test]
fn amoswap_h_rl_311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoswap.h.rl X(8), x16, [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 14, 0B, 0B", "amoswap.h.rl X(8), x16, [X(22)]");
}

#[test]
fn amoswap_w_312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w x5, x25, [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A2, 93, 09", "amoswap.w x5, x25, [X(7)]");
}

#[test]
fn amoswap_w_313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w X(27), X(19), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AD, 32, 09", "amoswap.w X(27), X(19), [x5]");
}

#[test]
fn amoswap_w_aq_314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w.aq X(28), x24, [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AE, 81, 0D", "amoswap.w.aq X(28), x24, [x3]");
}

#[test]
fn amoswap_w_aq_315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w.aq X(15), X(19), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 27, 3C, 0D", "amoswap.w.aq X(15), X(19), [x24]");
}

#[test]
fn amoswap_w_aqrl_316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w.aqrl X(22), x21, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2B, 51, 0F", "amoswap.w.aqrl X(22), x21, [x2]");
}

#[test]
fn amoswap_w_aqrl_317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w.aqrl x10, X(4), [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, 49, 0E", "amoswap.w.aqrl x10, X(4), [x18]");
}

#[test]
fn amoswap_w_rl_318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w.rl x7, X(23), [X(26)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 23, 7D, 0B", "amoswap.w.rl x7, X(23), [X(26)]");
}

#[test]
fn amoswap_w_rl_319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoswap.w.rl x18, X(21), [X(0)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, 50, 0B", "amoswap.w.rl x18, X(21), [X(0)]");
}

#[test]
fn amoxor_b_320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b X(23), X(22), [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8B, 6F, 21", "amoxor.b X(23), X(22), [X(31)]");
}

#[test]
fn amoxor_b_321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b x18, X(13), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 09, D9, 20", "amoxor.b x18, X(13), [X(18)]");
}

#[test]
fn amoxor_b_aq_322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b.aq x1, X(23), [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 00, 7A, 25", "amoxor.b.aq x1, X(23), [X(20)]");
}

#[test]
fn amoxor_b_aq_323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b.aq x1, x13, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 80, DB, 24", "amoxor.b.aq x1, x13, [x23]");
}

#[test]
fn amoxor_b_aqrl_324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b.aqrl x21, X(2), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 8A, 27, 26", "amoxor.b.aqrl x21, X(2), [x15]");
}

#[test]
fn amoxor_b_aqrl_325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b.aqrl X(6), x4, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 03, 48, 26", "amoxor.b.aqrl X(6), x4, [X(16)]");
}

#[test]
fn amoxor_b_rl_326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b.rl X(18), X(13), [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 89, DF, 22", "amoxor.b.rl X(18), X(13), [X(31)]");
}

#[test]
fn amoxor_b_rl_327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.b.rl X(16), x7, [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 08, 77, 22", "amoxor.b.rl X(16), x7, [X(14)]");
}

#[test]
fn amoxor_d_328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d x26, X(18), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3D, 2C, 21", "amoxor.d x26, X(18), [x24]");
}

#[test]
fn amoxor_d_329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d x17, x5, [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 38, 55, 20", "amoxor.d x17, x5, [x10]");
}

#[test]
fn amoxor_d_aq_330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d.aq X(1), X(23), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B0, 79, 25", "amoxor.d.aq X(1), X(23), [x19]");
}

#[test]
fn amoxor_d_aq_331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d.aq x26, X(2), [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BD, 27, 24", "amoxor.d.aq x26, X(2), [x15]");
}

#[test]
fn amoxor_d_aqrl_332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d.aqrl X(0), x23, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B0, 70, 27", "amoxor.d.aqrl X(0), x23, [x1]");
}

#[test]
fn amoxor_d_aqrl_333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d.aqrl X(1), X(24), [x17]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B0, 88, 27", "amoxor.d.aqrl X(1), X(24), [x17]");
}

#[test]
fn amoxor_d_rl_334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d.rl x27, x24, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3D, 80, 23", "amoxor.d.rl x27, x24, [x0]");
}

#[test]
fn amoxor_d_rl_335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.d.rl x28, x12, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3E, C2, 22", "amoxor.d.rl x28, x12, [x4]");
}

#[test]
fn amoxor_h_336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h x8, x2, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 94, 21, 20", "amoxor.h x8, x2, [X(3)]");
}

#[test]
fn amoxor_h_337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h X(6), x20, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 93, 4C, 21", "amoxor.h X(6), x20, [x25]");
}

#[test]
fn amoxor_h_aq_338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h.aq X(11), x31, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 15, F5, 25", "amoxor.h.aq X(11), x31, [X(10)]");
}

#[test]
fn amoxor_h_aq_339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h.aq X(29), X(22), [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1E, 6B, 25", "amoxor.h.aq X(29), X(22), [x22]");
}

#[test]
fn amoxor_h_aqrl_340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h.aqrl X(18), X(4), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 99, 44, 26", "amoxor.h.aqrl X(18), X(4), [x9]");
}

#[test]
fn amoxor_h_aqrl_341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h.aqrl x7, X(18), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 93, 28, 27", "amoxor.h.aqrl x7, X(18), [X(17)]");
}

#[test]
fn amoxor_h_rl_342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h.rl x4, x30, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 12, E5, 23", "amoxor.h.rl x4, x30, [X(10)]");
}

#[test]
fn amoxor_h_rl_343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zabha
        ; amoxor.h.rl x0, X(7), [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 90, 71, 22", "amoxor.h.rl x0, X(7), [X(3)]");
}

#[test]
fn amoxor_w_344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w x18, X(27), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 29, BA, 21", "amoxor.w x18, X(27), [x20]");
}

#[test]
fn amoxor_w_345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w x13, x23, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A6, 7E, 21", "amoxor.w x13, x23, [x29]");
}

#[test]
fn amoxor_w_aq_346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w.aq X(30), x8, [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AF, 83, 24", "amoxor.w.aq X(30), x8, [x7]");
}

#[test]
fn amoxor_w_aq_347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w.aq x19, X(23), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A9, 76, 25", "amoxor.w.aq x19, X(23), [x13]");
}

#[test]
fn amoxor_w_aqrl_348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w.aqrl X(23), x6, [x28]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2B, 6E, 26", "amoxor.w.aqrl X(23), x6, [x28]");
}

#[test]
fn amoxor_w_aqrl_349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w.aqrl x1, x28, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, CA, 27", "amoxor.w.aqrl x1, x28, [X(21)]");
}

#[test]
fn amoxor_w_rl_350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w.rl X(8), x15, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A4, F1, 22", "amoxor.w.rl X(8), x15, [X(3)]");
}

#[test]
fn amoxor_w_rl_351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; amoxor.w.rl x13, x1, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, 18, 22", "amoxor.w.rl x13, x1, [x16]");
}

#[test]
fn and_352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; and x29, X(7), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, FE, E3, 00", "and x29, X(7), x14");
}

#[test]
fn and_353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; and x9, x8, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 74, 64, 01", "and x9, x8, x22");
}

#[test]
fn andi_354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; andi x0, X(26), -1613
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 70, 3D, 9B", "andi x0, X(26), -1613");
}

#[test]
fn andi_355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; andi x15, x26, -259
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 77, DD, EF", "andi x15, x26, -259");
}

#[test]
fn andn_356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; andn X(26), x25, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, FD, 9C, 40", "andn X(26), x25, X(9)");
}

#[test]
fn andn_357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; andn x27, x19, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, FD, F9, 41", "andn x27, x19, X(31)");
}

#[test]
fn bclr_358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bclr X(1), X(31), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 90, 9F, 49", "bclr X(1), X(31), X(25)");
}

#[test]
fn bclr_359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bclr x25, X(25), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 9C, 2C, 49", "bclr x25, X(25), x18");
}

#[test]
fn bclri_360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bclri X(3), X(30), 54
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 11, 6F, 4B", "bclri X(3), X(30), 54");
}

#[test]
fn bclri_361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bclri x12, X(19), 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 96, F9, 49", "bclri x12, X(19), 31");
}

#[test]
fn beq_362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; beq x30, X(21), -1696
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 00, 5F, 97", "beq x30, X(21), -1696");
}

#[test]
fn beq_363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; beq X(19), X(9), -1744
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 88, 99, 92", "beq X(19), X(9), -1744");
}

#[test]
fn beqz_364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; beqz x28, 924
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 0E, 0E, 38", "beqz x28, 924");
}

#[test]
fn beqz_365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; beqz x17, -1166
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 89, 08, B6", "beqz x17, -1166");
}

#[test]
fn bext_366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bext x10, x13, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D5, 96, 49", "bext x10, x13, X(25)");
}

#[test]
fn bext_367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bext x14, X(7), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D7, 63, 49", "bext x14, X(7), X(22)");
}

#[test]
fn bexti_368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bexti X(29), X(0), 43
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 5E, B0, 4A", "bexti X(29), X(0), 43");
}

#[test]
fn bexti_369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bexti X(28), x13, 39
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, DE, 76, 4A", "bexti X(28), x13, 39");
}

#[test]
fn bge_370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bge x8, x25, -300
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 5A, 94, ED", "bge x8, x25, -300");
}

#[test]
fn bge_371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bge x27, x13, -1836
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, DA, DD, 8C", "bge x27, x13, -1836");
}

#[test]
fn bgeu_372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgeu x30, x16, -1068
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 7A, 0F, BD", "bgeu x30, x16, -1068");
}

#[test]
fn bgeu_373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgeu X(18), X(13), -1734
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 7D, D9, 92", "bgeu X(18), X(13), -1734");
}

#[test]
fn bgez_374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgez x21, 1646
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D7, 0A, 66", "bgez x21, 1646");
}

#[test]
fn bgez_375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgez x28, -954
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 53, 0E, C4", "bgez x28, -954");
}

#[test]
fn bgt_376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgt x12, X(23), 272
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, C8, CB, 10", "bgt x12, X(23), 272");
}

#[test]
fn bgt_377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgt x18, X(27), -1496
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, C4, 2D, A3", "bgt x18, X(27), -1496");
}

#[test]
fn bgtu_378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgtu x1, x21, -806
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, ED, 1A, CC", "bgtu x1, x21, -806");
}

#[test]
fn bgtu_379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgtu x10, X(30), -1048
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 64, AF, BE", "bgtu x10, X(30), -1048");
}

#[test]
fn bgtz_380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgtz X(14), -850
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 47, E0, CA", "bgtz X(14), -850");
}

#[test]
fn bgtz_381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bgtz X(2), -694
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 45, 20, D4", "bgtz X(2), -694");
}

#[test]
fn binv_382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; binv x11, X(30), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 15, EF, 68", "binv x11, X(30), x14");
}

#[test]
fn binv_383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; binv x13, x18, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 16, 79, 68", "binv x13, x18, X(7)");
}

#[test]
fn binvi_384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; binvi X(27), X(1), 47
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9D, F0, 6A", "binvi X(27), X(1), 47");
}

#[test]
fn binvi_385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; binvi x31, X(9), 51
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9F, 34, 6B", "binvi x31, X(9), 51");
}

#[test]
fn ble_386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ble x10, X(14), 398
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 57, A7, 18", "ble x10, X(14), 398");
}

#[test]
fn ble_387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ble X(8), X(19), 804
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, D2, 89, 32", "ble X(8), X(19), 804");
}

#[test]
fn bleu_388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bleu x29, X(16), 958
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 7F, D8, 3B", "bleu x29, X(16), 958");
}

#[test]
fn bleu_389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bleu x28, X(24), 1622
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 7B, CC, 65", "bleu x28, X(24), 1622");
}

#[test]
fn blez_390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; blez X(18), -1156
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 5E, 20, B7", "blez X(18), -1156");
}

#[test]
fn blez_391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; blez x20, -350
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 51, 40, EB", "blez x20, -350");
}

#[test]
fn blt_392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; blt X(11), X(10), 1526
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, CB, A5, 5E", "blt X(11), X(10), 1526");
}

#[test]
fn blt_393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; blt x27, x22, -328
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, CC, 6D, EB", "blt x27, x22, -328");
}

#[test]
fn bltu_394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bltu x18, x21, -1826
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 6F, 59, 8D", "bltu x18, x21, -1826");
}

#[test]
fn bltu_395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bltu x18, X(19), 1212
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 6E, 39, 4B", "bltu x18, X(19), 1212");
}

#[test]
fn bltz_396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bltz x8, 1542
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 43, 04, 60", "bltz x8, 1542");
}

#[test]
fn bltz_397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bltz X(2), -1362
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 47, 01, AA", "bltz X(2), -1362");
}

#[test]
fn bne_398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bne x11, x19, 864
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 90, 35, 37", "bne x11, x19, 864");
}

#[test]
fn bne_399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bne x14, X(30), 980
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 1A, E7, 3D", "bne x14, X(30), 980");
}

#[test]
fn bnez_400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bnez X(2), -476
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 12, 01, E2", "bnez X(2), -476");
}

#[test]
fn bnez_401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; bnez x18, 1700
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 12, 09, 6A", "bnez x18, 1700");
}

#[test]
fn brev8_402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; brev8 x1, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, D0, 77, 68", "brev8 x1, X(15)");
}

#[test]
fn brev8_403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; brev8 X(12), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 56, 7E, 68", "brev8 X(12), X(28)");
}

#[test]
fn bset_404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bset x8, X(30), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 14, 4F, 29", "bset x8, X(30), X(20)");
}

#[test]
fn bset_405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bset x31, X(10), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1F, 05, 29", "bset x31, X(10), X(16)");
}

#[test]
fn bseti_406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bseti X(27), X(11), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9D, 15, 28", "bseti X(27), X(11), 1");
}

#[test]
fn bseti_407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbs
        ; bseti X(29), X(5), 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9E, 52, 28", "bseti X(29), X(5), 5");
}

#[test]
fn c_add_408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.add x29, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 9E", "c.add x29, x4");
}

#[test]
fn c_add_409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.add x4, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 92", "c.add x4, x22");
}

#[test]
fn c_addi_410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addi X(19), 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 09", "c.addi X(19), 20");
}

#[test]
fn c_addi_411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addi x10, 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 05", "c.addi x10, 16");
}

#[test]
fn c_addi16sp_412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addi16sp x2, 176
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 61", "c.addi16sp x2, 176");
}

#[test]
fn c_addi16sp_413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addi16sp x2, 400
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 61", "c.addi16sp x2, 400");
}

#[test]
fn c_addi4spn_414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addi4spn X(9), x2, 652
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 05", "c.addi4spn X(9), x2, 652");
}

#[test]
fn c_addi4spn_415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addi4spn X(9), x2, 980
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 0F", "c.addi4spn X(9), x2, 980");
}

#[test]
fn c_addiw_416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addiw x4, -14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 32", "c.addiw x4, -14");
}

#[test]
fn c_addiw_417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addiw X(19), 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 29", "c.addiw X(19), 15");
}

#[test]
fn c_addw_418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addw X(10), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 9D", "c.addw X(10), x9");
}

#[test]
fn c_addw_419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.addw x10, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 9D", "c.addw x10, x11");
}

#[test]
fn c_and_420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.and x9, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 8C", "c.and x9, x13");
}

#[test]
fn c_and_421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.and x9, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 8C", "c.and x9, X(14)");
}

#[test]
fn c_andi_422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.andi x11, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 89", "c.andi x11, 27");
}

#[test]
fn c_andi_423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.andi x15, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 8B", "c.andi x15, 7");
}

#[test]
fn c_beqz_424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.beqz x10, 28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, CD", "c.beqz x10, 28");
}

#[test]
fn c_beqz_425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.beqz x8, -42
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, D8", "c.beqz x8, -42");
}

#[test]
fn c_bnez_426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.bnez X(15), -72
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, FF", "c.bnez X(15), -72");
}

#[test]
fn c_bnez_427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.bnez x13, -116
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, F6", "c.bnez x13, -116");
}

#[test]
fn c_ebreak_428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_ebreak_429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 90", "c.ebreak");
}

#[test]
fn c_fld_430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fld F(12), [X(15), 80]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B0, 2B", "c.fld F(12), [X(15), 80]");
}

#[test]
fn c_fld_431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fld f10, [x9, 104]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 34", "c.fld f10, [x9, 104]");
}

#[test]
fn c_fldsp_432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fldsp f24, [sp, 64]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 2C", "c.fldsp f24, [sp, 64]");
}

#[test]
fn c_fldsp_433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fldsp f11, [sp, 264]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 25", "c.fldsp f11, [sp, 264]");
}

#[test]
fn c_fsd_434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fsd F(10), [x10, 56]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, BD", "c.fsd F(10), [x10, 56]");
}

#[test]
fn c_fsd_435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fsd f10, [x11, 32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, B1", "c.fsd f10, [x11, 32]");
}

#[test]
fn c_fsdsp_436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fsdsp f7, [sp, 416]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, B3", "c.fsdsp f7, [sp, 416]");
}

#[test]
fn c_fsdsp_437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature cd
        ; c.fsdsp f23, [sp, 312]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, BE", "c.fsdsp f23, [sp, 312]");
}

#[test]
fn c_j_438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.j -1070
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, BE", "c.j -1070");
}

#[test]
fn c_j_439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.j 776
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, A6", "c.j 776");
}

#[test]
fn c_jalr_440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.jalr X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 9C", "c.jalr X(24)");
}

#[test]
fn c_jalr_441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.jalr x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, 97", "c.jalr x14");
}

#[test]
fn c_jr_442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.jr x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 85", "c.jr x11");
}

#[test]
fn c_jr_443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.jr X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 8F", "c.jr X(31)");
}

#[test]
fn c_lbu_444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.lbu X(12), [X(10), 1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 81", "c.lbu X(12), [X(10), 1]");
}

#[test]
fn c_lbu_445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.lbu x11, [x15, 3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 83", "c.lbu x11, [x15, 3]");
}

#[test]
fn c_ld_446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.ld x9, [X(9), 64]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 60", "c.ld x9, [X(9), 64]");
}

#[test]
fn c_ld_447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.ld x14, [X(11), 80]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 69", "c.ld x14, [X(11), 80]");
}

#[test]
fn c_ldsp_448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.ldsp X(11), [sp, 152]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 65", "c.ldsp X(11), [sp, 152]");
}

#[test]
fn c_ldsp_449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.ldsp x16, [sp, 72]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 68", "c.ldsp x16, [sp, 72]");
}

#[test]
fn c_lh_450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.lh x13, [X(8), 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 84", "c.lh x13, [X(8), 2]");
}

#[test]
fn c_lh_451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.lh X(8), [x10, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 85", "c.lh X(8), [x10, 0]");
}

#[test]
fn c_lhu_452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.lhu x14, [X(8), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, 84", "c.lhu x14, [X(8), 0]");
}

#[test]
fn c_lhu_453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.lhu x15, [x11, 2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 85", "c.lhu x15, [x11, 2]");
}

#[test]
fn c_li_454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.li X(3), -5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 51", "c.li X(3), -5");
}

#[test]
fn c_li_455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.li x14, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 47", "c.li x14, 1");
}

#[test]
fn c_lw_456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.lw x9, [X(12), 4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 42", "c.lw x9, [X(12), 4]");
}

#[test]
fn c_lw_457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.lw x12, [X(12), 8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, 46", "c.lw x12, [X(12), 8]");
}

#[test]
fn c_lwsp_458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.lwsp X(5), [sp, 252]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 52", "c.lwsp X(5), [sp, 252]");
}

#[test]
fn c_lwsp_459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.lwsp x3, [sp, 180]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 51", "c.lwsp x3, [sp, 180]");
}

#[test]
fn c_mop_1_460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_1_461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.1");
}

#[test]
fn c_mop_11_462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_11_463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 65", "c.mop.11");
}

#[test]
fn c_mop_13_464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_13_465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 66", "c.mop.13");
}

#[test]
fn c_mop_15_466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_15_467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 67", "c.mop.15");
}

#[test]
fn c_mop_3_468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_3_469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.3");
}

#[test]
fn c_mop_5_470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_5_471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.mop.5");
}

#[test]
fn c_mop_7_472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_7_473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 63", "c.mop.7");
}

#[test]
fn c_mop_9_474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_9_475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 64", "c.mop.9");
}

#[test]
fn c_mop_n_476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.N 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.mop.N 1");
}

#[test]
fn c_mop_n_477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop
        ; c.mop.N 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 61", "c.mop.N 3");
}

#[test]
fn c_mul_478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature mzcb
        ; c.mul x10, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 9D", "c.mul x10, X(14)");
}

#[test]
fn c_mul_479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature mzcb
        ; c.mul X(15), X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 9F", "c.mul X(15), X(12)");
}

#[test]
fn c_mv_480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.mv X(31), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 8F", "c.mv X(31), x24");
}

#[test]
fn c_mv_481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.mv X(2), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 81", "c.mv X(2), X(27)");
}

#[test]
fn c_nop_482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_nop_483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 00", "c.nop");
}

#[test]
fn c_not_484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.not X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 9F", "c.not X(14)");
}

#[test]
fn c_not_485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.not x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 9C", "c.not x9");
}

#[test]
fn c_ntl_all_486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_all_487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 90", "c.ntl.all");
}

#[test]
fn c_ntl_p1_488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_p1_489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 90", "c.ntl.p1");
}

#[test]
fn c_ntl_pall_490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_pall_491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 90", "c.ntl.pall");
}

#[test]
fn c_ntl_s1_492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_ntl_s1_493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature czihintntl
        ; c.ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 90", "c.ntl.s1");
}

#[test]
fn c_or_494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.or X(12), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 8E", "c.or X(12), x10");
}

#[test]
fn c_or_495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.or x14, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 8F", "c.or x14, x9");
}

#[test]
fn c_sb_496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.sb x8, [X(9), 3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 88", "c.sb x8, [X(9), 3]");
}

#[test]
fn c_sb_497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.sb x14, [X(13), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 8A", "c.sb x14, [X(13), 0]");
}

#[test]
fn c_sd_498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sd X(13), [x15, 136]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, E7", "c.sd X(13), [x15, 136]");
}

#[test]
fn c_sd_499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sd X(8), [x11, 104]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, F5", "c.sd X(8), [x11, 104]");
}

#[test]
fn c_sdsp_500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sdsp x8, [sp, 128]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, E1", "c.sdsp x8, [sp, 128]");
}

#[test]
fn c_sdsp_501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sdsp x16, [sp, 72]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, E4", "c.sdsp x16, [sp, 72]");
}

#[test]
fn c_sext_b_502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sext.b x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 9D", "c.sext.b x10");
}

#[test]
fn c_sext_b_503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sext.b x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 9E", "c.sext.b x12");
}

#[test]
fn c_sext_h_504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sext.h X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 9F", "c.sext.h X(15)");
}

#[test]
fn c_sext_h_505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sext.h x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6D, 9D", "c.sext.h x10");
}

#[test]
fn c_sext_w_506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sext.w x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 28", "c.sext.w x17");
}

#[test]
fn c_sext_w_507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sext.w X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 2D", "c.sext.w X(27)");
}

#[test]
fn c_sh_508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sh x8, [x10, 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 8D", "c.sh x8, [x10, 0]");
}

#[test]
fn c_sh_509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.sh x10, [X(14), 0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 8F", "c.sh x10, [X(14), 0]");
}

#[test]
fn c_slli_510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.slli X(6), 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 03", "c.slli X(6), 11");
}

#[test]
fn c_slli_511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.slli x7, 44
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, 13", "c.slli x7, 44");
}

#[test]
fn c_srai_512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.srai X(13), 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 86", "c.srai X(13), 29");
}

#[test]
fn c_srai_513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.srai X(9), 40
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 94", "c.srai X(9), 40");
}

#[test]
fn c_srli_514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.srli X(13), 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, 82", "c.srli X(13), 11");
}

#[test]
fn c_srli_515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.srli X(13), 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 82", "c.srli X(13), 13");
}

#[test]
fn c_sspopchk_516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspopchk_517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop_zicfiss
        ; c.sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 62", "c.sspopchk x5");
}

#[test]
fn c_sspush_518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sspush_519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmop_zicfiss
        ; c.sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 60", "c.sspush x1");
}

#[test]
fn c_sub_520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sub X(13), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 8E", "c.sub X(13), x11");
}

#[test]
fn c_sub_521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sub X(9), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 8C", "c.sub X(9), x14");
}

#[test]
fn c_subw_522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.subw X(13), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, 9E", "c.subw X(13), X(9)");
}

#[test]
fn c_subw_523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.subw X(14), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 9F", "c.subw X(14), X(14)");
}

#[test]
fn c_sw_524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sw X(13), [x9, 32]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, D0", "c.sw X(13), [x9, 32]");
}

#[test]
fn c_sw_525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.sw x12, [X(8), 16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, C8", "c.sw x12, [X(8), 16]");
}

#[test]
fn c_swsp_526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.swsp x28, [sp, 88]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, CC", "c.swsp x28, [sp, 88]");
}

#[test]
fn c_swsp_527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.swsp X(30), [sp, 176]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, D9", "c.swsp X(30), [sp, 176]");
}

#[test]
fn c_unimp_528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00", "c.unimp");
}

#[test]
fn c_unimp_529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 00", "c.unimp");
}

#[test]
fn c_xor_530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.xor X(11), x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 8D", "c.xor X(11), x15");
}

#[test]
fn c_xor_531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature c
        ; c.xor X(11), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 8D", "c.xor X(11), x13");
}

#[test]
fn c_zext_b_532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.zext.b X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 9F", "c.zext.b X(15)");
}

#[test]
fn c_zext_b_533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcb
        ; c.zext.b X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 9E", "c.zext.b X(13)");
}

#[test]
fn c_zext_h_534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.zext.h x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 9D", "c.zext.h x11");
}

#[test]
fn c_zext_h_535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb_zcb
        ; c.zext.h x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 9D", "c.zext.h x10");
}

#[test]
fn c_zext_w_536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba_zcb
        ; c.zext.w X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 9D", "c.zext.w X(10)");
}

#[test]
fn c_zext_w_537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba_zcb
        ; c.zext.w X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 9D", "c.zext.w X(11)");
}

#[test]
fn call_538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; call -151071032
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, D0, FE, F6, E7, 80, 80, 6C", "call -151071032");
}

#[test]
fn call_539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; call -629528221
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 30, 7A, DA, E7, 80, 30, 96", "call -629528221");
}

#[test]
fn cbo_clean_540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbom
        ; cbo.clean [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 1B, 00", "cbo.clean [X(23)]");
}

#[test]
fn cbo_clean_541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbom
        ; cbo.clean [x10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 15, 00", "cbo.clean [x10]");
}

#[test]
fn cbo_flush_542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbom
        ; cbo.flush [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 24, 00", "cbo.flush [x8]");
}

#[test]
fn cbo_flush_543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbom
        ; cbo.flush [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 21, 00", "cbo.flush [X(3)]");
}

#[test]
fn cbo_inval_544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbom
        ; cbo.inval [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 0B, 00", "cbo.inval [x22]");
}

#[test]
fn cbo_inval_545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbom
        ; cbo.inval [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 0A, 00", "cbo.inval [X(21)]");
}

#[test]
fn cbo_zero_546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicboz
        ; cbo.zero [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, A0, 47, 00", "cbo.zero [X(15)]");
}

#[test]
fn cbo_zero_547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicboz
        ; cbo.zero [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 20, 49, 00", "cbo.zero [X(18)]");
}

#[test]
fn clmul_548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; clmul x10, x5, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 95, 12, 0B", "clmul x10, x5, X(17)");
}

#[test]
fn clmul_549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; clmul x9, x19, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 94, C9, 0B", "clmul x9, x19, X(28)");
}

#[test]
fn clmulh_550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbc
        ; clmulh x20, X(29), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, BA, AE, 0A", "clmulh x20, X(29), x10");
}

#[test]
fn clmulh_551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkc
        ; clmulh X(11), x18, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 35, E9, 0A", "clmulh X(11), x18, x14");
}

#[test]
fn clmulr_552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbc
        ; clmulr X(3), X(23), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A1, 7B, 0A", "clmulr X(3), X(23), x7");
}

#[test]
fn clmulr_553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbc
        ; clmulr X(30), X(23), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, AF, 7B, 0A", "clmulr X(30), X(23), x7");
}

#[test]
fn clz_554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; clz X(11), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 15, 0D, 60", "clz X(11), X(26)");
}

#[test]
fn clz_555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; clz X(30), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9F, 06, 60", "clz X(30), X(13)");
}

#[test]
fn clzw_556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; clzw X(23), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 9B, 0C, 60", "clzw X(23), x25");
}

#[test]
fn clzw_557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; clzw x17, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 18, 0A, 60", "clzw x17, X(20)");
}

#[test]
fn cm_jalt_558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmt
        ; cm.jalt 209
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, A3", "cm.jalt 209");
}

#[test]
fn cm_jalt_559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmt
        ; cm.jalt 180
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, A2", "cm.jalt 180");
}

#[test]
fn cm_jt_560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmt
        ; cm.jt 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, A0", "cm.jt 5");
}

#[test]
fn cm_jt_561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmt
        ; cm.jt 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, A0", "cm.jt 20");
}

#[test]
fn cm_mva01s_562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.mva01s X(21), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, AE", "cm.mva01s X(21), X(18)");
}

#[test]
fn cm_mva01s_563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.mva01s X(18), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, AD", "cm.mva01s X(18), x20");
}

#[test]
fn cm_mvsa01_564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.mvsa01 x22, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, AF", "cm.mvsa01 x22, x21");
}

#[test]
fn cm_mvsa01_565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.mvsa01 X(9), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, AC", "cm.mvsa01 X(9), X(18)");
}

#[test]
fn cm_pop_566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.pop {ra; 5}, 80
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, BA", "cm.pop {{ra; 5}}, 80");
}

#[test]
fn cm_pop_567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.pop {ra, s0-s3}, 80
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, BA", "cm.pop {{ra, s0-s3}}, 80");
}

#[test]
fn cm_popret_568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.popret {ra, s0-s8}, 128
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, BE", "cm.popret {{ra, s0-s8}}, 128");
}

#[test]
fn cm_popret_569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.popret {ra; 9}, 96
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, BE", "cm.popret {{ra; 9}}, 96");
}

#[test]
fn cm_popretz_570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.popretz {ra, s0-s11}, 128
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, BC", "cm.popretz {{ra, s0-s11}}, 128");
}

#[test]
fn cm_popretz_571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.popretz {ra; 3}, 48
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, BC", "cm.popretz {{ra; 3}}, 48");
}

#[test]
fn cm_push_572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.push {ra, s0}, -32
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, B8", "cm.push {{ra, s0}}, -32");
}

#[test]
fn cm_push_573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zcmp
        ; cm.push {ra; 0}, -64
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, B8", "cm.push {{ra; 0}}, -64");
}

#[test]
fn cpop_574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; cpop x26, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9D, 2E, 60", "cpop x26, X(29)");
}

#[test]
fn cpop_575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; cpop x27, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9D, 24, 60", "cpop x27, x9");
}

#[test]
fn cpopw_576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; cpopw x7, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 13, 28, 60", "cpopw x7, X(16)");
}

#[test]
fn cpopw_577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; cpopw x10, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 95, 20, 60", "cpopw x10, X(1)");
}

#[test]
fn csrc_578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrc 3088, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, B0, 06, C1", "csrc 3088, X(13)");
}

#[test]
fn csrc_579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrc hpmcounter3, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, B0, 33, C0", "csrc hpmcounter3, X(7)");
}

#[test]
fn csrci_580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrci hpmcounter17, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, F0, 15, C1", "csrci hpmcounter17, 11");
}

#[test]
fn csrci_581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrci 3092, 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, F0, 4F, C1", "csrci 3092, 31");
}

#[test]
fn csrr_582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrr X(26), fcsr
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2D, 30, 00", "csrr X(26), fcsr");
}

#[test]
fn csrr_583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrr x21, 3093
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2A, 50, C1", "csrr x21, 3093");
}

#[test]
fn csrrc_584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrc X(5), 21, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 32, 54, 01", "csrrc X(5), 21, X(8)");
}

#[test]
fn csrrc_585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrc X(7), 3095, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 33, 79, C1", "csrrc X(7), 3095, X(18)");
}

#[test]
fn csrrci_586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrci X(13), 3087, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 76, F4, C0", "csrrci X(13), 3087, 8");
}

#[test]
fn csrrci_587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrci X(31), 3087, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 7F, F6, C0", "csrrci X(31), 3087, 12");
}

#[test]
fn csrrs_588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrs X(6), hpmcounter9, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A3, 96, C0", "csrrs X(6), hpmcounter9, x13");
}

#[test]
fn csrrs_589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrs x21, frm, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2A, 2D, 00", "csrrs x21, frm, x26");
}

#[test]
fn csrrsi_590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrsi X(9), 23, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 64, 76, 01", "csrrsi X(9), 23, 12");
}

#[test]
fn csrrsi_591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrsi x28, 3099, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 6E, B9, C1", "csrrsi x28, 3099, 18");
}

#[test]
fn csrrw_592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrw X(18), 3, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 99, 3F, 00", "csrrw X(18), 3, x31");
}

#[test]
fn csrrw_593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrw X(30), 3092, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 1F, 49, C1", "csrrw X(30), 3092, x18");
}

#[test]
fn csrrwi_594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrwi x3, hpmcounter11, 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, D1, BA, C0", "csrrwi x3, hpmcounter11, 21");
}

#[test]
fn csrrwi_595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrrwi x10, hpmcounter7, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 55, 79, C0", "csrrwi x10, hpmcounter7, 18");
}

#[test]
fn csrs_596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrs jvt, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A0, 73, 01", "csrs jvt, x7");
}

#[test]
fn csrs_597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrs 2, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, A0, 20, 00", "csrs 2, X(1)");
}

#[test]
fn csrsi_598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrsi hpmcounter6, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 60, 65, C0", "csrsi hpmcounter6, 10");
}

#[test]
fn csrsi_599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrsi hpmcounter22, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 60, 6C, C1", "csrsi hpmcounter22, 24");
}

#[test]
fn csrw_600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrw 8, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 8A, 00", "csrw 8, X(20)");
}

#[test]
fn csrw_601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrw 3091, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 32, C1", "csrw 3091, X(4)");
}

#[test]
fn csrwi_602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrwi 9, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 50, 94, 00", "csrwi 9, 8");
}

#[test]
fn csrwi_603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicsr
        ; csrwi hpmcounter18, 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 50, 26, C1", "csrwi hpmcounter18, 12");
}

#[test]
fn ctz_604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; ctz x9, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 14, 17, 60", "ctz x9, X(14)");
}

#[test]
fn ctz_605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; ctz X(2), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 11, 1F, 60", "ctz X(2), x30");
}

#[test]
fn ctzw_606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; ctzw x16, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 98, 17, 60", "ctzw x16, X(15)");
}

#[test]
fn ctzw_607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; ctzw x16, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 18, 18, 60", "ctzw x16, X(16)");
}

#[test]
fn czero_eqz_608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicond
        ; czero.eqz X(8), x1, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D4, C0, 0E", "czero.eqz X(8), x1, X(12)");
}

#[test]
fn czero_eqz_609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicond
        ; czero.eqz X(21), x24, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 5A, 2C, 0E", "czero.eqz X(21), x24, X(2)");
}

#[test]
fn czero_nez_610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicond
        ; czero.nez X(22), X(28), X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 7B, 1E, 0E", "czero.nez X(22), X(28), X(1)");
}

#[test]
fn czero_nez_611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicond
        ; czero.nez x27, x1, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, FD, 30, 0F", "czero.nez x27, x1, x19");
}

#[test]
fn div_612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; div X(17), x1, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, C8, 20, 02", "div X(17), x1, x2");
}

#[test]
fn div_613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; div x22, x4, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 4B, 82, 02", "div x22, x4, X(8)");
}

#[test]
fn divu_614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; divu x3, x9, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D1, 04, 02", "divu x3, x9, X(0)");
}

#[test]
fn divu_615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; divu x12, X(12), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 56, D6, 02", "divu x12, X(12), x13");
}

#[test]
fn divuw_616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; divuw x11, X(7), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, D5, A3, 03", "divuw x11, X(7), X(26)");
}

#[test]
fn divuw_617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; divuw X(24), x16, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 5C, F8, 02", "divuw X(24), x16, X(15)");
}

#[test]
fn divw_618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; divw X(26), x2, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 4D, A1, 02", "divw X(26), x2, X(10)");
}

#[test]
fn divw_619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; divw x19, x21, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, C9, AA, 02", "divw x19, x21, x10");
}

#[test]
fn ebreak_620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ebreak_621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ebreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "ebreak");
}

#[test]
fn ecall_622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn ecall_623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ecall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "ecall");
}

#[test]
fn fabs_d_624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fabs.d f5, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A2, F7, 22", "fabs.d f5, f15");
}

#[test]
fn fabs_d_625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fabs.d F(19), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, 39, 23", "fabs.d F(19), F(19)");
}

#[test]
fn fabs_d_626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fabs.d X(25), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2C, E7, 22", "fabs.d X(25), X(14)");
}

#[test]
fn fabs_d_627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fabs.d X(7), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A3, 18, 23", "fabs.d X(7), x17");
}

#[test]
fn fabs_h_628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fabs.h F(24), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AC, F7, 24", "fabs.h F(24), f15");
}

#[test]
fn fabs_h_629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fabs.h F(5), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 22, 29, 25", "fabs.h F(5), F(18)");
}

#[test]
fn fabs_h_630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fabs.h X(22), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2B, 21, 24", "fabs.h X(22), X(2)");
}

#[test]
fn fabs_h_631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fabs.h x7, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 23, 00, 24", "fabs.h x7, X(0)");
}

#[test]
fn fabs_q_632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fabs.q f17, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, 31, 26", "fabs.q f17, f3");
}

#[test]
fn fabs_q_633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fabs.q f27, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, 18, 27", "fabs.q f27, f17");
}

#[test]
fn fabs_s_634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fabs.s F(8), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A4, F7, 20", "fabs.s F(8), f15");
}

#[test]
fn fabs_s_635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fabs.s F(4), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 22, 8C, 21", "fabs.s F(4), F(24)");
}

#[test]
fn fabs_s_636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fabs.s x4, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 22, E7, 20", "fabs.s x4, x14");
}

#[test]
fn fabs_s_637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fabs.s X(24), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AC, DE, 21", "fabs.s X(24), x29");
}

#[test]
fn fadd_d_638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fadd.d f29, f21, F(29), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AE, DA, 03", "fadd.d f29, f21, F(29), rdn");
}

#[test]
fn fadd_d_639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fadd.d f31, f15, F(0), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BF, 07, 02", "fadd.d f31, f15, F(0), rup");
}

#[test]
fn fadd_d_640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fadd.d X(6), X(11), X(28), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A3, C5, 03", "fadd.d X(6), X(11), X(28), rdn");
}

#[test]
fn fadd_d_641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fadd.d X(12), x22, X(30), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 16, EB, 03", "fadd.d X(12), x22, X(30), rtz");
}

#[test]
fn fadd_d_642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fadd.d F(2), f4, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 92, 02", "fadd.d F(2), f4, F(9)");
}

#[test]
fn fadd_d_643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fadd.d F(15), f7, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 63, 03", "fadd.d F(15), f7, F(22)");
}

#[test]
fn fadd_d_644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fadd.d x18, x4, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 22, 02", "fadd.d x18, x4, x2");
}

#[test]
fn fadd_d_645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fadd.d x16, x17, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 58, 03", "fadd.d x16, x17, x21");
}

#[test]
fn fadd_h_646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fadd.h F(27), F(8), F(9), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 94, 04", "fadd.h F(27), F(8), F(9), dyn");
}

#[test]
fn fadd_h_647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fadd.h f19, f21, f17, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, 1A, 05", "fadd.h f19, f21, f17, rdn");
}

#[test]
fn fadd_h_648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fadd.h x26, X(6), x8, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 83, 04", "fadd.h x26, X(6), x8, rne");
}

#[test]
fn fadd_h_649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fadd.h x24, x29, X(24), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9C, 8E, 05", "fadd.h x24, x29, X(24), rtz");
}

#[test]
fn fadd_h_650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fadd.h F(22), F(11), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 45, 05", "fadd.h F(22), F(11), f20");
}

#[test]
fn fadd_h_651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fadd.h f24, F(24), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, EC, 04", "fadd.h f24, F(24), f14");
}

#[test]
fn fadd_h_652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fadd.h x4, X(20), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 0A, 05", "fadd.h x4, X(20), X(16)");
}

#[test]
fn fadd_h_653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fadd.h x3, x28, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 71, BE, 05", "fadd.h x3, x28, x27");
}

#[test]
fn fadd_q_654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fadd.q f13, f6, F(28), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 46, C3, 07", "fadd.q f13, f6, F(28), rmm");
}

#[test]
fn fadd_q_655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fadd.q F(2), F(30), F(12), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, CF, 06", "fadd.q F(2), F(30), F(12), rdn");
}

#[test]
fn fadd_q_656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fadd.q F(25), F(30), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, 2F, 06", "fadd.q F(25), F(30), f2");
}

#[test]
fn fadd_q_657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fadd.q F(12), f21, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, BA, 07", "fadd.q F(12), f21, F(27)");
}

#[test]
fn fadd_s_658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fadd.s f11, F(20), f29, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 05, DA, 01", "fadd.s f11, F(20), f29, rne");
}

#[test]
fn fadd_s_659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fadd.s F(14), f30, f7, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 7F, 00", "fadd.s F(14), f30, f7, rtz");
}

#[test]
fn fadd_s_660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fadd.s x23, x2, x20, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 41, 01", "fadd.s x23, x2, x20, dyn");
}

#[test]
fn fadd_s_661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fadd.s x18, x23, X(6), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A9, 6B, 00", "fadd.s x18, x23, X(6), rdn");
}

#[test]
fn fadd_s_662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fadd.s F(17), F(18), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, C9, 01", "fadd.s F(17), F(18), F(28)");
}

#[test]
fn fadd_s_663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fadd.s f13, f26, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, AD, 01", "fadd.s f13, f26, F(26)");
}

#[test]
fn fadd_s_664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fadd.s X(29), x22, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 8B, 00", "fadd.s X(29), x22, X(8)");
}

#[test]
fn fadd_s_665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fadd.s X(25), x18, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, C9, 00", "fadd.s X(25), x18, X(12)");
}

#[test]
fn fclass_d_666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fclass.d X(7), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 0F, E2", "fclass.d X(7), F(31)");
}

#[test]
fn fclass_d_667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fclass.d x21, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1A, 08, E2", "fclass.d x21, f16");
}

#[test]
fn fclass_d_668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fclass.d X(10), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 95, 0C, E2", "fclass.d X(10), x25");
}

#[test]
fn fclass_d_669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fclass.d X(29), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1E, 07, E2", "fclass.d X(29), x14");
}

#[test]
fn fclass_h_670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fclass.h x7, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 13, 01, E4", "fclass.h x7, f2");
}

#[test]
fn fclass_h_671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fclass.h X(18), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 19, 0E, E4", "fclass.h X(18), f28");
}

#[test]
fn fclass_h_672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fclass.h x0, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 0A, E4", "fclass.h x0, X(20)");
}

#[test]
fn fclass_h_673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fclass.h X(29), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1E, 03, E4", "fclass.h X(29), X(6)");
}

#[test]
fn fclass_q_674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fclass.q x6, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 13, 01, E6", "fclass.q x6, F(2)");
}

#[test]
fn fclass_q_675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fclass.q X(18), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 19, 02, E6", "fclass.q X(18), F(4)");
}

#[test]
fn fclass_s_676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fclass.s X(26), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1D, 0B, E0", "fclass.s X(26), F(22)");
}

#[test]
fn fclass_s_677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fclass.s x4, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 12, 0F, E0", "fclass.s x4, f30");
}

#[test]
fn fclass_s_678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fclass.s x3, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 04, E0", "fclass.s x3, X(8)");
}

#[test]
fn fclass_s_679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fclass.s X(0), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 0D, E0", "fclass.s X(0), x26");
}

#[test]
fn fcvt_bf16_s_680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfbfmin
        ; fcvt.bf16.s f19, f11, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, 85, 44", "fcvt.bf16.s f19, f11, rdn");
}

#[test]
fn fcvt_bf16_s_681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfbfmin
        ; fcvt.bf16.s F(25), F(19), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9C, 89, 44", "fcvt.bf16.s F(25), F(19), rtz");
}

#[test]
fn fcvt_bf16_s_682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfbfmin
        ; fcvt.bf16.s F(9), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 85, 44", "fcvt.bf16.s F(9), f11");
}

#[test]
fn fcvt_bf16_s_683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfbfmin
        ; fcvt.bf16.s F(28), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 80, 44", "fcvt.bf16.s F(28), F(1)");
}

#[test]
fn fcvt_d_h_684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfhmin
        ; fcvt.d.h f18, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 2D, 42", "fcvt.d.h f18, f26");
}

#[test]
fn fcvt_d_h_685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfhmin
        ; fcvt.d.h f8, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, 21, 42", "fcvt.d.h f8, F(2)");
}

#[test]
fn fcvt_d_h_686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx_zhinxmin
        ; fcvt.d.h x10, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 2A, 42", "fcvt.d.h x10, X(20)");
}

#[test]
fn fcvt_d_h_687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx_zhinxmin
        ; fcvt.d.h x9, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 27, 42", "fcvt.d.h x9, X(14)");
}

#[test]
fn fcvt_d_l_688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.l f24, X(9), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 24, D2", "fcvt.d.l f24, X(9), rne");
}

#[test]
fn fcvt_d_l_689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.l f2, X(1), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, 20, D2", "fcvt.d.l f2, X(1), rdn");
}

#[test]
fn fcvt_d_l_690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.l x15, x9, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 24, D2", "fcvt.d.l x15, x9, dyn");
}

#[test]
fn fcvt_d_l_691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.l X(14), X(26), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 2D, D2", "fcvt.d.l X(14), X(26), dyn");
}

#[test]
fn fcvt_d_l_692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.l f19, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 26, D2", "fcvt.d.l f19, X(13)");
}

#[test]
fn fcvt_d_l_693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.l F(25), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 23, D2", "fcvt.d.l F(25), x7");
}

#[test]
fn fcvt_d_l_694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.l x8, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 2F, D2", "fcvt.d.l x8, x31");
}

#[test]
fn fcvt_d_l_695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.l X(2), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 24, D2", "fcvt.d.l X(2), X(9)");
}

#[test]
fn fcvt_d_lu_696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.lu F(19), x31, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B9, 3F, D2", "fcvt.d.lu F(19), x31, rup");
}

#[test]
fn fcvt_d_lu_697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.lu F(10), X(20), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 3A, D2", "fcvt.d.lu F(10), X(20), dyn");
}

#[test]
fn fcvt_d_lu_698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.lu X(13), X(7), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A6, 33, D2", "fcvt.d.lu X(13), X(7), rdn");
}

#[test]
fn fcvt_d_lu_699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.lu x26, x7, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 33, D2", "fcvt.d.lu x26, x7, rne");
}

#[test]
fn fcvt_d_lu_700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.lu F(26), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 36, D2", "fcvt.d.lu F(26), x13");
}

#[test]
fn fcvt_d_lu_701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.lu F(29), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 3C, D2", "fcvt.d.lu F(29), X(25)");
}

#[test]
fn fcvt_d_lu_702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.lu X(7), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 3A, D2", "fcvt.d.lu X(7), X(20)");
}

#[test]
fn fcvt_d_lu_703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.lu X(31), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 32, D2", "fcvt.d.lu X(31), X(5)");
}

#[test]
fn fcvt_d_q_704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.d.q F(1), F(26), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 20, 3D, 42", "fcvt.d.q F(1), F(26), rdn");
}

#[test]
fn fcvt_d_q_705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.d.q F(25), f28, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0C, 3E, 42", "fcvt.d.q F(25), f28, rne");
}

#[test]
fn fcvt_d_q_706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.d.q F(27), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 34, 42", "fcvt.d.q F(27), f8");
}

#[test]
fn fcvt_d_q_707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.d.q f28, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 3D, 42", "fcvt.d.q f28, F(27)");
}

#[test]
fn fcvt_d_s_708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.s F(12), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 04, 42", "fcvt.d.s F(12), f9");
}

#[test]
fn fcvt_d_s_709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.s F(3), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 0B, 42", "fcvt.d.s F(3), f22");
}

#[test]
fn fcvt_d_s_710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.s x18, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 89, 09, 42", "fcvt.d.s x18, X(19)");
}

#[test]
fn fcvt_d_s_711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.s X(21), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 01, 42", "fcvt.d.s X(21), x3");
}

#[test]
fn fcvt_d_w_712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.w f13, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 05, D2", "fcvt.d.w f13, X(10)");
}

#[test]
fn fcvt_d_w_713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.w F(25), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8C, 02, D2", "fcvt.d.w F(25), X(5)");
}

#[test]
fn fcvt_d_w_714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.w X(28), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, 05, D2", "fcvt.d.w X(28), X(11)");
}

#[test]
fn fcvt_d_w_715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.w X(12), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 0D, D2", "fcvt.d.w X(12), X(27)");
}

#[test]
fn fcvt_d_wu_716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.wu F(9), x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 10, D2", "fcvt.d.wu F(9), x1");
}

#[test]
fn fcvt_d_wu_717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.d.wu f26, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 12, D2", "fcvt.d.wu f26, X(5)");
}

#[test]
fn fcvt_d_wu_718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.wu x1, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 17, D2", "fcvt.d.wu x1, X(14)");
}

#[test]
fn fcvt_d_wu_719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.d.wu X(2), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 1E, D2", "fcvt.d.wu X(2), x28");
}

#[test]
fn fcvt_h_d_720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfhmin
        ; fcvt.h.d F(12), F(3), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 11, 44", "fcvt.h.d F(12), F(3), rne");
}

#[test]
fn fcvt_h_d_721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfh
        ; fcvt.h.d F(14), f31, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A7, 1F, 44", "fcvt.h.d F(14), f31, rdn");
}

#[test]
fn fcvt_h_d_722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx_zhinxmin
        ; fcvt.h.d x0, x4, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 10, 12, 44", "fcvt.h.d x0, x4, rtz");
}

#[test]
fn fcvt_h_d_723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx_zhinx
        ; fcvt.h.d x7, X(24), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 33, 1C, 44", "fcvt.h.d x7, X(24), rup");
}

#[test]
fn fcvt_h_d_724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfhmin
        ; fcvt.h.d F(8), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 18, 44", "fcvt.h.d F(8), f17");
}

#[test]
fn fcvt_h_d_725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfhmin
        ; fcvt.h.d F(29), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 1C, 44", "fcvt.h.d F(29), f24");
}

#[test]
fn fcvt_h_d_726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx_zhinx
        ; fcvt.h.d X(28), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 12, 44", "fcvt.h.d X(28), X(4)");
}

#[test]
fn fcvt_h_d_727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx_zhinxmin
        ; fcvt.h.d x7, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 13, 44", "fcvt.h.d x7, X(7)");
}

#[test]
fn fcvt_h_l_728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.l F(11), x10, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 45, 25, D4", "fcvt.h.l F(11), x10, rmm");
}

#[test]
fn fcvt_h_l_729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.l f17, X(0), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 20, D4", "fcvt.h.l f17, X(0), rne");
}

#[test]
fn fcvt_h_l_730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.l X(7), x30, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 33, 2F, D4", "fcvt.h.l X(7), x30, rup");
}

#[test]
fn fcvt_h_l_731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.l X(14), X(27), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 2D, D4", "fcvt.h.l X(14), X(27), rne");
}

#[test]
fn fcvt_h_l_732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.l F(24), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 22, D4", "fcvt.h.l F(24), X(4)");
}

#[test]
fn fcvt_h_l_733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.l F(20), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 26, D4", "fcvt.h.l F(20), x12");
}

#[test]
fn fcvt_h_l_734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.l x15, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 24, D4", "fcvt.h.l x15, X(9)");
}

#[test]
fn fcvt_h_l_735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.l X(18), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 28, D4", "fcvt.h.l X(18), x17");
}

#[test]
fn fcvt_h_lu_736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.lu F(4), x16, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 22, 38, D4", "fcvt.h.lu F(4), x16, rdn");
}

#[test]
fn fcvt_h_lu_737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.lu f30, X(18), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4F, 39, D4", "fcvt.h.lu f30, X(18), rmm");
}

#[test]
fn fcvt_h_lu_738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.lu x9, x13, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C4, 36, D4", "fcvt.h.lu x9, x13, rmm");
}

#[test]
fn fcvt_h_lu_739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.lu X(11), x14, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 35, 37, D4", "fcvt.h.lu X(11), x14, rup");
}

#[test]
fn fcvt_h_lu_740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.lu F(7), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 33, D4", "fcvt.h.lu F(7), X(6)");
}

#[test]
fn fcvt_h_lu_741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.lu F(8), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 30, D4", "fcvt.h.lu F(8), X(0)");
}

#[test]
fn fcvt_h_lu_742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.lu X(2), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 3E, D4", "fcvt.h.lu X(2), x29");
}

#[test]
fn fcvt_h_lu_743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.lu X(10), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 34, D4", "fcvt.h.lu X(10), x9");
}

#[test]
fn fcvt_h_q_744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfhmin
        ; fcvt.h.q f20, f8, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2A, 34, 44", "fcvt.h.q f20, f8, rdn");
}

#[test]
fn fcvt_h_q_745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfhmin
        ; fcvt.h.q f11, f13, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B5, 36, 44", "fcvt.h.q f11, f13, rup");
}

#[test]
fn fcvt_h_q_746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfh
        ; fcvt.h.q F(31), F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 32, 44", "fcvt.h.q F(31), F(5)");
}

#[test]
fn fcvt_h_q_747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfhmin
        ; fcvt.h.q F(21), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, 36, 44", "fcvt.h.q F(21), F(12)");
}

#[test]
fn fcvt_h_s_748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfhmin
        ; fcvt.h.s f24, f7, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 03, 44", "fcvt.h.s f24, f7, rne");
}

#[test]
fn fcvt_h_s_749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.s f11, f0, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 35, 00, 44", "fcvt.h.s f11, f0, rup");
}

#[test]
fn fcvt_h_s_750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.s X(18), X(30), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 0F, 44", "fcvt.h.s X(18), X(30), dyn");
}

#[test]
fn fcvt_h_s_751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.s x12, x28, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 0E, 44", "fcvt.h.s x12, x28, rne");
}

#[test]
fn fcvt_h_s_752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.s F(21), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FA, 03, 44", "fcvt.h.s F(21), f7");
}

#[test]
fn fcvt_h_s_753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.s F(26), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 05, 44", "fcvt.h.s F(26), F(10)");
}

#[test]
fn fcvt_h_s_754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.s X(21), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, 08, 44", "fcvt.h.s X(21), X(16)");
}

#[test]
fn fcvt_h_s_755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinxmin
        ; fcvt.h.s x9, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 0D, 44", "fcvt.h.s x9, x27");
}

#[test]
fn fcvt_h_w_756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.w F(5), x0, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 22, 00, D4", "fcvt.h.w F(5), x0, rdn");
}

#[test]
fn fcvt_h_w_757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.w F(13), x6, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 26, 03, D4", "fcvt.h.w F(13), x6, rdn");
}

#[test]
fn fcvt_h_w_758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.w X(9), x24, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 24, 0C, D4", "fcvt.h.w X(9), x24, rdn");
}

#[test]
fn fcvt_h_w_759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.w x24, X(18), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3C, 09, D4", "fcvt.h.w x24, X(18), rup");
}

#[test]
fn fcvt_h_w_760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.w F(26), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 01, D4", "fcvt.h.w F(26), x3");
}

#[test]
fn fcvt_h_w_761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.w F(25), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, 0C, D4", "fcvt.h.w F(25), x24");
}

#[test]
fn fcvt_h_w_762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.w X(26), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 03, D4", "fcvt.h.w X(26), X(6)");
}

#[test]
fn fcvt_h_w_763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.w x1, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, 03, D4", "fcvt.h.w x1, x7");
}

#[test]
fn fcvt_h_wu_764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.wu f29, x14, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0E, 17, D4", "fcvt.h.wu f29, x14, rne");
}

#[test]
fn fcvt_h_wu_765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.wu f11, x1, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 10, D4", "fcvt.h.wu f11, x1, rne");
}

#[test]
fn fcvt_h_wu_766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.wu X(22), X(23), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 1B, D4", "fcvt.h.wu X(22), X(23), rne");
}

#[test]
fn fcvt_h_wu_767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.wu x21, x16, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1A, 18, D4", "fcvt.h.wu x21, x16, rtz");
}

#[test]
fn fcvt_h_wu_768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.wu f4, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 10, D4", "fcvt.h.wu f4, x0");
}

#[test]
fn fcvt_h_wu_769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.h.wu F(30), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 14, D4", "fcvt.h.wu F(30), X(9)");
}

#[test]
fn fcvt_h_wu_770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.wu X(26), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 1C, D4", "fcvt.h.wu X(26), X(25)");
}

#[test]
fn fcvt_h_wu_771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.h.wu x12, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 1B, D4", "fcvt.h.wu x12, x23");
}

#[test]
fn fcvt_l_d_772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.l.d x25, f9, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, 24, C2", "fcvt.l.d x25, f9, rdn");
}

#[test]
fn fcvt_l_d_773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.l.d x27, f16, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1D, 28, C2", "fcvt.l.d x27, f16, rtz");
}

#[test]
fn fcvt_l_d_774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.l.d X(3), x28, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 41, 2E, C2", "fcvt.l.d X(3), x28, rmm");
}

#[test]
fn fcvt_l_d_775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.l.d x20, X(7), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CA, 23, C2", "fcvt.l.d x20, X(7), rmm");
}

#[test]
fn fcvt_l_d_776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.l.d x20, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 2D, C2", "fcvt.l.d x20, F(27)");
}

#[test]
fn fcvt_l_d_777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.l.d X(15), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 25, C2", "fcvt.l.d X(15), f11");
}

#[test]
fn fcvt_l_d_778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.l.d X(29), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 22, C2", "fcvt.l.d X(29), X(5)");
}

#[test]
fn fcvt_l_d_779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.l.d X(2), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 26, C2", "fcvt.l.d X(2), X(13)");
}

#[test]
fn fcvt_l_h_780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.l.h x7, F(26), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, 2D, C4", "fcvt.l.h x7, F(26), rne");
}

#[test]
fn fcvt_l_h_781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.l.h X(18), F(0), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 19, 20, C4", "fcvt.l.h X(18), F(0), rtz");
}

#[test]
fn fcvt_l_h_782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.l.h x28, X(28), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4E, 2E, C4", "fcvt.l.h x28, X(28), rmm");
}

#[test]
fn fcvt_l_h_783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.l.h X(14), X(1), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B7, 20, C4", "fcvt.l.h X(14), X(1), rup");
}

#[test]
fn fcvt_l_h_784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.l.h x22, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 20, C4", "fcvt.l.h x22, f0");
}

#[test]
fn fcvt_l_h_785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.l.h X(12), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 29, C4", "fcvt.l.h X(12), F(19)");
}

#[test]
fn fcvt_l_h_786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.l.h X(17), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 28, C4", "fcvt.l.h X(17), X(17)");
}

#[test]
fn fcvt_l_h_787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.l.h X(7), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 26, C4", "fcvt.l.h X(7), x12");
}

#[test]
fn fcvt_l_q_788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.l.q x23, F(22), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 2B, C6", "fcvt.l.q x23, F(22), dyn");
}

#[test]
fn fcvt_l_q_789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.l.q x0, f5, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 22, C6", "fcvt.l.q x0, f5, dyn");
}

#[test]
fn fcvt_l_q_790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.l.q X(2), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 2B, C6", "fcvt.l.q X(2), f23");
}

#[test]
fn fcvt_l_q_791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.l.q X(10), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 29, C6", "fcvt.l.q X(10), f19");
}

#[test]
fn fcvt_l_s_792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.l.s x9, F(6), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 23, C0", "fcvt.l.s x9, F(6), rne");
}

#[test]
fn fcvt_l_s_793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.l.s X(22), F(25), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BB, 2C, C0", "fcvt.l.s X(22), F(25), rup");
}

#[test]
fn fcvt_l_s_794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.l.s x1, X(20), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 2A, C0", "fcvt.l.s x1, X(20), rne");
}

#[test]
fn fcvt_l_s_795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.l.s X(7), X(10), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 23, 25, C0", "fcvt.l.s X(7), X(10), rdn");
}

#[test]
fn fcvt_l_s_796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.l.s x14, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 26, C0", "fcvt.l.s x14, f13");
}

#[test]
fn fcvt_l_s_797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.l.s X(22), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 22, C0", "fcvt.l.s X(22), F(4)");
}

#[test]
fn fcvt_l_s_798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.l.s x11, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 29, C0", "fcvt.l.s x11, x18");
}

#[test]
fn fcvt_l_s_799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.l.s X(28), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 23, C0", "fcvt.l.s X(28), X(6)");
}
