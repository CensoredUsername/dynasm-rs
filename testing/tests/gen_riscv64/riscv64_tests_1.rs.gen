
#[test]
fn fcvt_wu_h_800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h x24, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 12, C4", "fcvt.wu.h x24, f4");
}

#[test]
fn fcvt_wu_h_801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h X(31), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 19, C4", "fcvt.wu.h X(31), F(18)");
}

#[test]
fn fcvt_wu_q_802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(16), F(9), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B8, 14, C6", "fcvt.wu.q X(16), F(9), rup");
}

#[test]
fn fcvt_wu_q_803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(3), f1, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 10, C6", "fcvt.wu.q X(3), f1, dyn");
}

#[test]
fn fcvt_wu_q_804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(5), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 10, C6", "fcvt.wu.q X(5), F(1)");
}

#[test]
fn fcvt_wu_q_805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(20), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 1A, C6", "fcvt.wu.q X(20), F(21)");
}

#[test]
fn fcvt_wu_s_806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s X(24), f26, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3C, 1D, C0", "fcvt.wu.s X(24), f26, rup");
}

#[test]
fn fcvt_wu_s_807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x8, F(19), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 19, C0", "fcvt.wu.s x8, F(19), dyn");
}

#[test]
fn fcvt_wu_s_808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x0, f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 16, C0", "fcvt.wu.s x0, f12");
}

#[test]
fn fcvt_wu_s_809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s X(0), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 14, C0", "fcvt.wu.s X(0), f9");
}

#[test]
fn fcvtmod_w_d_810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fcvtmod.w.d X(2), F(18), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 11, 89, C2", "fcvtmod.w.d X(2), F(18), rtz");
}

#[test]
fn fcvtmod_w_d_811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fcvtmod.w.d X(5), f29, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 92, 8E, C2", "fcvtmod.w.d X(5), f29, rtz");
}

#[test]
fn fdiv_d_812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f5, F(4), f24, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 42, 82, 1B", "fdiv.d f5, F(4), f24, rmm");
}

#[test]
fn fdiv_d_813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f21, f11, f14, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BA, E5, 1A", "fdiv.d f21, f11, f14, rup");
}

#[test]
fn fdiv_d_814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d F(23), F(30), f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, DF, 1A", "fdiv.d F(23), F(30), f13");
}

#[test]
fn fdiv_d_815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f0, F(23), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 4B, 1B", "fdiv.d f0, F(23), F(20)");
}

#[test]
fn fdiv_h_816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(27), F(18), f13, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4D, D9, 1C", "fdiv.h F(27), F(18), f13, rmm");
}

#[test]
fn fdiv_h_817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h f0, f1, f18, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C0, 20, 1D", "fdiv.h f0, f1, f18, rmm");
}

#[test]
fn fdiv_h_818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(17), f29, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, AE, 1D", "fdiv.h F(17), f29, f26");
}

#[test]
fn fdiv_h_819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h f24, f3, f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, C1, 1C", "fdiv.h f24, f3, f12");
}

#[test]
fn fdiv_q_820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(29), F(15), f12, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AE, C7, 1E", "fdiv.q F(29), F(15), f12, rdn");
}

#[test]
fn fdiv_q_821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(0), f23, F(3), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C0, 3B, 1E", "fdiv.q F(0), f23, F(3), rmm");
}

#[test]
fn fdiv_q_822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(12), f10, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 95, 1E", "fdiv.q F(12), f10, F(9)");
}

#[test]
fn fdiv_q_823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(27), f11, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, B5, 1E", "fdiv.q F(27), f11, F(11)");
}

#[test]
fn fdiv_s_824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s F(22), f30, f12, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, CF, 18", "fdiv.s F(22), f30, f12, dyn");
}

#[test]
fn fdiv_s_825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f2, f9, F(27), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, B4, 19", "fdiv.s f2, f9, F(27), dyn");
}

#[test]
fn fdiv_s_826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f11, f22, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 8B, 18", "fdiv.s f11, f22, F(8)");
}

#[test]
fn fdiv_s_827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s F(19), F(15), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 07, 19", "fdiv.s F(19), F(15), f16");
}

#[test]
fn fence_828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence iorw, r
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 20, 0F", "fence iorw, r");
}

#[test]
fn fence_829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence iw, r
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 20, 09", "fence iw, r");
}

#[test]
fn fence_i_830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_i_831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_tso_832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn fence_tso_833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn feq_d_834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; feq.d x29, F(19), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AE, D9, A2", "feq.d x29, F(19), F(13)");
}

#[test]
fn feq_d_835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; feq.d x16, F(4), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 28, D2, A3", "feq.d x16, F(4), F(29)");
}

#[test]
fn feq_h_836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; feq.h x23, f11, F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 85, A5", "feq.h x23, f11, F(24)");
}

#[test]
fn feq_h_837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; feq.h X(9), f3, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A4, 91, A5", "feq.h X(9), f3, f25");
}

#[test]
fn feq_q_838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; feq.q x4, F(15), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A2, A7, A6", "feq.q x4, F(15), F(10)");
}

#[test]
fn feq_q_839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; feq.q X(8), f20, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 24, 0A, A7", "feq.q X(8), f20, f16");
}

#[test]
fn feq_s_840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; feq.s X(24), F(15), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AC, 47, A1", "feq.s X(24), F(15), F(20)");
}

#[test]
fn feq_s_841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; feq.s x2, F(26), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 21, 0D, A0", "feq.s x2, F(26), f0");
}

#[test]
fn fld_842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld F(17), [x18, -965]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 38, B9, C3", "fld F(17), [x18, -965]");
}

#[test]
fn fld_843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld f0, [x25, -881]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, B0, FC, C8", "fld f0, [x25, -881]");
}

#[test]
fn fle_d_844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fle.d x31, F(10), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0F, C5, A3", "fle.d x31, F(10), f28");
}

#[test]
fn fle_d_845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fle.d X(0), f15, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 80, 27, A2", "fle.d X(0), f15, F(2)");
}

#[test]
fn fle_h_846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fle.h x8, F(25), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 1C, A5", "fle.h x8, F(25), f17");
}

#[test]
fn fle_h_847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fle.h x4, F(10), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 75, A4", "fle.h x4, F(10), F(7)");
}

#[test]
fn fle_q_848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fle.q X(14), F(16), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 07, 48, A6", "fle.q X(14), F(16), f4");
}

#[test]
fn fle_q_849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fle.q X(27), f9, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 14, A7", "fle.q X(27), f9, F(17)");
}

#[test]
fn fle_s_850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fle.s X(10), f29, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 4E, A1", "fle.s X(10), f29, F(20)");
}

#[test]
fn fle_s_851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fle.s x8, F(25), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 8C, A1", "fle.s x8, F(25), F(24)");
}

#[test]
fn fleq_d_852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fleq.d X(15), F(25), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C7, 6C, A2", "fleq.d X(15), F(25), F(6)");
}

#[test]
fn fleq_d_853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fleq.d X(19), F(15), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C9, 57, A3", "fleq.d X(19), F(15), f21");
}

#[test]
fn fleq_h_854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fleq.h X(0), F(2), f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 40, 71, A4", "fleq.h X(0), F(2), f7");
}

#[test]
fn fleq_h_855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fleq.h X(22), f0, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4B, 00, A5", "fleq.h X(22), f0, F(16)");
}

#[test]
fn fleq_q_856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fleq.q X(30), f3, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CF, 01, A6", "fleq.q X(30), f3, F(0)");
}

#[test]
fn fleq_q_857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fleq.q x26, F(5), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CD, 42, A7", "fleq.q x26, F(5), F(20)");
}

#[test]
fn fleq_s_858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fleq.s x26, f25, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CD, 5C, A0", "fleq.s x26, f25, F(5)");
}

#[test]
fn fleq_s_859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fleq.s X(20), f22, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4A, 3B, A0", "fleq.s X(20), f22, F(3)");
}

#[test]
fn flh_860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh F(4), [X(29), -321]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 92, FE, EB", "flh F(4), [X(29), -321]");
}

#[test]
fn flh_861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh F(12), [x1, -1557]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 96, B0, 9E", "flh F(12), [x1, -1557]");
}

#[test]
fn fli_d_862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fli.d F(10), 128.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 1D, F2", "fli.d F(10), 128.0");
}

#[test]
fn fli_d_863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fli.d f17, 0.25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 14, F2", "fli.d f17, 0.25");
}

#[test]
fn fli_h_864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fli.h f23, 0.0625
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, 13, F4", "fli.h f23, 0.0625");
}

#[test]
fn fli_h_865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fli.h F(22), 8.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, 1C, F4", "fli.h F(22), 8.0");
}

#[test]
fn fli_q_866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fli.q F(28), 0.125
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, 13, F6", "fli.q F(28), 0.125");
}

#[test]
fn fli_q_867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fli.q F(24), 1.25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 18, F6", "fli.q F(24), 1.25");
}

#[test]
fn fli_s_868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fli.s f11, 0.0625
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 05, 13, F0", "fli.s f11, 0.0625");
}

#[test]
fn fli_s_869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fli.s f27, 0.25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, 14, F0", "fli.s f27, 0.25");
}

#[test]
fn flq_870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f17, [X(22), 1935]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 48, FB, 78", "flq f17, [X(22), 1935]");
}

#[test]
fn flq_871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f25, [X(3), 1234]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, CC, 21, 4D", "flq f25, [X(3), 1234]");
}

#[test]
fn flt_d_872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; flt.d X(23), F(4), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1B, 12, A3", "flt.d X(23), F(4), f17");
}

#[test]
fn flt_d_873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; flt.d x23, f5, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, E2, A2", "flt.d x23, f5, f14");
}

#[test]
fn flt_h_874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flt.h X(10), f7, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 95, C3, A5", "flt.h X(10), f7, f28");
}

#[test]
fn flt_h_875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flt.h x29, f31, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9E, AF, A4", "flt.h x29, f31, F(10)");
}

#[test]
fn flt_q_876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flt.q x13, F(5), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 96, 32, A7", "flt.q x13, F(5), f19");
}

#[test]
fn flt_q_877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flt.q X(19), f26, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 19, 0D, A7", "flt.q X(19), f26, f16");
}

#[test]
fn flt_s_878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flt.s x20, f27, f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, 4D, A1", "flt.s x20, f27, f20");
}

#[test]
fn flt_s_879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flt.s x9, F(25), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 94, FC, A1", "flt.s x9, F(25), f31");
}

#[test]
fn fltq_d_880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fltq.d X(10), f13, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D5, C6, A3", "fltq.d X(10), f13, F(28)");
}

#[test]
fn fltq_d_881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fltq.d x3, f21, F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D1, 9A, A3", "fltq.d x3, f21, F(25)");
}

#[test]
fn fltq_h_882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fltq.h x0, F(17), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D0, 28, A4", "fltq.h x0, F(17), F(2)");
}

#[test]
fn fltq_h_883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fltq.h X(17), F(15), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D8, 27, A4", "fltq.h X(17), F(15), f2");
}

#[test]
fn fltq_q_884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fltq.q x28, f13, f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, DE, F6, A7", "fltq.q x28, f13, f31");
}

#[test]
fn fltq_q_885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fltq.q X(5), F(23), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D2, DB, A7", "fltq.q X(5), F(23), f29");
}

#[test]
fn fltq_s_886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fltq.s X(28), f19, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, DE, B9, A1", "fltq.s X(28), f19, F(27)");
}

#[test]
fn fltq_s_887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fltq.s X(20), f29, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, DA, 1E, A1", "fltq.s X(20), f29, F(17)");
}

#[test]
fn flw_888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw f15, [x22, -604]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 27, 4B, DA", "flw f15, [x22, -604]");
}

#[test]
fn flw_889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(20), [X(11), -1769]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, AA, 75, 91", "flw F(20), [X(11), -1769]");
}

#[test]
fn fmadd_d_890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(22), F(12), f4, f11, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 1B, 46, 5A", "fmadd.d F(22), F(12), f4, f11, rtz");
}

#[test]
fn fmadd_d_891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(31), f22, f12, f17, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 4F, CB, 8A", "fmadd.d F(31), f22, f12, f17, rmm");
}

#[test]
fn fmadd_d_892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d f0, f5, f26, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F0, A2, 93", "fmadd.d f0, f5, f26, F(18)");
}

#[test]
fn fmadd_d_893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(19), f21, f10, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F9, AA, 72", "fmadd.d F(19), f21, f10, f14");
}

#[test]
fn fmadd_h_894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f2, F(21), F(21), F(25), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F1, 5A, CD", "fmadd.h f2, F(21), F(21), F(25), dyn");
}

#[test]
fn fmadd_h_895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h F(12), F(28), F(0), F(15), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 76, 0E, 7C", "fmadd.h F(12), F(28), F(0), F(15), dyn");
}

#[test]
fn fmadd_h_896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f14, f5, f22, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F7, 62, 55", "fmadd.h f14, f5, f22, F(10)");
}

#[test]
fn fmadd_h_897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f28, f17, F(12), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, FE, C8, A4", "fmadd.h f28, f17, F(12), f20");
}

#[test]
fn fmadd_q_898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(11), F(25), f9, F(0), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, A5, 9C, 06", "fmadd.q F(11), F(25), f9, F(0), rdn");
}

#[test]
fn fmadd_q_899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(16), f1, f22, f30, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F8, 60, F7", "fmadd.q F(16), f1, f22, f30, dyn");
}

#[test]
fn fmadd_q_900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(11), f0, f4, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 75, 40, 56", "fmadd.q F(11), f0, f4, f10");
}

#[test]
fn fmadd_q_901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q f21, F(25), F(30), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, FA, EC, AF", "fmadd.q f21, F(25), F(30), f21");
}

#[test]
fn fmadd_s_902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s F(12), F(18), F(10), f21, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 16, A9, A8", "fmadd.s F(12), F(18), F(10), f21, rtz");
}

#[test]
fn fmadd_s_903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s F(21), F(18), F(3), f15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7A, 39, 78", "fmadd.s F(21), F(18), F(3), f15, dyn");
}

#[test]
fn fmadd_s_904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f28, F(15), f20, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, FE, 47, 09", "fmadd.s f28, F(15), f20, F(1)");
}

#[test]
fn fmadd_s_905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f16, F(22), F(12), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 78, CB, 08", "fmadd.s f16, F(22), F(12), F(1)");
}

#[test]
fn fmax_d_906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmax.d F(25), f22, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, EB, 2B", "fmax.d F(25), f22, f30");
}

#[test]
fn fmax_d_907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmax.d F(5), F(22), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 12, BB, 2A", "fmax.d F(5), F(22), f11");
}

#[test]
fn fmax_h_908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmax.h f28, f10, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1E, 65, 2C", "fmax.h f28, f10, f6");
}

#[test]
fn fmax_h_909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmax.h F(7), f23, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 3B, 2C", "fmax.h F(7), f23, F(3)");
}

#[test]
fn fmax_q_910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmax.q f31, f9, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9F, 24, 2E", "fmax.q f31, f9, F(2)");
}

#[test]
fn fmax_q_911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmax.q F(23), F(31), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, 9F, 2E", "fmax.q F(23), F(31), F(9)");
}

#[test]
fn fmax_s_912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmax.s f14, F(15), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 87, 29", "fmax.s f14, F(15), f24");
}

#[test]
fn fmax_s_913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmax.s f8, F(17), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 94, 88, 29", "fmax.s f8, F(17), F(24)");
}

#[test]
fn fmaxm_d_914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fmaxm.d F(29), f10, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3E, E5, 2B", "fmaxm.d F(29), f10, F(30)");
}

#[test]
fn fmaxm_d_915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fmaxm.d F(28), F(19), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BE, 59, 2B", "fmaxm.d F(28), F(19), F(21)");
}

#[test]
fn fmaxm_h_916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fmaxm.h f7, F(11), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B3, 55, 2D", "fmaxm.h f7, F(11), F(21)");
}

#[test]
fn fmaxm_h_917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fmaxm.h f3, F(4), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 31, D2, 2C", "fmaxm.h f3, F(4), F(13)");
}

#[test]
fn fmaxm_q_918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmaxm.q f11, F(10), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 35, D5, 2E", "fmaxm.q f11, F(10), F(13)");
}

#[test]
fn fmaxm_q_919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmaxm.q F(20), f12, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3A, D6, 2F", "fmaxm.q F(20), f12, F(29)");
}

#[test]
fn fmaxm_s_920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fmaxm.s f25, f4, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3C, 12, 29", "fmaxm.s f25, f4, F(17)");
}

#[test]
fn fmaxm_s_921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fmaxm.s f8, f5, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B4, F2, 29", "fmaxm.s f8, f5, F(31)");
}

#[test]
fn fmin_d_922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmin.d F(31), F(31), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8F, 4F, 2B", "fmin.d F(31), F(31), F(20)");
}

#[test]
fn fmin_d_923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmin.d f27, F(4), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, 12, 2A", "fmin.d f27, F(4), F(1)");
}

#[test]
fn fmin_h_924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmin.h F(20), f6, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, F3, 2C", "fmin.h F(20), f6, F(15)");
}

#[test]
fn fmin_h_925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmin.h F(17), F(19), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 88, 99, 2D", "fmin.h F(17), F(19), F(25)");
}

#[test]
fn fmin_q_926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmin.q f10, f6, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, F3, 2E", "fmin.q f10, f6, f15");
}

#[test]
fn fmin_q_927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmin.q f6, f25, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 6C, 2F", "fmin.q f6, f25, f22");
}

#[test]
fn fmin_s_928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmin.s f20, F(0), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 40, 29", "fmin.s f20, F(0), f20");
}

#[test]
fn fmin_s_929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmin.s F(9), F(14), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 37, 28", "fmin.s F(9), F(14), F(3)");
}

#[test]
fn fminm_d_930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fminm.d F(26), f7, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, 33, 2A", "fminm.d F(26), f7, F(3)");
}

#[test]
fn fminm_d_931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fminm.d F(2), F(11), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, 45, 2B", "fminm.d F(2), F(11), F(20)");
}

#[test]
fn fminm_h_932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fminm.h f25, F(22), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2C, AB, 2D", "fminm.h f25, F(22), f26");
}

#[test]
fn fminm_h_933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fminm.h f3, f12, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 21, D6, 2C", "fminm.h f3, f12, f13");
}

#[test]
fn fminm_q_934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fminm.q f23, f8, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2B, 94, 2E", "fminm.q f23, f8, F(9)");
}

#[test]
fn fminm_q_935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fminm.q F(1), F(13), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A0, E6, 2E", "fminm.q F(1), F(13), f14");
}

#[test]
fn fminm_s_936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fminm.s F(10), f5, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A5, 22, 28", "fminm.s F(10), f5, F(2)");
}

#[test]
fn fminm_s_937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fminm.s f2, F(23), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, 2B, 29", "fminm.s f2, F(23), f18");
}

#[test]
fn fmsub_d_938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f11, F(23), f24, F(26), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, A5, 8B, D3", "fmsub.d f11, F(23), f24, F(26), rdn");
}

#[test]
fn fmsub_d_939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d F(27), f3, f7, F(4), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, CD, 71, 22", "fmsub.d F(27), f3, f7, F(4), rmm");
}

#[test]
fn fmsub_d_940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f15, f14, f7, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 77, 77, E2", "fmsub.d f15, f14, f7, f28");
}

#[test]
fn fmsub_d_941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d F(7), f25, F(19), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F3, 3C, D3", "fmsub.d F(7), f25, F(19), F(26)");
}

#[test]
fn fmsub_h_942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(7), f15, F(20), F(29), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 83, 47, ED", "fmsub.h F(7), f15, F(20), F(29), rne");
}

#[test]
fn fmsub_h_943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(21), f23, f5, f1, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, BA, 5B, 0C", "fmsub.h F(21), f23, f5, f1, rup");
}

#[test]
fn fmsub_h_944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(20), F(13), f24, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, FA, 86, 6D", "fmsub.h F(20), F(13), f24, f13");
}

#[test]
fn fmsub_h_945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(22), F(1), F(22), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, FB, 60, 4D", "fmsub.h F(22), F(1), F(22), f9");
}

#[test]
fn fmsub_q_946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f8, f0, F(11), F(2), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 24, B0, 16", "fmsub.q f8, f0, F(11), F(2), rdn");
}

#[test]
fn fmsub_q_947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f20, f24, F(28), F(23), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 1A, CC, BF", "fmsub.q f20, f24, F(28), F(23), rtz");
}

#[test]
fn fmsub_q_948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q F(11), F(26), f27, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 75, BD, 27", "fmsub.q F(11), F(26), f27, f4");
}

#[test]
fn fmsub_q_949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f5, f23, f9, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F2, 9B, 56", "fmsub.q f5, f23, f9, F(10)");
}

#[test]
fn fmsub_s_950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(12), F(10), F(9), F(19), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 36, 95, 98", "fmsub.s F(12), F(10), F(9), F(19), rup");
}

#[test]
fn fmsub_s_951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(14), F(26), f2, F(30), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 77, 2D, F0", "fmsub.s F(14), F(26), f2, F(30), dyn");
}

#[test]
fn fmsub_s_952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s f11, F(19), F(7), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F5, 79, 88", "fmsub.s f11, F(19), F(7), F(17)");
}

#[test]
fn fmsub_s_953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s f14, f11, f2, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F7, 25, E8", "fmsub.s f14, f11, f2, F(29)");
}

#[test]
fn fmul_d_954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(5), f24, F(28), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 42, CC, 13", "fmul.d F(5), f24, F(28), rmm");
}

#[test]
fn fmul_d_955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(14), f12, f2, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 27, 26, 12", "fmul.d F(14), f12, f2, rdn");
}

#[test]
fn fmul_d_956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(19), f29, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 7E, 13", "fmul.d F(19), f29, F(23)");
}

#[test]
fn fmul_d_957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(30), f4, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 92, 13", "fmul.d F(30), f4, f25");
}

#[test]
fn fmul_h_958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(21), f13, F(24), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 86, 15", "fmul.h F(21), f13, F(24), rne");
}

#[test]
fn fmul_h_959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(6), F(30), f15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, FF, 14", "fmul.h F(6), F(30), f15, dyn");
}

#[test]
fn fmul_h_960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(25), f8, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, B4, 14", "fmul.h F(25), f8, F(11)");
}

#[test]
fn fmul_h_961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h f21, F(8), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, A4, 14", "fmul.h f21, F(8), F(10)");
}

#[test]
fn fmul_q_962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q f24, f26, f12, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, CD, 16", "fmul.q f24, f26, f12, dyn");
}

#[test]
fn fmul_q_963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q f12, f14, f23, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 36, 77, 17", "fmul.q f12, f14, f23, rup");
}

#[test]
fn fmul_q_964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q F(5), F(26), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 72, 0D, 17", "fmul.q F(5), F(26), f16");
}

#[test]
fn fmul_q_965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q F(28), F(26), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 1D, 16", "fmul.q F(28), F(26), F(1)");
}

#[test]
fn fmul_s_966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s F(30), f18, f12, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, C9, 10", "fmul.s F(30), f18, f12, rne");
}

#[test]
fn fmul_s_967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f29, F(24), F(11), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0E, BC, 10", "fmul.s f29, F(24), F(11), rne");
}

#[test]
fn fmul_s_968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s F(10), f20, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, FA, 11", "fmul.s F(10), f20, F(31)");
}

#[test]
fn fmul_s_969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f10, F(17), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 88, 11", "fmul.s f10, F(17), F(24)");
}

#[test]
fn fmv_d_970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d f3, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 63, 22", "fmv.d f3, f6");
}

#[test]
fn fmv_d_971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d F(4), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, A5, 22", "fmv.d F(4), f10");
}

#[test]
fn fmv_d_x_972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d.x f22, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 0A, F2", "fmv.d.x f22, X(21)");
}

#[test]
fn fmv_d_x_973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d.x f15, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 07, 0E, F2", "fmv.d.x f15, X(28)");
}

#[test]
fn fmv_h_974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h f8, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, C6, 24", "fmv.h f8, F(12)");
}

#[test]
fn fmv_h_975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h f7, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, 08, 25", "fmv.h f7, f16");
}

#[test]
fn fmv_h_x_976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h.x F(31), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8F, 04, F4", "fmv.h.x F(31), x9");
}

#[test]
fn fmv_h_x_977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h.x F(3), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 01, F4", "fmv.h.x F(3), X(2)");
}

#[test]
fn fmv_q_978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmv.q F(14), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 07, CE, 27", "fmv.q F(14), f28");
}

#[test]
fn fmv_q_979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmv.q f1, f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, C6, 26", "fmv.q f1, f12");
}

#[test]
fn fmv_s_980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s f6, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 63, 20", "fmv.s f6, f6");
}

#[test]
fn fmv_s_981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s F(2), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 18, 21", "fmv.s F(2), F(17)");
}

#[test]
fn fmv_s_x_982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s.x F(2), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 03, F0", "fmv.s.x F(2), X(7)");
}

#[test]
fn fmv_s_x_983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s.x f6, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 0F, F0", "fmv.s.x f6, x30");
}

#[test]
fn fmv_w_x_984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.w.x F(3), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 02, F0", "fmv.w.x F(3), x4");
}

#[test]
fn fmv_w_x_985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.w.x f26, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 0F, F0", "fmv.w.x f26, x31");
}

#[test]
fn fmv_x_d_986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.x.d x21, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 0F, E2", "fmv.x.d x21, F(31)");
}

#[test]
fn fmv_x_d_987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.x.d x15, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 87, 01, E2", "fmv.x.d x15, F(3)");
}

#[test]
fn fmv_x_h_988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.x.h x28, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, 05, E4", "fmv.x.h x28, f11");
}

#[test]
fn fmv_x_h_989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.x.h X(28), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, 0D, E4", "fmv.x.h X(28), f27");
}

#[test]
fn fmv_x_s_990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.s x27, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 07, E0", "fmv.x.s x27, f15");
}

#[test]
fn fmv_x_s_991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.s X(26), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 0B, E0", "fmv.x.s X(26), f22");
}

#[test]
fn fmv_x_w_992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.w x30, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 0D, E0", "fmv.x.w x30, F(26)");
}

#[test]
fn fmv_x_w_993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.w x7, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, 03, E0", "fmv.x.w x7, F(6)");
}

#[test]
fn fmvh_x_q_994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvh.x.q x19, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 18, E6", "fmvh.x.q x19, F(17)");
}

#[test]
fn fmvh_x_q_995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvh.x.q X(8), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 18, E6", "fmvh.x.q X(8), F(17)");
}

#[test]
fn fmvp_q_x_996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvp.q.x F(16), X(0), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, B0, B7", "fmvp.q.x F(16), X(0), x27");
}

#[test]
fn fmvp_q_x_997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvp.q.x f26, X(12), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 06, B7", "fmvp.q.x f26, X(12), X(16)");
}

#[test]
fn fneg_d_998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fneg.d F(13), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 96, F7, 22", "fneg.d F(13), f15");
}

#[test]
fn fneg_d_999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fneg.d F(19), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 99, 73, 22", "fneg.d F(19), F(7)");
}

#[test]
fn fneg_h_1000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fneg.h F(14), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, B5, 24", "fneg.h F(14), f11");
}

#[test]
fn fneg_h_1001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fneg.h F(7), F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 13, 84, 24", "fneg.h F(7), F(8)");
}

#[test]
fn fneg_q_1002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fneg.q f24, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1C, 00, 26", "fneg.q f24, f0");
}

#[test]
fn fneg_q_1003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fneg.q F(24), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9C, D6, 26", "fneg.q F(24), F(13)");
}

#[test]
fn fneg_s_1004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fneg.s f15, f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 17, 8C, 21", "fneg.s f15, f24");
}

#[test]
fn fneg_s_1005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fneg.s F(2), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 91, B5, 20", "fneg.s F(2), F(11)");
}

#[test]
fn fnmadd_d_1006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d F(15), F(11), f25, F(3), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, C7, 95, 1B", "fnmadd.d F(15), F(11), f25, F(3), rmm");
}

#[test]
fn fnmadd_d_1007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d F(11), f2, f1, F(7), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 05, 11, 3A", "fnmadd.d F(11), f2, f1, F(7), rne");
}

#[test]
fn fnmadd_d_1008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d F(26), F(20), f14, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 7D, EA, D2", "fnmadd.d F(26), F(20), f14, f26");
}

#[test]
fn fnmadd_d_1009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d f2, f24, F(21), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 71, 5C, 9B", "fnmadd.d f2, f24, F(21), F(19)");
}

#[test]
fn fnmadd_h_1010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h F(5), F(18), F(6), f15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 72, 69, 7C", "fnmadd.h F(5), F(18), F(6), f15, dyn");
}

#[test]
fn fnmadd_h_1011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h F(25), f8, f1, F(4), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 2C, 14, 24", "fnmadd.h F(25), f8, f1, F(4), rdn");
}

#[test]
fn fnmadd_h_1012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h F(30), f28, f4, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 7F, 4E, A4", "fnmadd.h F(30), f28, f4, F(20)");
}

#[test]
fn fnmadd_h_1013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h f31, F(26), F(6), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 7F, 6D, F4", "fnmadd.h f31, F(26), F(6), F(30)");
}

#[test]
fn fnmadd_q_1014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(25), F(21), f27, f10, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 8C, BA, 57", "fnmadd.q F(25), F(21), f27, f10, rne");
}

#[test]
fn fnmadd_q_1015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(17), F(23), f16, f14, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, F8, 0B, 77", "fnmadd.q F(17), F(23), f16, f14, dyn");
}

#[test]
fn fnmadd_q_1016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(5), F(22), f22, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 72, 6B, EF", "fnmadd.q F(5), F(22), f22, F(29)");
}

#[test]
fn fnmadd_q_1017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q f10, f24, f23, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 75, 7C, A7", "fnmadd.q f10, f24, f23, F(20)");
}

#[test]
fn fnmadd_s_1018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f5, F(22), f0, f27, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 12, 0B, D8", "fnmadd.s f5, F(22), f0, f27, rtz");
}

#[test]
fn fnmadd_s_1019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f16, f3, f24, F(25), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 98, 81, C9", "fnmadd.s f16, f3, f24, F(25), rtz");
}

#[test]
fn fnmadd_s_1020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f0, f4, f16, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 70, 02, 71", "fnmadd.s f0, f4, f16, f14");
}

#[test]
fn fnmadd_s_1021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s F(28), f31, f22, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, FE, 6F, 89", "fnmadd.s F(28), f31, f22, F(17)");
}

#[test]
fn fnmsub_d_1022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d F(2), f28, F(4), F(6), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 41, 4E, 32", "fnmsub.d F(2), f28, F(4), F(6), rmm");
}

#[test]
fn fnmsub_d_1023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f1, f21, f12, F(11), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, C0, CA, 5A", "fnmsub.d f1, f21, f12, F(11), rmm");
}

#[test]
fn fnmsub_d_1024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f15, f12, F(21), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 77, 56, 33", "fnmsub.d f15, f12, F(21), F(6)");
}

#[test]
fn fnmsub_d_1025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f4, f12, f25, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 72, 96, 33", "fnmsub.d f4, f12, f25, f6");
}

#[test]
fn fnmsub_h_1026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h f8, F(5), f30, F(22), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, C4, E2, B5", "fnmsub.h f8, F(5), f30, F(22), rmm");
}

#[test]
fn fnmsub_h_1027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h f20, f23, F(30), F(28), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, BA, EB, E5", "fnmsub.h f20, f23, F(30), F(28), rup");
}

#[test]
fn fnmsub_h_1028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(8), F(28), f28, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 74, CE, AD", "fnmsub.h F(8), F(28), f28, f21");
}

#[test]
fn fnmsub_h_1029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(14), F(31), F(7), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, F7, 7F, 0C", "fnmsub.h F(14), F(31), F(7), f1");
}

#[test]
fn fnmsub_q_1030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q F(9), F(21), F(15), F(10), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, C4, FA, 56", "fnmsub.q F(9), F(21), F(15), F(10), rmm");
}

#[test]
fn fnmsub_q_1031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q F(0), F(22), F(7), F(10), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 40, 7B, 56", "fnmsub.q F(0), F(22), F(7), F(10), rmm");
}

#[test]
fn fnmsub_q_1032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q F(0), f3, F(1), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, F0, 11, FE", "fnmsub.q F(0), f3, F(1), F(31)");
}

#[test]
fn fnmsub_q_1033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f28, f5, F(14), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, FE, E2, EE", "fnmsub.q f28, f5, F(14), F(29)");
}

#[test]
fn fnmsub_s_1034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f22, f25, F(13), F(11), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 8B, DC, 58", "fnmsub.s f22, f25, F(13), F(11), rne");
}

#[test]
fn fnmsub_s_1035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f2, F(30), F(25), f20, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 71, 9F, A1", "fnmsub.s f2, F(30), F(25), f20, dyn");
}

#[test]
fn fnmsub_s_1036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f12, f14, f12, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 76, C7, D0", "fnmsub.s f12, f14, f12, f26");
}

#[test]
fn fnmsub_s_1037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s F(9), f28, f3, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 74, 3E, B8", "fnmsub.s F(9), f28, f3, F(23)");
}

#[test]
fn frcsr_1038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frcsr X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2E, 30, 00", "frcsr X(29)");
}

#[test]
fn frcsr_1039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frcsr x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 26, 30, 00", "frcsr x13");
}

#[test]
fn frflags_1040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frflags x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 21, 10, 00", "frflags x3");
}

#[test]
fn frflags_1041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frflags X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 20, 10, 00", "frflags X(1)");
}

#[test]
fn fround_d_1042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f13, F(27), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 4D, 42", "fround.d f13, F(27), dyn");
}

#[test]
fn fround_d_1043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f21, f28, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, 4E, 42", "fround.d f21, f28, rdn");
}

#[test]
fn fround_d_1044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d F(25), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, 4D, 42", "fround.d F(25), F(26)");
}

#[test]
fn fround_d_1045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d F(23), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 4C, 42", "fround.d F(23), F(24)");
}

#[test]
fn fround_h_1046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h f14, F(26), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 4D, 44", "fround.h f14, F(26), dyn");
}

#[test]
fn fround_h_1047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h f0, f9, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 90, 44, 44", "fround.h f0, f9, rtz");
}

#[test]
fn fround_h_1048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h f0, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 49, 44", "fround.h f0, F(18)");
}

#[test]
fn fround_h_1049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h f16, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 4E, 44", "fround.h f16, F(28)");
}

#[test]
fn fround_q_1050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q F(5), F(14), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 42, 47, 46", "fround.q F(5), F(14), rmm");
}

#[test]
fn fround_q_1051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q f29, f25, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9E, 4C, 46", "fround.q f29, f25, rtz");
}

#[test]
fn fround_q_1052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q F(7), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 4F, 46", "fround.q F(7), F(30)");
}

#[test]
fn fround_q_1053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q F(6), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 4C, 46", "fround.q F(6), F(24)");
}

#[test]
fn fround_s_1054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s F(31), f28, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2F, 4E, 40", "fround.s F(31), f28, rdn");
}

#[test]
fn fround_s_1055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s F(0), f0, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 40, 40", "fround.s F(0), f0, dyn");
}

#[test]
fn fround_s_1056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s F(17), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F8, 41, 40", "fround.s F(17), f3");
}

#[test]
fn fround_s_1057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s F(30), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 44, 40", "fround.s F(30), f8");
}

#[test]
fn froundnx_d_1058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d F(16), f15, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B8, 57, 42", "froundnx.d F(16), f15, rup");
}

#[test]
fn froundnx_d_1059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d f2, f13, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, 56, 42", "froundnx.d f2, f13, rdn");
}

#[test]
fn froundnx_d_1060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d f30, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 5D, 42", "froundnx.d f30, F(27)");
}

#[test]
fn froundnx_d_1061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d F(20), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 56, 42", "froundnx.d F(20), f12");
}

#[test]
fn froundnx_h_1062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h f25, F(10), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3C, 55, 44", "froundnx.h f25, F(10), rup");
}

#[test]
fn froundnx_h_1063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h f6, F(21), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, 5A, 44", "froundnx.h f6, F(21), rtz");
}

#[test]
fn froundnx_h_1064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h f22, f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 51, 44", "froundnx.h f22, f2");
}

#[test]
fn froundnx_h_1065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h F(2), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 51, 44", "froundnx.h F(2), F(2)");
}

#[test]
fn froundnx_q_1066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f17, f9, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 98, 54, 46", "froundnx.q f17, f9, rtz");
}

#[test]
fn froundnx_q_1067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f12, F(24), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 5C, 46", "froundnx.q f12, F(24), rne");
}

#[test]
fn froundnx_q_1068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f8, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 58, 46", "froundnx.q f8, f17");
}

#[test]
fn froundnx_q_1069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f11, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 5A, 46", "froundnx.q f11, f21");
}

#[test]
fn froundnx_s_1070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s f7, f14, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 43, 57, 40", "froundnx.s f7, f14, rmm");
}

#[test]
fn froundnx_s_1071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s F(25), F(17), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8C, 58, 40", "froundnx.s F(25), F(17), rne");
}

#[test]
fn froundnx_s_1072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s f30, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 53, 40", "froundnx.s f30, F(6)");
}

#[test]
fn froundnx_s_1073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s F(20), f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 52, 40", "froundnx.s F(20), f5");
}

#[test]
fn frrm_1074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frrm x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 21, 20, 00", "frrm x2");
}

#[test]
fn frrm_1075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frrm x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 21, 20, 00", "frrm x2");
}

#[test]
fn fscsr_1076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fscsr X(5), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 92, 35, 00", "fscsr X(5), X(11)");
}

#[test]
fn fscsr_1077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fscsr X(31), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 9F, 33, 00", "fscsr X(31), x7");
}

#[test]
fn fsd_1078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd F(0), [X(23), 1710]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, B7, 0B, 6A", "fsd F(0), [X(23), 1710]");
}

#[test]
fn fsd_1079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd f4, [x7, -782]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, B9, 43, CE", "fsd f4, [x7, -782]");
}

#[test]
fn fsflags_1080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflags x25, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 9C, 12, 00", "fsflags x25, X(5)");
}

#[test]
fn fsflags_1081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflags x12, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 16, 1F, 00", "fsflags x12, X(30)");
}

#[test]
fn fsflagsi_1082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflagsi X(25), 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, DC, 16, 00", "fsflagsi X(25), 13");
}

#[test]
fn fsflagsi_1083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflagsi x30, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 5F, 19, 00", "fsflagsi x30, 18");
}

#[test]
fn fsgnj_d_1084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnj.d f23, F(19), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 99, 22", "fsgnj.d f23, F(19), f9");
}

#[test]
fn fsgnj_d_1085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnj.d f10, F(0), F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 00, 23", "fsgnj.d f10, F(0), F(16)");
}

#[test]
fn fsgnj_h_1086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnj.h F(2), f6, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 03, 25", "fsgnj.h F(2), f6, f16");
}

#[test]
fn fsgnj_h_1087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnj.h f23, f3, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, D1, 25", "fsgnj.h f23, f3, F(29)");
}

#[test]
fn fsgnj_q_1088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnj.q F(31), f1, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8F, C0, 27", "fsgnj.q F(31), f1, F(28)");
}

#[test]
fn fsgnj_q_1089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnj.q f15, f2, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 07, 31, 26", "fsgnj.q f15, f2, F(3)");
}

#[test]
fn fsgnj_s_1090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnj.s f16, f1, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 88, 90, 20", "fsgnj.s f16, f1, F(9)");
}

#[test]
fn fsgnj_s_1091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnj.s f2, f17, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 68, 21", "fsgnj.s f2, f17, F(22)");
}

#[test]
fn fsgnjn_d_1092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjn.d f30, F(29), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9F, AE, 22", "fsgnjn.d f30, F(29), F(10)");
}

#[test]
fn fsgnjn_d_1093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjn.d f6, F(9), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, C4, 23", "fsgnjn.d f6, F(9), f28");
}

#[test]
fn fsgnjn_h_1094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjn.h f9, f24, f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 14, 4C, 25", "fsgnjn.h f9, f24, f20");
}

#[test]
fn fsgnjn_h_1095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjn.h f12, F(8), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 16, C4, 24", "fsgnjn.h f12, F(8), F(12)");
}

#[test]
fn fsgnjn_q_1096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjn.q F(25), F(11), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9C, 45, 26", "fsgnjn.q F(25), F(11), f4");
}

#[test]
fn fsgnjn_q_1097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjn.q F(26), f18, f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1D, F9, 27", "fsgnjn.q F(26), f18, f31");
}

#[test]
fn fsgnjn_s_1098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjn.s f31, f18, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1F, 99, 20", "fsgnjn.s f31, f18, F(9)");
}

#[test]
fn fsgnjn_s_1099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjn.s f30, f13, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9F, 76, 21", "fsgnjn.s f30, f13, f23");
}

#[test]
fn fsgnjx_d_1100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjx.d f7, f0, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 23, 00, 23", "fsgnjx.d f7, f0, f16");
}

#[test]
fn fsgnjx_d_1101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjx.d f2, f17, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, 98, 22", "fsgnjx.d f2, f17, F(9)");
}

#[test]
fn fsgnjx_h_1102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjx.h f1, f29, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A0, EE, 24", "fsgnjx.h f1, f29, f14");
}

#[test]
fn fsgnjx_h_1103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjx.h F(5), F(16), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 22, C8, 25", "fsgnjx.h F(5), F(16), F(28)");
}

#[test]
fn fsgnjx_q_1104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjx.q F(14), f10, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 27, A5, 27", "fsgnjx.q F(14), f10, f26");
}

#[test]
fn fsgnjx_q_1105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjx.q F(21), F(31), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 7F, 27", "fsgnjx.q F(21), F(31), F(23)");
}

#[test]
fn fsgnjx_s_1106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjx.s f24, f19, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AC, 89, 20", "fsgnjx.s f24, f19, f8");
}

#[test]
fn fsgnjx_s_1107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjx.s f21, F(31), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 3F, 21", "fsgnjx.s f21, F(31), f19");
}

#[test]
fn fsh_1108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f1, [x6, -1794]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 1F, 13, 8E", "fsh f1, [x6, -1794]");
}

#[test]
fn fsh_1109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f30, [x2, 358]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 13, E1, 17", "fsh f30, [x2, 358]");
}

#[test]
fn fsq_1110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq F(0), [x29, -270]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, C9, 0E, EE", "fsq F(0), [x29, -270]");
}

#[test]
fn fsq_1111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq F(21), [X(24), -496]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 48, 5C, E1", "fsq F(21), [X(24), -496]");
}

#[test]
fn fsqrt_d_1112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d f7, f26, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 13, 0D, 5A", "fsqrt.d f7, f26, rtz");
}

#[test]
fn fsqrt_d_1113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d f11, F(6), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 03, 5A", "fsqrt.d f11, F(6), dyn");
}

#[test]
fn fsqrt_d_1114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(9), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 0C, 5A", "fsqrt.d F(9), f24");
}

#[test]
fn fsqrt_d_1115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(29), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 0C, 5A", "fsqrt.d F(29), f24");
}

#[test]
fn fsqrt_h_1116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f1, F(18), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 09, 5C", "fsqrt.h f1, F(18), dyn");
}

#[test]
fn fsqrt_h_1117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f17, F(5), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 88, 02, 5C", "fsqrt.h f17, F(5), rne");
}

#[test]
fn fsqrt_h_1118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h F(13), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 01, 5C", "fsqrt.h F(13), F(2)");
}

#[test]
fn fsqrt_h_1119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f2, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, 03, 5C", "fsqrt.h f2, F(7)");
}

#[test]
fn fsqrt_q_1120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q F(19), f18, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 29, 09, 5E", "fsqrt.q F(19), f18, rdn");
}

#[test]
fn fsqrt_q_1121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q f27, F(13), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CD, 06, 5E", "fsqrt.q f27, F(13), rmm");
}

#[test]
fn fsqrt_q_1122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q F(7), f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 06, 5E", "fsqrt.q F(7), f13");
}

#[test]
fn fsqrt_q_1123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q F(10), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 06, 5E", "fsqrt.q F(10), F(12)");
}

#[test]
fn fsqrt_s_1124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s f15, f18, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 77, 09, 58", "fsqrt.s f15, f18, dyn");
}

#[test]
fn fsqrt_s_1125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(19), F(24), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 19, 0C, 58", "fsqrt.s F(19), F(24), rtz");
}

#[test]
fn fsqrt_s_1126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(11), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 01, 58", "fsqrt.s F(11), F(3)");
}

#[test]
fn fsqrt_s_1127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(10), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 05, 58", "fsqrt.s F(10), f10");
}

#[test]
fn fsrm_1128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrm x7, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 93, 23, 00", "fsrm x7, x7");
}

#[test]
fn fsrm_1129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrm X(27), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 1D, 2C, 00", "fsrm X(27), X(24)");
}

#[test]
fn fsrmi_1130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrmi X(25), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, DC, 20, 00", "fsrmi X(25), 1");
}

#[test]
fn fsrmi_1131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrmi X(3), 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 51, 2D, 00", "fsrmi X(3), 26");
}

#[test]
fn fsub_d_1132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d f3, F(9), F(24), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 84, 0B", "fsub.d f3, F(9), F(24), dyn");
}

#[test]
fn fsub_d_1133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d f21, f6, F(10), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, A3, 0A", "fsub.d f21, f6, F(10), dyn");
}

#[test]
fn fsub_d_1134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(7), F(20), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, AA, 0A", "fsub.d F(7), F(20), F(10)");
}

#[test]
fn fsub_d_1135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d f11, F(28), f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 5E, 0A", "fsub.d f11, F(28), f5");
}

#[test]
fn fsub_h_1136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h F(10), F(29), f24, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 8E, 0D", "fsub.h F(10), F(29), f24, rne");
}

#[test]
fn fsub_h_1137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h F(9), f21, f26, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, AA, 0D", "fsub.h F(9), f21, f26, rne");
}

#[test]
fn fsub_h_1138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h f28, F(25), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 4C, 0D", "fsub.h f28, F(25), F(20)");
}

#[test]
fn fsub_h_1139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h f12, F(24), F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 0C, 0D", "fsub.h f12, F(24), F(16)");
}

#[test]
fn fsub_q_1140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q f25, F(21), F(24), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8C, 8A, 0F", "fsub.q f25, F(21), F(24), rne");
}

#[test]
fn fsub_q_1141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q f27, F(1), F(6), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BD, 60, 0E", "fsub.q f27, F(1), F(6), rup");
}

#[test]
fn fsub_q_1142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q F(30), F(27), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 2D, 0F", "fsub.q F(30), F(27), F(18)");
}

#[test]
fn fsub_q_1143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q f16, F(22), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, BB, 0F", "fsub.q f16, F(22), f27");
}

#[test]
fn fsub_s_1144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f15, F(9), F(20), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C7, 44, 09", "fsub.s f15, F(9), F(20), rmm");
}

#[test]
fn fsub_s_1145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f12, f13, f9, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 96, 08", "fsub.s f12, f13, f9, rne");
}

#[test]
fn fsub_s_1146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f13, f2, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, D1, 08", "fsub.s f13, f2, F(13)");
}

#[test]
fn fsub_s_1147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s F(30), F(0), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, A0, 08", "fsub.s F(30), F(0), F(10)");
}

#[test]
fn fsw_1148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw f9, [X(4), 1657]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 2C, 92, 66", "fsw f9, [X(4), 1657]");
}

#[test]
fn fsw_1149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw F(28), [x25, -1820]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, A2, CC, 8F", "fsw F(28), [x25, -1820]");
}

#[test]
fn j_1150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; j -520414
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 00, 38, F2", "j -520414");
}

#[test]
fn j_1151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; j -54036
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 20, DF, CE", "j -54036");
}

#[test]
fn jal_1152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal X(12), -520286
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 06, 38, FA", "jal X(12), -520286");
}

#[test]
fn jal_1153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal x2, -198322
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, F1, FC, 94", "jal x2, -198322");
}

#[test]
fn jal_1154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal -166212
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 70, CD, EB", "jal -166212");
}

#[test]
fn jal_1155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal -78282
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, C0, 7E, E3", "jal -78282");
}

#[test]
fn jalr_1156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr X(18), X(6), -4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 09, C3, FF", "jalr X(18), X(6), -4");
}

#[test]
fn jalr_1157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr x7, x25, 1822
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 83, EC, 71", "jalr x7, x25, 1822");
}

#[test]
fn jalr_1158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 00, 07, 00", "jalr x14");
}

#[test]
fn jalr_1159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 00, 0F, 00", "jalr x30");
}

#[test]
fn jr_1160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jr x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 00, 0D, 00", "jr x26");
}

#[test]
fn jr_1161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jr X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 00, 0B, 00", "jr X(22)");
}

#[test]
fn lb_1162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb x1, [x21, -307]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 80, DA, EC", "lb x1, [x21, -307]");
}

#[test]
fn lb_1163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(27), [X(21), -1743]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 8D, 1A, 93", "lb X(27), [X(21), -1743]");
}

#[test]
fn lbu_1164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x14, [X(24), 277]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 47, 5C, 11", "lbu x14, [X(24), 277]");
}

#[test]
fn lbu_1165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x22, [x28, 1209]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 4B, 9E, 4B", "lbu x22, [x28, 1209]");
}

#[test]
fn ld_1166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(0), [x25, 753]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, B0, 1C, 2F", "ld X(0), [x25, 753]");
}

#[test]
fn ld_1167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(20), [X(16), -14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 3A, 28, FF", "ld X(20), [X(16), -14]");
}

#[test]
fn lh_1168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x7, [X(27), 1145]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 93, 9D, 47", "lh x7, [X(27), 1145]");
}

#[test]
fn lh_1169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh X(26), [x8, 617]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 1D, 94, 26", "lh X(26), [x8, 617]");
}

#[test]
fn lhu_1170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu x19, [X(18), -1524]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 59, C9, A0", "lhu x19, [X(18), -1524]");
}

#[test]
fn lhu_1171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu x21, [X(16), 1906]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 5A, 28, 77", "lhu x21, [X(16), 1906]");
}

#[test]
fn lpad_1172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; lpad 481557
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 50, 91, 75", "lpad 481557");
}

#[test]
fn lpad_1173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; lpad 295672
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 80, 2F, 48", "lpad 295672");
}

#[test]
fn lr_d_1174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d X(0), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 30, 02, 10", "lr.d X(0), [x4]");
}

#[test]
fn lr_d_1175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d x12, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B6, 0A, 10", "lr.d x12, [x21]");
}

#[test]
fn lr_d_aq_1176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aq x30, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3F, 00, 14", "lr.d.aq x30, [x0]");
}

#[test]
fn lr_d_aq_1177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aq x8, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 34, 01, 14", "lr.d.aq x8, [x2]");
}

#[test]
fn lr_d_aqrl_1178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aqrl x5, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 32, 0E, 16", "lr.d.aqrl x5, [X(28)]");
}

#[test]
fn lr_d_aqrl_1179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aqrl X(21), [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BA, 04, 16", "lr.d.aqrl X(21), [x9]");
}

#[test]
fn lr_d_rl_1180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.rl x30, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BF, 0C, 12", "lr.d.rl x30, [x25]");
}

#[test]
fn lr_d_rl_1181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.rl X(7), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 33, 03, 12", "lr.d.rl X(7), [x6]");
}

#[test]
fn lr_w_1182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w X(17), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, 01, 10", "lr.w X(17), [x3]");
}

#[test]
fn lr_w_1183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w x31, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2F, 0B, 10", "lr.w x31, [x22]");
}

#[test]
fn lr_w_aq_1184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aq x7, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 0C, 14", "lr.w.aq x7, [x25]");
}

#[test]
fn lr_w_aq_1185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aq X(0), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, 0E, 14", "lr.w.aq X(0), [x29]");
}

#[test]
fn lr_w_aqrl_1186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aqrl x13, [X(24)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, 0C, 16", "lr.w.aqrl x13, [X(24)]");
}

#[test]
fn lr_w_aqrl_1187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aqrl X(0), [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, 0A, 16", "lr.w.aqrl X(0), [X(21)]");
}

#[test]
fn lr_w_rl_1188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.rl x23, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AB, 00, 12", "lr.w.rl x23, [x1]");
}

#[test]
fn lr_w_rl_1189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.rl X(13), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 26, 03, 12", "lr.w.rl X(13), [x6]");
}

#[test]
fn lw_1190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(0), [x6, 766]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 20, E3, 2F", "lw X(0), [x6, 766]");
}

#[test]
fn lw_1191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(0), [x5, -1982]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, A0, 22, 84", "lw X(0), [x5, -1982]");
}

#[test]
fn lwu_1192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(6), [X(15), 590]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, E3, E7, 24", "lwu X(6), [X(15), 590]");
}

#[test]
fn lwu_1193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(1), [x23, -597]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, E0, BB, DA", "lwu X(1), [x23, -597]");
}

#[test]
fn max_1194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; max x3, x4, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 61, 12, 0A", "max x3, x4, x1");
}

#[test]
fn max_1195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; max x18, X(25), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E9, BC, 0A", "max x18, X(25), X(11)");
}

#[test]
fn maxu_1196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; maxu X(10), x26, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 75, 1D, 0B", "maxu X(10), x26, X(17)");
}

#[test]
fn maxu_1197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; maxu X(11), X(14), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 75, 77, 0A", "maxu X(11), X(14), x7");
}

#[test]
fn min_1198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; min X(26), x19, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, CD, 69, 0A", "min X(26), x19, X(6)");
}

#[test]
fn min_1199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; min X(26), x29, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, CD, CE, 0B", "min X(26), x29, X(28)");
}

#[test]
fn minu_1200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; minu x18, x9, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D9, 54, 0A", "minu x18, x9, X(5)");
}

#[test]
fn minu_1201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; minu x3, x18, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 51, 89, 0A", "minu x3, x18, x8");
}

#[test]
fn mop_r_0_1202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.0 X(26), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4D, CB, 81", "mop.r.0 X(26), X(22)");
}

#[test]
fn mop_r_0_1203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.0 x15, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, C1, 81", "mop.r.0 x15, x3");
}

#[test]
fn mop_r_1_1204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.1 x3, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C1, D3, 81", "mop.r.1 x3, x7");
}

#[test]
fn mop_r_1_1205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.1 x3, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C1, D4, 81", "mop.r.1 x3, x9");
}

#[test]
fn mop_r_10_1206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.10 X(5), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C2, EA, 89", "mop.r.10 X(5), x21");
}

#[test]
fn mop_r_10_1207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.10 X(25), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CC, E8, 89", "mop.r.10 X(25), x17");
}

#[test]
fn mop_r_11_1208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.11 x21, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4A, F6, 89", "mop.r.11 x21, X(12)");
}

#[test]
fn mop_r_11_1209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.11 X(24), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CC, FA, 89", "mop.r.11 X(24), x21");
}

#[test]
fn mop_r_12_1210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.12 X(30), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, C8, 8D", "mop.r.12 X(30), X(17)");
}

#[test]
fn mop_r_12_1211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.12 X(29), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, C7, 8D", "mop.r.12 X(29), x14");
}

#[test]
fn mop_r_13_1212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.13 x31, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, D4, 8D", "mop.r.13 x31, x8");
}

#[test]
fn mop_r_13_1213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.13 X(31), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, D1, 8D", "mop.r.13 X(31), X(3)");
}

#[test]
fn mop_r_14_1214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.14 X(16), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, EA, 8D", "mop.r.14 X(16), X(20)");
}

#[test]
fn mop_r_14_1215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.14 x7, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C3, ED, 8D", "mop.r.14 x7, x27");
}

#[test]
fn mop_r_15_1216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.15 x2, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, FA, 8D", "mop.r.15 x2, x20");
}

#[test]
fn mop_r_15_1217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.15 X(11), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 45, F0, 8D", "mop.r.15 X(11), x0");
}

#[test]
fn mop_r_16_1218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.16 X(4), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C2, CA, C1", "mop.r.16 X(4), X(21)");
}

#[test]
fn mop_r_16_1219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.16 x19, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 49, CC, C1", "mop.r.16 x19, X(24)");
}

#[test]
fn mop_r_17_1220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.17 X(11), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C5, D4, C1", "mop.r.17 X(11), X(9)");
}

#[test]
fn mop_r_17_1221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.17 X(27), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, D6, C1", "mop.r.17 X(27), x12");
}

#[test]
fn mop_r_18_1222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.18 x20, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CA, E2, C1", "mop.r.18 x20, X(5)");
}

#[test]
fn mop_r_18_1223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.18 X(3), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C1, EC, C1", "mop.r.18 X(3), x25");
}

#[test]
fn mop_r_19_1224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.19 x16, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, F5, C1", "mop.r.19 x16, x11");
}

#[test]
fn mop_r_19_1225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.19 x1, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 40, F2, C1", "mop.r.19 x1, X(4)");
}

#[test]
fn mop_r_2_1226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.2 X(2), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C1, E8, 81", "mop.r.2 X(2), x17");
}

#[test]
fn mop_r_2_1227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.2 x6, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, EE, 81", "mop.r.2 x6, X(28)");
}

#[test]
fn mop_r_20_1228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.20 X(14), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 47, CE, C5", "mop.r.20 X(14), X(28)");
}

#[test]
fn mop_r_20_1229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.20 x10, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 45, CE, C5", "mop.r.20 x10, X(28)");
}

#[test]
fn mop_r_21_1230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.21 X(14), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 47, DC, C5", "mop.r.21 X(14), x24");
}

#[test]
fn mop_r_21_1231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.21 X(22), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4B, D0, C5", "mop.r.21 X(22), X(0)");
}

#[test]
fn mop_r_22_1232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.22 x13, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, EB, C5", "mop.r.22 x13, x22");
}

#[test]
fn mop_r_22_1233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.22 x0, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, E6, C5", "mop.r.22 x0, X(13)");
}

#[test]
fn mop_r_23_1234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.23 x8, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 44, FB, C5", "mop.r.23 x8, x22");
}

#[test]
fn mop_r_23_1235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.23 x12, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C6, FC, C5", "mop.r.23 x12, X(25)");
}

#[test]
fn mop_r_24_1236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.24 x19, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C9, CA, C9", "mop.r.24 x19, X(21)");
}

#[test]
fn mop_r_24_1237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.24 x31, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, C7, C9", "mop.r.24 x31, x15");
}

#[test]
fn mop_r_25_1238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.25 X(27), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, DC, C9", "mop.r.25 X(27), X(24)");
}

#[test]
fn mop_r_25_1239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.25 x5, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 42, DD, C9", "mop.r.25 x5, x26");
}

#[test]
fn mop_r_26_1240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.26 X(31), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, E4, C9", "mop.r.26 X(31), x8");
}

#[test]
fn mop_r_26_1241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.26 x31, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, EC, C9", "mop.r.26 x31, x24");
}

#[test]
fn mop_r_27_1242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.27 x7, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C3, FB, C9", "mop.r.27 x7, X(23)");
}

#[test]
fn mop_r_27_1243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.27 X(2), X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C1, F0, C9", "mop.r.27 X(2), X(1)");
}

#[test]
fn mop_r_28_1244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.28 x26, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CD, C6, CD", "mop.r.28 x26, X(13)");
}

#[test]
fn mop_r_28_1245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.28 x31, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, C1, CD", "mop.r.28 x31, X(3)");
}

#[test]
fn mop_r_29_1246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.29 X(6), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C3, D1, CD", "mop.r.29 X(6), X(3)");
}

#[test]
fn mop_r_29_1247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.29 x0, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, DB, CD", "mop.r.29 x0, x23");
}

#[test]
fn mop_r_3_1248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.3 X(6), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C3, F7, 81", "mop.r.3 X(6), X(15)");
}

#[test]
fn mop_r_3_1249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.3 x29, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CE, F4, 81", "mop.r.3 x29, X(9)");
}

#[test]
fn mop_r_30_1250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.30 x11, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C5, E2, CD", "mop.r.30 x11, X(5)");
}

#[test]
fn mop_r_30_1251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.30 X(12), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 46, E2, CD", "mop.r.30 X(12), x4");
}

#[test]
fn mop_r_31_1252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.31 X(31), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, F0, CD", "mop.r.31 X(31), X(0)");
}

#[test]
fn mop_r_31_1253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.31 x22, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4B, FD, CD", "mop.r.31 x22, x26");
}

#[test]
fn mop_r_4_1254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.4 X(15), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, C1, 85", "mop.r.4 X(15), X(3)");
}

#[test]
fn mop_r_4_1255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.4 x2, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, CA, 85", "mop.r.4 x2, X(20)");
}

#[test]
fn mop_r_5_1256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.5 X(4), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C2, D2, 85", "mop.r.5 X(4), x5");
}

#[test]
fn mop_r_5_1257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.5 X(0), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, D8, 85", "mop.r.5 X(0), X(16)");
}

#[test]
fn mop_r_6_1258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.6 x8, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C4, E4, 85", "mop.r.6 x8, X(9)");
}

#[test]
fn mop_r_6_1259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.6 x13, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, E7, 85", "mop.r.6 x13, X(14)");
}

#[test]
fn mop_r_7_1260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.7 x10, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C5, FD, 85", "mop.r.7 x10, x27");
}

#[test]
fn mop_r_7_1261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.7 X(26), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4D, F6, 85", "mop.r.7 X(26), x12");
}

#[test]
fn mop_r_8_1262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.8 X(23), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4B, C9, 89", "mop.r.8 X(23), X(18)");
}

#[test]
fn mop_r_8_1263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.8 X(14), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C7, C6, 89", "mop.r.8 X(14), X(13)");
}

#[test]
fn mop_r_9_1264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.9 x29, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, D7, 89", "mop.r.9 x29, X(14)");
}

#[test]
fn mop_r_9_1265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.9 x15, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, D5, 89", "mop.r.9 x15, x11");
}

#[test]
fn mop_r_n_1266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.N 20, X(29), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, CE, C5", "mop.r.N 20, X(29), x28");
}

#[test]
fn mop_r_n_1267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.N 19, x7, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, FE, C1", "mop.r.N 19, x7, X(28)");
}

#[test]
fn mop_rr_0_1268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.0 x13, x30, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, 8F, 82", "mop.rr.0 x13, x30, X(8)");
}

#[test]
fn mop_rr_0_1269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.0 X(5), X(1), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C2, C0, 83", "mop.rr.0 X(5), X(1), X(28)");
}

#[test]
fn mop_rr_1_1270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.1 X(3), X(4), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 41, 32, 87", "mop.rr.1 X(3), X(4), x19");
}

#[test]
fn mop_rr_1_1271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.1 x11, x0, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 45, 40, 86", "mop.rr.1 x11, x0, x4");
}

#[test]
fn mop_rr_2_1272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.2 x18, x31, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C9, BF, 8B", "mop.rr.2 x18, x31, X(27)");
}

#[test]
fn mop_rr_2_1273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.2 x27, x8, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, 94, 8A", "mop.rr.2 x27, x8, X(9)");
}

#[test]
fn mop_rr_3_1274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.3 x28, x27, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, 0D, 8F", "mop.rr.3 x28, x27, X(16)");
}

#[test]
fn mop_rr_3_1275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.3 X(1), x24, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 40, 7C, 8E", "mop.rr.3 X(1), x24, X(7)");
}

#[test]
fn mop_rr_4_1276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.4 X(16), X(25), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, CC, C3", "mop.rr.4 X(16), X(25), x28");
}

#[test]
fn mop_rr_4_1277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.4 x15, X(27), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, DD, C3", "mop.rr.4 x15, X(27), x29");
}

#[test]
fn mop_rr_5_1278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.5 X(8), x19, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C4, C9, C7", "mop.rr.5 X(8), x19, x28");
}

#[test]
fn mop_rr_5_1279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.5 X(30), X(19), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, 39, C7", "mop.rr.5 X(30), X(19), x19");
}

#[test]
fn mop_rr_6_1280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.6 x7, X(18), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, 99, CB", "mop.rr.6 x7, X(18), x25");
}

#[test]
fn mop_rr_6_1281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.6 x6, x24, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, 7C, CB", "mop.rr.6 x6, x24, X(23)");
}

#[test]
fn mop_rr_7_1282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.7 X(3), X(27), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C1, 0D, CF", "mop.rr.7 X(3), X(27), X(16)");
}

#[test]
fn mop_rr_7_1283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.7 X(24), X(14), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4C, 47, CF", "mop.rr.7 X(24), X(14), X(20)");
}

#[test]
fn mop_rr_n_1284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.N 6, X(15), X(26), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 47, 1D, CB", "mop.rr.N 6, X(15), X(26), X(17)");
}

#[test]
fn mop_rr_n_1285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.N 7, X(12), x12, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 46, 66, CF", "mop.rr.N 7, X(12), x12, X(22)");
}

#[test]
fn mul_1286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mul X(23), X(6), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0B, 73, 02", "mul X(23), X(6), x7");
}

#[test]
fn mul_1287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mul x20, x30, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0A, 3F, 02", "mul x20, x30, x3");
}

#[test]
fn mulh_1288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulh x5, x24, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 12, 7C, 02", "mulh x5, x24, X(7)");
}

#[test]
fn mulh_1289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulh X(5), X(30), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 12, 7F, 03", "mulh X(5), X(30), X(23)");
}

#[test]
fn mulhsu_1290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhsu x24, x10, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 2C, 85, 02", "mulhsu x24, x10, X(8)");
}

#[test]
fn mulhsu_1291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhsu x28, x17, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, AE, 78, 03", "mulhsu x28, x17, X(23)");
}

#[test]
fn mulhu_1292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhu x16, X(24), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 38, 0C, 03", "mulhu x16, X(24), X(16)");
}

#[test]
fn mulhu_1293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhu x20, x21, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, BA, 7A, 03", "mulhu x20, x21, X(23)");
}

#[test]
fn mulw_1294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulw x14, x3, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 87, 71, 02", "mulw x14, x3, X(7)");
}

#[test]
fn mulw_1295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulw x12, X(3), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 86, C1, 03", "mulw x12, X(3), X(28)");
}

#[test]
fn mv_1296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; mv x22, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 0B, 0B, 00", "mv x22, x22");
}

#[test]
fn mv_1297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; mv x4, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 82, 05, 00", "mv x4, x11");
}

#[test]
fn neg_1298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; neg x0, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 00, 41", "neg x0, X(16)");
}

#[test]
fn neg_1299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; neg x27, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0D, 40, 41", "neg x27, x20");
}

#[test]
fn nop_1300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, 00, 00", "nop");
}

#[test]
fn nop_1301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, 00, 00", "nop");
}

#[test]
fn ntl_all_1302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 50, 00", "ntl.all");
}

#[test]
fn ntl_all_1303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 50, 00", "ntl.all");
}

#[test]
fn ntl_p1_1304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 20, 00", "ntl.p1");
}

#[test]
fn ntl_p1_1305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 20, 00", "ntl.p1");
}

#[test]
fn ntl_pall_1306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 30, 00", "ntl.pall");
}

#[test]
fn ntl_pall_1307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 30, 00", "ntl.pall");
}

#[test]
fn ntl_s1_1308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 40, 00", "ntl.s1");
}

#[test]
fn ntl_s1_1309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 40, 00", "ntl.s1");
}

#[test]
fn or_1310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; or x16, X(14), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 68, 87, 00", "or x16, X(14), x8");
}

#[test]
fn or_1311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; or X(4), x27, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E2, 4D, 00", "or X(4), x27, X(4)");
}

#[test]
fn orc_b_1312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; orc.b X(26), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5D, 7F, 28", "orc.b X(26), X(30)");
}

#[test]
fn orc_b_1313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; orc.b x16, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D8, 7C, 28", "orc.b x16, x25");
}

#[test]
fn ori_1314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ori X(11), X(10), -444
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 65, 45, E4", "ori X(11), X(10), -444");
}

#[test]
fn ori_1315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ori x3, X(18), -1205
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 61, B9, B4", "ori x3, X(18), -1205");
}

#[test]
fn orn_1316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; orn x25, x18, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 6C, 89, 41", "orn x25, x18, x24");
}

#[test]
fn orn_1317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; orn X(25), x19, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, EC, 49, 41", "orn X(25), x19, X(20)");
}

#[test]
fn pack_1318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; pack x16, x24, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 48, 4C, 09", "pack x16, x24, x20");
}

#[test]
fn pack_1319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; pack x29, x8, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4E, 44, 08", "pack x29, x8, x4");
}

#[test]
fn packh_1320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; packh x3, x31, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, F1, 8F, 09", "packh x3, x31, X(24)");
}

#[test]
fn packh_1321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; packh x27, X(22), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 7D, 6B, 08", "packh x27, X(22), x6");
}

#[test]
fn packw_1322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; packw x9, x19, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, C4, C9, 09", "packw x9, x19, x28");
}

#[test]
fn packw_1323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; packw X(24), X(7), x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, CC, 13, 08", "packw X(24), X(7), x1");
}

#[test]
fn pause_1324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintpause
        ; pause
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 01", "pause");
}

#[test]
fn pause_1325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintpause
        ; pause
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 01", "pause");
}

#[test]
fn prefetch_i_1326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.i [x11, 1856]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 05, 74", "prefetch.i [x11, 1856]");
}

#[test]
fn prefetch_i_1327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.i [X(21), -608]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 0A, DA", "prefetch.i [X(21), -608]");
}

#[test]
fn prefetch_r_1328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.r [X(2), 1664]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 60, 11, 68", "prefetch.r [X(2), 1664]");
}

#[test]
fn prefetch_r_1329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.r [X(1), -160]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 10, F6", "prefetch.r [X(1), -160]");
}

#[test]
fn prefetch_w_1330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.w [x27, 1504]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 3D, 5E", "prefetch.w [x27, 1504]");
}

#[test]
fn prefetch_w_1331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.w [x0, 96]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 60, 30, 06", "prefetch.w [x0, 96]");
}

#[test]
fn rdcycle_1332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdcycle x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 21, 00, C0", "rdcycle x3");
}

#[test]
fn rdcycle_1333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdcycle x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 21, 00, C0", "rdcycle x3");
}

#[test]
fn rdinstret_1334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdinstret x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 21, 20, C0", "rdinstret x2");
}

#[test]
fn rdinstret_1335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdinstret X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 24, 20, C0", "rdinstret X(8)");
}

#[test]
fn rdtime_1336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdtime X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 27, 10, C0", "rdtime X(15)");
}

#[test]
fn rdtime_1337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdtime X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2B, 10, C0", "rdtime X(22)");
}

#[test]
fn rem_1338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; rem X(13), X(23), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E6, 6B, 03", "rem X(13), X(23), X(22)");
}

#[test]
fn rem_1339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; rem X(12), X(10), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 66, 25, 03", "rem X(12), X(10), x18");
}

#[test]
fn remu_1340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remu x23, X(28), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 7B, 8E, 03", "remu x23, X(28), x24");
}

#[test]
fn remu_1341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remu X(12), x20, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 76, 7A, 02", "remu X(12), x20, X(7)");
}

#[test]
fn remuw_1342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remuw X(21), X(28), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 7A, 7E, 03", "remuw X(21), X(28), X(23)");
}

#[test]
fn remuw_1343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remuw X(5), x25, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, F2, 7C, 02", "remuw X(5), x25, X(7)");
}

#[test]
fn remw_1344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remw x26, X(16), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 6D, 08, 02", "remw x26, X(16), X(0)");
}

#[test]
fn remw_1345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remw x26, x22, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 6D, 2B, 03", "remw x26, x22, X(18)");
}

#[test]
fn ret_1346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 00, 00", "ret");
}

#[test]
fn ret_1347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 00, 00", "ret");
}

#[test]
fn rev8_1348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; rev8 x14, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D7, 84, 6B", "rev8 x14, X(9)");
}

#[test]
fn rev8_1349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; rev8 x28, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5E, 83, 6B", "rev8 x28, x6");
}

#[test]
fn rol_1350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; rol X(25), X(14), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1C, 37, 61", "rol X(25), X(14), X(19)");
}

#[test]
fn rol_1351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; rol x12, X(0), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 16, 20, 60", "rol x12, X(0), x2");
}

#[test]
fn rolw_1352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; rolw x26, x27, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 9D, DD, 60", "rolw x26, x27, x13");
}

#[test]
fn rolw_1353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; rolw x28, x25, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 9E, 8C, 60", "rolw x28, x25, x8");
}

#[test]
fn ror_1354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; ror X(25), x22, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 5C, 1B, 60", "ror X(25), x22, x1");
}

#[test]
fn ror_1355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; ror X(24), x4, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 5C, F2, 60", "ror X(24), x4, x15");
}

#[test]
fn rori_1356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; rori x31, x12, 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 5F, F6, 60", "rori x31, x12, 15");
}

#[test]
fn rori_1357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; rori X(0), x15, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D0, A7, 61", "rori X(0), x15, 26");
}

#[test]
fn roriw_1358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; roriw x22, X(7), 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, DB, 33, 61", "roriw x22, X(7), 19");
}

#[test]
fn roriw_1359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; roriw x6, x5, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, D3, 12, 60", "roriw x6, x5, 1");
}

#[test]
fn rorw_1360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; rorw X(30), X(16), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 5F, C8, 61", "rorw X(30), X(16), X(28)");
}

#[test]
fn rorw_1361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; rorw x0, X(4), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 50, E2, 60", "rorw x0, X(4), x14");
}

#[test]
fn sb_1362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sb X(17), [X(22), -68]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 0E, 1B, FB", "sb X(17), [X(22), -68]");
}

#[test]
fn sb_1363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sb X(14), [x5, 917]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 8A, E2, 38", "sb X(14), [x5, 917]");
}

#[test]
fn sbreak_1364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sbreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "sbreak");
}

#[test]
fn sbreak_1365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sbreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "sbreak");
}

#[test]
fn sc_d_1366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d X(6), X(11), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 33, B2, 18", "sc.d X(6), X(11), [x4]");
}

#[test]
fn sc_d_1367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d X(31), x21, [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BF, 5F, 19", "sc.d X(31), x21, [x31]");
}

#[test]
fn sc_d_aq_1368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aq X(10), X(5), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B5, 56, 1C", "sc.d.aq X(10), X(5), [x13]");
}

#[test]
fn sc_d_aq_1369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aq X(6), x17, [X(28)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 33, 1E, 1D", "sc.d.aq X(6), x17, [X(28)]");
}

#[test]
fn sc_d_aqrl_1370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aqrl x6, x4, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B3, 42, 1E", "sc.d.aqrl x6, x4, [x5]");
}

#[test]
fn sc_d_aqrl_1371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aqrl x16, X(5), [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 38, 5F, 1E", "sc.d.aqrl x16, X(5), [x30]");
}

#[test]
fn sc_d_rl_1372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.rl X(12), x12, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B6, CD, 1A", "sc.d.rl X(12), x12, [X(27)]");
}

#[test]
fn sc_d_rl_1373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.rl X(18), X(16), [x31]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B9, 0F, 1B", "sc.d.rl X(18), X(16), [x31]");
}

#[test]
fn sc_w_1374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w X(26), X(7), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AD, 79, 18", "sc.w X(26), X(7), [X(19)]");
}

#[test]
fn sc_w_1375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w x4, x15, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A2, F2, 18", "sc.w x4, x15, [X(5)]");
}

#[test]
fn sc_w_aq_1376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aq x0, x0, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, 05, 1C", "sc.w.aq x0, x0, [x11]");
}

#[test]
fn sc_w_aq_1377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aq X(10), X(23), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 25, 78, 1D", "sc.w.aq X(10), X(23), [x16]");
}

#[test]
fn sc_w_aqrl_1378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aqrl x2, x3, [X(5)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A1, 32, 1E", "sc.w.aqrl x2, x3, [X(5)]");
}

#[test]
fn sc_w_aqrl_1379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aqrl X(5), x12, [X(21)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A2, CA, 1E", "sc.w.aqrl X(5), x12, [X(21)]");
}

#[test]
fn sc_w_rl_1380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.rl x14, X(10), [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A7, A5, 1A", "sc.w.rl x14, X(10), [x11]");
}

#[test]
fn sc_w_rl_1381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.rl x20, X(6), [X(17)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, AA, 68, 1A", "sc.w.rl x20, X(6), [X(17)]");
}

#[test]
fn scall_1382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; scall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "scall");
}

#[test]
fn scall_1383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; scall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "scall");
}

#[test]
fn sd_1384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sd x20, [x31, 1998]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, B7, 4F, 7D", "sd x20, [x31, 1998]");
}

#[test]
fn sd_1385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sd x28, [X(4), 327]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 33, C2, 15", "sd x28, [X(4), 327]");
}

#[test]
fn seqz_1386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; seqz x9, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 34, 16, 00", "seqz x9, X(12)");
}

#[test]
fn seqz_1387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; seqz x26, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 3D, 10, 00", "seqz x26, X(0)");
}

#[test]
fn sext_b_1388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.b x8, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 94, 45, 60", "sext.b x8, x11");
}

#[test]
fn sext_b_1389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.b X(23), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9B, 4D, 60", "sext.b X(23), X(27)");
}

#[test]
fn sext_h_1390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.h x17, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 98, 5F, 60", "sext.h x17, X(31)");
}

#[test]
fn sext_h_1391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.h x16, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 98, 5C, 60", "sext.h x16, X(25)");
}

#[test]
fn sext_w_1392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.w X(5), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 02, 0C, 00", "sext.w X(5), X(24)");
}

#[test]
fn sext_w_1393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.w x14, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 87, 01, 00", "sext.w x14, x3");
}

#[test]
fn sgtz_1394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sgtz X(26), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 2D, 70, 00", "sgtz X(26), x7");
}

#[test]
fn sgtz_1395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sgtz x28, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 2E, C0, 00", "sgtz x28, X(12)");
}

#[test]
fn sh_1396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sh x7, [x9, -1824]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 90, 74, 8E", "sh x7, [x9, -1824]");
}

#[test]
fn sh_1397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sh x1, [X(16), -1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 1F, 18, FE", "sh x1, [X(16), -1]");
}

#[test]
fn sh1add_1398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add x28, X(15), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, AE, 07, 20", "sh1add x28, X(15), x0");
}

#[test]
fn sh1add_1399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add X(18), X(20), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 29, EA, 21", "sh1add X(18), X(20), x30");
}

#[test]
fn sh1add_uw_1400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add.uw X(25), X(17), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, AC, 38, 21", "sh1add.uw X(25), X(17), X(19)");
}

#[test]
fn sh1add_uw_1401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add.uw X(16), X(20), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 28, DA, 20", "sh1add.uw X(16), X(20), X(13)");
}

#[test]
fn sh2add_1402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add X(8), x0, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 44, 70, 20", "sh2add X(8), x0, X(7)");
}

#[test]
fn sh2add_1403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add X(3), x22, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 41, EB, 20", "sh2add X(3), x22, X(14)");
}

#[test]
fn sh2add_uw_1404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add.uw x3, x7, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, C1, C3, 20", "sh2add.uw x3, x7, x12");
}

#[test]
fn sh2add_uw_1405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add.uw X(28), x21, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, CE, 9A, 20", "sh2add.uw X(28), x21, x9");
}

#[test]
fn sh3add_1406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add X(26), X(19), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, ED, 79, 21", "sh3add X(26), X(19), x23");
}

#[test]
fn sh3add_1407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add X(31), x5, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, EF, 12, 21", "sh3add X(31), x5, x17");
}

#[test]
fn sh3add_uw_1408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add.uw x1, x26, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 60, 1D, 21", "sh3add.uw x1, x26, X(17)");
}

#[test]
fn sh3add_uw_1409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add.uw x10, x1, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, E5, E0, 21", "sh3add.uw x10, x1, x30");
}

#[test]
fn sha256sig0_1410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sig0 x14, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 97, 2A, 10", "sha256sig0 x14, X(21)");
}

#[test]
fn sha256sig0_1411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha256sig0 X(19), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 99, 26, 10", "sha256sig0 X(19), X(13)");
}

#[test]
fn sha256sig1_1412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha256sig1 X(14), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 97, 33, 10", "sha256sig1 X(14), x7");
}

#[test]
fn sha256sig1_1413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sig1 x7, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 93, 30, 10", "sha256sig1 x7, X(1)");
}

#[test]
fn sha256sum0_1414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha256sum0 x12, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 96, 0E, 10", "sha256sum0 x12, X(29)");
}

#[test]
fn sha256sum0_1415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha256sum0 X(8), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 14, 0C, 10", "sha256sum0 X(8), x24");
}

#[test]
fn sha256sum1_1416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sum1 X(24), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1C, 12, 10", "sha256sum1 X(24), X(4)");
}

#[test]
fn sha256sum1_1417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha256sum1 X(9), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 14, 10, 10", "sha256sum1 X(9), x0");
}

#[test]
fn sha512sig0_1418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sig0 X(31), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1F, 6D, 10", "sha512sig0 X(31), x26");
}

#[test]
fn sha512sig0_1419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha512sig0 X(8), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 94, 62, 10", "sha512sig0 X(8), x5");
}

#[test]
fn sha512sig1_1420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sig1 x22, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1B, 7F, 10", "sha512sig1 x22, X(30)");
}

#[test]
fn sha512sig1_1421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sig1 X(22), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9B, 76, 10", "sha512sig1 X(22), X(13)");
}

#[test]
fn sha512sum0_1422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sum0 X(10), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 95, 41, 10", "sha512sum0 X(10), X(3)");
}

#[test]
fn sha512sum0_1423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha512sum0 X(7), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 13, 47, 10", "sha512sum0 X(7), x14");
}

#[test]
fn sha512sum1_1424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha512sum1 x14, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 17, 57, 10", "sha512sum1 x14, X(14)");
}

#[test]
fn sha512sum1_1425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha512sum1 X(11), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 95, 5D, 10", "sha512sum1 X(11), X(27)");
}

#[test]
fn sll_1426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sll x22, X(16), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 1B, 98, 01", "sll x22, X(16), x25");
}

#[test]
fn sll_1427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sll x23, X(20), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1B, 5A, 00", "sll x23, X(20), X(5)");
}

#[test]
fn slli_1428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slli x5, X(11), 38
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 92, 65, 02", "slli x5, X(11), 38");
}

#[test]
fn slli_1429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slli x10, X(22), 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 15, CB, 00", "slli x10, X(22), 12");
}

#[test]
fn slli_uw_1430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; slli.uw x17, X(13), 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 98, B6, 09", "slli.uw x17, X(13), 27");
}

#[test]
fn slli_uw_1431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; slli.uw X(14), X(27), 34
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 97, 2D, 0A", "slli.uw X(14), X(27), 34");
}

#[test]
fn slliw_1432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slliw x4, x3, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 92, 81, 00", "slliw x4, x3, 8");
}

#[test]
fn slliw_1433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slliw x29, X(0), 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 1E, 60, 00", "slliw x29, X(0), 6");
}

#[test]
fn sllw_1434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sllw X(31), x8, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 1F, C4, 01", "sllw X(31), x8, x28");
}

#[test]
fn sllw_1435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sllw x3, x29, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 91, DE, 00", "sllw x3, x29, x13");
}

#[test]
fn slt_1436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slt x31, X(27), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, AF, 9D, 00", "slt x31, X(27), x9");
}

#[test]
fn slt_1437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slt X(21), X(8), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 2A, 94, 00", "slt X(21), X(8), x9");
}

#[test]
fn slti_1438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slti x30, X(16), 761
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 2F, 98, 2F", "slti x30, X(16), 761");
}

#[test]
fn slti_1439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slti X(30), x13, -1443
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, AF, D6, A5", "slti X(30), x13, -1443");
}

#[test]
fn sltiu_1440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltiu x18, x9, -473
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, B9, 74, E2", "sltiu x18, x9, -473");
}

#[test]
fn sltiu_1441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltiu X(16), x20, 41
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 38, 9A, 02", "sltiu X(16), x20, 41");
}

#[test]
fn sltu_1442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltu x17, x16, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 38, 88, 00", "sltu x17, x16, x8");
}

#[test]
fn sltu_1443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltu X(11), x6, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 35, 93, 00", "sltu X(11), x6, X(9)");
}

#[test]
fn sltz_1444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltz x18, X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A9, 08, 00", "sltz x18, X(17)");
}

#[test]
fn sltz_1445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltz x20, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 2A, 0B, 00", "sltz x20, x22");
}

#[test]
fn sm3p0_1446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksh
        ; sm3p0 X(21), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1A, 86, 10", "sm3p0 X(21), x12");
}

#[test]
fn sm3p0_1447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; sm3p0 X(26), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9D, 83, 10", "sm3p0 X(26), X(7)");
}

#[test]
fn sm3p1_1448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; sm3p1 X(20), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1A, 92, 10", "sm3p1 X(20), x4");
}

#[test]
fn sm3p1_1449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksh
        ; sm3p1 X(17), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 18, 9A, 10", "sm3p1 X(17), X(20)");
}

#[test]
fn sm4ed_1450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ed x22, X(15), X(18), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8B, 27, F1", "sm4ed x22, X(15), X(18), 3");
}

#[test]
fn sm4ed_1451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ed X(3), X(1), X(31), 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 81, F0, 71", "sm4ed X(3), X(1), X(31), 1");
}

#[test]
fn sm4ks_1452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ks X(15), X(28), x0, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 07, 0E, F4", "sm4ks X(15), X(28), x0, 3");
}

#[test]
fn sm4ks_1453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; sm4ks x9, x9, x0, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 84, 04, F4", "sm4ks x9, x9, x0, 3");
}

#[test]
fn snez_1454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; snez x23, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 3B, C0, 00", "snez x23, x12");
}

#[test]
fn snez_1455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; snez x4, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 32, A0, 01", "snez x4, x26");
}

#[test]
fn sra_1456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sra X(18), X(13), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, D9, B6, 40", "sra X(18), X(13), x11");
}

#[test]
fn sra_1457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sra X(7), X(29), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D3, BE, 40", "sra X(7), X(29), X(11)");
}

#[test]
fn srai_1458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srai X(23), x24, 46
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 5B, EC, 42", "srai X(23), x24, 46");
}

#[test]
fn srai_1459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srai X(16), x4, 62
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 58, E2, 43", "srai X(16), x4, 62");
}

#[test]
fn sraiw_1460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraiw x11, x14, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 55, 37, 41", "sraiw x11, x14, 19");
}

#[test]
fn sraiw_1461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraiw x14, X(28), 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 57, 2E, 41", "sraiw x14, X(28), 18");
}

#[test]
fn sraw_1462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraw x16, X(17), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, D8, 88, 41", "sraw x16, X(17), X(24)");
}

#[test]
fn sraw_1463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraw X(13), x10, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 56, 15, 40", "sraw X(13), x10, X(1)");
}

#[test]
fn srl_1464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srl X(29), X(7), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DE, 23, 01", "srl X(29), X(7), x18");
}

#[test]
fn srl_1465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srl x23, X(27), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DB, 9D, 00", "srl x23, X(27), X(9)");
}

#[test]
fn srli_1466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srli X(25), x28, 59
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 5C, BE, 03", "srli X(25), x28, 59");
}

#[test]
fn srli_1467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srli x30, X(1), 52
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, DF, 40, 03", "srli x30, X(1), 52");
}

#[test]
fn srliw_1468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srliw x10, X(13), 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, D5, 76, 01", "srliw x10, X(13), 23");
}

#[test]
fn srliw_1469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srliw x31, x12, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 5F, D6, 00", "srliw x31, x12, 13");
}

#[test]
fn srlw_1470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srlw X(14), x1, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, D7, 20, 01", "srlw X(14), x1, x18");
}

#[test]
fn srlw_1471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srlw X(16), X(17), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, D8, 48, 01", "srlw X(16), X(17), X(20)");
}

#[test]
fn ssamoswap_d_1472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d x13, x4, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 36, 4A, 48", "ssamoswap.d x13, x4, [X(20)]");
}

#[test]
fn ssamoswap_d_1473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d x2, X(1), [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B1, 1A, 48", "ssamoswap.d x2, X(1), [x21]");
}

#[test]
fn ssamoswap_d_aq_1474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aq X(23), x23, [X(16)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3B, 78, 4D", "ssamoswap.d.aq X(23), x23, [X(16)]");
}

#[test]
fn ssamoswap_d_aq_1475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aq X(26), X(24), [x7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BD, 83, 4D", "ssamoswap.d.aq X(26), X(24), [x7]");
}

#[test]
fn ssamoswap_d_aqrl_1476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aqrl x14, x25, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 37, 90, 4F", "ssamoswap.d.aqrl x14, x25, [x0]");
}

#[test]
fn ssamoswap_d_aqrl_1477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aqrl X(21), X(21), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3A, 56, 4F", "ssamoswap.d.aqrl X(21), X(21), [X(12)]");
}

#[test]
fn ssamoswap_d_rl_1478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.rl X(26), X(9), [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BD, 91, 4A", "ssamoswap.d.rl X(26), X(9), [X(3)]");
}

#[test]
fn ssamoswap_d_rl_1479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.rl X(7), x7, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B3, 7F, 4A", "ssamoswap.d.rl X(7), x7, [X(31)]");
}

#[test]
fn sspopchk_1480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C0, CD", "sspopchk x1");
}

#[test]
fn sspopchk_1481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C0, CD", "sspopchk x1");
}

#[test]
fn sspopchk_1482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C2, CD", "sspopchk x5");
}

#[test]
fn sspopchk_1483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C2, CD", "sspopchk x5");
}

#[test]
fn sspush_1484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 10, CE", "sspush x1");
}

#[test]
fn sspush_1485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 10, CE", "sspush x1");
}

#[test]
fn sspush_1486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 50, CE", "sspush x5");
}

#[test]
fn sspush_1487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 50, CE", "sspush x5");
}

#[test]
fn ssrdp_1488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssrdp X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 45, C0, CD", "ssrdp X(11)");
}

#[test]
fn ssrdp_1489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssrdp x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4E, C0, CD", "ssrdp x28");
}

#[test]
fn sub_1490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sub X(10), X(26), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 05, 6D, 40", "sub X(10), X(26), x6");
}

#[test]
fn sub_1491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sub X(30), x3, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8F, 61, 41", "sub X(30), x3, X(22)");
}

#[test]
fn subw_1492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; subw x23, X(7), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 8B, 13, 41", "subw x23, X(7), x17");
}

#[test]
fn subw_1493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; subw x14, x26, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 07, BD, 41", "subw x14, x26, x27");
}

#[test]
fn sw_1494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sw X(11), [x17, 1129]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, A4, B8, 46", "sw X(11), [x17, 1129]");
}

#[test]
fn sw_1495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sw x15, [X(27), 1988]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, A2, FD, 7C", "sw x15, [X(27), 1988]");
}

#[test]
fn wrs_nto_1496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.nto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 00", "wrs.nto");
}

#[test]
fn wrs_nto_1497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.nto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 00", "wrs.nto");
}

#[test]
fn wrs_sto_1498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.sto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 01", "wrs.sto");
}

#[test]
fn wrs_sto_1499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.sto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 01", "wrs.sto");
}

#[test]
fn xnor_1500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; xnor X(26), x23, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, CD, BB, 41", "xnor X(26), x23, x27");
}

#[test]
fn xnor_1501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; xnor X(31), X(16), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4F, 28, 40", "xnor X(31), X(16), x2");
}

#[test]
fn xor_1502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xor x14, x26, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 47, 5D, 01", "xor x14, x26, x21");
}

#[test]
fn xor_1503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xor x0, x10, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 40, A5, 00", "xor x0, x10, x10");
}

#[test]
fn xori_1504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xori x5, x2, -178
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 42, E1, F4", "xori x5, x2, -178");
}

#[test]
fn xori_1505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xori x11, X(8), 168
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 45, 84, 0A", "xori x11, X(8), 168");
}

#[test]
fn xperm4_1506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; xperm4 x30, x29, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, AF, 5E, 29", "xperm4 x30, x29, x21");
}

#[test]
fn xperm4_1507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; xperm4 X(29), x10, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 2E, C5, 28", "xperm4 X(29), x10, x12");
}

#[test]
fn xperm8_1508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; xperm8 X(23), x20, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 4B, 5A, 28", "xperm8 X(23), x20, X(5)");
}

#[test]
fn xperm8_1509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; xperm8 X(25), X(17), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, CC, 38, 29", "xperm8 X(25), X(17), X(19)");
}

#[test]
fn zext_b_1510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.b X(2), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, F1, FB, 0F", "zext.b X(2), x23");
}

#[test]
fn zext_b_1511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.b x4, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 72, FB, 0F", "zext.b x4, X(22)");
}

#[test]
fn zext_h_1512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; zext.h X(14), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, C7, 08, 08", "zext.h X(14), x17");
}

#[test]
fn zext_h_1513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; zext.h X(30), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 4F, 0D, 08", "zext.h X(30), X(26)");
}

#[test]
fn zext_w_1514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; zext.w x9, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 04, 02, 08", "zext.w x9, X(4)");
}

#[test]
fn zext_w_1515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; zext.w x25, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 8C, 05, 08", "zext.w x25, X(11)");
}
