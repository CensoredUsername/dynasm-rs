
#[test]
fn fcvt_wu_d_800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.wu.d x14, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 1A, C2", "fcvt.wu.d x14, F(20)");
}

#[test]
fn fcvt_wu_d_801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.wu.d x29, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 15, C2", "fcvt.wu.d x29, f11");
}

#[test]
fn fcvt_wu_h_802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h x3, f25, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, 1C, C4", "fcvt.wu.h x3, f25, rtz");
}

#[test]
fn fcvt_wu_h_803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h X(19), f9, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 99, 14, C4", "fcvt.wu.h X(19), f9, rtz");
}

#[test]
fn fcvt_wu_h_804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h X(27), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 1E, C4", "fcvt.wu.h X(27), F(28)");
}

#[test]
fn fcvt_wu_h_805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h x15, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 1B, C4", "fcvt.wu.h x15, F(23)");
}

#[test]
fn fcvt_wu_q_806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(6), F(5), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, 12, C6", "fcvt.wu.q X(6), F(5), rtz");
}

#[test]
fn fcvt_wu_q_807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(10), F(31), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 1F, C6", "fcvt.wu.q X(10), F(31), rne");
}

#[test]
fn fcvt_wu_q_808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(25), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 13, C6", "fcvt.wu.q X(25), F(7)");
}

#[test]
fn fcvt_wu_q_809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q X(4), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 11, C6", "fcvt.wu.q X(4), f2");
}

#[test]
fn fcvt_wu_s_810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x31, f24, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 1C, C0", "fcvt.wu.s x31, f24, dyn");
}

#[test]
fn fcvt_wu_s_811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x8, F(0), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 14, 10, C0", "fcvt.wu.s x8, F(0), rtz");
}

#[test]
fn fcvt_wu_s_812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x13, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 18, C0", "fcvt.wu.s x13, f16");
}

#[test]
fn fcvt_wu_s_813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x19, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 18, C0", "fcvt.wu.s x19, F(17)");
}

#[test]
fn fcvtmod_w_d_814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fcvtmod.w.d x23, F(9), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, 84, C2", "fcvtmod.w.d x23, F(9), rtz");
}

#[test]
fn fcvtmod_w_d_815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fcvtmod.w.d x6, f4, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 13, 82, C2", "fcvtmod.w.d x6, f4, rtz");
}

#[test]
fn fdiv_d_816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f21, f20, f13, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, DA, 1A", "fdiv.d f21, f20, f13, dyn");
}

#[test]
fn fdiv_d_817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f16, f1, f14, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A8, E0, 1A", "fdiv.d f16, f1, f14, rdn");
}

#[test]
fn fdiv_d_818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f1, F(13), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, D6, 1A", "fdiv.d f1, F(13), F(13)");
}

#[test]
fn fdiv_d_819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d F(4), f17, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, E8, 1A", "fdiv.d F(4), f17, f14");
}

#[test]
fn fdiv_h_820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h f10, F(17), f9, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C5, 98, 1C", "fdiv.h f10, F(17), f9, rmm");
}

#[test]
fn fdiv_h_821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(21), f18, f26, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, A9, 1D", "fdiv.h F(21), f18, f26, rne");
}

#[test]
fn fdiv_h_822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(27), F(2), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 71, 1C", "fdiv.h F(27), F(2), F(7)");
}

#[test]
fn fdiv_h_823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(18), F(26), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, CD, 1C", "fdiv.h F(18), F(26), F(12)");
}

#[test]
fn fdiv_q_824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q f15, F(17), f27, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B7, B8, 1F", "fdiv.q f15, F(17), f27, rup");
}

#[test]
fn fdiv_q_825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q f10, f7, F(12), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A5, C3, 1E", "fdiv.q f10, f7, F(12), rdn");
}

#[test]
fn fdiv_q_826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(19), f6, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 23, 1E", "fdiv.q F(19), f6, F(2)");
}

#[test]
fn fdiv_q_827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(11), f11, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 35, 1F", "fdiv.q F(11), f11, f19");
}

#[test]
fn fdiv_s_828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s F(12), f22, F(9), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 9B, 18", "fdiv.s F(12), f22, F(9), dyn");
}

#[test]
fn fdiv_s_829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f23, F(18), F(15), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2B, F9, 18", "fdiv.s f23, F(18), F(15), rdn");
}

#[test]
fn fdiv_s_830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s F(28), F(12), f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 66, 19", "fdiv.s F(28), F(12), f22");
}

#[test]
fn fdiv_s_831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f1, f15, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, D7, 18", "fdiv.s f1, f15, f13");
}

#[test]
fn fence_832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence iow, ior
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, E0, 0D", "fence iow, ior");
}

#[test]
fn fence_833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence i, ir
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, A0, 08", "fence i, ir");
}

#[test]
fn fence_834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_i_836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_i_837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_tso_838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn fence_tso_839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn feq_d_840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; feq.d X(5), F(24), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 22, 8C, A3", "feq.d X(5), F(24), F(24)");
}

#[test]
fn feq_d_841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; feq.d X(18), F(29), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A9, EE, A2", "feq.d X(18), F(29), f14");
}

#[test]
fn feq_h_842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; feq.h x28, f10, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2E, B5, A5", "feq.h x28, f10, F(27)");
}

#[test]
fn feq_h_843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; feq.h x30, F(6), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2F, 73, A5", "feq.h x30, F(6), F(23)");
}

#[test]
fn feq_q_844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; feq.q x19, F(25), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, 1C, A6", "feq.q x19, F(25), F(1)");
}

#[test]
fn feq_q_845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; feq.q x26, f25, f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, 5C, A6", "feq.q x26, f25, f5");
}

#[test]
fn feq_s_846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; feq.s x23, f21, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 7A, A1", "feq.s x23, f21, f23");
}

#[test]
fn feq_s_847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; feq.s x5, F(19), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A2, C9, A0", "feq.s x5, F(19), F(12)");
}

#[test]
fn fld_848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld F(8), [X(14), 1890]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 34, 27, 76", "fld F(8), [X(14), 1890]");
}

#[test]
fn fld_849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld f29, [x9, 1754]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, BE, A4, 6D", "fld f29, [x9, 1754]");
}

#[test]
fn fld_850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld f29, 1097760951, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 87, 6E, 41, 87, 3E, 77, 0B", "fld f29, 1097760951, X(14)");
}

#[test]
fn fld_851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld F(17), 502651177, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, EA, F5, 1D, 87, B8, 9A, 92", "fld F(17), 502651177, x21");
}

#[test]
fn fle_d_852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fle.d x17, F(15), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 88, B7, A2", "fle.d x17, F(15), f11");
}

#[test]
fn fle_d_853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fle.d x28, F(29), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8E, EE, A2", "fle.d x28, F(29), f14");
}

#[test]
fn fle_h_854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fle.h x16, f26, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 4D, A4", "fle.h x16, f26, f4");
}

#[test]
fn fle_h_855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fle.h X(29), F(8), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0E, 64, A4", "fle.h X(29), F(8), F(6)");
}

#[test]
fn fle_q_856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fle.q X(4), f3, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 82, C1, A7", "fle.q X(4), f3, f28");
}

#[test]
fn fle_q_857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fle.q x3, F(16), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, B8, A6", "fle.q x3, F(16), F(11)");
}

#[test]
fn fle_s_858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fle.s x5, f25, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 82, 6C, A0", "fle.s x5, f25, f6");
}

#[test]
fn fle_s_859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fle.s x6, F(17), f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 08, A0", "fle.s x6, F(17), f0");
}

#[test]
fn fleq_d_860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fleq.d x16, F(8), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 48, 84, A3", "fleq.d x16, F(8), f24");
}

#[test]
fn fleq_d_861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fleq.d x31, F(28), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4F, DE, A2", "fleq.d x31, F(28), F(13)");
}

#[test]
fn fleq_h_862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fleq.h x27, F(0), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4D, E0, A4", "fleq.h x27, F(0), f14");
}

#[test]
fn fleq_h_863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fleq.h x26, F(26), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4D, ED, A4", "fleq.h x26, F(26), f14");
}

#[test]
fn fleq_q_864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fleq.q x29, f10, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4E, 25, A7", "fleq.q x29, f10, F(18)");
}

#[test]
fn fleq_q_865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fleq.q X(22), F(17), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CB, 28, A6", "fleq.q X(22), F(17), f2");
}

#[test]
fn fleq_s_866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fleq.s x30, F(20), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4F, 6A, A0", "fleq.s x30, F(20), F(6)");
}

#[test]
fn fleq_s_867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fleq.s x8, F(14), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 44, 07, A1", "fleq.s x8, F(14), f16");
}

#[test]
fn flh_868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh f8, [X(18), -1451]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 14, 59, A5", "flh f8, [X(18), -1451]");
}

#[test]
fn flh_869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh f0, [x31, 1980]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 90, CF, 7B", "flh f0, [x31, 1980]");
}

#[test]
fn flh_870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh f28, -531382484, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, CC, 53, E0, 07, 9E, CC, F2", "flh f28, -531382484, X(25)");
}

#[test]
fn flh_871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh F(26), -2082602015, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 01, DE, 83, 07, 9D, 11, 3E", "flh F(26), -2082602015, X(3)");
}

#[test]
fn fli_d_872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fli.d f1, 3.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 1B, F2", "fli.d f1, 3.0");
}

#[test]
fn fli_d_873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fli.d F(5), 1.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 18, F2", "fli.d F(5), 1.0");
}

#[test]
fn fli_h_874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fli.h f21, 0.625
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 16, F4", "fli.h f21, 0.625");
}

#[test]
fn fli_h_875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fli.h f11, 0.3125
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 14, F4", "fli.h f11, 0.3125");
}

#[test]
fn fli_q_876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fli.q F(10), 1.25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 18, F6", "fli.q F(10), 1.25");
}

#[test]
fn fli_q_877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fli.q F(6), 0.3125
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 14, F6", "fli.q F(6), 0.3125");
}

#[test]
fn fli_s_878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fli.s F(8), inf
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 04, 1F, F0", "fli.s F(8), inf");
}

#[test]
fn fli_s_879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fli.s f24, 0.75
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0C, 17, F0", "fli.s f24, 0.75");
}

#[test]
fn flq_880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f16, [X(28), 545]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 48, 1E, 22", "flq f16, [X(28), 545]");
}

#[test]
fn flq_881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq F(17), [x26, 878]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 48, ED, 36", "flq F(17), [x26, 878]");
}

#[test]
fn flq_882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq F(20), 574141221, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, B2, 38, 22, 07, 4A, 52, 32", "flq F(20), 574141221, x4");
}

#[test]
fn flq_883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f3, -1692808065, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, D8, 19, 9B, 87, 41, F8, C7", "flq f3, -1692808065, X(16)");
}

#[test]
fn flt_d_884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; flt.d X(9), f28, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 14, AE, A3", "flt.d X(9), f28, f26");
}

#[test]
fn flt_d_885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; flt.d x15, F(6), F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 17, 53, A2", "flt.d x15, F(6), F(5)");
}

#[test]
fn flt_h_886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flt.h x20, f18, F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1A, 29, A5", "flt.h x20, f18, F(18)");
}

#[test]
fn flt_h_887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flt.h x13, f20, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 16, CA, A4", "flt.h x13, f20, F(12)");
}

#[test]
fn flt_q_888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flt.q x23, f28, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1B, 3E, A6", "flt.q x23, f28, f3");
}

#[test]
fn flt_q_889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flt.q x5, F(26), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 12, ED, A7", "flt.q x5, F(26), F(30)");
}

#[test]
fn flt_s_890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flt.s x10, f14, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 15, C7, A0", "flt.s x10, f14, F(12)");
}

#[test]
fn flt_s_891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flt.s x22, F(24), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, DC, A1", "flt.s x22, F(24), F(29)");
}

#[test]
fn fltq_d_892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fltq.d X(22), F(23), F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, DB, 1B, A2", "fltq.d X(22), F(23), F(1)");
}

#[test]
fn fltq_d_893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fltq.d X(13), f26, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 56, AD, A3", "fltq.d X(13), f26, f26");
}

#[test]
fn fltq_h_894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fltq.h X(19), F(31), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D9, AF, A5", "fltq.h X(19), F(31), f26");
}

#[test]
fn fltq_h_895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fltq.h x28, F(22), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 5E, 3B, A4", "fltq.h x28, F(22), F(3)");
}

#[test]
fn fltq_q_896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fltq.q X(11), f5, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D5, F2, A6", "fltq.q X(11), f5, f15");
}

#[test]
fn fltq_q_897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fltq.q x0, f17, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D0, 08, A7", "fltq.q x0, f17, F(16)");
}

#[test]
fn fltq_s_898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fltq.s X(22), f12, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 5B, 96, A0", "fltq.s X(22), f12, f9");
}

#[test]
fn fltq_s_899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fltq.s x10, F(26), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 55, 1D, A1", "fltq.s x10, F(26), f17");
}

#[test]
fn flw_900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(2), [X(6), -816]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 21, 03, CD", "flw F(2), [X(6), -816]");
}

#[test]
fn flw_901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(17), [X(17), -1050]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, A8, 68, BE", "flw F(17), [X(17), -1050]");
}

#[test]
fn flw_902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(16), 277756115, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 4E, 8E, 10, 07, A8, 3E, 8D", "flw F(16), 277756115, X(29)");
}

#[test]
fn flw_903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw f9, -601074991, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 57, 2C, DC, 87, 24, 17, 2D", "flw f9, -601074991, x14");
}

#[test]
fn fmadd_d_904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(21), F(6), F(1), F(14), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 0A, 13, 72", "fmadd.d F(21), F(6), F(1), F(14), rne");
}

#[test]
fn fmadd_d_905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(24), f27, f11, f27, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, FC, BD, DA", "fmadd.d F(24), f27, f11, f27, dyn");
}

#[test]
fn fmadd_d_906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d f29, f30, f27, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7E, BF, DB", "fmadd.d f29, f30, f27, f27");
}

#[test]
fn fmadd_d_907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(30), f29, f8, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, FF, 8E, BA", "fmadd.d F(30), f29, f8, f23");
}

#[test]
fn fmadd_h_908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f6, F(24), F(12), f21, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 23, CC, AC", "fmadd.h f6, F(24), F(12), f21, rdn");
}

#[test]
fn fmadd_h_909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h F(14), f13, F(3), f27, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 87, 36, DC", "fmadd.h F(14), f13, F(3), f27, rne");
}

#[test]
fn fmadd_h_910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f15, f27, f31, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F7, FD, 7D", "fmadd.h f15, f27, f31, F(15)");
}

#[test]
fn fmadd_h_911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f3, F(31), F(10), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F1, AF, 5C", "fmadd.h f3, F(31), F(10), F(11)");
}

#[test]
fn fmadd_q_912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q f5, f23, F(31), F(23), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, A2, FB, BF", "fmadd.q f5, f23, F(31), F(23), rdn");
}

#[test]
fn fmadd_q_913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(29), F(6), f6, f15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7E, 63, 7E", "fmadd.q F(29), F(6), f6, f15, dyn");
}

#[test]
fn fmadd_q_914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(11), f3, f20, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F5, 41, 6F", "fmadd.q F(11), f3, f20, f13");
}

#[test]
fn fmadd_q_915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q f28, f2, F(3), F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7E, 31, 86", "fmadd.q f28, f2, F(3), F(16)");
}

#[test]
fn fmadd_s_916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s F(4), f24, F(5), F(26), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 22, 5C, D0", "fmadd.s F(4), f24, F(5), F(26), rdn");
}

#[test]
fn fmadd_s_917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f23, F(14), f17, F(31), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 2B, 17, F9", "fmadd.s f23, F(14), f17, F(31), rdn");
}

#[test]
fn fmadd_s_918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s F(27), f13, f21, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, FD, 56, 89", "fmadd.s F(27), f13, f21, F(17)");
}

#[test]
fn fmadd_s_919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f26, F(0), f16, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7D, 00, A9", "fmadd.s f26, F(0), f16, F(21)");
}

#[test]
fn fmax_d_920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmax.d f19, f7, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 99, 93, 2A", "fmax.d f19, f7, f9");
}

#[test]
fn fmax_d_921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmax.d F(17), F(18), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 18, C9, 2A", "fmax.d F(17), F(18), F(12)");
}

#[test]
fn fmax_h_922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmax.h f15, f23, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 97, BB, 2D", "fmax.h f15, f23, F(27)");
}

#[test]
fn fmax_h_923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmax.h F(22), F(7), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9B, 73, 2C", "fmax.h F(22), F(7), F(7)");
}

#[test]
fn fmax_q_924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmax.q f17, f30, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 18, AF, 2F", "fmax.q f17, f30, F(26)");
}

#[test]
fn fmax_q_925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmax.q f17, f2, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 18, 11, 2E", "fmax.q f17, f2, f1");
}

#[test]
fn fmax_s_926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmax.s F(31), F(19), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9F, 19, 28", "fmax.s F(31), F(19), f1");
}

#[test]
fn fmax_s_927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmax.s f21, F(16), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1A, A8, 28", "fmax.s f21, F(16), f10");
}

#[test]
fn fmaxm_d_928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fmaxm.d F(13), f11, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B6, A5, 2A", "fmaxm.d F(13), f11, F(10)");
}

#[test]
fn fmaxm_d_929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fmaxm.d f18, f2, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 39, 11, 2A", "fmaxm.d f18, f2, f1");
}

#[test]
fn fmaxm_h_930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fmaxm.h F(25), f0, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3C, 50, 2D", "fmaxm.h F(25), f0, F(21)");
}

#[test]
fn fmaxm_h_931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fmaxm.h F(29), f19, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BE, F9, 2C", "fmaxm.h F(29), f19, F(15)");
}

#[test]
fn fmaxm_q_932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmaxm.q F(14), F(22), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 37, 4B, 2F", "fmaxm.q F(14), F(22), f20");
}

#[test]
fn fmaxm_q_933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmaxm.q F(16), f17, f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B8, 48, 2F", "fmaxm.q F(16), f17, f20");
}

#[test]
fn fmaxm_s_934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fmaxm.s F(7), f7, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B3, 13, 29", "fmaxm.s F(7), f7, F(17)");
}

#[test]
fn fmaxm_s_935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fmaxm.s F(10), F(19), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B5, B9, 28", "fmaxm.s F(10), F(19), f11");
}

#[test]
fn fmin_d_936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmin.d f17, f18, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, C9, 2B", "fmin.d f17, f18, F(28)");
}

#[test]
fn fmin_d_937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmin.d F(24), F(1), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, A0, 2A", "fmin.d F(24), F(1), F(10)");
}

#[test]
fn fmin_h_938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmin.h f16, F(16), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, C8, 2D", "fmin.h f16, F(16), f28");
}

#[test]
fn fmin_h_939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmin.h f2, F(29), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, BE, 2D", "fmin.h f2, F(29), f27");
}

#[test]
fn fmin_q_940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmin.q F(24), f28, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0C, 8E, 2E", "fmin.q F(24), f28, F(8)");
}

#[test]
fn fmin_q_941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmin.q F(7), F(1), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 83, C0, 2F", "fmin.q F(7), F(1), f28");
}

#[test]
fn fmin_s_942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmin.s f4, f14, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 07, 28", "fmin.s f4, f14, f0");
}

#[test]
fn fmin_s_943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmin.s F(11), f7, f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 53, 28", "fmin.s F(11), f7, f5");
}

#[test]
fn fminm_d_944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fminm.d F(0), F(20), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 20, 3A, 2B", "fminm.d F(0), F(20), f19");
}

#[test]
fn fminm_d_945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fminm.d F(24), f19, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AC, 29, 2A", "fminm.d F(24), f19, F(2)");
}

#[test]
fn fminm_h_946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fminm.h f12, f11, f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A6, 85, 2D", "fminm.h f12, f11, f24");
}

#[test]
fn fminm_h_947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fminm.h f21, F(20), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, 4A, 2C", "fminm.h f21, F(20), F(4)");
}

#[test]
fn fminm_q_948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fminm.q F(11), f6, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 25, C3, 2F", "fminm.q F(11), f6, F(28)");
}

#[test]
fn fminm_q_949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fminm.q f22, f10, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2B, B5, 2F", "fminm.q f22, f10, f27");
}

#[test]
fn fminm_s_950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fminm.s F(3), f29, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, EE, 29", "fminm.s F(3), f29, f30");
}

#[test]
fn fminm_s_951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fminm.s F(24), F(2), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2C, F1, 28", "fminm.s F(24), F(2), f15");
}

#[test]
fn fmsub_d_952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d F(28), f11, f11, F(28), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, BE, B5, E2", "fmsub.d F(28), f11, f11, F(28), rup");
}

#[test]
fn fmsub_d_953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f1, F(15), f16, F(12), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, C0, 07, 63", "fmsub.d f1, F(15), f16, F(12), rmm");
}

#[test]
fn fmsub_d_954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f11, F(8), f16, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 75, 04, 4B", "fmsub.d f11, F(8), f16, f9");
}

#[test]
fn fmsub_d_955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d F(29), F(2), f6, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 7E, 61, E2", "fmsub.d F(29), F(2), f6, f28");
}

#[test]
fn fmsub_h_956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(16), f15, F(29), f14, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F8, D7, 75", "fmsub.h F(16), f15, F(29), f14, dyn");
}

#[test]
fn fmsub_h_957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h f3, F(19), f10, F(22), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F1, A9, B4", "fmsub.h f3, F(19), f10, F(22), dyn");
}

#[test]
fn fmsub_h_958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h f28, F(6), f6, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 7E, 63, 54", "fmsub.h f28, F(6), f6, f10");
}

#[test]
fn fmsub_h_959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h f9, f27, f21, f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F4, 5D, 2D", "fmsub.h f9, f27, f21, f5");
}

#[test]
fn fmsub_q_960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f2, F(16), F(10), F(16), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 71, A8, 86", "fmsub.q f2, F(16), F(10), F(16), dyn");
}

#[test]
fn fmsub_q_961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q F(14), F(31), f0, F(18), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F7, 0F, 96", "fmsub.q F(14), F(31), f0, F(18), dyn");
}

#[test]
fn fmsub_q_962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f6, f3, F(7), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F3, 71, BE", "fmsub.q f6, f3, F(7), f23");
}

#[test]
fn fmsub_q_963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q F(23), f5, f20, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, FB, 42, 2F", "fmsub.q F(23), f5, f20, F(5)");
}

#[test]
fn fmsub_s_964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s f25, F(28), F(8), F(7), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 7C, 8E, 38", "fmsub.s f25, F(28), F(8), F(7), dyn");
}

#[test]
fn fmsub_s_965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(0), f5, F(18), F(23), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 90, 22, B9", "fmsub.s F(0), f5, F(18), F(23), rtz");
}

#[test]
fn fmsub_s_966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(1), F(26), f10, f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 70, AD, F8", "fmsub.s F(1), F(26), f10, f31");
}

#[test]
fn fmsub_s_967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(29), f23, f24, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, FE, 8B, 39", "fmsub.s F(29), f23, f24, F(7)");
}

#[test]
fn fmul_d_968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(28), F(22), F(8), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3E, 8B, 12", "fmul.d F(28), F(22), F(8), rup");
}

#[test]
fn fmul_d_969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(17), F(10), F(7), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 38, 75, 12", "fmul.d F(17), F(10), F(7), rup");
}

#[test]
fn fmul_d_970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(17), f20, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, 7A, 13", "fmul.d F(17), f20, f23");
}

#[test]
fn fmul_d_971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d f3, f6, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 71, C3, 12", "fmul.d f3, f6, F(12)");
}

#[test]
fn fmul_h_972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h f8, f30, F(8), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 14, 8F, 14", "fmul.h f8, f30, F(8), rtz");
}

#[test]
fn fmul_h_973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h f15, F(8), f3, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 07, 34, 14", "fmul.h f15, F(8), f3, rne");
}

#[test]
fn fmul_h_974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h f7, F(2), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, B1, 15", "fmul.h f7, F(2), F(27)");
}

#[test]
fn fmul_h_975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(1), F(27), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, 9D, 15", "fmul.h F(1), F(27), f25");
}

#[test]
fn fmul_q_976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q f26, f15, F(23), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, 77, 17", "fmul.q f26, f15, F(23), rdn");
}

#[test]
fn fmul_q_977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q f21, F(0), F(15), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4A, F0, 16", "fmul.q f21, F(0), F(15), rmm");
}

#[test]
fn fmul_q_978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q f9, f24, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 6C, 16", "fmul.q f9, f24, f6");
}

#[test]
fn fmul_q_979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q F(8), F(0), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 90, 17", "fmul.q F(8), F(0), F(25)");
}

#[test]
fn fmul_s_980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f1, F(20), f6, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 40, 6A, 10", "fmul.s f1, F(20), f6, rmm");
}

#[test]
fn fmul_s_981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f13, f19, F(16), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 96, 09, 11", "fmul.s f13, f19, F(16), rtz");
}

#[test]
fn fmul_s_982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f31, f22, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, AB, 10", "fmul.s f31, f22, f10");
}

#[test]
fn fmul_s_983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f30, f6, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, C3, 11", "fmul.s f30, f6, F(28)");
}

#[test]
fn fmv_d_984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d f18, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 89, 18, 23", "fmv.d f18, F(17)");
}

#[test]
fn fmv_d_985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d F(8), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 7B, 23", "fmv.d F(8), F(23)");
}

#[test]
fn fmv_d_x_986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d.x f10, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 03, F2", "fmv.d.x f10, X(6)");
}

#[test]
fn fmv_d_x_987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d.x F(1), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 80, 05, F2", "fmv.d.x F(1), x11");
}

#[test]
fn fmv_h_988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h F(11), F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 52, 24", "fmv.h F(11), F(5)");
}

#[test]
fn fmv_h_989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h f4, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 6B, 25", "fmv.h f4, F(22)");
}

#[test]
fn fmv_h_x_990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h.x F(5), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 04, F4", "fmv.h.x F(5), X(8)");
}

#[test]
fn fmv_h_x_991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h.x f14, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 02, F4", "fmv.h.x f14, x5");
}

#[test]
fn fmv_q_992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmv.q f10, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 08, 27", "fmv.q f10, f16");
}

#[test]
fn fmv_q_993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmv.q f22, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, FF, 27", "fmv.q f22, F(31)");
}

#[test]
fn fmv_s_994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s F(17), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 6B, 21", "fmv.s F(17), F(22)");
}

#[test]
fn fmv_s_995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s f21, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, AD, 21", "fmv.s f21, f26");
}

#[test]
fn fmv_s_x_996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s.x f9, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 04, F0", "fmv.s.x f9, x9");
}

#[test]
fn fmv_s_x_997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s.x F(15), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 07, 07, F0", "fmv.s.x F(15), X(14)");
}

#[test]
fn fmv_w_x_998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.w.x F(27), X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, 0D, F0", "fmv.w.x F(27), X(26)");
}

#[test]
fn fmv_w_x_999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.w.x f28, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 05, F0", "fmv.w.x f28, x10");
}

#[test]
fn fmv_x_d_1000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.x.d x23, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, 0E, E2", "fmv.x.d x23, F(28)");
}

#[test]
fn fmv_x_d_1001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.x.d X(15), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 07, 07, E2", "fmv.x.d X(15), f14");
}

#[test]
fn fmv_x_h_1002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.x.h X(10), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 0A, E4", "fmv.x.h X(10), F(21)");
}

#[test]
fn fmv_x_h_1003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.x.h X(2), F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 07, E4", "fmv.x.h X(2), F(15)");
}

#[test]
fn fmv_x_s_1004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.s x30, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 01, E0", "fmv.x.s x30, F(2)");
}

#[test]
fn fmv_x_s_1005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.s X(29), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8E, 05, E0", "fmv.x.s X(29), f11");
}

#[test]
fn fmv_x_w_1006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.w x14, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 04, E0", "fmv.x.w x14, f9");
}

#[test]
fn fmv_x_w_1007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.w x21, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 0A, E0", "fmv.x.w x21, F(20)");
}

#[test]
fn fmvh_x_q_1008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvh.x.q X(12), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 1D, E6", "fmvh.x.q X(12), f27");
}

#[test]
fn fmvh_x_q_1009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvh.x.q x10, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 1F, E6", "fmvh.x.q x10, f30");
}

#[test]
fn fmvp_q_x_1010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvp.q.x f28, x2, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 01, B6", "fmvp.q.x f28, x2, x0");
}

#[test]
fn fmvp_q_x_1011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvp.q.x F(26), x21, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, FA, B7", "fmvp.q.x F(26), x21, X(31)");
}

#[test]
fn fneg_d_1012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fneg.d F(11), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 15, 29, 23", "fneg.d F(11), F(18)");
}

#[test]
fn fneg_d_1013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fneg.d f6, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, 31, 22", "fneg.d f6, F(3)");
}

#[test]
fn fneg_h_1014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fneg.h f6, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, D6, 24", "fneg.h f6, f13");
}

#[test]
fn fneg_h_1015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fneg.h f3, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, 39, 25", "fneg.h f3, F(19)");
}

#[test]
fn fneg_q_1016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fneg.q F(4), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 92, FF, 27", "fneg.q F(4), f31");
}

#[test]
fn fneg_q_1017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fneg.q f0, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 90, 10, 26", "fneg.q f0, F(1)");
}

#[test]
fn fneg_s_1018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fneg.s f24, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1C, 21, 20", "fneg.s f24, F(2)");
}

#[test]
fn fneg_s_1019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fneg.s f16, F(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 98, 10, 20", "fneg.s f16, F(1)");
}

#[test]
fn fnmadd_d_1020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d f26, f27, f12, F(30), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 8D, CD, F2", "fnmadd.d f26, f27, f12, F(30), rne");
}

#[test]
fn fnmadd_d_1021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d f22, F(22), f20, f30, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 1B, 4B, F3", "fnmadd.d f22, F(22), f20, f30, rtz");
}

#[test]
fn fnmadd_d_1022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d f2, f1, F(13), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F1, D0, 92", "fnmadd.d f2, f1, F(13), F(18)");
}

#[test]
fn fnmadd_d_1023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d f8, f25, f0, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F4, 0C, AA", "fnmadd.d f8, f25, f0, F(21)");
}

#[test]
fn fnmadd_h_1024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h f2, F(22), F(27), F(25), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 31, BB, CD", "fnmadd.h f2, F(22), F(27), F(25), rup");
}

#[test]
fn fnmadd_h_1025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h f0, f7, F(6), f6, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, A0, 63, 34", "fnmadd.h f0, f7, F(6), f6, rdn");
}

#[test]
fn fnmadd_h_1026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h f24, f26, F(18), f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 7C, 2D, 85", "fnmadd.h f24, f26, F(18), f16");
}

#[test]
fn fnmadd_h_1027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h F(26), f1, f15, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, FD, F0, E4", "fnmadd.h F(26), f1, f15, F(28)");
}

#[test]
fn fnmadd_q_1028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(18), F(29), f7, F(8), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, A9, 7E, 46", "fnmadd.q F(18), F(29), f7, F(8), rdn");
}

#[test]
fn fnmadd_q_1029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(7), F(31), F(4), f2, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, C3, 4F, 16", "fnmadd.q F(7), F(31), F(4), f2, rmm");
}

#[test]
fn fnmadd_q_1030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q f26, f11, f23, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, FD, 75, EF", "fnmadd.q f26, f11, f23, f29");
}

#[test]
fn fnmadd_q_1031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q f12, F(31), f19, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F6, 3F, 8F", "fnmadd.q f12, F(31), f19, F(17)");
}

#[test]
fn fnmadd_s_1032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s F(0), f13, f20, F(24), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 80, 46, C1", "fnmadd.s F(0), f13, f20, F(24), rne");
}

#[test]
fn fnmadd_s_1033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f7, f7, F(28), F(22), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, A3, C3, B1", "fnmadd.s f7, f7, F(28), F(22), rdn");
}

#[test]
fn fnmadd_s_1034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s F(11), f2, f31, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 75, F1, D1", "fnmadd.s F(11), f2, f31, f26");
}

#[test]
fn fnmadd_s_1035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f6, f7, f24, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F3, 83, D9", "fnmadd.s f6, f7, f24, f27");
}

#[test]
fn fnmsub_d_1036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f20, F(28), f0, F(8), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 3A, 0E, 42", "fnmsub.d f20, F(28), f0, F(8), rup");
}

#[test]
fn fnmsub_d_1037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f18, F(30), F(13), F(18), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 39, DF, 92", "fnmsub.d f18, F(30), F(13), F(18), rup");
}

#[test]
fn fnmsub_d_1038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f15, f5, F(0), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, F7, 02, 5A", "fnmsub.d f15, f5, F(0), f11");
}

#[test]
fn fnmsub_d_1039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f4, F(9), f14, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, F2, E4, 22", "fnmsub.d f4, F(9), f14, f4");
}

#[test]
fn fnmsub_h_1040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(23), f13, F(21), F(27), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 8B, 56, DD", "fnmsub.h F(23), f13, F(21), F(27), rne");
}

#[test]
fn fnmsub_h_1041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h f24, F(29), f26, f30, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, FC, AE, F5", "fnmsub.h f24, F(29), f26, f30, dyn");
}

#[test]
fn fnmsub_h_1042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(23), F(31), F(2), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FB, 2F, 4C", "fnmsub.h F(23), F(31), F(2), F(9)");
}

#[test]
fn fnmsub_h_1043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(12), f31, F(26), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, F6, AF, 1D", "fnmsub.h F(12), f31, F(26), f3");
}

#[test]
fn fnmsub_q_1044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f21, f17, f23, f12, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FA, 78, 67", "fnmsub.q f21, f17, f23, f12, dyn");
}

#[test]
fn fnmsub_q_1045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f31, f4, F(0), f1, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 7F, 02, 0E", "fnmsub.q f31, f4, F(0), f1, dyn");
}

#[test]
fn fnmsub_q_1046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q F(0), f20, f27, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 70, BA, AF", "fnmsub.q F(0), f20, f27, f21");
}

#[test]
fn fnmsub_q_1047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f21, F(1), f2, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FA, 20, 9E", "fnmsub.q f21, F(1), f2, F(19)");
}

#[test]
fn fnmsub_s_1048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s F(16), f15, F(14), f26, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, C8, E7, D0", "fnmsub.s F(16), f15, F(14), f26, rmm");
}

#[test]
fn fnmsub_s_1049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f24, f13, f15, f18, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 9C, F6, 90", "fnmsub.s f24, f13, f15, f18, rtz");
}

#[test]
fn fnmsub_s_1050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s F(7), f16, f0, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 73, 08, F0", "fnmsub.s F(7), f16, f0, F(30)");
}

#[test]
fn fnmsub_s_1051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f26, f21, f14, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, FD, EA, 70", "fnmsub.s f26, f21, f14, f14");
}

#[test]
fn frcsr_1052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frcsr X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 21, 30, 00", "frcsr X(2)");
}

#[test]
fn frcsr_1053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frcsr X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 21, 30, 00", "frcsr X(2)");
}

#[test]
fn frflags_1054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frflags X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 22, 10, 00", "frflags X(4)");
}

#[test]
fn frflags_1055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frflags x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 29, 10, 00", "frflags x18");
}

#[test]
fn fround_d_1056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d F(27), F(9), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 44, 42", "fround.d F(27), F(9), dyn");
}

#[test]
fn fround_d_1057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d F(31), F(1), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 40, 42", "fround.d F(31), F(1), dyn");
}

#[test]
fn fround_d_1058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f24, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 49, 42", "fround.d f24, f18");
}

#[test]
fn fround_d_1059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f6, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 46, 42", "fround.d f6, F(12)");
}

#[test]
fn fround_h_1060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h F(28), f21, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AE, 4A, 44", "fround.h F(28), f21, rdn");
}

#[test]
fn fround_h_1061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h f27, F(7), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8D, 43, 44", "fround.h f27, F(7), rne");
}

#[test]
fn fround_h_1062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h F(20), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 46, 44", "fround.h F(20), F(12)");
}

#[test]
fn fround_h_1063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h F(8), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 4A, 44", "fround.h F(8), F(20)");
}

#[test]
fn fround_q_1064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q f31, f25, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BF, 4C, 46", "fround.q f31, f25, rup");
}

#[test]
fn fround_q_1065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q f30, F(2), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1F, 41, 46", "fround.q f30, F(2), rtz");
}

#[test]
fn fround_q_1066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q F(23), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 4C, 46", "fround.q F(23), F(25)");
}

#[test]
fn fround_q_1067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q f0, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 4A, 46", "fround.q f0, F(20)");
}

#[test]
fn fround_s_1068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s f22, f27, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CB, 4D, 40", "fround.s f22, f27, rmm");
}

#[test]
fn fround_s_1069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s F(8), f26, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 4D, 40", "fround.s F(8), f26, dyn");
}

#[test]
fn fround_s_1070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s f20, F(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 42, 40", "fround.s f20, F(5)");
}

#[test]
fn fround_s_1071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s f4, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 4D, 40", "fround.s f4, f27");
}

#[test]
fn froundnx_d_1072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d f0, F(19), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A0, 59, 42", "froundnx.d f0, F(19), rdn");
}

#[test]
fn froundnx_d_1073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d f20, F(31), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, 5F, 42", "froundnx.d f20, F(31), rtz");
}

#[test]
fn froundnx_d_1074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d F(25), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 58, 42", "froundnx.d F(25), F(17)");
}

#[test]
fn froundnx_d_1075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d f29, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 54, 42", "froundnx.d f29, f9");
}

#[test]
fn froundnx_h_1076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h f15, F(14), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 17, 57, 44", "froundnx.h f15, F(14), rtz");
}

#[test]
fn froundnx_h_1077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h F(12), f2, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 26, 51, 44", "froundnx.h F(12), f2, rdn");
}

#[test]
fn froundnx_h_1078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h f28, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 55, 44", "froundnx.h f28, F(11)");
}

#[test]
fn froundnx_h_1079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h F(24), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 5D, 44", "froundnx.h F(24), f27");
}

#[test]
fn froundnx_q_1080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f21, f13, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 56, 46", "froundnx.q f21, f13, rne");
}

#[test]
fn froundnx_q_1081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q F(4), f28, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 32, 5E, 46", "froundnx.q F(4), f28, rup");
}

#[test]
fn froundnx_q_1082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f12, F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 50, 46", "froundnx.q f12, F(0)");
}

#[test]
fn froundnx_q_1083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f6, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 57, 46", "froundnx.q f6, f14");
}

#[test]
fn froundnx_s_1084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s F(12), F(25), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 96, 5C, 40", "froundnx.s F(12), F(25), rtz");
}

#[test]
fn froundnx_s_1085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s F(11), f18, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 25, 59, 40", "froundnx.s F(11), f18, rdn");
}

#[test]
fn froundnx_s_1086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s F(14), F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 53, 40", "froundnx.s F(14), F(7)");
}

#[test]
fn froundnx_s_1087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s f12, f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F6, 5F, 40", "froundnx.s f12, f31");
}

#[test]
fn frrm_1088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frrm x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2C, 20, 00", "frrm x24");
}

#[test]
fn frrm_1089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frrm x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 24, 20, 00", "frrm x9");
}

#[test]
fn fscsr_1090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fscsr X(26), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 9D, 38, 00", "fscsr X(26), x17");
}

#[test]
fn fscsr_1091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fscsr X(4), x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 12, 38, 00", "fscsr X(4), x16");
}

#[test]
fn fsd_1092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd F(12), [X(30), -1027]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 3E, CF, BE", "fsd F(12), [X(30), -1027]");
}

#[test]
fn fsd_1093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd f2, [x1, 1411]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, B1, 20, 58", "fsd f2, [x1, 1411]");
}

#[test]
fn fsd_1094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd F(17), 1372343602, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 59, CC, 51, 27, 39, 19, D3", "fsd F(17), 1372343602, x18");
}

#[test]
fn fsd_1095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd f25, 1345568877, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, CC, 33, 50, A7, B6, 9C, 07", "fsd f25, 1345568877, X(25)");
}

#[test]
fn fsflags_1096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflags X(4), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 12, 1E, 00", "fsflags X(4), x28");
}

#[test]
fn fsflags_1097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflags x4, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 12, 1E, 00", "fsflags x4, X(28)");
}

#[test]
fn fsflagsi_1098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflagsi X(0), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 50, 10, 00", "fsflagsi X(0), 0");
}

#[test]
fn fsflagsi_1099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflagsi X(19), 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, D9, 1C, 00", "fsflagsi X(19), 25");
}

#[test]
fn fsgnj_d_1100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnj.d f19, F(23), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, DB, 23", "fsgnj.d f19, F(23), f29");
}

#[test]
fn fsgnj_d_1101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnj.d f6, F(31), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 4F, 23", "fsgnj.d f6, F(31), F(20)");
}

#[test]
fn fsgnj_h_1102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnj.h F(1), f2, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, D1, 24", "fsgnj.h F(1), f2, F(13)");
}

#[test]
fn fsgnj_h_1103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnj.h F(13), F(4), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 32, 24", "fsgnj.h F(13), F(4), f3");
}

#[test]
fn fsgnj_q_1104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnj.q f0, f3, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 80, 01, 27", "fsgnj.q f0, f3, F(16)");
}

#[test]
fn fsgnj_q_1105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnj.q f16, f15, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 88, D7, 27", "fsgnj.q f16, f15, f29");
}

#[test]
fn fsgnj_s_1106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnj.s f6, f1, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 60, 20", "fsgnj.s f6, f1, F(6)");
}

#[test]
fn fsgnj_s_1107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnj.s F(16), f7, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 88, 33, 20", "fsgnj.s F(16), f7, f3");
}

#[test]
fn fsgnjn_d_1108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjn.d F(8), f5, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 94, B2, 23", "fsgnjn.d F(8), f5, F(27)");
}

#[test]
fn fsgnjn_d_1109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjn.d f25, F(14), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, F7, 23", "fsgnjn.d f25, F(14), f31");
}

#[test]
fn fsgnjn_h_1110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjn.h f3, f6, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 33, 25", "fsgnjn.h f3, f6, F(19)");
}

#[test]
fn fsgnjn_h_1111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjn.h F(3), f22, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 11, 1B, 24", "fsgnjn.h F(3), f22, f1");
}

#[test]
fn fsgnjn_q_1112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjn.q f15, f6, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 17, 83, 26", "fsgnjn.q f15, f6, f8");
}

#[test]
fn fsgnjn_q_1113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjn.q F(31), F(29), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9F, 1E, 27", "fsgnjn.q F(31), F(29), f17");
}

#[test]
fn fsgnjn_s_1114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjn.s F(2), f7, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 91, 33, 20", "fsgnjn.s F(2), f7, F(3)");
}

#[test]
fn fsgnjn_s_1115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjn.s f20, f8, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1A, 04, 20", "fsgnjn.s f20, f8, f0");
}

#[test]
fn fsgnjx_d_1116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjx.d F(13), f23, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A6, AB, 23", "fsgnjx.d F(13), f23, F(26)");
}

#[test]
fn fsgnjx_d_1117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjx.d f30, f30, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2F, DF, 22", "fsgnjx.d f30, f30, F(13)");
}

#[test]
fn fsgnjx_h_1118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjx.h f16, F(12), F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 28, F6, 25", "fsgnjx.h f16, F(12), F(31)");
}

#[test]
fn fsgnjx_h_1119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjx.h f10, F(25), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A5, 3C, 25", "fsgnjx.h f10, F(25), f19");
}

#[test]
fn fsgnjx_q_1120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjx.q F(20), f14, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2A, 77, 27", "fsgnjx.q F(20), f14, f23");
}

#[test]
fn fsgnjx_q_1121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjx.q f21, f17, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, D8, 26", "fsgnjx.q f21, f17, F(13)");
}

#[test]
fn fsgnjx_s_1122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjx.s F(24), f16, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2C, D8, 21", "fsgnjx.s F(24), f16, f29");
}

#[test]
fn fsgnjx_s_1123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjx.s f0, F(25), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A0, DC, 21", "fsgnjx.s f0, F(25), F(29)");
}

#[test]
fn fsh_1124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f1, [x31, -153]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 93, 1F, F6", "fsh f1, [x31, -153]");
}

#[test]
fn fsh_1125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f26, [X(25), 1332]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 9A, AC, 53", "fsh f26, [X(25), 1332]");
}

#[test]
fn fsh_1126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh F(11), -1697497015, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 4E, D2, 9A, A7, 14, BE, 04", "fsh F(11), -1697497015, X(28)");
}

#[test]
fn fsh_1127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f23, -1608688229, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 67, 1D, A0, A7, 1D, 77, D9", "fsh f23, -1608688229, x14");
}

#[test]
fn fsq_1128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq F(9), [X(21), -1136]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, C8, 9A, B8", "fsq F(9), [X(21), -1136]");
}

#[test]
fn fsq_1129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq f9, [X(2), 769]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 40, 91, 30", "fsq f9, [X(2), 769]");
}

#[test]
fn fsq_1130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq f20, -1756075274, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 7E, 54, 97, 27, CB, 4E, AF", "fsq f20, -1756075274, x29");
}

#[test]
fn fsq_1131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq F(19), -1223119427, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, BF, 18, B7, A7, 4E, 3F, DB", "fsq F(19), -1223119427, X(30)");
}

#[test]
fn fsqrt_d_1132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(27), f14, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2D, 07, 5A", "fsqrt.d F(27), f14, rdn");
}

#[test]
fn fsqrt_d_1133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d f23, F(20), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1B, 0A, 5A", "fsqrt.d f23, F(20), rtz");
}

#[test]
fn fsqrt_d_1134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(26), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 0D, 5A", "fsqrt.d F(26), F(26)");
}

#[test]
fn fsqrt_d_1135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(27), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 01, 5A", "fsqrt.d F(27), f2");
}

#[test]
fn fsqrt_h_1136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h F(12), F(7), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B6, 03, 5C", "fsqrt.h F(12), F(7), rup");
}

#[test]
fn fsqrt_h_1137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f21, F(3), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 01, 5C", "fsqrt.h f21, F(3), rdn");
}

#[test]
fn fsqrt_h_1138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f23, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 08, 5C", "fsqrt.h f23, f17");
}

#[test]
fn fsqrt_h_1139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h F(23), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 0D, 5C", "fsqrt.h F(23), f27");
}

#[test]
fn fsqrt_q_1140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q f12, f30, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 0F, 5E", "fsqrt.q f12, f30, rne");
}

#[test]
fn fsqrt_q_1141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q f13, f4, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 02, 5E", "fsqrt.q f13, f4, rne");
}

#[test]
fn fsqrt_q_1142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q f24, F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 0C, 5E", "fsqrt.q f24, F(25)");
}

#[test]
fn fsqrt_q_1143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q F(14), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 0E, 5E", "fsqrt.q F(14), F(29)");
}

#[test]
fn fsqrt_s_1144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(4), f2, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 01, 58", "fsqrt.s F(4), f2, dyn");
}

#[test]
fn fsqrt_s_1145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(1), f9, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C0, 04, 58", "fsqrt.s F(1), f9, rmm");
}

#[test]
fn fsqrt_s_1146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(14), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 0E, 58", "fsqrt.s F(14), F(29)");
}

#[test]
fn fsqrt_s_1147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s f29, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 0A, 58", "fsqrt.s f29, F(21)");
}

#[test]
fn fsrm_1148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrm X(3), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 11, 2A, 00", "fsrm X(3), X(20)");
}

#[test]
fn fsrm_1149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrm x23, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 1B, 2F, 00", "fsrm x23, X(30)");
}

#[test]
fn fsrmi_1150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrmi X(8), 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, D4, 24, 00", "fsrmi X(8), 9");
}

#[test]
fn fsrmi_1151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrmi x18, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, D9, 2D, 00", "fsrmi x18, 27");
}

#[test]
fn fsub_d_1152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(11), f0, f0, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 25, 00, 0A", "fsub.d F(11), f0, f0, rdn");
}

#[test]
fn fsub_d_1153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(14), f30, F(30), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 27, EF, 0B", "fsub.d F(14), f30, F(30), rdn");
}

#[test]
fn fsub_d_1154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(7), f1, f16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 00, 0B", "fsub.d F(7), f1, f16");
}

#[test]
fn fsub_d_1155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(8), f17, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 38, 0B", "fsub.d F(8), f17, F(19)");
}

#[test]
fn fsub_h_1156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h f23, F(11), F(2), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BB, 25, 0C", "fsub.h f23, F(11), F(2), rup");
}

#[test]
fn fsub_h_1157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h F(20), F(1), F(23), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 70, 0D", "fsub.h F(20), F(1), F(23), dyn");
}

#[test]
fn fsub_h_1158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h f15, f1, f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 50, 0C", "fsub.h f15, f1, f5");
}

#[test]
fn fsub_h_1159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h F(30), F(7), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 83, 0C", "fsub.h F(30), F(7), f8");
}

#[test]
fn fsub_q_1160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q F(10), f18, f5, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 45, 59, 0E", "fsub.q F(10), f18, f5, rmm");
}

#[test]
fn fsub_q_1161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q f22, F(12), F(26), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2B, A6, 0F", "fsub.q f22, F(12), F(26), rdn");
}

#[test]
fn fsub_q_1162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q F(10), f2, f7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 71, 0E", "fsub.q F(10), f2, f7");
}

#[test]
fn fsub_q_1163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q F(30), F(16), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 28, 0E", "fsub.q F(30), F(16), f2");
}

#[test]
fn fsub_s_1164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s F(21), F(12), f21, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1A, 56, 09", "fsub.s F(21), F(12), f21, rtz");
}

#[test]
fn fsub_s_1165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s F(10), f11, F(17), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, C5, 15, 09", "fsub.s F(10), f11, F(17), rmm");
}

#[test]
fn fsub_s_1166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f30, F(26), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, FD, 08", "fsub.s f30, F(26), f15");
}

#[test]
fn fsub_s_1167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f26, f29, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FD, 6E, 09", "fsub.s f26, f29, F(22)");
}

#[test]
fn fsw_1168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw F(2), [x4, 920]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 2C, 22, 38", "fsw F(2), [x4, 920]");
}

#[test]
fn fsw_1169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw f15, [x7, -323]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, AE, F3, EA", "fsw f15, [x7, -323]");
}

#[test]
fn fsw_1170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw f13, -1309057076, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 67, F9, B1, 27, A6, D7, FC", "fsw f13, -1309057076, X(15)");
}

#[test]
fn fsw_1171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw F(2), -1228104208, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A9, CC, B6, 27, A8, 29, DE", "fsw F(2), -1228104208, X(19)");
}

#[test]
fn j_1172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; j 408432
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 30, 16, 37", "j 408432");
}

#[test]
fn j_1173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; j -307870
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 40, 3B, D6", "j -307870");
}

#[test]
fn jal_1174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal x23, -54096
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 2B, 1F, CB", "jal x23, -54096");
}

#[test]
fn jal_1175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal X(13), -48642
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 46, EF, 9F", "jal X(13), -48642");
}

#[test]
fn jal_1176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal -288410
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 90, 7B, 96", "jal -288410");
}

#[test]
fn jal_1177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal 104958
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 90, F1, 1F", "jal 104958");
}

#[test]
fn jalr_1178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr X(0), x27, 412
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, CD, 19", "jalr X(0), x27, 412");
}

#[test]
fn jalr_1179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr X(12), X(31), -378
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 86, 6F, E8", "jalr X(12), X(31), -378");
}

#[test]
fn jalr_1180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 00, 08, 00", "jalr x16");
}

#[test]
fn jalr_1181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 00, 05, 00", "jalr x10");
}

#[test]
fn jr_1182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jr x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 06, 00", "jr x13");
}

#[test]
fn jr_1183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jr x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 06, 00", "jr x13");
}

#[test]
fn jump_1184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jump -802774280, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, A2, 26, D0, 67, 00, 82, 2F", "jump -802774280, x4");
}

#[test]
fn jump_1185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jump -1086627348, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 68, 3B, BF, 67, 00, C8, 1E", "jump -1086627348, X(16)");
}

#[test]
fn la_1186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; la x29, 260203296
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 6E, 82, 0F, 93, 8E, 0E, 32", "la x29, 260203296");
}

#[test]
fn la_1187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; la x30, -184037114
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, DF, 07, F5, 13, 0F, 6F, 10", "la x30, -184037114");
}

#[test]
fn lb_1188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(21), [x17, -1868]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 8A, 48, 8B", "lb X(21), [x17, -1868]");
}

#[test]
fn lb_1189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(15), [X(10), -239]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 07, 15, F1", "lb X(15), [X(10), -239]");
}

#[test]
fn lb_1190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(9), 1827078398
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 04, E7, 6C, 83, 84, E4, 0F", "lb X(9), 1827078398");
}

#[test]
fn lb_1191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(30), -645055323
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 4F, 8D, D9, 03, 0F, 5F, CA", "lb X(30), -645055323");
}

#[test]
fn lbu_1192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x23, [x0, 806]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 4B, 60, 32", "lbu x23, [x0, 806]");
}

#[test]
fn lbu_1193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x21, [x27, 1326]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, CA, ED, 52", "lbu x21, [x27, 1326]");
}

#[test]
fn lbu_1194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x8, -167366081
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 34, 06, F6, 03, 44, F4, 23", "lbu x8, -167366081");
}

#[test]
fn lbu_1195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu X(17), 571554401
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 48, 11, 22, 83, C8, 18, A6", "lbu X(17), 571554401");
}

#[test]
fn ld_1196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(5), [x25, 18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, B2, 2C, 01", "ld X(5), [x25, 18]");
}

#[test]
fn ld_1197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(1), [x12, 664]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 30, 86, 29", "ld X(1), [x12, 664]");
}

#[test]
fn ld_1198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld x29, -638653160
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, FE, EE, D9, 83, BE, 8E, D1", "ld x29, -638653160");
}

#[test]
fn ld_1199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld x15, 377003406
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A7, 78, 16, 83, B7, E7, D8", "ld x15, 377003406");
}

#[test]
fn lh_1200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x25, [X(13), -1471]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 9C, 16, A4", "lh x25, [X(13), -1471]");
}

#[test]
fn lh_1201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x4, [X(23), -1201]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 92, FB, B4", "lh x4, [X(23), -1201]");
}

#[test]
fn lh_1202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x11, -704852819
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, D5, FC, D5, 83, 95, D5, CA", "lh x11, -704852819");
}

#[test]
fn lh_1203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x22, 82938020
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 9B, F1, 04, 03, 1B, 4B, 8A", "lh x22, 82938020");
}

#[test]
fn lhu_1204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu x26, [X(22), 1642]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 5D, AB, 66", "lhu x26, [X(22), 1642]");
}

#[test]
fn lhu_1205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu X(17), [x23, -595]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, D8, DB, DA", "lhu X(17), [x23, -595]");
}

#[test]
fn lhu_1206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu X(16), 1841186555
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 48, BE, 6D, 03, 58, B8, 6F", "lhu X(16), 1841186555");
}

#[test]
fn lhu_1207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu x12, -1362827591
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E6, C4, AE, 03, 56, 96, 6B", "lhu x12, -1362827591");
}

#[test]
fn lpad_1208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; lpad 901427
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 30, 13, DC", "lpad 901427");
}

#[test]
fn lpad_1209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; lpad 736636
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, C0, D7, B3", "lpad 736636");
}

#[test]
fn lr_d_1210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d x25, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3C, 0F, 10", "lr.d x25, [x30]");
}

#[test]
fn lr_d_1211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d X(26), [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BD, 0F, 10", "lr.d X(26), [X(31)]");
}

#[test]
fn lr_d_aq_1212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aq X(0), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B0, 00, 14", "lr.d.aq X(0), [x1]");
}

#[test]
fn lr_d_aq_1213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aq x14, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 37, 0C, 14", "lr.d.aq x14, [x24]");
}

#[test]
fn lr_d_aqrl_1214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aqrl X(27), [X(22)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3D, 0B, 16", "lr.d.aqrl X(27), [X(22)]");
}

#[test]
fn lr_d_aqrl_1215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aqrl X(8), [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 34, 0A, 16", "lr.d.aqrl X(8), [x20]");
}

#[test]
fn lr_d_rl_1216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.rl x9, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 34, 0C, 12", "lr.d.rl x9, [x24]");
}

#[test]
fn lr_d_rl_1217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.rl x10, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 35, 0A, 12", "lr.d.rl x10, [X(20)]");
}

#[test]
fn lr_w_1218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w x10, [X(3)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A5, 01, 10", "lr.w x10, [X(3)]");
}

#[test]
fn lr_w_1219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w X(4), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A2, 09, 10", "lr.w X(4), [X(19)]");
}

#[test]
fn lr_w_aq_1220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aq x17, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, 02, 14", "lr.w.aq x17, [x5]");
}

#[test]
fn lr_w_aq_1221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aq x5, [X(2)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 22, 01, 14", "lr.w.aq x5, [X(2)]");
}

#[test]
fn lr_w_aqrl_1222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aqrl X(29), [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 2E, 06, 16", "lr.w.aqrl X(29), [X(12)]");
}

#[test]
fn lr_w_aqrl_1223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aqrl X(26), [X(14)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2D, 07, 16", "lr.w.aqrl X(26), [X(14)]");
}

#[test]
fn lr_w_rl_1224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.rl x12, [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, 0C, 12", "lr.w.rl x12, [x25]");
}

#[test]
fn lr_w_rl_1225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.rl x15, [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A7, 02, 12", "lr.w.rl x15, [x5]");
}

#[test]
fn lw_1226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(24), [X(12), 1479]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 2C, 76, 5C", "lw X(24), [X(12), 1479]");
}

#[test]
fn lw_1227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw x10, [X(30), 1019]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 25, BF, 3F", "lw x10, [X(30), 1019]");
}

#[test]
fn lw_1228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(30), -1212003
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 8F, ED, FF, 03, 2F, DF, 19", "lw X(30), -1212003");
}

#[test]
fn lw_1229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(21), 1513327509
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 9A, 33, 5A, 83, AA, 5A, B9", "lw X(21), 1513327509");
}

#[test]
fn lwu_1230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(30), [x15, 699]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, EF, B7, 2B", "lwu X(30), [x15, 699]");
}

#[test]
fn lwu_1231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(14), [X(24), 1248]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 67, 0C, 4E", "lwu X(14), [X(24), 1248]");
}

#[test]
fn lwu_1232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu x11, 2048457269
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 05, 19, 7A, 83, E5, 55, A3", "lwu x11, 2048457269");
}

#[test]
fn lwu_1233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(19), 1631952111
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A9, 45, 61, 83, E9, F9, CE", "lwu X(19), 1631952111");
}

#[test]
fn max_1234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; max X(24), X(6), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 6C, C3, 0B", "max X(24), X(6), X(28)");
}

#[test]
fn max_1235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; max x30, X(12), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 6F, 46, 0B", "max x30, X(12), x20");
}

#[test]
fn maxu_1236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; maxu x19, x17, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, F9, 48, 0B", "maxu x19, x17, X(20)");
}

#[test]
fn maxu_1237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; maxu x2, X(12), x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 71, F6, 0B", "maxu x2, X(12), x31");
}

#[test]
fn min_1238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; min x4, x16, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 42, 48, 0A", "min x4, x16, X(4)");
}

#[test]
fn min_1239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; min X(12), x3, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C6, B1, 0B", "min X(12), x3, X(27)");
}

#[test]
fn minu_1240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; minu X(3), X(22), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 51, FB, 0B", "minu X(3), X(22), X(31)");
}

#[test]
fn minu_1241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; minu x29, x27, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, DE, 3D, 0A", "minu x29, x27, X(3)");
}

#[test]
fn mop_r_0_1242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.0 x14, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C7, CA, 81", "mop.r.0 x14, X(21)");
}

#[test]
fn mop_r_0_1243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.0 X(9), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C4, CF, 81", "mop.r.0 X(9), X(31)");
}

#[test]
fn mop_r_1_1244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.1 x26, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CD, D1, 81", "mop.r.1 x26, X(3)");
}

#[test]
fn mop_r_1_1245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.1 x7, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, DD, 81", "mop.r.1 x7, x26");
}

#[test]
fn mop_r_10_1246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.10 x2, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, E4, 89", "mop.r.10 x2, X(8)");
}

#[test]
fn mop_r_10_1247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.10 x23, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CB, EF, 89", "mop.r.10 x23, x31");
}

#[test]
fn mop_r_11_1248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.11 X(5), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 42, F2, 89", "mop.r.11 X(5), x4");
}

#[test]
fn mop_r_11_1249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.11 X(7), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C3, F9, 89", "mop.r.11 X(7), x19");
}

#[test]
fn mop_r_12_1250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.12 x16, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, C9, 8D", "mop.r.12 x16, x19");
}

#[test]
fn mop_r_12_1251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.12 X(22), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4B, C1, 8D", "mop.r.12 X(22), x2");
}

#[test]
fn mop_r_13_1252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.13 X(6), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, D0, 8D", "mop.r.13 X(6), X(0)");
}

#[test]
fn mop_r_13_1253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.13 x30, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4F, D6, 8D", "mop.r.13 x30, x12");
}

#[test]
fn mop_r_14_1254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.14 x31, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, EE, 8D", "mop.r.14 x31, X(29)");
}

#[test]
fn mop_r_14_1255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.14 x29, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, E4, 8D", "mop.r.14 x29, X(8)");
}

#[test]
fn mop_r_15_1256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.15 x9, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C4, F0, 8D", "mop.r.15 x9, X(1)");
}

#[test]
fn mop_r_15_1257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.15 x9, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 44, F4, 8D", "mop.r.15 x9, x8");
}

#[test]
fn mop_r_16_1258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.16 x14, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C7, CB, C1", "mop.r.16 x14, x23");
}

#[test]
fn mop_r_16_1259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.16 x8, X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 44, C3, C1", "mop.r.16 x8, X(6)");
}

#[test]
fn mop_r_17_1260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.17 x7, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, D1, C1", "mop.r.17 x7, x2");
}

#[test]
fn mop_r_17_1261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.17 x13, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C6, D3, C1", "mop.r.17 x13, X(7)");
}

#[test]
fn mop_r_18_1262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.18 x20, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4A, E0, C1", "mop.r.18 x20, X(0)");
}

#[test]
fn mop_r_18_1263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.18 X(25), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CC, E6, C1", "mop.r.18 X(25), X(13)");
}

#[test]
fn mop_r_19_1264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.19 X(14), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C7, FC, C1", "mop.r.19 X(14), X(25)");
}

#[test]
fn mop_r_19_1265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.19 X(31), x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, FB, C1", "mop.r.19 X(31), x22");
}

#[test]
fn mop_r_2_1266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.2 X(16), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, E8, 81", "mop.r.2 X(16), X(16)");
}

#[test]
fn mop_r_2_1267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.2 X(8), x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C4, E9, 81", "mop.r.2 X(8), x19");
}

#[test]
fn mop_r_20_1268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.20 x8, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 44, C2, C5", "mop.r.20 x8, x4");
}

#[test]
fn mop_r_20_1269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.20 x20, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CA, C5, C5", "mop.r.20 x20, X(11)");
}

#[test]
fn mop_r_21_1270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.21 x28, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4E, D9, C5", "mop.r.21 x28, X(18)");
}

#[test]
fn mop_r_21_1271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.21 x2, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C1, D9, C5", "mop.r.21 x2, X(19)");
}

#[test]
fn mop_r_22_1272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.22 X(16), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, EE, C5", "mop.r.22 X(16), x29");
}

#[test]
fn mop_r_22_1273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.22 x28, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4E, ED, C5", "mop.r.22 x28, x26");
}

#[test]
fn mop_r_23_1274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.23 X(6), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, F9, C5", "mop.r.23 X(6), x18");
}

#[test]
fn mop_r_23_1275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.23 X(0), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, F6, C5", "mop.r.23 X(0), x13");
}

#[test]
fn mop_r_24_1276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.24 x20, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CA, C8, C9", "mop.r.24 x20, x17");
}

#[test]
fn mop_r_24_1277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.24 x29, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, C7, C9", "mop.r.24 x29, X(14)");
}

#[test]
fn mop_r_25_1278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.25 X(18), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C9, DE, C9", "mop.r.25 X(18), X(29)");
}

#[test]
fn mop_r_25_1279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.25 X(8), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C4, D6, C9", "mop.r.25 X(8), X(13)");
}

#[test]
fn mop_r_26_1280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.26 x17, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 48, ED, C9", "mop.r.26 x17, x26");
}

#[test]
fn mop_r_26_1281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.26 x22, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CB, ED, C9", "mop.r.26 x22, x27");
}

#[test]
fn mop_r_27_1282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.27 X(27), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, F5, C9", "mop.r.27 X(27), x10");
}

#[test]
fn mop_r_27_1283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.27 x18, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 49, F4, C9", "mop.r.27 x18, x8");
}

#[test]
fn mop_r_28_1284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.28 X(28), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, CB, CD", "mop.r.28 X(28), X(23)");
}

#[test]
fn mop_r_28_1285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.28 x22, X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4B, C0, CD", "mop.r.28 x22, X(0)");
}

#[test]
fn mop_r_29_1286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.29 X(24), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CC, D9, CD", "mop.r.29 X(24), X(19)");
}

#[test]
fn mop_r_29_1287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.29 X(10), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C5, DC, CD", "mop.r.29 X(10), X(25)");
}

#[test]
fn mop_r_3_1288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.3 X(7), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, FD, 81", "mop.r.3 X(7), x26");
}

#[test]
fn mop_r_3_1289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.3 x0, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, F7, 81", "mop.r.3 x0, x14");
}

#[test]
fn mop_r_30_1290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.30 X(20), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4A, EC, CD", "mop.r.30 X(20), x24");
}

#[test]
fn mop_r_30_1291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.30 X(21), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4A, EE, CD", "mop.r.30 X(21), X(28)");
}

#[test]
fn mop_r_31_1292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.31 X(6), x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, FB, CD", "mop.r.31 X(6), x22");
}

#[test]
fn mop_r_31_1293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.31 X(21), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CA, F8, CD", "mop.r.31 X(21), X(17)");
}

#[test]
fn mop_r_4_1294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.4 X(6), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, C3, 85", "mop.r.4 X(6), x6");
}

#[test]
fn mop_r_4_1295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.4 X(23), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CB, C2, 85", "mop.r.4 X(23), x5");
}

#[test]
fn mop_r_5_1296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.5 x17, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C8, D7, 85", "mop.r.5 x17, x15");
}

#[test]
fn mop_r_5_1297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.5 x0, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, DC, 85", "mop.r.5 x0, x24");
}

#[test]
fn mop_r_6_1298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.6 x11, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 45, E6, 85", "mop.r.6 x11, x12");
}

#[test]
fn mop_r_6_1299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.6 x10, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 45, E7, 85", "mop.r.6 x10, X(14)");
}

#[test]
fn mop_r_7_1300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.7 X(6), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, F1, 85", "mop.r.7 X(6), x2");
}

#[test]
fn mop_r_7_1301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.7 X(16), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, F8, 85", "mop.r.7 X(16), X(16)");
}

#[test]
fn mop_r_8_1302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.8 X(30), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, C2, 89", "mop.r.8 X(30), x5");
}

#[test]
fn mop_r_8_1303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.8 X(7), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, C7, 89", "mop.r.8 X(7), x14");
}

#[test]
fn mop_r_9_1304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.9 X(26), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CD, D6, 89", "mop.r.9 X(26), X(13)");
}

#[test]
fn mop_r_9_1305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.9 X(31), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, D0, 89", "mop.r.9 X(31), x0");
}

#[test]
fn mop_r_n_1306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.N 11, x3, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 41, FF, 89", "mop.r.N 11, x3, x30");
}

#[test]
fn mop_r_n_1307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.N 19, x12, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 46, F0, C1", "mop.r.N 19, x12, x0");
}

#[test]
fn mop_rr_0_1308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.0 x14, x18, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 47, 59, 83", "mop.rr.0 x14, x18, x21");
}

#[test]
fn mop_rr_0_1309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.0 x15, X(23), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, 8B, 83", "mop.rr.0 x15, X(23), X(24)");
}

#[test]
fn mop_rr_1_1310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.1 X(4), x15, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C2, 97, 87", "mop.rr.1 X(4), x15, X(25)");
}

#[test]
fn mop_rr_1_1311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.1 x30, X(17), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, 68, 86", "mop.rr.1 x30, X(17), x6");
}

#[test]
fn mop_rr_2_1312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.2 x12, x22, X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 46, EB, 8B", "mop.rr.2 x12, x22, X(30)");
}

#[test]
fn mop_rr_2_1313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.2 X(11), x7, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C5, 83, 8A", "mop.rr.2 X(11), x7, x8");
}

#[test]
fn mop_rr_3_1314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.3 x5, x7, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C2, 23, 8E", "mop.rr.3 x5, x7, x2");
}

#[test]
fn mop_rr_3_1315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.3 X(6), x28, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, 8E, 8F", "mop.rr.3 X(6), x28, X(24)");
}

#[test]
fn mop_rr_4_1316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.4 x8, X(22), X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 44, FB, C3", "mop.rr.4 x8, X(22), X(31)");
}

#[test]
fn mop_rr_4_1317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.4 x12, x13, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C6, B6, C2", "mop.rr.4 x12, x13, X(11)");
}

#[test]
fn mop_rr_5_1318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.5 X(31), X(22), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, EB, C7", "mop.rr.5 X(31), X(22), X(30)");
}

#[test]
fn mop_rr_5_1319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.5 x24, x26, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4C, 0D, C6", "mop.rr.5 x24, x26, x0");
}

#[test]
fn mop_rr_6_1320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.6 X(22), x28, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4B, BE, CA", "mop.rr.6 X(22), x28, X(11)");
}

#[test]
fn mop_rr_6_1321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.6 X(28), X(20), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4E, 1A, CB", "mop.rr.6 X(28), X(20), X(17)");
}

#[test]
fn mop_rr_7_1322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.7 x21, x7, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CA, 63, CF", "mop.rr.7 x21, x7, x22");
}

#[test]
fn mop_rr_7_1323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.7 X(5), X(4), x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 42, 12, CE", "mop.rr.7 X(5), X(4), x1");
}

#[test]
fn mop_rr_n_1324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.N 0, x18, X(2), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 49, 51, 83", "mop.rr.N 0, x18, X(2), x21");
}

#[test]
fn mop_rr_n_1325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.N 0, X(8), x24, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 44, 1C, 83", "mop.rr.N 0, X(8), x24, x17");
}

#[test]
fn mul_1326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mul x4, x11, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 82, D5, 03", "mul x4, x11, x29");
}

#[test]
fn mul_1327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mul x9, x19, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 84, B9, 02", "mul x9, x19, X(11)");
}

#[test]
fn mulh_1328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulh x23, X(2), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1B, 71, 02", "mulh x23, X(2), x7");
}

#[test]
fn mulh_1329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulh x27, X(20), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1D, 8A, 02", "mulh x27, X(20), x8");
}

#[test]
fn mulhsu_1330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhsu X(29), x21, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, AE, 7A, 03", "mulhsu X(29), x21, X(23)");
}

#[test]
fn mulhsu_1331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhsu X(16), X(10), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 28, 65, 02", "mulhsu X(16), X(10), X(6)");
}

#[test]
fn mulhu_1332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhu X(13), x10, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 36, A5, 02", "mulhu X(13), x10, x10");
}

#[test]
fn mulhu_1333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulhu X(13), X(12), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 36, 96, 02", "mulhu X(13), X(12), X(9)");
}

#[test]
fn mulw_1334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulw X(3), X(0), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 01, E0, 02", "mulw X(3), X(0), X(14)");
}

#[test]
fn mulw_1335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; mulw X(20), X(31), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 8A, 9F, 02", "mulw X(20), X(31), X(9)");
}

#[test]
fn mv_1336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; mv X(5), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 02, 0F, 00", "mv X(5), x30");
}

#[test]
fn mv_1337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; mv x0, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 80, 0B, 00", "mv x0, X(23)");
}

#[test]
fn neg_1338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; neg x17, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 08, E0, 40", "neg x17, X(14)");
}

#[test]
fn neg_1339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; neg x27, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0D, 10, 40", "neg x27, X(1)");
}

#[test]
fn negw_1340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; negw X(11), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 05, 90, 41", "negw X(11), x25");
}

#[test]
fn negw_1341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; negw X(12), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 06, 00, 41", "negw X(12), X(16)");
}

#[test]
fn nop_1342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, 00, 00", "nop");
}

#[test]
fn nop_1343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; nop
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 00, 00, 00", "nop");
}

#[test]
fn not_1344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; not X(8), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, C4, F6, FF", "not X(8), x13");
}

#[test]
fn not_1345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; not x9, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, C4, FC, FF", "not x9, X(25)");
}

#[test]
fn ntl_all_1346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 50, 00", "ntl.all");
}

#[test]
fn ntl_all_1347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.all
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 50, 00", "ntl.all");
}

#[test]
fn ntl_p1_1348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 20, 00", "ntl.p1");
}

#[test]
fn ntl_p1_1349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.p1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 20, 00", "ntl.p1");
}

#[test]
fn ntl_pall_1350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 30, 00", "ntl.pall");
}

#[test]
fn ntl_pall_1351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.pall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 30, 00", "ntl.pall");
}

#[test]
fn ntl_s1_1352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 40, 00", "ntl.s1");
}

#[test]
fn ntl_s1_1353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintntl
        ; ntl.s1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 00, 40, 00", "ntl.s1");
}

#[test]
fn or_1354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; or x15, x0, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 67, B0, 00", "or x15, x0, X(11)");
}

#[test]
fn or_1355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; or X(19), x9, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E9, E4, 01", "or X(19), x9, x30");
}

#[test]
fn orc_b_1356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; orc.b x25, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DC, 7F, 28", "orc.b x25, X(31)");
}

#[test]
fn orc_b_1357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; orc.b X(27), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 5D, 79, 28", "orc.b X(27), x18");
}

#[test]
fn ori_1358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ori X(9), X(29), -1742
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, E4, 2E, 93", "ori X(9), X(29), -1742");
}

#[test]
fn ori_1359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ori X(31), x18, 290
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 6F, 29, 12", "ori X(31), x18, 290");
}

#[test]
fn orn_1360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; orn x24, x31, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, EC, 3F, 40", "orn x24, x31, x3");
}

#[test]
fn orn_1361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; orn x17, X(3), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E8, D1, 41", "orn x17, X(3), X(29)");
}

#[test]
fn pack_1362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; pack X(4), x30, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 42, AF, 09", "pack X(4), x30, x26");
}

#[test]
fn pack_1363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; pack X(5), X(6), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 42, 13, 09", "pack X(5), X(6), X(17)");
}

#[test]
fn packh_1364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; packh X(8), X(8), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 74, 24, 09", "packh X(8), X(8), x18");
}

#[test]
fn packh_1365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; packh X(18), X(16), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 79, 68, 09", "packh X(18), X(16), X(22)");
}

#[test]
fn packw_1366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; packw X(18), X(27), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, C9, CD, 08", "packw X(18), X(27), x12");
}

#[test]
fn packw_1367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; packw X(6), x23, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, C3, 4B, 09", "packw X(6), x23, X(20)");
}

#[test]
fn pause_1368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintpause
        ; pause
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 01", "pause");
}

#[test]
fn pause_1369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zihintpause
        ; pause
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 00, 01", "pause");
}

#[test]
fn prefetch_i_1370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.i [x11, 1920]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 05, 78", "prefetch.i [x11, 1920]");
}

#[test]
fn prefetch_i_1371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.i [X(4), -1024]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 60, 02, C0", "prefetch.i [X(4), -1024]");
}

#[test]
fn prefetch_r_1372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.r [x14, 1088]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 60, 17, 44", "prefetch.r [x14, 1088]");
}

#[test]
fn prefetch_r_1373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.r [X(3), -480]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 11, E2", "prefetch.r [X(3), -480]");
}

#[test]
fn prefetch_w_1374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.w [x23, 352]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, E0, 3B, 16", "prefetch.w [x23, 352]");
}

#[test]
fn prefetch_w_1375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicbop
        ; prefetch.w [X(26), -1408]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 60, 3D, A8", "prefetch.w [X(26), -1408]");
}

#[test]
fn rdcycle_1376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdcycle X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 28, 00, C0", "rdcycle X(16)");
}

#[test]
fn rdcycle_1377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdcycle x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 27, 00, C0", "rdcycle x15");
}

#[test]
fn rdinstret_1378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdinstret X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 21, 20, C0", "rdinstret X(3)");
}

#[test]
fn rdinstret_1379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdinstret X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 28, 20, C0", "rdinstret X(16)");
}

#[test]
fn rdtime_1380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdtime x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2A, 10, C0", "rdtime x20");
}

#[test]
fn rdtime_1381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicntr
        ; rdtime x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 27, 10, C0", "rdtime x14");
}

#[test]
fn rem_1382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; rem X(1), X(12), x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 60, 96, 02", "rem X(1), X(12), x9");
}

#[test]
fn rem_1383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; rem x13, X(19), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, E6, D9, 03", "rem x13, X(19), X(29)");
}

#[test]
fn remu_1384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remu x4, x28, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 72, 4E, 02", "remu x4, x28, X(4)");
}

#[test]
fn remu_1385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remu x27, X(23), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, FD, EB, 03", "remu x27, X(23), x30");
}

#[test]
fn remuw_1386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remuw x25, x0, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 7C, 30, 02", "remuw x25, x0, x3");
}

#[test]
fn remuw_1387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remuw x3, x8, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 71, 34, 02", "remuw x3, x8, X(3)");
}

#[test]
fn remw_1388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remw x3, X(19), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, E1, 49, 02", "remw x3, X(19), X(4)");
}

#[test]
fn remw_1389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature m
        ; remw x12, x5, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, E6, B2, 02", "remw x12, x5, x11");
}

#[test]
fn ret_1390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 00, 00", "ret");
}

#[test]
fn ret_1391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 00, 00", "ret");
}

#[test]
fn rev8_1392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; rev8 x24, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 5C, 8E, 6B", "rev8 x24, x28");
}

#[test]
fn rev8_1393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; rev8 X(21), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DA, 88, 6B", "rev8 X(21), X(17)");
}

#[test]
fn rol_1394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; rol X(0), x23, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 90, 2B, 60", "rol X(0), x23, x2");
}

#[test]
fn rol_1395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; rol x12, x4, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 16, 62, 61", "rol x12, x4, X(22)");
}

#[test]
fn rolw_1396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; rolw X(18), x12, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 19, 46, 60", "rolw X(18), x12, X(4)");
}

#[test]
fn rolw_1397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; rolw x28, X(4), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 1E, 42, 61", "rolw x28, X(4), X(20)");
}

#[test]
fn ror_1398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; ror X(19), x12, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 59, A6, 61", "ror X(19), x12, X(26)");
}

#[test]
fn ror_1399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; ror x1, X(25), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D0, CC, 60", "ror x1, X(25), x12");
}

#[test]
fn rori_1400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; rori x31, x13, 37
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DF, 56, 62", "rori x31, x13, 37");
}

#[test]
fn rori_1401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; rori x7, X(22), 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 53, 3B, 61", "rori x7, X(22), 19");
}

#[test]
fn roriw_1402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; roriw X(18), x19, 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, D9, 89, 60", "roriw X(18), x19, 8");
}

#[test]
fn roriw_1403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; roriw x16, X(2), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 58, 31, 60", "roriw x16, X(2), 3");
}

#[test]
fn rorw_1404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; rorw X(6), x27, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, D3, 6D, 61", "rorw X(6), x27, x22");
}

#[test]
fn rorw_1405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; rorw x15, x31, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, D7, 7F, 60", "rorw x15, x31, x7");
}

#[test]
fn sb_1406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sb X(10), [X(23), 189]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 8E, AB, 0A", "sb X(10), [X(23), 189]");
}

#[test]
fn sb_1407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sb X(26), [x1, 1574]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 83, A0, 63", "sb X(26), [x1, 1574]");
}

#[test]
fn sb_1408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sb x21, -207994366, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 4F, 9A, F3, 23, 81, 5F, 21", "sb x21, -207994366, X(31)");
}

#[test]
fn sb_1409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sb X(11), 2018580973, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 2E, 51, 78, A3, 86, BE, 9E", "sb X(11), 2018580973, x29");
}

#[test]
fn sbreak_1410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sbreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "sbreak");
}

#[test]
fn sbreak_1411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sbreak
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 10, 00", "sbreak");
}

#[test]
fn sc_d_1412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d X(10), x20, [X(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B5, 4F, 19", "sc.d X(10), x20, [X(31)]");
}

#[test]
fn sc_d_1413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d x28, X(14), [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3E, E2, 18", "sc.d x28, X(14), [x4]");
}

#[test]
fn sc_d_aq_1414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aq X(8), X(16), [X(11)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B4, 05, 1D", "sc.d.aq X(8), X(16), [X(11)]");
}

#[test]
fn sc_d_aq_1415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aq x16, X(13), [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B8, D9, 1C", "sc.d.aq x16, X(13), [x19]");
}

#[test]
fn sc_d_aqrl_1416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aqrl x7, x11, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 33, B6, 1E", "sc.d.aqrl x7, x11, [x12]");
}

#[test]
fn sc_d_aqrl_1417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.aqrl x3, X(13), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B1, D2, 1E", "sc.d.aqrl x3, X(13), [x5]");
}

#[test]
fn sc_d_rl_1418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.rl X(28), x0, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3E, 0A, 1A", "sc.d.rl X(28), x0, [x20]");
}

#[test]
fn sc_d_rl_1419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.d.rl X(5), X(6), [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 32, 61, 1A", "sc.d.rl X(5), X(6), [x2]");
}

#[test]
fn sc_w_1420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w X(1), x9, [X(23)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A0, 9B, 18", "sc.w X(1), x9, [X(23)]");
}

#[test]
fn sc_w_1421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w x9, x12, [X(15)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A4, C7, 18", "sc.w x9, x12, [X(15)]");
}

#[test]
fn sc_w_aq_1422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aq x0, X(13), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A0, DE, 1C", "sc.w.aq x0, X(13), [x29]");
}

#[test]
fn sc_w_aq_1423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aq x7, x21, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A3, 50, 1D", "sc.w.aq x7, x21, [X(1)]");
}

#[test]
fn sc_w_aqrl_1424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aqrl x13, x10, [X(27)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A6, AD, 1E", "sc.w.aqrl x13, x10, [X(27)]");
}

#[test]
fn sc_w_aqrl_1425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.aqrl X(29), x14, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, AE, E7, 1E", "sc.w.aqrl X(29), x14, [x15]");
}

#[test]
fn sc_w_rl_1426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.rl X(12), X(27), [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 26, B8, 1B", "sc.w.rl X(12), X(27), [x16]");
}

#[test]
fn sc_w_rl_1427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; sc.w.rl x16, x25, [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A8, 90, 1B", "sc.w.rl x16, x25, [x1]");
}

#[test]
fn scall_1428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; scall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "scall");
}

#[test]
fn scall_1429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; scall
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, 00, 00", "scall");
}

#[test]
fn sd_1430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sd X(19), [x26, 724]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 3A, 3D, 2D", "sd X(19), [x26, 724]");
}

#[test]
fn sd_1431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sd X(19), [X(7), 757]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, BA, 33, 2F", "sd X(19), [X(7), 757]");
}

#[test]
fn sd_1432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sd x9, -647021248, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 40, 6F, D9, 23, B0, 90, D4", "sd x9, -647021248, X(1)");
}

#[test]
fn sd_1433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sd X(5), -791331192, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 40, D5, D0, 23, B4, 50, E8", "sd X(5), -791331192, x1");
}

#[test]
fn seqz_1434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; seqz x15, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 37, 11, 00", "seqz x15, X(2)");
}

#[test]
fn seqz_1435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; seqz X(0), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 30, 1C, 00", "seqz X(0), x24");
}

#[test]
fn sext_b_1436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.b x6, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 93, 46, 60", "sext.b x6, x13");
}

#[test]
fn sext_b_1437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.b X(8), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 14, 48, 60", "sext.b X(8), X(16)");
}

#[test]
fn sext_b_1438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.b x16, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 18, 8B, 03, 13, 58, 88, 43", "sext.b x16, x22");
}

#[test]
fn sext_b_1439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.b x14, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 17, 88, 03, 13, 57, 87, 43", "sext.b x14, X(16)");
}

#[test]
fn sext_h_1440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.h x25, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1C, 58, 60", "sext.h x25, x16");
}

#[test]
fn sext_h_1441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; sext.h x1, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 90, 55, 60", "sext.h x1, X(11)");
}

#[test]
fn sext_h_1442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.h X(28), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1E, 03, 03, 13, 5E, 0E, 43", "sext.h X(28), X(6)");
}

#[test]
fn sext_h_1443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.h X(11), x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 15, 08, 03, 93, D5, 05, 43", "sext.h X(11), x16");
}

#[test]
fn sext_w_1444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.w x15, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 07, 0C, 00", "sext.w x15, x24");
}

#[test]
fn sext_w_1445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sext.w x25, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 8C, 04, 00", "sext.w x25, X(9)");
}

#[test]
fn sgtz_1446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sgtz x30, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 2F, A0, 00", "sgtz x30, X(10)");
}

#[test]
fn sgtz_1447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sgtz x15, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 27, D0, 00", "sgtz x15, x13");
}

#[test]
fn sh_1448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sh X(3), [X(28), 1446]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 13, 3E, 5A", "sh X(3), [X(28), 1446]");
}

#[test]
fn sh_1449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sh x11, [x10, -1601]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 1F, B5, 9A", "sh x11, [x10, -1601]");
}

#[test]
fn sh_1450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sh x28, 1816238348, x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, AE, 41, 6C, 23, 96, CE, 91", "sh x28, 1816238348, x29");
}

#[test]
fn sh_1451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sh X(31), -1276769154, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 1B, E6, B3, 23, 9F, FB, C7", "sh X(31), -1276769154, x23");
}

#[test]
fn sh1add_1452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add X(11), X(18), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 25, E9, 21", "sh1add X(11), X(18), X(30)");
}

#[test]
fn sh1add_1453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add X(17), X(27), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A8, DD, 21", "sh1add X(17), X(27), x29");
}

#[test]
fn sh1add_uw_1454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add.uw X(14), X(16), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 27, B8, 20", "sh1add.uw X(14), X(16), x11");
}

#[test]
fn sh1add_uw_1455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh1add.uw X(2), x4, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 21, 72, 21", "sh1add.uw X(2), x4, x23");
}

#[test]
fn sh2add_1456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add X(29), X(31), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, CE, 8F, 20", "sh2add X(29), X(31), x8");
}

#[test]
fn sh2add_1457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add X(30), X(21), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, CF, 4A, 21", "sh2add X(30), X(21), x20");
}

#[test]
fn sh2add_uw_1458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add.uw x23, X(14), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 4B, 47, 21", "sh2add.uw x23, X(14), x20");
}

#[test]
fn sh2add_uw_1459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh2add.uw X(21), x22, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 4A, BB, 20", "sh2add.uw X(21), x22, x11");
}

#[test]
fn sh3add_1460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add x8, X(11), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E4, 35, 21", "sh3add x8, X(11), X(19)");
}

#[test]
fn sh3add_1461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add x8, X(5), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, E4, A2, 20", "sh3add x8, X(5), X(10)");
}

#[test]
fn sh3add_uw_1462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add.uw x18, X(24), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 69, 0C, 20", "sh3add.uw x18, X(24), X(0)");
}

#[test]
fn sh3add_uw_1463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; sh3add.uw x23, x1, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, EB, 30, 21", "sh3add.uw x23, x1, x19");
}

#[test]
fn sha256sig0_1464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha256sig0 x29, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 9E, 27, 10", "sha256sig0 x29, x15");
}

#[test]
fn sha256sig0_1465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sig0 x10, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 15, 22, 10", "sha256sig0 x10, x4");
}

#[test]
fn sha256sig1_1466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha256sig1 X(5), x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 12, 33, 10", "sha256sig1 X(5), x6");
}

#[test]
fn sha256sig1_1467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha256sig1 x30, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 37, 10", "sha256sig1 x30, X(14)");
}

#[test]
fn sha256sum0_1468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sum0 x13, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 16, 0A, 10", "sha256sum0 x13, x20");
}

#[test]
fn sha256sum0_1469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sum0 X(15), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 17, 08, 10", "sha256sum0 X(15), X(16)");
}

#[test]
fn sha256sum1_1470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha256sum1 x1, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 10, 1B, 10", "sha256sum1 x1, X(22)");
}

#[test]
fn sha256sum1_1471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha256sum1 X(30), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 1C, 10", "sha256sum1 X(30), x24");
}

#[test]
fn sha512sig0_1472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha512sig0 X(20), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9A, 65, 10", "sha512sig0 X(20), x11");
}

#[test]
fn sha512sig0_1473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sig0 x28, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1E, 60, 10", "sha512sig0 x28, x0");
}

#[test]
fn sha512sig1_1474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha512sig1 X(30), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9F, 76, 10", "sha512sig1 X(30), x13");
}

#[test]
fn sha512sig1_1475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha512sig1 X(30), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1F, 7A, 10", "sha512sig1 X(30), x20");
}

#[test]
fn sha512sum0_1476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; sha512sum0 x22, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1B, 4D, 10", "sha512sum0 x22, X(26)");
}

#[test]
fn sha512sum0_1477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; sha512sum0 X(19), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 99, 4B, 10", "sha512sum0 X(19), X(23)");
}

#[test]
fn sha512sum1_1478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sum1 x0, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 90, 53, 10", "sha512sum1 x0, x7");
}

#[test]
fn sha512sum1_1479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zknh
        ; sha512sum1 X(3), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 11, 54, 10", "sha512sum1 X(3), X(8)");
}

#[test]
fn sll_1480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sll x27, x22, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 1D, 0B, 01", "sll x27, x22, X(16)");
}

#[test]
fn sll_1481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sll x15, X(15), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 97, 47, 01", "sll x15, X(15), X(20)");
}

#[test]
fn slli_1482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slli x28, X(22), 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 1E, 8B, 01", "slli x28, X(22), 24");
}

#[test]
fn slli_1483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slli x8, X(27), 39
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 94, 7D, 02", "slli x8, X(27), 39");
}

#[test]
fn slli_uw_1484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; slli.uw x17, x18, 49
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 18, 19, 0B", "slli.uw x17, x18, 49");
}

#[test]
fn slli_uw_1485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; slli.uw X(27), x27, 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 9D, AD, 09", "slli.uw X(27), x27, 26");
}

#[test]
fn slliw_1486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slliw x9, x7, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 94, 13, 00", "slliw x9, x7, 1");
}

#[test]
fn slliw_1487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slliw x20, X(5), 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 9A, B2, 01", "slliw x20, X(5), 27");
}

#[test]
fn sllw_1488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sllw X(10), x4, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 15, 72, 00", "sllw X(10), x4, X(7)");
}

#[test]
fn sllw_1489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sllw X(25), X(2), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 1C, 31, 00", "sllw X(25), X(2), x3");
}

#[test]
fn slt_1490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slt x14, X(7), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A7, C3, 01", "slt x14, X(7), x28");
}

#[test]
fn slt_1491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slt x11, X(22), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 25, 8B, 00", "slt x11, X(22), x8");
}

#[test]
fn slti_1492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slti x22, x7, 597
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, AB, 53, 25", "slti x22, x7, 597");
}

#[test]
fn slti_1493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; slti X(21), x14, -329
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 2A, 77, EB", "slti X(21), x14, -329");
}

#[test]
fn sltiu_1494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltiu x15, x11, 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, B7, 25, 01", "sltiu x15, x11, 18");
}

#[test]
fn sltiu_1495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltiu x30, X(0), -644
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 3F, C0, D7", "sltiu x30, X(0), -644");
}

#[test]
fn sltu_1496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltu x0, X(25), X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, B0, CC, 00", "sltu x0, X(25), X(12)");
}

#[test]
fn sltu_1497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltu X(19), x14, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 39, C7, 01", "sltu X(19), x14, X(28)");
}

#[test]
fn sltz_1498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltz X(20), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 2A, 06, 00", "sltz X(20), x12");
}

#[test]
fn sltz_1499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sltz x28, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, AE, 03, 00", "sltz x28, x7");
}

#[test]
fn sm3p0_1500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; sm3p0 X(17), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 18, 81, 10", "sm3p0 X(17), X(2)");
}

#[test]
fn sm3p0_1501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksh
        ; sm3p0 x8, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 14, 86, 10", "sm3p0 x8, x12");
}

#[test]
fn sm3p1_1502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; sm3p1 x12, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 96, 97, 10", "sm3p1 x12, x15");
}

#[test]
fn sm3p1_1503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zks
        ; sm3p1 X(21), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1A, 99, 10", "sm3p1 X(21), X(18)");
}

#[test]
fn sm4ed_1504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ed x7, x25, x10, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 83, AC, 30", "sm4ed x7, x25, x10, 0");
}

#[test]
fn sm4ed_1505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ed X(23), X(24), x21, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0B, 5C, B1", "sm4ed X(23), X(24), x21, 2");
}

#[test]
fn sm4ks_1506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ks x29, x27, x15, 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 8E, FD, B4", "sm4ks x29, x27, x15, 2");
}

#[test]
fn sm4ks_1507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zksed
        ; sm4ks x7, X(30), X(26), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 03, AF, 35", "sm4ks x7, X(30), X(26), 0");
}

#[test]
fn snez_1508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; snez X(7), x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 33, F0, 00", "snez X(7), x15");
}

#[test]
fn snez_1509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; snez x1, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 30, B0, 00", "snez x1, X(11)");
}

#[test]
fn sra_1510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sra x12, x20, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 56, FA, 40", "sra x12, x20, x15");
}

#[test]
fn sra_1511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sra X(25), X(20), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 5C, 5A, 40", "sra X(25), X(20), x5");
}

#[test]
fn srai_1512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srai x30, X(19), 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, DF, A9, 41", "srai x30, X(19), 26");
}

#[test]
fn srai_1513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srai X(29), x31, 24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, DE, 8F, 41", "srai X(29), x31, 24");
}

#[test]
fn sraiw_1514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraiw X(0), X(11), 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, D0, 95, 41", "sraiw X(0), X(11), 25");
}

#[test]
fn sraiw_1515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraiw X(27), X(31), 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, DD, 4F, 41", "sraiw X(27), X(31), 20");
}

#[test]
fn sraw_1516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraw x9, X(31), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, D4, AF, 40", "sraw x9, X(31), X(10)");
}

#[test]
fn sraw_1517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sraw x7, X(27), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, D3, 6D, 41", "sraw x7, X(27), X(22)");
}

#[test]
fn srl_1518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srl x11, x21, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D5, BA, 00", "srl x11, x21, X(11)");
}

#[test]
fn srl_1519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srl x3, X(16), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 51, 38, 00", "srl x3, X(16), x3");
}

#[test]
fn srli_1520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srli X(17), x10, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 58, 95, 00", "srli X(17), x10, 9");
}

#[test]
fn srli_1521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srli X(17), x11, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, D8, B5, 00", "srli X(17), x11, 11");
}

#[test]
fn srliw_1522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srliw x15, X(16), 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 57, 58, 01", "srliw x15, X(16), 21");
}

#[test]
fn srliw_1523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srliw X(22), X(20), 21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 5B, 5A, 01", "srliw X(22), X(20), 21");
}

#[test]
fn srlw_1524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srlw X(10), X(13), X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, D5, 16, 00", "srlw X(10), X(13), X(1)");
}

#[test]
fn srlw_1525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; srlw x7, x28, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 53, EE, 01", "srlw x7, x28, x30");
}

#[test]
fn ssamoswap_d_1526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d X(17), x2, [X(20)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 38, 2A, 48", "ssamoswap.d X(17), x2, [X(20)]");
}

#[test]
fn ssamoswap_d_1527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d x20, X(25), [X(19)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, BA, 99, 49", "ssamoswap.d x20, X(25), [X(19)]");
}

#[test]
fn ssamoswap_d_aq_1528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aq x27, x29, [X(12)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3D, D6, 4D", "ssamoswap.d.aq x27, x29, [X(12)]");
}

#[test]
fn ssamoswap_d_aq_1529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aq X(11), x5, [x30]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 35, 5F, 4C", "ssamoswap.d.aq X(11), x5, [x30]");
}

#[test]
fn ssamoswap_d_aqrl_1530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aqrl x23, X(6), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, BB, 66, 4E", "ssamoswap.d.aqrl x23, X(6), [x13]");
}

#[test]
fn ssamoswap_d_aqrl_1531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.aqrl x21, x19, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3A, 36, 4F", "ssamoswap.d.aqrl x21, x19, [x12]");
}

#[test]
fn ssamoswap_d_rl_1532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.rl X(11), x15, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B5, FB, 4A", "ssamoswap.d.rl X(11), x15, [x23]");
}

#[test]
fn ssamoswap_d_rl_1533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssamoswap.d.rl x13, x0, [X(10)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 36, 05, 4A", "ssamoswap.d.rl x13, x0, [X(10)]");
}

#[test]
fn sspopchk_1534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C0, CD", "sspopchk x1");
}

#[test]
fn sspopchk_1535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C0, CD", "sspopchk x1");
}

#[test]
fn sspopchk_1536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C2, CD", "sspopchk x5");
}

#[test]
fn sspopchk_1537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspopchk x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C2, CD", "sspopchk x5");
}

#[test]
fn sspush_1538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 10, CE", "sspush x1");
}

#[test]
fn sspush_1539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 10, CE", "sspush x1");
}

#[test]
fn sspush_1540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 50, CE", "sspush x5");
}

#[test]
fn sspush_1541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; sspush x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, 50, CE", "sspush x5");
}

#[test]
fn ssrdp_1542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssrdp X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4C, C0, CD", "ssrdp X(24)");
}

#[test]
fn ssrdp_1543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfiss
        ; ssrdp x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4D, C0, CD", "ssrdp x26");
}

#[test]
fn sub_1544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sub X(21), x4, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0A, 22, 40", "sub X(21), x4, X(2)");
}

#[test]
fn sub_1545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sub x25, x12, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 0C, D6, 40", "sub x25, x12, x13");
}

#[test]
fn subw_1546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; subw x31, X(30), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 0F, 7F, 41", "subw x31, X(30), X(23)");
}

#[test]
fn subw_1547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; subw x29, X(30), X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 0E, CF, 40", "subw x29, X(30), X(12)");
}

#[test]
fn sw_1548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sw X(4), [x17, -1413]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, AD, 48, A6", "sw X(4), [x17, -1413]");
}

#[test]
fn sw_1549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sw x25, [x2, 693]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A3, 2A, 91, 2B", "sw x25, [x2, 693]");
}

#[test]
fn sw_1550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sw x24, 1757538635, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, FA, C1, 68, A3, A5, 8A, 95", "sw x24, 1757538635, X(21)");
}

#[test]
fn sw_1551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; sw X(26), -832740792, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 6A, 5D, CE, 23, A4, AA, 25", "sw X(26), -832740792, x21");
}

#[test]
fn tail_1552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; tail -679835754
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 83, 7A, D7, 67, 80, 63, 79", "tail -679835754");
}

#[test]
fn tail_1553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; tail 1783177292
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 23, 49, 6A, 67, 80, C3, 04", "tail 1783177292");
}

#[test]
fn tail_1554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; tail 730848888
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E3, 8F, 2B, 67, 00, 83, E7", "tail 730848888");
}

#[test]
fn tail_1555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; tail 1611489966
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 63, 0D, 60, 67, 00, E3, 2A", "tail 1611489966");
}

#[test]
fn unimp_1556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 00, C0", "unimp");
}

#[test]
fn unimp_1557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; unimp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 00, C0", "unimp");
}

#[test]
fn wrs_nto_1558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.nto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 00", "wrs.nto");
}

#[test]
fn wrs_nto_1559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.nto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 00", "wrs.nto");
}

#[test]
fn wrs_sto_1560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.sto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 01", "wrs.sto");
}

#[test]
fn wrs_sto_1561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zawrs
        ; wrs.sto
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 00, D0, 01", "wrs.sto");
}

#[test]
fn xnor_1562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; xnor X(15), x28, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 47, FE, 40", "xnor X(15), x28, X(15)");
}

#[test]
fn xnor_1563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkb
        ; xnor X(4), x21, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C2, 6A, 40", "xnor X(4), x21, x6");
}

#[test]
fn xor_1564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xor X(3), x1, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, C1, 40, 00", "xor X(3), x1, x4");
}

#[test]
fn xor_1565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xor x17, X(27), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, C8, CD, 01", "xor x17, X(27), x28");
}

#[test]
fn xori_1566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xori X(5), x26, -1510
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 42, AD, A1", "xori X(5), x26, -1510");
}

#[test]
fn xori_1567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; xori X(28), X(22), -692
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 4E, CB, D4", "xori X(28), X(22), -692");
}

#[test]
fn xperm4_1568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zk
        ; xperm4 x8, X(17), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, A4, 98, 28", "xperm4 x8, X(17), X(9)");
}

#[test]
fn xperm4_1569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkx
        ; xperm4 X(15), X(1), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, A7, 10, 29", "xperm4 X(15), X(1), x17");
}

#[test]
fn xperm8_1570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zkn
        ; xperm8 x14, X(3), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, C7, 71, 28", "xperm8 x14, X(3), X(7)");
}

#[test]
fn xperm8_1571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbkx
        ; xperm8 x23, x21, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, CB, 8A, 28", "xperm8 x23, x21, x8");
}

#[test]
fn zext_b_1572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.b X(10), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 75, F5, 0F", "zext.b X(10), x10");
}

#[test]
fn zext_b_1573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.b x3, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 71, F9, 0F", "zext.b x3, x18");
}

#[test]
fn zext_h_1574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; zext.h x9, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 44, 04, 08", "zext.h x9, x8");
}

#[test]
fn zext_h_1575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; zext.h X(14), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, C7, 0E, 08", "zext.h X(14), x29");
}

#[test]
fn zext_h_1576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.h x27, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1D, 04, 03, 93, DD, 0D, 03", "zext.h x27, X(8)");
}

#[test]
fn zext_h_1577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.h x28, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, 9E, 0F, 03, 13, 5E, 0E, 03", "zext.h x28, x31");
}

#[test]
fn zext_w_1578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; zext.w x9, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 84, 05, 08", "zext.w x9, x11");
}

#[test]
fn zext_w_1579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zba
        ; zext.w X(9), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 04, 02, 08", "zext.w X(9), x4");
}

#[test]
fn zext_w_1580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.w X(3), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 11, 0F, 02, 93, D1, 01, 02", "zext.w X(3), X(30)");
}

#[test]
fn zext_w_1581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; zext.w X(21), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 1A, 01, 02, 93, DA, 0A, 02", "zext.w X(21), x2");
}
