
#[test]
fn fcvt_lu_d_800() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.lu.d x29, F(19), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 39, C2", "fcvt.lu.d x29, F(19), dyn");
}

#[test]
fn fcvt_lu_d_801() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.lu.d x23, F(21), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 3A, C2", "fcvt.lu.d x23, F(21), dyn");
}

#[test]
fn fcvt_lu_d_802() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.lu.d x14, x10, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 27, 35, C2", "fcvt.lu.d x14, x10, rdn");
}

#[test]
fn fcvt_lu_d_803() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.lu.d x0, X(30), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 40, 3F, C2", "fcvt.lu.d x0, X(30), rmm");
}

#[test]
fn fcvt_lu_d_804() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.lu.d x5, f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 3A, C2", "fcvt.lu.d x5, f21");
}

#[test]
fn fcvt_lu_d_805() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.lu.d x9, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 38, C2", "fcvt.lu.d x9, F(17)");
}

#[test]
fn fcvt_lu_d_806() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.lu.d x4, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 36, C2", "fcvt.lu.d x4, x12");
}

#[test]
fn fcvt_lu_d_807() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.lu.d x20, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 3A, C2", "fcvt.lu.d x20, X(20)");
}

#[test]
fn fcvt_lu_h_808() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.lu.h x5, F(27), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 3D, C4", "fcvt.lu.h x5, F(27), dyn");
}

#[test]
fn fcvt_lu_h_809() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.lu.h x23, f26, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4B, 3D, C4", "fcvt.lu.h x23, f26, rmm");
}

#[test]
fn fcvt_lu_h_810() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.lu.h x30, X(12), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 36, C4", "fcvt.lu.h x30, X(12), dyn");
}

#[test]
fn fcvt_lu_h_811() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.lu.h x31, X(27), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9F, 3D, C4", "fcvt.lu.h x31, X(27), rtz");
}

#[test]
fn fcvt_lu_h_812() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.lu.h X(19), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 79, 34, C4", "fcvt.lu.h X(19), f8");
}

#[test]
fn fcvt_lu_h_813() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.lu.h X(4), F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 3E, C4", "fcvt.lu.h X(4), F(28)");
}

#[test]
fn fcvt_lu_h_814() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.lu.h x27, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 35, C4", "fcvt.lu.h x27, X(11)");
}

#[test]
fn fcvt_lu_h_815() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.lu.h x31, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 3C, C4", "fcvt.lu.h x31, x24");
}

#[test]
fn fcvt_lu_q_816() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.lu.q x25, f5, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8C, 32, C6", "fcvt.lu.q x25, f5, rne");
}

#[test]
fn fcvt_lu_q_817() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.lu.q x24, F(2), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4C, 31, C6", "fcvt.lu.q x24, F(2), rmm");
}

#[test]
fn fcvt_lu_q_818() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.lu.q x27, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 3B, C6", "fcvt.lu.q x27, f22");
}

#[test]
fn fcvt_lu_q_819() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.lu.q X(29), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 3F, C6", "fcvt.lu.q X(29), F(30)");
}

#[test]
fn fcvt_lu_s_820() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.lu.s x22, f2, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4B, 31, C0", "fcvt.lu.s x22, f2, rmm");
}

#[test]
fn fcvt_lu_s_821() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.lu.s X(18), f1, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B9, 30, C0", "fcvt.lu.s X(18), f1, rup");
}

#[test]
fn fcvt_lu_s_822() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.lu.s X(27), x3, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BD, 31, C0", "fcvt.lu.s X(27), x3, rup");
}

#[test]
fn fcvt_lu_s_823() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.lu.s x6, x10, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 35, C0", "fcvt.lu.s x6, x10, dyn");
}

#[test]
fn fcvt_lu_s_824() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.lu.s x30, F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FF, 39, C0", "fcvt.lu.s x30, F(19)");
}

#[test]
fn fcvt_lu_s_825() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.lu.s X(12), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 39, C0", "fcvt.lu.s X(12), f18");
}

#[test]
fn fcvt_lu_s_826() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.lu.s X(27), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 3E, C0", "fcvt.lu.s X(27), X(28)");
}

#[test]
fn fcvt_lu_s_827() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.lu.s X(19), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 32, C0", "fcvt.lu.s X(19), X(5)");
}

#[test]
fn fcvt_q_d_828() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.d F(14), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 16, 46", "fcvt.q.d F(14), F(13)");
}

#[test]
fn fcvt_q_d_829() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.d f17, F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 88, 1C, 46", "fcvt.q.d f17, F(25)");
}

#[test]
fn fcvt_q_h_830() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfh
        ; fcvt.q.h F(31), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0F, 20, 46", "fcvt.q.h F(31), F(0)");
}

#[test]
fn fcvt_q_h_831() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfh
        ; fcvt.q.h F(9), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 2F, 46", "fcvt.q.h F(9), f30");
}

#[test]
fn fcvt_q_l_832() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.l F(30), X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8F, 27, D6", "fcvt.q.l F(30), X(15)");
}

#[test]
fn fcvt_q_l_833() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.l F(13), x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 86, 21, D6", "fcvt.q.l F(13), x3");
}

#[test]
fn fcvt_q_lu_834() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.lu F(29), x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8E, 32, D6", "fcvt.q.lu F(29), x5");
}

#[test]
fn fcvt_q_lu_835() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.lu f18, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 35, D6", "fcvt.q.lu f18, X(10)");
}

#[test]
fn fcvt_q_s_836() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.s F(18), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 0B, 46", "fcvt.q.s F(18), F(22)");
}

#[test]
fn fcvt_q_s_837() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.s F(5), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 82, 09, 46", "fcvt.q.s F(5), f19");
}

#[test]
fn fcvt_q_w_838() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.w F(12), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 0B, D6", "fcvt.q.w F(12), x23");
}

#[test]
fn fcvt_q_w_839() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.w f11, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 0C, D6", "fcvt.q.w f11, X(25)");
}

#[test]
fn fcvt_q_wu_840() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.wu f23, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, 13, D6", "fcvt.q.wu f23, x6");
}

#[test]
fn fcvt_q_wu_841() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.q.wu F(21), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, 1E, D6", "fcvt.q.wu F(21), x29");
}

#[test]
fn fcvt_s_bf16_842() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfbfmin
        ; fcvt.s.bf16 F(11), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 69, 40", "fcvt.s.bf16 F(11), f19");
}

#[test]
fn fcvt_s_bf16_843() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfbfmin
        ; fcvt.s.bf16 F(24), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8C, 61, 40", "fcvt.s.bf16 F(24), F(3)");
}

#[test]
fn fcvt_s_d_844() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.s.d F(9), F(28), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 34, 1E, 40", "fcvt.s.d F(9), F(28), rup");
}

#[test]
fn fcvt_s_d_845() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.s.d F(16), F(30), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 38, 1F, 40", "fcvt.s.d F(16), F(30), rup");
}

#[test]
fn fcvt_s_d_846() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.s.d X(13), X(2), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 11, 40", "fcvt.s.d X(13), X(2), dyn");
}

#[test]
fn fcvt_s_d_847() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.s.d X(18), X(4), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 12, 40", "fcvt.s.d X(18), X(4), rne");
}

#[test]
fn fcvt_s_d_848() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.s.d F(3), f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 71, 14, 40", "fcvt.s.d F(3), f8");
}

#[test]
fn fcvt_s_d_849() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.s.d F(29), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 15, 40", "fcvt.s.d F(29), f10");
}

#[test]
fn fcvt_s_d_850() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.s.d X(25), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 1E, 40", "fcvt.s.d X(25), X(29)");
}

#[test]
fn fcvt_s_d_851() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.s.d X(18), X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 12, 40", "fcvt.s.d X(18), X(5)");
}

#[test]
fn fcvt_s_h_852() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.s.h F(12), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 86, 2B, 40", "fcvt.s.h F(12), f23");
}

#[test]
fn fcvt_s_h_853() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfhmin
        ; fcvt.s.h F(19), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 24, 40", "fcvt.s.h F(19), F(9)");
}

#[test]
fn fcvt_s_h_854() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.s.h x23, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 24, 40", "fcvt.s.h x23, X(9)");
}

#[test]
fn fcvt_s_h_855() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.s.h X(6), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, 25, 40", "fcvt.s.h X(6), X(10)");
}

#[test]
fn fcvt_s_l_856() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.l f3, X(15), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B1, 27, D0", "fcvt.s.l f3, X(15), rup");
}

#[test]
fn fcvt_s_l_857() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.l f27, x15, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9D, 27, D0", "fcvt.s.l f27, x15, rtz");
}

#[test]
fn fcvt_s_l_858() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.l x24, X(0), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4C, 20, D0", "fcvt.s.l x24, X(0), rmm");
}

#[test]
fn fcvt_s_l_859() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.l X(26), x10, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2D, 25, D0", "fcvt.s.l X(26), x10, rdn");
}

#[test]
fn fcvt_s_l_860() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.l F(14), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 2A, D0", "fcvt.s.l F(14), X(21)");
}

#[test]
fn fcvt_s_l_861() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.l f23, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 2A, D0", "fcvt.s.l f23, x21");
}

#[test]
fn fcvt_s_l_862() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.l X(8), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 28, D0", "fcvt.s.l X(8), X(16)");
}

#[test]
fn fcvt_s_l_863() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.l x31, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 29, D0", "fcvt.s.l x31, X(18)");
}

#[test]
fn fcvt_s_lu_864() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.lu F(6), x24, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 3C, D0", "fcvt.s.lu F(6), x24, dyn");
}

#[test]
fn fcvt_s_lu_865() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.lu F(13), x21, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 86, 3A, D0", "fcvt.s.lu F(13), x21, rne");
}

#[test]
fn fcvt_s_lu_866() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.lu X(17), X(0), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 30, D0", "fcvt.s.lu X(17), X(0), rne");
}

#[test]
fn fcvt_s_lu_867() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.lu X(7), x3, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B3, 31, D0", "fcvt.s.lu X(7), x3, rup");
}

#[test]
fn fcvt_s_lu_868() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.lu f26, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 35, D0", "fcvt.s.lu f26, X(10)");
}

#[test]
fn fcvt_s_lu_869() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.lu F(12), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 31, D0", "fcvt.s.lu F(12), x2");
}

#[test]
fn fcvt_s_lu_870() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.lu x0, X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F0, 3C, D0", "fcvt.s.lu x0, X(25)");
}

#[test]
fn fcvt_s_lu_871() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.lu X(29), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 3E, D0", "fcvt.s.lu X(29), x28");
}

#[test]
fn fcvt_s_q_872() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.s.q F(8), F(11), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 35, 40", "fcvt.s.q F(8), F(11), rne");
}

#[test]
fn fcvt_s_q_873() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.s.q f14, F(27), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 3D, 40", "fcvt.s.q f14, F(27), rtz");
}

#[test]
fn fcvt_s_q_874() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.s.q F(30), f24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 3C, 40", "fcvt.s.q F(30), f24");
}

#[test]
fn fcvt_s_q_875() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.s.q f5, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 3E, 40", "fcvt.s.q f5, F(29)");
}

#[test]
fn fcvt_s_w_876() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.w f10, x22, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 0B, D0", "fcvt.s.w f10, x22, dyn");
}

#[test]
fn fcvt_s_w_877() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.w f12, X(18), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 46, 09, D0", "fcvt.s.w f12, X(18), rmm");
}

#[test]
fn fcvt_s_w_878() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.w x11, x10, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 05, D0", "fcvt.s.w x11, x10, dyn");
}

#[test]
fn fcvt_s_w_879() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.w X(18), x28, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 29, 0E, D0", "fcvt.s.w X(18), x28, rdn");
}

#[test]
fn fcvt_s_w_880() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.w F(14), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 05, D0", "fcvt.s.w F(14), x10");
}

#[test]
fn fcvt_s_w_881() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.w f8, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 02, D0", "fcvt.s.w f8, X(4)");
}

#[test]
fn fcvt_s_w_882() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.w X(13), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F6, 0C, D0", "fcvt.s.w X(13), x25");
}

#[test]
fn fcvt_s_w_883() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.w X(31), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 03, D0", "fcvt.s.w X(31), X(6)");
}

#[test]
fn fcvt_s_wu_884() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.wu f15, x4, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 47, 12, D0", "fcvt.s.wu f15, x4, rmm");
}

#[test]
fn fcvt_s_wu_885() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.wu f20, X(2), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 11, D0", "fcvt.s.wu f20, X(2), rne");
}

#[test]
fn fcvt_s_wu_886() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.wu X(20), x27, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BA, 1D, D0", "fcvt.s.wu X(20), x27, rup");
}

#[test]
fn fcvt_s_wu_887() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.wu X(1), X(10), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 15, D0", "fcvt.s.wu X(1), X(10), dyn");
}

#[test]
fn fcvt_s_wu_888() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.wu F(14), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 18, D0", "fcvt.s.wu F(14), x17");
}

#[test]
fn fcvt_s_wu_889() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.s.wu f15, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 77, 1D, D0", "fcvt.s.wu f15, x26");
}

#[test]
fn fcvt_s_wu_890() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.wu x8, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 19, D0", "fcvt.s.wu x8, X(19)");
}

#[test]
fn fcvt_s_wu_891() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.s.wu X(11), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 15, D0", "fcvt.s.wu X(11), X(10)");
}

#[test]
fn fcvt_w_d_892() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.w.d X(13), f25, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B6, 0C, C2", "fcvt.w.d X(13), f25, rup");
}

#[test]
fn fcvt_w_d_893() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.w.d X(10), F(11), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A5, 05, C2", "fcvt.w.d X(10), F(11), rdn");
}

#[test]
fn fcvt_w_d_894() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.w.d x23, x11, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, 05, C2", "fcvt.w.d x23, x11, rtz");
}

#[test]
fn fcvt_w_d_895() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.w.d x17, X(19), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 88, 09, C2", "fcvt.w.d x17, X(19), rne");
}

#[test]
fn fcvt_w_d_896() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.w.d X(22), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 06, C2", "fcvt.w.d X(22), F(13)");
}

#[test]
fn fcvt_w_d_897() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.w.d X(6), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 73, 02, C2", "fcvt.w.d X(6), F(4)");
}

#[test]
fn fcvt_w_d_898() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.w.d X(31), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 0D, C2", "fcvt.w.d X(31), X(27)");
}

#[test]
fn fcvt_w_d_899() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.w.d X(12), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 0D, C2", "fcvt.w.d X(12), x26");
}

#[test]
fn fcvt_w_h_900() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.w.h X(21), f11, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FA, 05, C4", "fcvt.w.h X(21), f11, dyn");
}

#[test]
fn fcvt_w_h_901() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.w.h x28, f18, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 09, C4", "fcvt.w.h x28, f18, dyn");
}

#[test]
fn fcvt_w_h_902() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.w.h x23, x31, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 0F, C4", "fcvt.w.h x23, x31, rdn");
}

#[test]
fn fcvt_w_h_903() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.w.h x23, x2, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, 01, C4", "fcvt.w.h x23, x2, dyn");
}

#[test]
fn fcvt_w_h_904() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.w.h x26, f8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 04, C4", "fcvt.w.h x26, f8");
}

#[test]
fn fcvt_w_h_905() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.w.h X(19), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 0A, C4", "fcvt.w.h X(19), F(21)");
}

#[test]
fn fcvt_w_h_906() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.w.h x19, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F9, 09, C4", "fcvt.w.h x19, X(19)");
}

#[test]
fn fcvt_w_h_907() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.w.h x10, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 75, 02, C4", "fcvt.w.h x10, x4");
}

#[test]
fn fcvt_w_q_908() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.w.q x12, F(15), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A6, 07, C6", "fcvt.w.q x12, F(15), rdn");
}

#[test]
fn fcvt_w_q_909() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.w.q X(12), F(7), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 96, 03, C6", "fcvt.w.q X(12), F(7), rtz");
}

#[test]
fn fcvt_w_q_910() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.w.q x1, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, 0A, C6", "fcvt.w.q x1, F(21)");
}

#[test]
fn fcvt_w_q_911() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.w.q x18, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 08, C6", "fcvt.w.q x18, F(16)");
}

#[test]
fn fcvt_w_s_912() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.w.s X(5), f4, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 12, 02, C0", "fcvt.w.s X(5), f4, rtz");
}

#[test]
fn fcvt_w_s_913() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.w.s X(12), F(26), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 46, 0D, C0", "fcvt.w.s X(12), F(26), rmm");
}

#[test]
fn fcvt_w_s_914() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.w.s x25, X(15), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9C, 07, C0", "fcvt.w.s x25, X(15), rtz");
}

#[test]
fn fcvt_w_s_915() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.w.s X(10), x28, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 35, 0E, C0", "fcvt.w.s X(10), x28, rup");
}

#[test]
fn fcvt_w_s_916() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.w.s x31, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 0E, C0", "fcvt.w.s x31, f29");
}

#[test]
fn fcvt_w_s_917() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.w.s x30, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 0E, C0", "fcvt.w.s x30, f28");
}

#[test]
fn fcvt_w_s_918() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.w.s x8, X(1)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 00, C0", "fcvt.w.s x8, X(1)");
}

#[test]
fn fcvt_w_s_919() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.w.s x6, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, 0C, C0", "fcvt.w.s x6, x25");
}

#[test]
fn fcvt_wu_d_920() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.wu.d X(11), F(5), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B5, 12, C2", "fcvt.wu.d X(11), F(5), rup");
}

#[test]
fn fcvt_wu_d_921() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.wu.d x24, f23, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9C, 1B, C2", "fcvt.wu.d x24, f23, rtz");
}

#[test]
fn fcvt_wu_d_922() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.wu.d x2, x7, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, 13, C2", "fcvt.wu.d x2, x7, rdn");
}

#[test]
fn fcvt_wu_d_923() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.wu.d X(25), x17, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BC, 18, C2", "fcvt.wu.d X(25), x17, rup");
}

#[test]
fn fcvt_wu_d_924() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.wu.d x4, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 11, C2", "fcvt.wu.d x4, F(3)");
}

#[test]
fn fcvt_wu_d_925() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fcvt.wu.d x28, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 1A, C2", "fcvt.wu.d x28, F(21)");
}

#[test]
fn fcvt_wu_d_926() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.wu.d x14, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F7, 1D, C2", "fcvt.wu.d x14, X(27)");
}

#[test]
fn fcvt_wu_d_927() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fcvt.wu.d x0, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 1D, C2", "fcvt.wu.d x0, X(26)");
}

#[test]
fn fcvt_wu_h_928() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h x31, F(4), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3F, 12, C4", "fcvt.wu.h x31, F(4), rup");
}

#[test]
fn fcvt_wu_h_929() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h x19, f12, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 39, 16, C4", "fcvt.wu.h x19, f12, rup");
}

#[test]
fn fcvt_wu_h_930() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.wu.h X(27), X(6), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 13, C4", "fcvt.wu.h X(27), X(6), dyn");
}

#[test]
fn fcvt_wu_h_931() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.wu.h x20, x2, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3A, 11, C4", "fcvt.wu.h x20, x2, rup");
}

#[test]
fn fcvt_wu_h_932() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h x31, f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7F, 12, C4", "fcvt.wu.h x31, f4");
}

#[test]
fn fcvt_wu_h_933() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fcvt.wu.h X(1), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F0, 16, C4", "fcvt.wu.h X(1), F(13)");
}

#[test]
fn fcvt_wu_h_934() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.wu.h X(8), x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 13, C4", "fcvt.wu.h X(8), x7");
}

#[test]
fn fcvt_wu_h_935() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fcvt.wu.h x8, X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 13, C4", "fcvt.wu.h x8, X(7)");
}

#[test]
fn fcvt_wu_q_936() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q x23, f30, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, 1F, C6", "fcvt.wu.q x23, f30, rne");
}

#[test]
fn fcvt_wu_q_937() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q x27, f26, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1D, 1D, C6", "fcvt.wu.q x27, f26, rtz");
}

#[test]
fn fcvt_wu_q_938() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q x20, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 1B, C6", "fcvt.wu.q x20, f22");
}

#[test]
fn fcvt_wu_q_939() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fcvt.wu.q x3, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F1, 14, C6", "fcvt.wu.q x3, f9");
}

#[test]
fn fcvt_wu_s_940() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s X(3), F(7), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A1, 13, C0", "fcvt.wu.s X(3), F(7), rdn");
}

#[test]
fn fcvt_wu_s_941() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x21, F(4), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0A, 12, C0", "fcvt.wu.s x21, F(4), rne");
}

#[test]
fn fcvt_wu_s_942() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.wu.s x23, x9, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BB, 14, C0", "fcvt.wu.s x23, x9, rup");
}

#[test]
fn fcvt_wu_s_943() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.wu.s x3, X(13), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, 16, C0", "fcvt.wu.s x3, X(13), rtz");
}

#[test]
fn fcvt_wu_s_944() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s X(31), F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 16, C0", "fcvt.wu.s X(31), F(13)");
}

#[test]
fn fcvt_wu_s_945() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fcvt.wu.s x4, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 15, C0", "fcvt.wu.s x4, f11");
}

#[test]
fn fcvt_wu_s_946() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.wu.s x13, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 13, C0", "fcvt.wu.s x13, x6");
}

#[test]
fn fcvt_wu_s_947() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fcvt.wu.s x23, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 1B, C0", "fcvt.wu.s x23, x23");
}

#[test]
fn fcvtmod_w_d_948() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fcvtmod.w.d X(11), f17, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 95, 88, C2", "fcvtmod.w.d X(11), f17, rtz");
}

#[test]
fn fcvtmod_w_d_949() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fcvtmod.w.d X(28), f6, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1E, 83, C2", "fcvtmod.w.d X(28), f6, rtz");
}

#[test]
fn fdiv_d_950() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f20, F(7), F(0), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BA, 03, 1A", "fdiv.d f20, F(7), F(0), rup");
}

#[test]
fn fdiv_d_951() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d f3, f27, F(30), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, ED, 1B", "fdiv.d f3, f27, F(30), rtz");
}

#[test]
fn fdiv_d_952() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fdiv.d X(20), x9, X(7), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BA, 74, 1A", "fdiv.d X(20), x9, X(7), rup");
}

#[test]
fn fdiv_d_953() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fdiv.d x20, X(9), X(27), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CA, B4, 1B", "fdiv.d x20, X(9), X(27), rmm");
}

#[test]
fn fdiv_d_954() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d F(2), F(12), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 96, 1B", "fdiv.d F(2), F(12), f25");
}

#[test]
fn fdiv_d_955() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fdiv.d F(14), f28, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 0E, 1B", "fdiv.d F(14), f28, F(16)");
}

#[test]
fn fdiv_d_956() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fdiv.d X(8), X(30), x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 74, 0F, 1B", "fdiv.d X(8), X(30), x16");
}

#[test]
fn fdiv_d_957() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fdiv.d x20, X(19), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, E9, 1B", "fdiv.d x20, X(19), X(30)");
}

#[test]
fn fdiv_h_958() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h f14, f29, f7, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 7E, 1C", "fdiv.h f14, f29, f7, rne");
}

#[test]
fn fdiv_h_959() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(6), f15, f31, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, F7, 1D", "fdiv.h F(6), f15, f31, rne");
}

#[test]
fn fdiv_h_960() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fdiv.h x15, X(3), X(31), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, F1, 1D", "fdiv.h x15, X(3), X(31), dyn");
}

#[test]
fn fdiv_h_961() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fdiv.h X(15), X(24), x3, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 17, 3C, 1C", "fdiv.h X(15), X(24), x3, rtz");
}

#[test]
fn fdiv_h_962() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h f28, f29, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, EE, 1D", "fdiv.h f28, f29, f30");
}

#[test]
fn fdiv_h_963() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fdiv.h F(20), F(7), f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 23, 1D", "fdiv.h F(20), F(7), f18");
}

#[test]
fn fdiv_h_964() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fdiv.h X(16), x0, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 30, 1C", "fdiv.h X(16), x0, X(3)");
}

#[test]
fn fdiv_h_965() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fdiv.h x1, x26, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 70, 1D, 1C", "fdiv.h x1, x26, x1");
}

#[test]
fn fdiv_q_966() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(14), f1, F(15), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B7, F0, 1E", "fdiv.q F(14), f1, F(15), rup");
}

#[test]
fn fdiv_q_967() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q F(13), F(16), f24, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 88, 1F", "fdiv.q F(13), F(16), f24, rne");
}

#[test]
fn fdiv_q_968() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q f22, F(4), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7B, 02, 1E", "fdiv.q f22, F(4), F(0)");
}

#[test]
fn fdiv_q_969() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fdiv.q f30, F(4), F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 42, 1E", "fdiv.q f30, F(4), F(4)");
}

#[test]
fn fdiv_s_970() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s F(2), f16, f9, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 31, 98, 18", "fdiv.s F(2), f16, f9, rup");
}

#[test]
fn fdiv_s_971() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f6, f22, f20, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 23, 4B, 19", "fdiv.s f6, f22, f20, rdn");
}

#[test]
fn fdiv_s_972() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fdiv.s X(27), X(9), x10, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, A4, 18", "fdiv.s X(27), X(9), x10, dyn");
}

#[test]
fn fdiv_s_973() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fdiv.s x9, X(19), X(13), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, D9, 18", "fdiv.s x9, X(19), X(13), dyn");
}

#[test]
fn fdiv_s_974() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f24, f2, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 01, 18", "fdiv.s f24, f2, f0");
}

#[test]
fn fdiv_s_975() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fdiv.s f26, F(18), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 29, 18", "fdiv.s f26, F(18), f2");
}

#[test]
fn fdiv_s_976() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fdiv.s x10, x31, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, FF, 18", "fdiv.s x10, x31, X(15)");
}

#[test]
fn fdiv_s_977() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fdiv.s X(5), X(23), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F2, 9B, 19", "fdiv.s X(5), X(23), x25");
}

#[test]
fn fence_978() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence iow, iw
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 90, 0D", "fence iow, iw");
}

#[test]
fn fence_979() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence r, ior
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, E0, 02", "fence r, ior");
}

#[test]
fn fence_980() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_981() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, F0, 0F", "fence");
}

#[test]
fn fence_i_982() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_i_983() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zifencei
        ; fence.i
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 10, 00, 00", "fence.i");
}

#[test]
fn fence_tso_984() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn fence_tso_985() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; fence.tso
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 00, 30, 83", "fence.tso");
}

#[test]
fn feq_d_986() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; feq.d X(31), f15, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AF, 07, A3", "feq.d X(31), f15, F(16)");
}

#[test]
fn feq_d_987() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; feq.d x15, f9, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A7, 84, A2", "feq.d x15, f9, F(8)");
}

#[test]
fn feq_d_988() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; feq.d X(26), x25, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, 3C, A2", "feq.d X(26), x25, X(3)");
}

#[test]
fn feq_d_989() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; feq.d x12, x6, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 26, 83, A2", "feq.d x12, x6, x8");
}

#[test]
fn feq_h_990() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; feq.h X(23), F(11), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AB, 55, A5", "feq.h X(23), F(11), F(21)");
}

#[test]
fn feq_h_991() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; feq.h X(11), F(3), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A5, 91, A4", "feq.h X(11), F(3), f9");
}

#[test]
fn feq_h_992() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; feq.h X(17), x24, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 28, 6C, A5", "feq.h X(17), x24, X(22)");
}

#[test]
fn feq_h_993() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; feq.h X(30), X(24), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2F, CC, A5", "feq.h X(30), X(24), x28");
}

#[test]
fn feq_q_994() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; feq.q x20, F(14), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 2A, 97, A6", "feq.q x20, F(14), f9");
}

#[test]
fn feq_q_995() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; feq.q x15, f20, F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 27, 9A, A7", "feq.q x15, f20, F(25)");
}

#[test]
fn feq_s_996() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; feq.s X(19), f31, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A9, 6F, A1", "feq.s X(19), f31, f22");
}

#[test]
fn feq_s_997() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; feq.s X(21), f9, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 94, A1", "feq.s X(21), f9, f25");
}

#[test]
fn feq_s_998() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; feq.s X(6), x18, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 23, 79, A1", "feq.s X(6), x18, x23");
}

#[test]
fn feq_s_999() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; feq.s X(31), x1, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AF, 50, A0", "feq.s X(31), x1, x5");
}

#[test]
fn fld_1000() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld f21, [X(5), -1811]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, BA, D2, 8E", "fld f21, [X(5), -1811]");
}

#[test]
fn fld_1001() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld F(20), [x10, -8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 3A, 85, FF", "fld F(20), [x10, -8]");
}

#[test]
fn fld_1002() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld f25, -348169663, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 64, 3F, EB, 87, 3C, 14, A4", "fld f25, -348169663, X(8)");
}

#[test]
fn fld_1003() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fld F(23), -115207768, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 1F, 22, F9, 87, BB, 8F, 1A", "fld F(23), -115207768, x31");
}

#[test]
fn fle_d_1004() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fle.d x16, F(12), F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 86, A2", "fle.d x16, F(12), F(8)");
}

#[test]
fn fle_d_1005() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fle.d X(10), f28, F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 8E, A3", "fle.d X(10), f28, F(24)");
}

#[test]
fn fle_d_1006() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fle.d X(30), x25, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8F, BC, A3", "fle.d X(30), x25, X(27)");
}

#[test]
fn fle_d_1007() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fle.d x8, x19, x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 84, 79, A3", "fle.d x8, x19, x23");
}

#[test]
fn fle_h_1008() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fle.h x30, F(24), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 1C, A5", "fle.h x30, F(24), F(17)");
}

#[test]
fn fle_h_1009() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fle.h X(23), F(28), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, 3E, A5", "fle.h X(23), F(28), f19");
}

#[test]
fn fle_h_1010() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fle.h X(3), X(21), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 81, BA, A4", "fle.h X(3), X(21), x11");
}

#[test]
fn fle_h_1011() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fle.h X(23), X(30), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0B, 0F, A4", "fle.h X(23), X(30), x0");
}

#[test]
fn fle_q_1012() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fle.q x2, F(3), f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, C1, A7", "fle.q x2, F(3), f28");
}

#[test]
fn fle_q_1013() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fle.q X(5), F(17), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 82, 68, A6", "fle.q X(5), F(17), f6");
}

#[test]
fn fle_s_1014() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fle.s X(22), f14, F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, C7, A0", "fle.s X(22), f14, F(12)");
}

#[test]
fn fle_s_1015() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fle.s x26, f24, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 6C, A1", "fle.s x26, f24, F(22)");
}

#[test]
fn fle_s_1016() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fle.s X(22), x0, X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, 80, A0", "fle.s X(22), x0, X(8)");
}

#[test]
fn fle_s_1017() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fle.s x12, x0, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 90, A0", "fle.s x12, x0, x9");
}

#[test]
fn fleq_d_1018() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fleq.d x12, F(16), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 46, 98, A2", "fleq.d x12, F(16), F(9)");
}

#[test]
fn fleq_d_1019() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fleq.d x22, f21, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CB, 0A, A2", "fleq.d x22, f21, f0");
}

#[test]
fn fleq_h_1020() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fleq.h x22, F(28), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4B, FE, A5", "fleq.h x22, F(28), f31");
}

#[test]
fn fleq_h_1021() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fleq.h x21, f8, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4A, 34, A4", "fleq.h x21, f8, F(3)");
}

#[test]
fn fleq_q_1022() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fleq.q x9, F(11), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C4, 95, A7", "fleq.q x9, F(11), F(25)");
}

#[test]
fn fleq_q_1023() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fleq.q x11, F(0), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 45, B0, A6", "fleq.q x11, F(0), F(11)");
}

#[test]
fn fleq_s_1024() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fleq.s X(16), F(16), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 48, 98, A1", "fleq.s X(16), F(16), f25");
}

#[test]
fn fleq_s_1025() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fleq.s x24, F(23), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CC, AB, A1", "fleq.s x24, F(23), f26");
}

#[test]
fn flh_1026() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh f21, [X(28), -1951]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 1A, 1E, 86", "flh f21, [X(28), -1951]");
}

#[test]
fn flh_1027() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh F(12), [x4, -1871]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 16, 12, 8B", "flh F(12), [x4, -1871]");
}

#[test]
fn flh_1028() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh f9, -232983906, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, FB, 1C, F2, 87, 94, EB, 29", "flh f9, -232983906, X(23)");
}

#[test]
fn flh_1029() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flh f19, 855160863, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, C3, F8, 32, 87, 99, F3, 81", "flh f19, 855160863, x7");
}

#[test]
fn fli_d_1030() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fli.d F(0), 1.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 18, F2", "fli.d F(0), 1.0");
}

#[test]
fn fli_d_1031() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fli.d F(18), 2.5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 89, 1A, F2", "fli.d F(18), 2.5");
}

#[test]
fn fli_h_1032() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fli.h f14, -1.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 07, 10, F4", "fli.h f14, -1.0");
}

#[test]
fn fli_h_1033() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fli.h F(2), 0.75
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 01, 17, F4", "fli.h F(2), 0.75");
}

#[test]
fn fli_q_1034() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fli.q f20, 0.625
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8A, 16, F6", "fli.q f20, 0.625");
}

#[test]
fn fli_q_1035() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fli.q f20, inf
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0A, 1F, F6", "fli.q f20, inf");
}

#[test]
fn fli_s_1036() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fli.s f16, -1.0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 10, F0", "fli.s f16, -1.0");
}

#[test]
fn fli_s_1037() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fli.s F(10), 1.52587890625e-05
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, 11, F0", "fli.s F(10), 1.52587890625e-05");
}

#[test]
fn flq_1038() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f23, [x18, 978]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, 4B, 29, 3D", "flq f23, [x18, 978]");
}

#[test]
fn flq_1039() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f18, [x17, 1443]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, C9, 38, 5A", "flq f18, [x17, 1443]");
}

#[test]
fn flq_1040() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq F(0), -416462508, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 53, 2D, E7, 07, C0, 43, 95", "flq F(0), -416462508, x7");
}

#[test]
fn flq_1041() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flq f12, 1346148786, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, A3, 3C, 50, 07, 46, 23, 9B", "flq f12, 1346148786, x6");
}

#[test]
fn flt_d_1042() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; flt.d x26, f1, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9D, 80, A2", "flt.d x26, f1, F(8)");
}

#[test]
fn flt_d_1043() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; flt.d X(31), F(12), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1F, A6, A2", "flt.d X(31), F(12), f10");
}

#[test]
fn flt_d_1044() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; flt.d X(27), X(1), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9D, B0, A3", "flt.d X(27), X(1), x27");
}

#[test]
fn flt_d_1045() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; flt.d x26, X(29), x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9D, 1E, A3", "flt.d x26, X(29), x17");
}

#[test]
fn flt_h_1046() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flt.h x14, F(24), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 6C, A4", "flt.h x14, F(24), f6");
}

#[test]
fn flt_h_1047() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; flt.h x16, F(5), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 98, B2, A4", "flt.h x16, F(5), F(11)");
}

#[test]
fn flt_h_1048() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; flt.h x13, x17, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 96, 38, A5", "flt.h x13, x17, x19");
}

#[test]
fn flt_h_1049() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; flt.h x3, X(13), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, E6, A4", "flt.h x3, X(13), x14");
}

#[test]
fn flt_q_1050() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flt.q x27, f18, F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1D, F9, A6", "flt.q x27, f18, F(15)");
}

#[test]
fn flt_q_1051() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; flt.q x14, F(25), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 9C, A7", "flt.q x14, F(25), F(25)");
}

#[test]
fn flt_s_1052() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flt.s X(28), F(11), F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9E, B5, A0", "flt.s X(28), F(11), F(11)");
}

#[test]
fn flt_s_1053() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flt.s X(8), F(25), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 94, 5C, A1", "flt.s X(8), F(25), F(21)");
}

#[test]
fn flt_s_1054() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; flt.s x22, x24, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, 6C, A1", "flt.s x22, x24, x22");
}

#[test]
fn flt_s_1055() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; flt.s X(17), X(19), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 98, 19, A1", "flt.s X(17), X(19), X(17)");
}

#[test]
fn fltq_d_1056() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fltq.d x14, f11, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D7, 35, A3", "fltq.d x14, f11, f19");
}

#[test]
fn fltq_d_1057() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fltq.d x17, F(18), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 58, 39, A2", "fltq.d x17, F(18), F(3)");
}

#[test]
fn fltq_h_1058() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fltq.h X(23), F(31), F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, DB, 0F, A5", "fltq.h X(23), F(31), F(16)");
}

#[test]
fn fltq_h_1059() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fltq.h X(5), F(11), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, D2, 15, A5", "fltq.h X(5), F(11), F(17)");
}

#[test]
fn fltq_q_1060() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fltq.q x27, F(30), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 5D, AF, A7", "fltq.q x27, F(30), f26");
}

#[test]
fn fltq_q_1061() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fltq.q x31, f14, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 5F, 27, A7", "fltq.q x31, f14, f18");
}

#[test]
fn fltq_s_1062() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fltq.s X(14), f13, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, D7, D6, A1", "fltq.s X(14), f13, F(29)");
}

#[test]
fn fltq_s_1063() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fltq.s X(23), f8, f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 5B, A4, A1", "fltq.s X(23), f8, f26");
}

#[test]
fn flw_1064() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw f26, [X(23), 1051]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, AD, BB, 41", "flw f26, [X(23), 1051]");
}

#[test]
fn flw_1065() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(9), [X(29), -905]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "87, A4, 7E, C7", "flw F(9), [X(29), -905]");
}

#[test]
fn flw_1066() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(8), -1852058205, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, DF, 9B, 91, 07, 24, 3F, 5A", "flw F(8), -1852058205, x30");
}

#[test]
fn flw_1067() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; flw F(14), 198561041, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, D8, D5, 0B, 07, 27, 18, D1", "flw F(14), 198561041, x16");
}

#[test]
fn fmadd_d_1068() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(4), f3, f15, F(28), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F2, F1, E2", "fmadd.d F(4), f3, f15, F(28), dyn");
}

#[test]
fn fmadd_d_1069() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d F(2), f20, F(0), f8, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 11, 0A, 42", "fmadd.d F(2), f20, F(0), f8, rtz");
}

#[test]
fn fmadd_d_1070() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmadd.d X(22), x6, x8, x15, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 3B, 83, 7A", "fmadd.d X(22), x6, x8, x15, rup");
}

#[test]
fn fmadd_d_1071() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmadd.d X(29), x20, X(10), x15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7E, AA, 7A", "fmadd.d X(29), x20, X(10), x15, dyn");
}

#[test]
fn fmadd_d_1072() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d f13, f1, f4, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F6, 40, 6A", "fmadd.d f13, f1, f4, F(13)");
}

#[test]
fn fmadd_d_1073() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmadd.d f24, f24, f21, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7C, 5C, E3", "fmadd.d f24, f24, f21, F(28)");
}

#[test]
fn fmadd_d_1074() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmadd.d x13, X(3), X(24), x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F6, 81, 43", "fmadd.d x13, X(3), X(24), x8");
}

#[test]
fn fmadd_d_1075() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmadd.d X(17), X(4), x27, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 78, B2, 13", "fmadd.d X(17), X(4), x27, X(2)");
}

#[test]
fn fmadd_h_1076() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f31, f18, F(6), F(16), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 0F, 69, 84", "fmadd.h f31, f18, F(6), F(16), rne");
}

#[test]
fn fmadd_h_1077() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h F(8), f31, F(27), F(29), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 94, BF, ED", "fmadd.h F(8), f31, F(27), F(29), rtz");
}

#[test]
fn fmadd_h_1078() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmadd.h X(30), x24, x1, X(9), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 3F, 1C, 4C", "fmadd.h X(30), x24, x1, X(9), rup");
}

#[test]
fn fmadd_h_1079() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmadd.h x24, x28, x2, X(17), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 3C, 2E, 8C", "fmadd.h x24, x28, x2, X(17), rup");
}

#[test]
fn fmadd_h_1080() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f6, F(22), f11, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 73, BB, B4", "fmadd.h f6, F(22), f11, f22");
}

#[test]
fn fmadd_h_1081() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmadd.h f1, f14, F(31), f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 70, F7, BD", "fmadd.h f1, f14, F(31), f23");
}

#[test]
fn fmadd_h_1082() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmadd.h x4, X(13), x23, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F2, 76, 9D", "fmadd.h x4, X(13), x23, x19");
}

#[test]
fn fmadd_h_1083() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmadd.h x4, x23, X(26), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F2, AB, 35", "fmadd.h x4, x23, X(26), X(6)");
}

#[test]
fn fmadd_q_1084() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q f30, f28, f13, F(1), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 3F, DE, 0E", "fmadd.q f30, f28, f13, F(1), rup");
}

#[test]
fn fmadd_q_1085() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(25), F(3), F(5), f26, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, BC, 51, D6", "fmadd.q F(25), F(3), F(5), f26, rup");
}

#[test]
fn fmadd_q_1086() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q f25, F(10), f26, F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7C, A5, DF", "fmadd.q f25, F(10), f26, F(27)");
}

#[test]
fn fmadd_q_1087() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmadd.q F(18), F(17), f17, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, F9, 18, DF", "fmadd.q F(18), F(17), f17, f27");
}

#[test]
fn fmadd_s_1088() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f4, F(3), F(2), F(14), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, A2, 21, 70", "fmadd.s f4, F(3), F(2), F(14), rdn");
}

#[test]
fn fmadd_s_1089() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f18, F(1), F(10), F(26), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 99, A0, D0", "fmadd.s f18, F(1), F(10), F(26), rtz");
}

#[test]
fn fmadd_s_1090() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmadd.s x13, x25, x14, X(29), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 96, EC, E8", "fmadd.s x13, x25, x14, X(29), rtz");
}

#[test]
fn fmadd_s_1091() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmadd.s X(26), x29, x1, X(31), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, BD, 1E, F8", "fmadd.s X(26), x29, x1, X(31), rup");
}

#[test]
fn fmadd_s_1092() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f3, f23, f24, f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F1, 8B, 09", "fmadd.s f3, f23, f24, f1");
}

#[test]
fn fmadd_s_1093() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmadd.s f7, F(19), f2, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, F3, 29, 70", "fmadd.s f7, F(19), f2, F(14)");
}

#[test]
fn fmadd_s_1094() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmadd.s x31, X(2), x3, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 7F, 31, B0", "fmadd.s x31, X(2), x3, X(22)");
}

#[test]
fn fmadd_s_1095() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmadd.s x29, X(7), x12, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, FE, C3, 18", "fmadd.s x29, X(7), x12, X(3)");
}

#[test]
fn fmax_d_1096() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmax.d F(27), F(1), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9D, 60, 2A", "fmax.d F(27), F(1), f6");
}

#[test]
fn fmax_d_1097() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmax.d f18, f28, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 19, DE, 2A", "fmax.d f18, f28, f13");
}

#[test]
fn fmax_d_1098() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmax.d x17, x7, X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 98, 63, 2B", "fmax.d x17, x7, X(22)");
}

#[test]
fn fmax_d_1099() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmax.d X(14), X(29), x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 1E, 2A", "fmax.d X(14), X(29), x1");
}

#[test]
fn fmax_h_1100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmax.h F(0), F(3), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 90, 91, 2C", "fmax.h F(0), F(3), F(9)");
}

#[test]
fn fmax_h_1101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmax.h f23, F(27), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, 4D, 2C", "fmax.h f23, F(27), f4");
}

#[test]
fn fmax_h_1102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmax.h X(24), X(20), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1C, 0A, 2D", "fmax.h X(24), X(20), X(16)");
}

#[test]
fn fmax_h_1103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmax.h X(5), X(16), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 12, E8, 2C", "fmax.h X(5), X(16), x14");
}

#[test]
fn fmax_q_1104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmax.q F(26), F(0), F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1D, E0, 2E", "fmax.q F(26), F(0), F(14)");
}

#[test]
fn fmax_q_1105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmax.q f7, F(21), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, 1A, 2F", "fmax.q f7, F(21), F(17)");
}

#[test]
fn fmax_s_1106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmax.s f31, F(19), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9F, 99, 29", "fmax.s f31, F(19), f25");
}

#[test]
fn fmax_s_1107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmax.s f13, F(26), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 16, 9D, 29", "fmax.s f13, F(26), f25");
}

#[test]
fn fmax_s_1108() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmax.s x14, X(24), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 2C, 29", "fmax.s x14, X(24), x18");
}

#[test]
fn fmax_s_1109() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmax.s X(6), x31, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 93, AF, 28", "fmax.s X(6), x31, X(10)");
}

#[test]
fn fmaxm_d_1110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fmaxm.d f20, f8, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3A, 04, 2B", "fmaxm.d f20, f8, F(16)");
}

#[test]
fn fmaxm_d_1111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fmaxm.d F(17), f24, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 38, 4C, 2B", "fmaxm.d F(17), f24, F(20)");
}

#[test]
fn fmaxm_h_1112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fmaxm.h f5, f12, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 32, 06, 2D", "fmaxm.h f5, f12, F(16)");
}

#[test]
fn fmaxm_h_1113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fmaxm.h f7, f29, F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B3, 9E, 2C", "fmaxm.h f7, f29, F(9)");
}

#[test]
fn fmaxm_q_1114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmaxm.q F(18), f31, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B9, 2F, 2F", "fmaxm.q F(18), f31, f18");
}

#[test]
fn fmaxm_q_1115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmaxm.q F(27), f7, f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BD, E3, 2F", "fmaxm.q F(27), f7, f30");
}

#[test]
fn fmaxm_s_1116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fmaxm.s f27, F(30), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3D, 3F, 29", "fmaxm.s f27, F(30), F(19)");
}

#[test]
fn fmaxm_s_1117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fmaxm.s f5, f21, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B2, 6A, 29", "fmaxm.s f5, f21, f22");
}

#[test]
fn fmin_d_1118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmin.d F(1), F(19), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 80, A9, 2A", "fmin.d F(1), F(19), F(10)");
}

#[test]
fn fmin_d_1119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmin.d F(3), F(22), f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, EB, 2A", "fmin.d F(3), F(22), f14");
}

#[test]
fn fmin_d_1120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmin.d x6, X(2), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 03, D1, 2A", "fmin.d x6, X(2), X(13)");
}

#[test]
fn fmin_d_1121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmin.d x29, x25, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8E, 7C, 2B", "fmin.d x29, x25, X(23)");
}

#[test]
fn fmin_h_1122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmin.h F(22), f11, f0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 05, 2C", "fmin.h F(22), f11, f0");
}

#[test]
fn fmin_h_1123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmin.h f14, F(9), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 87, 34, 2D", "fmin.h f14, F(9), F(19)");
}

#[test]
fn fmin_h_1124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmin.h x21, x3, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, D1, 2C", "fmin.h x21, x3, X(13)");
}

#[test]
fn fmin_h_1125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmin.h x17, X(10), x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 95, 2D", "fmin.h x17, X(10), x25");
}

#[test]
fn fmin_q_1126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmin.q f7, f20, F(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 03, BA, 2E", "fmin.q f7, f20, F(11)");
}

#[test]
fn fmin_q_1127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmin.q F(5), f2, F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 41, 2F", "fmin.q F(5), f2, F(20)");
}

#[test]
fn fmin_s_1128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmin.s f17, f4, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 92, 29", "fmin.s f17, f4, f25");
}

#[test]
fn fmin_s_1129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmin.s F(22), F(3), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, 01, 28", "fmin.s F(22), F(3), F(0)");
}

#[test]
fn fmin_s_1130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmin.s X(23), X(27), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 5D, 29", "fmin.s X(23), X(27), x21");
}

#[test]
fn fmin_s_1131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmin.s x16, X(17), X(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 88, 08, 28", "fmin.s x16, X(17), X(0)");
}

#[test]
fn fminm_d_1132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fminm.d f27, f31, F(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, EF, 2A", "fminm.d f27, f31, F(14)");
}

#[test]
fn fminm_d_1133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fminm.d F(18), f9, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A9, 04, 2B", "fminm.d F(18), f9, F(16)");
}

#[test]
fn fminm_h_1134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fminm.h F(31), f8, F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2F, 64, 2C", "fminm.h F(31), f8, F(6)");
}

#[test]
fn fminm_h_1135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fminm.h f11, f5, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A5, D2, 2C", "fminm.h f11, f5, f13");
}

#[test]
fn fminm_q_1136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fminm.q f4, F(28), F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 22, 2E, 2E", "fminm.q f4, F(28), F(2)");
}

#[test]
fn fminm_q_1137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fminm.q F(15), f31, F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A7, 8F, 2E", "fminm.q F(15), f31, F(8)");
}

#[test]
fn fminm_s_1138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fminm.s F(11), f3, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A5, 61, 29", "fminm.s F(11), f3, F(22)");
}

#[test]
fn fminm_s_1139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fminm.s F(27), F(16), F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2D, E8, 29", "fminm.s F(27), F(16), F(30)");
}

#[test]
fn fmsub_d_1140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f9, f5, f9, F(10), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 94, 92, 52", "fmsub.d f9, f5, f9, F(10), rtz");
}

#[test]
fn fmsub_d_1141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d F(19), f9, F(26), f29, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 99, A4, EB", "fmsub.d F(19), f9, F(26), f29, rtz");
}

#[test]
fn fmsub_d_1142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmsub.d x17, X(8), x21, x10, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 18, 54, 53", "fmsub.d x17, X(8), x21, x10, rtz");
}

#[test]
fn fmsub_d_1143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmsub.d x5, x1, X(27), x18, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 82, B0, 93", "fmsub.d x5, x1, X(27), x18, rne");
}

#[test]
fn fmsub_d_1144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f16, f17, F(21), F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, F8, 58, 53", "fmsub.d f16, f17, F(21), F(10)");
}

#[test]
fn fmsub_d_1145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmsub.d f26, f31, f26, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, FD, AF, B3", "fmsub.d f26, f31, f26, f22");
}

#[test]
fn fmsub_d_1146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmsub.d X(18), x22, X(25), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 79, 9B, D3", "fmsub.d X(18), x22, X(25), x26");
}

#[test]
fn fmsub_d_1147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmsub.d X(23), X(6), X(13), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 7B, D3, 5A", "fmsub.d X(23), X(6), X(13), x11");
}

#[test]
fn fmsub_h_1148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h f29, f30, F(28), f21, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 7E, CF, AD", "fmsub.h f29, f30, F(28), f21, dyn");
}

#[test]
fn fmsub_h_1149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(10), f30, F(4), f18, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 75, 4F, 94", "fmsub.h F(10), f30, F(4), f18, dyn");
}

#[test]
fn fmsub_h_1150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmsub.h X(6), x11, x13, X(14), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 83, D5, 74", "fmsub.h X(6), x11, x13, X(14), rne");
}

#[test]
fn fmsub_h_1151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmsub.h x11, x11, x19, x2, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 85, 35, 15", "fmsub.h x11, x11, x19, x2, rne");
}

#[test]
fn fmsub_h_1152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h F(17), F(22), F(2), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 78, 2B, AC", "fmsub.h F(17), F(22), F(2), F(21)");
}

#[test]
fn fmsub_h_1153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmsub.h f23, f10, f21, F(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 7B, 55, 25", "fmsub.h f23, f10, f21, F(4)");
}

#[test]
fn fmsub_h_1154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmsub.h x0, x2, x31, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 70, F1, D5", "fmsub.h x0, x2, x31, X(26)");
}

#[test]
fn fmsub_h_1155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmsub.h X(19), x16, X(27), X(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 79, B8, B5", "fmsub.h X(19), x16, X(27), X(22)");
}

#[test]
fn fmsub_q_1156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f4, F(1), f4, f13, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 82, 40, 6E", "fmsub.q f4, F(1), f4, f13, rne");
}

#[test]
fn fmsub_q_1157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f20, f20, F(6), F(5), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 2A, 6A, 2E", "fmsub.q f20, f20, F(6), F(5), rdn");
}

#[test]
fn fmsub_q_1158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q F(6), F(26), F(9), F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 73, 9D, 1E", "fmsub.q F(6), F(26), F(9), F(3)");
}

#[test]
fn fmsub_q_1159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmsub.q f6, f22, F(9), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 73, 9B, 06", "fmsub.q f6, f22, F(9), F(0)");
}

#[test]
fn fmsub_s_1160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(22), F(31), F(19), f5, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, BB, 3F, 29", "fmsub.s F(22), F(31), F(19), f5, rup");
}

#[test]
fn fmsub_s_1161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s f10, F(6), f15, f6, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 75, F3, 30", "fmsub.s f10, F(6), f15, f6, dyn");
}

#[test]
fn fmsub_s_1162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmsub.s x17, X(2), x3, X(16), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 78, 31, 80", "fmsub.s x17, X(2), x3, X(16), dyn");
}

#[test]
fn fmsub_s_1163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmsub.s x20, X(28), x21, x26, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 1A, 5E, D1", "fmsub.s x20, X(28), x21, x26, rtz");
}

#[test]
fn fmsub_s_1164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(26), f10, F(2), F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 7D, 25, B8", "fmsub.s F(26), f10, F(2), F(23)");
}

#[test]
fn fmsub_s_1165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmsub.s F(3), f31, f3, F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, F1, 3F, C0", "fmsub.s F(3), f31, f3, F(24)");
}

#[test]
fn fmsub_s_1166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmsub.s X(19), x16, X(27), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 79, B8, 81", "fmsub.s X(19), x16, X(27), X(16)");
}

#[test]
fn fmsub_s_1167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmsub.s x9, x30, x21, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C7, 74, 5F, D1", "fmsub.s x9, x30, x21, X(26)");
}

#[test]
fn fmul_d_1168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(25), f18, f23, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 3C, 79, 13", "fmul.d F(25), f18, f23, rup");
}

#[test]
fn fmul_d_1169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d f8, F(19), F(25), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A4, 99, 13", "fmul.d f8, F(19), F(25), rdn");
}

#[test]
fn fmul_d_1170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmul.d x21, x20, X(1), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 4A, 1A, 12", "fmul.d x21, x20, X(1), rmm");
}

#[test]
fn fmul_d_1171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmul.d X(30), x14, X(1), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1F, 17, 12", "fmul.d X(30), x14, X(1), rtz");
}

#[test]
fn fmul_d_1172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d F(15), F(26), f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 77, 6D, 12", "fmul.d F(15), F(26), f6");
}

#[test]
fn fmul_d_1173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmul.d f20, f28, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, EE, 12", "fmul.d f20, f28, f14");
}

#[test]
fn fmul_d_1174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmul.d X(11), X(8), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 75, 04, 12", "fmul.d X(11), X(8), x0");
}

#[test]
fn fmul_d_1175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmul.d x27, x9, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, A4, 12", "fmul.d x27, x9, x10");
}

#[test]
fn fmul_h_1176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(2), F(8), F(30), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 41, E4, 15", "fmul.h F(2), F(8), F(30), rmm");
}

#[test]
fn fmul_h_1177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(0), f12, F(0), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 00, 06, 14", "fmul.h F(0), f12, F(0), rne");
}

#[test]
fn fmul_h_1178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmul.h x24, X(26), X(6), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 6D, 14", "fmul.h x24, X(26), X(6), dyn");
}

#[test]
fn fmul_h_1179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmul.h x18, x19, X(24), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 89, 15", "fmul.h x18, x19, X(24), dyn");
}

#[test]
fn fmul_h_1180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(30), F(2), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 81, 15", "fmul.h F(30), F(2), F(24)");
}

#[test]
fn fmul_h_1181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmul.h F(17), F(18), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, E9, 15", "fmul.h F(17), F(18), f30");
}

#[test]
fn fmul_h_1182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmul.h X(28), x30, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7E, 9F, 14", "fmul.h X(28), x30, x9");
}

#[test]
fn fmul_h_1183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmul.h x0, X(0), x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, C0, 14", "fmul.h x0, X(0), x12");
}

#[test]
fn fmul_q_1184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q F(25), F(5), F(31), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, BC, F2, 17", "fmul.q F(25), F(5), F(31), rup");
}

#[test]
fn fmul_q_1185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q F(7), f12, F(0), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 23, 06, 16", "fmul.q F(7), f12, F(0), rdn");
}

#[test]
fn fmul_q_1186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q f4, f19, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F2, 69, 16", "fmul.q f4, f19, f6");
}

#[test]
fn fmul_q_1187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmul.q F(27), F(17), F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, F8, 16", "fmul.q F(27), F(17), F(15)");
}

#[test]
fn fmul_s_1188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f2, f7, f29, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A1, D3, 11", "fmul.s f2, f7, f29, rdn");
}

#[test]
fn fmul_s_1189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s F(10), F(29), F(27), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, BE, 11", "fmul.s F(10), F(29), F(27), rne");
}

#[test]
fn fmul_s_1190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmul.s x23, X(8), X(15), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7B, F4, 10", "fmul.s x23, X(8), X(15), dyn");
}

#[test]
fn fmul_s_1191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmul.s x0, x5, X(30), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A0, E2, 11", "fmul.s x0, x5, X(30), rdn");
}

#[test]
fn fmul_s_1192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s f31, F(11), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 45, 10", "fmul.s f31, F(11), f4");
}

#[test]
fn fmul_s_1193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmul.s F(0), F(28), f5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 70, 5E, 10", "fmul.s F(0), F(28), f5");
}

#[test]
fn fmul_s_1194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmul.s X(16), X(9), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 44, 10", "fmul.s X(16), X(9), x4");
}

#[test]
fn fmul_s_1195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmul.s X(11), x27, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F5, 1D, 11", "fmul.s X(11), x27, x17");
}

#[test]
fn fmv_d_1196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d F(10), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 05, EF, 23", "fmv.d F(10), f30");
}

#[test]
fn fmv_d_1197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d f26, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, EF, 23", "fmv.d f26, F(30)");
}

#[test]
fn fmv_d_1198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmv.d x22, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8B, BD, 23", "fmv.d x22, x27");
}

#[test]
fn fmv_d_1199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fmv.d X(4), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 4A, 23", "fmv.d X(4), x20");
}

#[test]
fn fmv_d_x_1200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d.x f13, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 86, 04, F2", "fmv.d.x f13, x9");
}

#[test]
fn fmv_d_x_1201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.d.x f15, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 87, 08, F2", "fmv.d.x f15, x17");
}

#[test]
fn fmv_h_1202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h f28, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 6B, 25", "fmv.h f28, f22");
}

#[test]
fn fmv_h_1203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.h F(26), f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, F7, 24", "fmv.h F(26), f15");
}

#[test]
fn fmv_h_1204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmv.h X(31), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8F, 7B, 25", "fmv.h X(31), x23");
}

#[test]
fn fmv_h_1205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fmv.h x11, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 05, 6B, 25", "fmv.h x11, x22");
}

#[test]
fn fmv_h_x_1206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfhmin
        ; fmv.h.x F(3), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 01, 0F, F4", "fmv.h.x F(3), X(30)");
}

#[test]
fn fmv_h_x_1207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfhmin
        ; fmv.h.x f4, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 02, 08, F4", "fmv.h.x f4, x16");
}

#[test]
fn fmv_q_1208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmv.q f28, f22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 6B, 27", "fmv.q f28, f22");
}

#[test]
fn fmv_q_1209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fmv.q f11, F(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 85, 7B, 27", "fmv.q f11, F(23)");
}

#[test]
fn fmv_s_1210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s f15, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 87, 31, 20", "fmv.s f15, f3");
}

#[test]
fn fmv_s_1211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s F(9), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 39, 21", "fmv.s F(9), f19");
}

#[test]
fn fmv_s_1212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmv.s x13, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 06, 4A, 21", "fmv.s x13, X(20)");
}

#[test]
fn fmv_s_1213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fmv.s x2, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, 94, 20", "fmv.s x2, x9");
}

#[test]
fn fmv_s_x_1214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s.x f1, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 00, 0D, F0", "fmv.s.x f1, X(26)");
}

#[test]
fn fmv_s_x_1215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.s.x F(13), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 86, 0B, F0", "fmv.s.x F(13), x23");
}

#[test]
fn fmv_w_x_1216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.w.x f30, x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 09, F0", "fmv.w.x f30, x18");
}

#[test]
fn fmv_w_x_1217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.w.x F(19), X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 0B, F0", "fmv.w.x F(19), X(23)");
}

#[test]
fn fmv_x_d_1218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.x.d x17, f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 08, 0A, E2", "fmv.x.d x17, f20");
}

#[test]
fn fmv_x_d_1219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fmv.x.d x10, f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 0E, E2", "fmv.x.d x10, f29");
}

#[test]
fn fmv_x_h_1220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.x.h X(9), f29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 84, 0E, E4", "fmv.x.h X(9), f29");
}

#[test]
fn fmv_x_h_1221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fmv.x.h X(28), f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0E, 05, E4", "fmv.x.h X(28), f10");
}

#[test]
fn fmv_x_s_1222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.s x19, f23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 89, 0B, E0", "fmv.x.s x19, f23");
}

#[test]
fn fmv_x_s_1223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.s X(23), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8B, 0A, E0", "fmv.x.s X(23), f21");
}

#[test]
fn fmv_x_w_1224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.w X(22), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0B, 0A, E0", "fmv.x.w X(22), F(20)");
}

#[test]
fn fmv_x_w_1225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fmv.x.w x18, F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 09, 0D, E0", "fmv.x.w x18, F(26)");
}

#[test]
fn fmvh_x_q_1226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvh.x.q x26, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 8D, 1A, E6", "fmvh.x.q x26, F(21)");
}

#[test]
fn fmvh_x_q_1227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvh.x.q x18, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 89, 18, E6", "fmvh.x.q x18, f17");
}

#[test]
fn fmvp_q_x_1228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvp.q.x F(5), X(2), x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 02, 41, B7", "fmvp.q.x F(5), X(2), x20");
}

#[test]
fn fmvp_q_x_1229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fmvp.q.x f9, x14, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, C7, B7", "fmvp.q.x f9, x14, X(28)");
}

#[test]
fn fneg_d_1230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fneg.d F(29), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1E, 63, 22", "fneg.d F(29), F(6)");
}

#[test]
fn fneg_d_1231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fneg.d f9, F(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 94, 31, 22", "fneg.d f9, F(3)");
}

#[test]
fn fneg_d_1232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fneg.d x15, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 97, BD, 23", "fneg.d x15, x27");
}

#[test]
fn fneg_d_1233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fneg.d x29, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1E, E7, 22", "fneg.d x29, x14");
}

#[test]
fn fneg_h_1234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fneg.h F(23), f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9B, B5, 24", "fneg.h F(23), f11");
}

#[test]
fn fneg_h_1235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fneg.h f14, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, CE, 25", "fneg.h f14, F(28)");
}

#[test]
fn fneg_h_1236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fneg.h x25, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 9C, BD, 25", "fneg.h x25, x27");
}

#[test]
fn fneg_h_1237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fneg.h x20, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, B5, 24", "fneg.h x20, X(11)");
}

#[test]
fn fneg_q_1238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fneg.q F(20), F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, 18, 27", "fneg.q F(20), F(17)");
}

#[test]
fn fneg_q_1239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fneg.q F(21), F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1A, 84, 26", "fneg.q F(21), F(8)");
}

#[test]
fn fneg_s_1240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fneg.s F(8), F(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 94, F7, 20", "fneg.s F(8), F(15)");
}

#[test]
fn fneg_s_1241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fneg.s F(5), F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 12, 6B, 21", "fneg.s F(5), F(22)");
}

#[test]
fn fneg_s_1242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fneg.s X(22), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1B, E7, 20", "fneg.s X(22), X(14)");
}

#[test]
fn fneg_s_1243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fneg.s x0, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 90, B5, 20", "fneg.s x0, x11");
}

#[test]
fn fnmadd_d_1244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d F(18), f7, f2, f21, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 99, 23, AA", "fnmadd.d F(18), f7, f2, f21, rtz");
}

#[test]
fn fnmadd_d_1245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d F(8), F(6), F(31), f30, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 04, F3, F3", "fnmadd.d F(8), F(6), F(31), f30, rne");
}

#[test]
fn fnmadd_d_1246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmadd.d x22, X(26), X(29), X(27), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 0B, DD, DB", "fnmadd.d x22, X(26), X(29), X(27), rne");
}

#[test]
fn fnmadd_d_1247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmadd.d X(16), X(13), x13, x0, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 88, D6, 02", "fnmadd.d X(16), X(13), x13, x0, rne");
}

#[test]
fn fnmadd_d_1248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d F(13), f19, f18, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, F6, 29, 93", "fnmadd.d F(13), f19, f18, f18");
}

#[test]
fn fnmadd_d_1249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmadd.d f27, f5, f22, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, FD, 62, 8B", "fnmadd.d f27, f5, f22, F(17)");
}

#[test]
fn fnmadd_d_1250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmadd.d x20, x30, x19, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 7A, 3F, 63", "fnmadd.d x20, x30, x19, X(12)");
}

#[test]
fn fnmadd_d_1251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmadd.d x27, x6, X(20), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 7D, 43, BB", "fnmadd.d x27, x6, X(20), x23");
}

#[test]
fn fnmadd_h_1252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h F(15), F(20), F(26), F(26), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 77, AA, D5", "fnmadd.h F(15), F(20), F(26), F(26), dyn");
}

#[test]
fn fnmadd_h_1253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h f7, F(12), F(17), F(9), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 73, 16, 4D", "fnmadd.h f7, F(12), F(17), F(9), dyn");
}

#[test]
fn fnmadd_h_1254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmadd.h X(6), X(2), X(14), x28, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 23, E1, E4", "fnmadd.h X(6), X(2), X(14), x28, rdn");
}

#[test]
fn fnmadd_h_1255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmadd.h X(25), x20, x22, X(6), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 4C, 6A, 35", "fnmadd.h X(25), x20, x22, X(6), rmm");
}

#[test]
fn fnmadd_h_1256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h F(10), F(9), F(28), F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, F5, C4, AD", "fnmadd.h F(10), F(9), F(28), F(21)");
}

#[test]
fn fnmadd_h_1257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmadd.h f9, f14, F(15), f4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 74, F7, 24", "fnmadd.h f9, f14, F(15), f4");
}

#[test]
fn fnmadd_h_1258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmadd.h X(16), x24, X(8), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 78, 8C, E4", "fnmadd.h X(16), x24, X(8), X(28)");
}

#[test]
fn fnmadd_h_1259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmadd.h x11, x6, X(24), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 75, 83, 55", "fnmadd.h x11, x6, X(24), x10");
}

#[test]
fn fnmadd_q_1260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q f21, f15, F(18), f8, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, CA, 27, 47", "fnmadd.q f21, f15, F(18), f8, rmm");
}

#[test]
fn fnmadd_q_1261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(0), f29, F(6), f27, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, C0, 6E, DE", "fnmadd.q F(0), f29, F(6), f27, rmm");
}

#[test]
fn fnmadd_q_1262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(20), F(4), F(25), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 7A, 92, AF", "fnmadd.q F(20), F(4), F(25), f21");
}

#[test]
fn fnmadd_q_1263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmadd.q F(1), f19, F(24), f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, F0, 89, 4F", "fnmadd.q F(1), f19, F(24), f9");
}

#[test]
fn fnmadd_s_1264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f9, F(30), f1, f3, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 74, 1F, 18", "fnmadd.s f9, F(30), f1, f3, dyn");
}

#[test]
fn fnmadd_s_1265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s F(28), f7, f8, f13, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 9E, 83, 68", "fnmadd.s F(28), f7, f8, f13, rtz");
}

#[test]
fn fnmadd_s_1266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmadd.s x4, x16, X(4), X(23), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 72, 48, B8", "fnmadd.s x4, x16, X(4), X(23), dyn");
}

#[test]
fn fnmadd_s_1267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmadd.s X(23), X(17), x29, X(9), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 9B, D8, 49", "fnmadd.s X(23), X(17), x29, X(9), rtz");
}

#[test]
fn fnmadd_s_1268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f19, f28, F(12), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 79, CE, 48", "fnmadd.s f19, f28, F(12), F(9)");
}

#[test]
fn fnmadd_s_1269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmadd.s f11, F(24), f9, F(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 75, 9C, F8", "fnmadd.s f11, F(24), f9, F(31)");
}

#[test]
fn fnmadd_s_1270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmadd.s x20, X(10), x23, X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 7A, 75, 71", "fnmadd.s x20, X(10), x23, X(14)");
}

#[test]
fn fnmadd_s_1271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmadd.s x16, X(6), X(20), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 78, 43, 99", "fnmadd.s x16, X(6), X(20), X(19)");
}

#[test]
fn fnmsub_d_1272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f17, f16, F(13), f12, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 48, D8, 62", "fnmsub.d f17, f16, F(13), f12, rmm");
}

#[test]
fn fnmsub_d_1273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d f15, f10, F(21), f25, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 07, 55, CB", "fnmsub.d f15, f10, F(21), f25, rne");
}

#[test]
fn fnmsub_d_1274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmsub.d x20, x10, x31, X(19), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 7A, F5, 9B", "fnmsub.d x20, x10, x31, X(19), dyn");
}

#[test]
fn fnmsub_d_1275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmsub.d x23, X(28), X(14), x9, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 1B, EE, 4A", "fnmsub.d x23, X(28), X(14), x9, rtz");
}

#[test]
fn fnmsub_d_1276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d F(9), F(20), F(12), f21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 74, CA, AA", "fnmsub.d F(9), F(20), F(12), f21");
}

#[test]
fn fnmsub_d_1277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fnmsub.d F(3), F(27), F(19), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, F1, 3D, 9B", "fnmsub.d F(3), F(27), F(19), F(19)");
}

#[test]
fn fnmsub_d_1278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmsub.d X(10), X(25), x7, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, F5, 7C, D2", "fnmsub.d X(10), X(25), x7, x26");
}

#[test]
fn fnmsub_d_1279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fnmsub.d x26, x31, x11, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, FD, BF, 62", "fnmsub.d x26, x31, x11, x12");
}

#[test]
fn fnmsub_h_1280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h f4, f28, f6, f31, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 22, 6E, FC", "fnmsub.h f4, f28, f6, f31, rdn");
}

#[test]
fn fnmsub_h_1281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(5), f23, F(28), f9, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 92, CB, 4D", "fnmsub.h F(5), f23, F(28), f9, rtz");
}

#[test]
fn fnmsub_h_1282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmsub.h x11, x7, x16, X(3), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 95, 03, 1D", "fnmsub.h x11, x7, x16, X(3), rtz");
}

#[test]
fn fnmsub_h_1283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmsub.h X(21), x3, X(31), x1, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FA, F1, 0D", "fnmsub.h X(21), x3, X(31), x1, dyn");
}

#[test]
fn fnmsub_h_1284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h F(5), f8, F(3), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 72, 34, 8C", "fnmsub.h F(5), f8, F(3), f17");
}

#[test]
fn fnmsub_h_1285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fnmsub.h f17, f27, f8, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, F8, 8D, CC", "fnmsub.h f17, f27, f8, f25");
}

#[test]
fn fnmsub_h_1286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmsub.h x24, x5, x17, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, FC, 12, AD", "fnmsub.h x24, x5, x17, X(21)");
}

#[test]
fn fnmsub_h_1287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fnmsub.h X(28), X(26), x5, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 7E, 5D, 74", "fnmsub.h X(28), X(26), x5, x14");
}

#[test]
fn fnmsub_q_1288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q F(29), F(23), F(4), F(4), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, CE, 4B, 26", "fnmsub.q F(29), F(23), F(4), F(4), rmm");
}

#[test]
fn fnmsub_q_1289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f7, f12, f6, F(1), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 43, 66, 0E", "fnmsub.q f7, f12, f6, F(1), rmm");
}

#[test]
fn fnmsub_q_1290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f1, f22, F(0), F(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 70, 0B, 9E", "fnmsub.q f1, f22, F(0), F(19)");
}

#[test]
fn fnmsub_q_1291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fnmsub.q f17, F(2), F(31), F(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 78, F1, 47", "fnmsub.q f17, F(2), F(31), F(8)");
}

#[test]
fn fnmsub_s_1292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f4, F(5), F(23), f5, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, C2, 72, 29", "fnmsub.s f4, F(5), F(23), f5, rmm");
}

#[test]
fn fnmsub_s_1293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s F(5), F(13), f26, F(25), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, F2, A6, C9", "fnmsub.s F(5), F(13), f26, F(25), dyn");
}

#[test]
fn fnmsub_s_1294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmsub.s x11, x25, X(5), x0, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 85, 5C, 00", "fnmsub.s x11, x25, X(5), x0, rne");
}

#[test]
fn fnmsub_s_1295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmsub.s X(21), x5, X(24), X(17), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FA, 82, 89", "fnmsub.s X(21), x5, X(24), X(17), dyn");
}

#[test]
fn fnmsub_s_1296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f5, f31, f11, F(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, F2, BF, F0", "fnmsub.s f5, f31, f11, F(30)");
}

#[test]
fn fnmsub_s_1297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fnmsub.s f23, F(26), F(20), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 7B, 4D, 01", "fnmsub.s f23, F(26), F(20), F(0)");
}

#[test]
fn fnmsub_s_1298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmsub.s x25, x19, x9, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, FC, 99, 50", "fnmsub.s x25, x19, x9, X(10)");
}

#[test]
fn fnmsub_s_1299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fnmsub.s X(9), X(22), X(7), X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 74, 7B, 58", "fnmsub.s X(9), X(22), X(7), X(11)");
}

#[test]
fn frcsr_1300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; frcsr x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 2B, 30, 00", "frcsr x22");
}

#[test]
fn frcsr_1301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; frcsr x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 29, 30, 00", "frcsr x19");
}

#[test]
fn frflags_1302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; frflags X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 27, 10, 00", "frflags X(15)");
}

#[test]
fn frflags_1303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; frflags x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 22, 10, 00", "frflags x4");
}

#[test]
fn fround_d_1304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f30, f8, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 44, 42", "fround.d f30, f8, dyn");
}

#[test]
fn fround_d_1305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f19, f31, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, B9, 4F, 42", "fround.d f19, f31, rup");
}

#[test]
fn fround_d_1306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f9, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 45, 42", "fround.d f9, f10");
}

#[test]
fn fround_d_1307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; fround.d f29, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 48, 42", "fround.d f29, F(16)");
}

#[test]
fn fround_h_1308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h f12, f4, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 06, 42, 44", "fround.h f12, f4, rne");
}

#[test]
fn fround_h_1309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h F(7), f23, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 83, 4B, 44", "fround.h F(7), f23, rne");
}

#[test]
fn fround_h_1310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h F(13), f26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 76, 4D, 44", "fround.h F(13), f26");
}

#[test]
fn fround_h_1311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; fround.h F(31), f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FF, 4C, 44", "fround.h F(31), f25");
}

#[test]
fn fround_q_1312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q F(18), f30, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 4F, 46", "fround.q F(18), f30, dyn");
}

#[test]
fn fround_q_1313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q F(31), f7, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, CF, 43, 46", "fround.q F(31), f7, rmm");
}

#[test]
fn fround_q_1314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q f15, f10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 77, 45, 46", "fround.q f15, f10");
}

#[test]
fn fround_q_1315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; fround.q f24, f15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FC, 47, 46", "fround.q f24, f15");
}

#[test]
fn fround_s_1316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s F(5), f17, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 82, 48, 40", "fround.s F(5), f17, rne");
}

#[test]
fn fround_s_1317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s f9, F(15), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, C4, 47, 40", "fround.s f9, F(15), rmm");
}

#[test]
fn fround_s_1318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s f26, F(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7D, 4E, 40", "fround.s f26, F(28)");
}

#[test]
fn fround_s_1319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; fround.s f21, F(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7A, 45, 40", "fround.s f21, F(10)");
}

#[test]
fn froundnx_d_1320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d F(14), f14, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 57, 42", "froundnx.d F(14), f14, dyn");
}

#[test]
fn froundnx_d_1321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d F(10), f1, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F5, 50, 42", "froundnx.d F(10), f1, dyn");
}

#[test]
fn froundnx_d_1322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d F(22), F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 5E, 42", "froundnx.d F(22), F(29)");
}

#[test]
fn froundnx_d_1323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature dzfa
        ; froundnx.d f12, F(22)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 5B, 42", "froundnx.d f12, F(22)");
}

#[test]
fn froundnx_h_1324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h F(21), f15, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AA, 57, 44", "froundnx.h F(21), f15, rdn");
}

#[test]
fn froundnx_h_1325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h f20, F(10), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 55, 44", "froundnx.h f20, F(10), dyn");
}

#[test]
fn froundnx_h_1326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h F(9), F(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F4, 5C, 44", "froundnx.h F(9), F(25)");
}

#[test]
fn froundnx_h_1327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfa_zfh
        ; froundnx.h F(14), F(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 77, 5C, 44", "froundnx.h F(14), F(24)");
}

#[test]
fn froundnx_q_1328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q F(26), F(11), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, CD, 55, 46", "froundnx.q F(26), F(11), rmm");
}

#[test]
fn froundnx_q_1329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q F(16), F(28), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 28, 5E, 46", "froundnx.q F(16), F(28), rdn");
}

#[test]
fn froundnx_q_1330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f25, f9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FC, 54, 46", "froundnx.q f25, f9");
}

#[test]
fn froundnx_q_1331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature qzfa
        ; froundnx.q f8, f13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 56, 46", "froundnx.q f8, f13");
}

#[test]
fn froundnx_s_1332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s F(7), F(13), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 56, 40", "froundnx.s F(7), F(13), dyn");
}

#[test]
fn froundnx_s_1333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s f27, f15, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 57, 40", "froundnx.s f27, f15, dyn");
}

#[test]
fn froundnx_s_1334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s f23, F(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FB, 58, 40", "froundnx.s f23, F(17)");
}

#[test]
fn froundnx_s_1335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature fzfa
        ; froundnx.s f22, f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FB, 59, 40", "froundnx.s f22, f19");
}

#[test]
fn frrm_1336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frrm x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 21, 20, 00", "frrm x3");
}

#[test]
fn frrm_1337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; frrm X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 2A, 20, 00", "frrm X(21)");
}

#[test]
fn fscsr_1338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fscsr x0, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 10, 3B, 00", "fscsr x0, x22");
}

#[test]
fn fscsr_1339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fscsr X(23), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 9B, 3D, 00", "fscsr X(23), X(27)");
}

#[test]
fn fsd_1340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd F(19), [X(26), -845]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 39, 3D, CB", "fsd F(19), [X(26), -845]");
}

#[test]
fn fsd_1341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd F(13), [x21, 1068]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, B6, DA, 42", "fsd F(13), [x21, 1068]");
}

#[test]
fn fsd_1342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd f7, 1981064779, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, A4, 14, 76, A7, 35, 74, 64", "fsd f7, 1981064779, x8");
}

#[test]
fn fsd_1343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsd F(6), 963990126, X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 54, 75, 39, 27, B7, 64, 26", "fsd F(6), 963990126, X(9)");
}

#[test]
fn fsflags_1344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflags x25, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 1C, 1F, 00", "fsflags x25, x30");
}

#[test]
fn fsflags_1345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflags X(24), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 9C, 15, 00", "fsflags X(24), x11");
}

#[test]
fn fsflagsi_1346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflagsi X(7), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 53, 10, 00", "fsflagsi X(7), 0");
}

#[test]
fn fsflagsi_1347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsflagsi X(31), 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, DF, 11, 00", "fsflagsi X(31), 3");
}

#[test]
fn fsgnj_d_1348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnj.d F(13), F(17), f2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 86, 28, 22", "fsgnj.d F(13), F(17), f2");
}

#[test]
fn fsgnj_d_1349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnj.d f2, f5, f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 81, F2, 23", "fsgnj.d f2, f5, f31");
}

#[test]
fn fsgnj_d_1350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsgnj.d X(16), X(22), x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 08, 0B, 22", "fsgnj.d X(16), X(22), x0");
}

#[test]
fn fsgnj_d_1351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsgnj.d X(16), X(13), X(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 88, 16, 23", "fsgnj.d X(16), X(13), X(17)");
}

#[test]
fn fsgnj_h_1352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnj.h f4, F(1), f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 82, 30, 24", "fsgnj.h f4, F(1), f3");
}

#[test]
fn fsgnj_h_1353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnj.h F(10), f27, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, 2D, 25", "fsgnj.h F(10), f27, f18");
}

#[test]
fn fsgnj_h_1354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsgnj.h X(6), X(1), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 83, 50, 25", "fsgnj.h X(6), X(1), x21");
}

#[test]
fn fsgnj_h_1355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsgnj.h x10, x9, X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, F4, 24", "fsgnj.h x10, x9, X(15)");
}

#[test]
fn fsgnj_q_1356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnj.q f7, F(5), F(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 83, 42, 27", "fsgnj.q f7, F(5), F(20)");
}

#[test]
fn fsgnj_q_1357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnj.q F(14), F(10), f20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 07, 45, 27", "fsgnj.q F(14), F(10), f20");
}

#[test]
fn fsgnj_s_1358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnj.s f11, F(8), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 05, 14, 21", "fsgnj.s f11, F(8), f17");
}

#[test]
fn fsgnj_s_1359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnj.s f27, f28, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, BE, 20", "fsgnj.s f27, f28, f11");
}

#[test]
fn fsgnj_s_1360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsgnj.s X(10), X(7), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 85, D3, 20", "fsgnj.s X(10), X(7), x13");
}

#[test]
fn fsgnj_s_1361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsgnj.s X(31), X(22), X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0F, DB, 20", "fsgnj.s X(31), X(22), X(13)");
}

#[test]
fn fsgnjn_d_1362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjn.d F(17), F(10), F(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 18, C5, 22", "fsgnjn.d F(17), F(10), F(12)");
}

#[test]
fn fsgnjn_d_1363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjn.d f14, f21, f25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 97, 9A, 23", "fsgnjn.d f14, f21, f25");
}

#[test]
fn fsgnjn_d_1364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsgnjn.d X(4), x18, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 12, F9, 23", "fsgnjn.d X(4), x18, X(31)");
}

#[test]
fn fsgnjn_d_1365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsgnjn.d x30, X(11), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9F, A5, 22", "fsgnjn.d x30, X(11), x10");
}

#[test]
fn fsgnjn_h_1366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjn.h F(15), f21, F(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 97, 5A, 25", "fsgnjn.h F(15), f21, F(21)");
}

#[test]
fn fsgnjn_h_1367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjn.h f1, f10, f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 10, 15, 25", "fsgnjn.h f1, f10, f17");
}

#[test]
fn fsgnjn_h_1368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsgnjn.h X(3), x31, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 91, 5F, 25", "fsgnjn.h X(3), x31, X(21)");
}

#[test]
fn fsgnjn_h_1369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsgnjn.h x20, x17, x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 9A, C8, 25", "fsgnjn.h x20, x17, x28");
}

#[test]
fn fsgnjn_q_1370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjn.q F(14), f26, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, CD, 27", "fsgnjn.q F(14), f26, f28");
}

#[test]
fn fsgnjn_q_1371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjn.q f19, F(31), f19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 99, 3F, 27", "fsgnjn.q f19, F(31), f19");
}

#[test]
fn fsgnjn_s_1372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjn.s F(25), F(12), F(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, A6, 21", "fsgnjn.s F(25), F(12), F(26)");
}

#[test]
fn fsgnjn_s_1373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjn.s F(26), f12, f18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1D, 26, 21", "fsgnjn.s F(26), f12, f18");
}

#[test]
fn fsgnjn_s_1374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsgnjn.s x9, x17, x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 94, F8, 21", "fsgnjn.s x9, x17, x31");
}

#[test]
fn fsgnjn_s_1375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsgnjn.s X(13), x11, x17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 96, 15, 21", "fsgnjn.s X(13), x11, x17");
}

#[test]
fn fsgnjx_d_1376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjx.d f31, F(7), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AF, B3, 23", "fsgnjx.d f31, F(7), F(27)");
}

#[test]
fn fsgnjx_d_1377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsgnjx.d F(27), f17, f28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AD, C8, 23", "fsgnjx.d F(27), f17, f28");
}

#[test]
fn fsgnjx_d_1378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsgnjx.d x21, x22, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, CB, 23", "fsgnjx.d x21, x22, X(28)");
}

#[test]
fn fsgnjx_d_1379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsgnjx.d x0, x31, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A0, CF, 22", "fsgnjx.d x0, x31, x12");
}

#[test]
fn fsgnjx_h_1380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjx.h f17, F(17), f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A8, B8, 25", "fsgnjx.h f17, F(17), f27");
}

#[test]
fn fsgnjx_h_1381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsgnjx.h F(5), F(31), F(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, A2, 2F, 25", "fsgnjx.h F(5), F(31), F(18)");
}

#[test]
fn fsgnjx_h_1382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsgnjx.h X(31), x22, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2F, CB, 24", "fsgnjx.h X(31), x22, x12");
}

#[test]
fn fsgnjx_h_1383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsgnjx.h X(10), x20, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 25, 2A, 24", "fsgnjx.h X(10), x20, X(2)");
}

#[test]
fn fsgnjx_q_1384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjx.q f14, f8, f3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 27, 34, 26", "fsgnjx.q f14, f8, f3");
}

#[test]
fn fsgnjx_q_1385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsgnjx.q f30, f3, F(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AF, 01, 27", "fsgnjx.q f30, f3, F(16)");
}

#[test]
fn fsgnjx_s_1386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjx.s f25, F(31), f31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AC, FF, 21", "fsgnjx.s f25, F(31), f31");
}

#[test]
fn fsgnjx_s_1387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsgnjx.s F(21), f20, f27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, BA, 21", "fsgnjx.s F(21), f20, f27");
}

#[test]
fn fsgnjx_s_1388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsgnjx.s X(8), X(16), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 24, 38, 20", "fsgnjx.s X(8), X(16), X(3)");
}

#[test]
fn fsgnjx_s_1389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsgnjx.s x22, x11, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AB, 25, 20", "fsgnjx.s x22, x11, x2");
}

#[test]
fn fsh_1390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfhmin
        ; fsh F(22), [X(30), 1900]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 16, 6F, 77", "fsh F(22), [X(30), 1900]");
}

#[test]
fn fsh_1391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f5, [x7, 1946]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 9D, 53, 78", "fsh f5, [x7, 1946]");
}

#[test]
fn fsh_1392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfhmin
        ; fsh F(0), 190147034, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 7E, 55, 0B, 27, 9D, 0E, 9C", "fsh F(0), 190147034, X(29)");
}

#[test]
fn fsh_1393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsh f11, 1641712656, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 94, DA, 61, 27, 98, B4, C0", "fsh f11, 1641712656, x9");
}

#[test]
fn fsq_1394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq F(27), [x7, 1157]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, C2, B3, 49", "fsq F(27), [x7, 1157]");
}

#[test]
fn fsq_1395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq f31, [X(14), -101]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 4D, F7, F9", "fsq f31, [X(14), -101]");
}

#[test]
fn fsq_1396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq f18, 245900233, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 22, A8, 0E, A7, C4, 22, 3D", "fsq f18, 245900233, x5");
}

#[test]
fn fsq_1397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsq f22, 122559847, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 2C, 4E, 07, A7, 43, 6C, D7", "fsq f22, 122559847, x24");
}

#[test]
fn fsqrt_d_1398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d f30, F(6), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0F, 03, 5A", "fsqrt.d f30, F(6), rne");
}

#[test]
fn fsqrt_d_1399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(14), F(12), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 17, 06, 5A", "fsqrt.d F(14), F(12), rtz");
}

#[test]
fn fsqrt_d_1400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsqrt.d x27, x3, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FD, 01, 5A", "fsqrt.d x27, x3, dyn");
}

#[test]
fn fsqrt_d_1401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsqrt.d x29, x3, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, AE, 01, 5A", "fsqrt.d x29, x3, rdn");
}

#[test]
fn fsqrt_d_1402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d F(29), F(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, FE, 04, 5A", "fsqrt.d F(29), F(9)");
}

#[test]
fn fsqrt_d_1403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsqrt.d f27, f6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 03, 5A", "fsqrt.d f27, f6");
}

#[test]
fn fsqrt_d_1404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsqrt.d X(7), X(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 04, 5A", "fsqrt.d X(7), X(8)");
}

#[test]
fn fsqrt_d_1405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsqrt.d x27, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7D, 01, 5A", "fsqrt.d x27, X(2)");
}

#[test]
fn fsqrt_h_1406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f25, f28, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 1C, 0E, 5C", "fsqrt.h f25, f28, rtz");
}

#[test]
fn fsqrt_h_1407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h F(26), f30, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 0F, 5C", "fsqrt.h F(26), f30, rne");
}

#[test]
fn fsqrt_h_1408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsqrt.h X(0), x7, rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B0, 03, 5C", "fsqrt.h X(0), x7, rup");
}

#[test]
fn fsqrt_h_1409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsqrt.h x26, X(13), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AD, 06, 5C", "fsqrt.h x26, X(13), rdn");
}

#[test]
fn fsqrt_h_1410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f16, F(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 0E, 5C", "fsqrt.h f16, F(29)");
}

#[test]
fn fsqrt_h_1411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsqrt.h f28, F(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, 06, 5C", "fsqrt.h f28, F(13)");
}

#[test]
fn fsqrt_h_1412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsqrt.h X(4), X(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 0F, 5C", "fsqrt.h X(4), X(30)");
}

#[test]
fn fsqrt_h_1413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsqrt.h X(24), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7C, 01, 5C", "fsqrt.h X(24), X(2)");
}

#[test]
fn fsqrt_q_1414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q f7, F(2), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 73, 01, 5E", "fsqrt.q f7, F(2), dyn");
}

#[test]
fn fsqrt_q_1415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q f9, f14, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 04, 07, 5E", "fsqrt.q f9, f14, rne");
}

#[test]
fn fsqrt_q_1416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q F(12), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 03, 5E", "fsqrt.q F(12), F(6)");
}

#[test]
fn fsqrt_q_1417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsqrt.q F(30), F(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7F, 03, 5E", "fsqrt.q F(30), F(6)");
}

#[test]
fn fsqrt_s_1418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(25), f4, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7C, 02, 58", "fsqrt.s F(25), f4, dyn");
}

#[test]
fn fsqrt_s_1419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s f8, F(7), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A4, 03, 58", "fsqrt.s f8, F(7), rdn");
}

#[test]
fn fsqrt_s_1420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsqrt.s x21, X(0), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 2A, 00, 58", "fsqrt.s x21, X(0), rdn");
}

#[test]
fn fsqrt_s_1421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsqrt.s X(30), x20, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 1F, 0A, 58", "fsqrt.s X(30), x20, rtz");
}

#[test]
fn fsqrt_s_1422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(17), f30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 78, 0F, 58", "fsqrt.s F(17), f30");
}

#[test]
fn fsqrt_s_1423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsqrt.s F(7), f1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F3, 00, 58", "fsqrt.s F(7), f1");
}

#[test]
fn fsqrt_s_1424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsqrt.s x16, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F8, 0B, 58", "fsqrt.s x16, X(23)");
}

#[test]
fn fsqrt_s_1425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsqrt.s x29, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 7E, 05, 58", "fsqrt.s x29, X(10)");
}

#[test]
fn fsrm_1426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsrm X(26), x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 9D, 27, 00", "fsrm X(26), x15");
}

#[test]
fn fsrm_1427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsrm x6, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 93, 2C, 00", "fsrm x6, x25");
}

#[test]
fn fsrmi_1428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsrmi x23, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, DB, 26, 00", "fsrmi x23, 13");
}

#[test]
fn fsrmi_1429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsrmi X(27), 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 5D, 2D, 00", "fsrmi X(27), 26");
}

#[test]
fn fsub_d_1430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(8), F(23), F(0), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F4, 0B, 0A", "fsub.d F(8), F(23), F(0), dyn");
}

#[test]
fn fsub_d_1431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(20), F(31), f7, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FA, 7F, 0A", "fsub.d F(20), F(31), f7, dyn");
}

#[test]
fn fsub_d_1432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsub.d x22, x2, X(21), rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 4B, 51, 0B", "fsub.d x22, x2, X(21), rmm");
}

#[test]
fn fsub_d_1433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsub.d x12, x21, x21, rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, A6, 5A, 0B", "fsub.d x12, x21, x21, rdn");
}

#[test]
fn fsub_d_1434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d F(12), F(18), F(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 76, 09, 0A", "fsub.d F(12), F(18), F(0)");
}

#[test]
fn fsub_d_1435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature d
        ; fsub.d f3, f22, F(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 71, 2B, 0A", "fsub.d f3, f22, F(2)");
}

#[test]
fn fsub_d_1436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsub.d x4, x14, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 37, 0B", "fsub.d x4, x14, x19");
}

#[test]
fn fsub_d_1437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zdinx
        ; fsub.d x18, X(13), X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F9, 46, 0B", "fsub.d x18, X(13), X(20)");
}

#[test]
fn fsub_h_1438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h f2, f31, F(26), dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F1, AF, 0D", "fsub.h f2, f31, F(26), dyn");
}

#[test]
fn fsub_h_1439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h F(24), f29, F(16), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, BC, 0E, 0D", "fsub.h F(24), f29, F(16), rup");
}

#[test]
fn fsub_h_1440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsub.h X(7), x31, x27, rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 93, BF, 0D", "fsub.h X(7), x31, x27, rtz");
}

#[test]
fn fsub_h_1441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsub.h x26, X(6), X(24), rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 0D, 83, 0D", "fsub.h x26, X(6), X(24), rne");
}

#[test]
fn fsub_h_1442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h f16, f4, f14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, E2, 0C", "fsub.h f16, f4, f14");
}

#[test]
fn fsub_h_1443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfh
        ; fsub.h F(15), F(5), f17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, F7, 12, 0D", "fsub.h F(15), F(5), f17");
}

#[test]
fn fsub_h_1444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsub.h x20, X(2), X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 7A, 81, 0D", "fsub.h x20, X(2), X(24)");
}

#[test]
fn fsub_h_1445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zhinx
        ; fsub.h X(6), x27, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, F3, CD, 0D", "fsub.h X(6), x27, X(28)");
}

#[test]
fn fsub_q_1446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q f10, f30, F(23), rdn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 25, 7F, 0F", "fsub.q f10, f30, F(23), rdn");
}

#[test]
fn fsub_q_1447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q F(5), f7, F(9), rtz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 92, 93, 0E", "fsub.q F(5), f7, F(9), rtz");
}

#[test]
fn fsub_q_1448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q f16, F(30), f12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, CF, 0E", "fsub.q f16, F(30), f12");
}

#[test]
fn fsub_q_1449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature q
        ; fsub.q F(28), F(7), F(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, B3, 0F", "fsub.q F(28), F(7), F(27)");
}

#[test]
fn fsub_s_1450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s F(9), f28, f1, rmm
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 44, 1E, 08", "fsub.s F(9), f28, f1, rmm");
}

#[test]
fn fsub_s_1451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f27, f14, f5, rne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 0D, 57, 08", "fsub.s f27, f14, f5, rne");
}

#[test]
fn fsub_s_1452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsub.s x14, X(25), X(17), rup
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, B7, 1C, 09", "fsub.s x14, X(25), X(17), rup");
}

#[test]
fn fsub_s_1453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsub.s x4, x30, x9, dyn
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 72, 9F, 08", "fsub.s x4, x30, x9, dyn");
}

#[test]
fn fsub_s_1454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s F(18), f26, F(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 79, 7D, 08", "fsub.s F(18), f26, F(7)");
}

#[test]
fn fsub_s_1455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsub.s f28, f9, f11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, FE, B4, 08", "fsub.s f28, f9, f11");
}

#[test]
fn fsub_s_1456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsub.s X(2), X(2), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 71, 81, 09", "fsub.s X(2), X(2), x24");
}

#[test]
fn fsub_s_1457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zfinx
        ; fsub.s x16, x16, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 78, 28, 08", "fsub.s x16, x16, x2");
}

#[test]
fn fsw_1458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw F(9), [x8, 377]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 2C, 94, 16", "fsw F(9), [x8, 377]");
}

#[test]
fn fsw_1459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw F(26), [x25, 1025]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, A0, AC, 41", "fsw F(26), [x25, 1025]");
}

#[test]
fn fsw_1460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw f9, 155026711, x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 80, 3D, 09, A7, AB, 90, 50", "fsw f9, 155026711, x1");
}

#[test]
fn fsw_1461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature f
        ; fsw f10, -674247584, X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, DD, CF, D7, 27, 20, AD, C6", "fsw f10, -674247584, X(26)");
}

#[test]
fn j_1462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; j -213400
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, B0, 9C, E6", "j -213400");
}

#[test]
fn j_1463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; j -292984
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 80, 8B, F8", "j -292984");
}

#[test]
fn jal_1464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal x21, 362646
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 8A, 75, 09", "jal x21, 362646");
}

#[test]
fn jal_1465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal x18, -301754
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 69, 6B, D4", "jal x18, -301754");
}

#[test]
fn jal_1466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal 131898
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 00, A2, 33", "jal 131898");
}

#[test]
fn jal_1467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jal -106370
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 60, EE, 87", "jal -106370");
}

#[test]
fn jalr_1468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr X(30), x2, 1432
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 0F, 81, 59", "jalr X(30), x2, 1432");
}

#[test]
fn jalr_1469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr X(31), X(30), -2024
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 0F, 8F, 81", "jalr X(31), X(30), -2024");
}

#[test]
fn jalr_1470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 80, 06, 00", "jalr X(13)");
}

#[test]
fn jalr_1471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jalr x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 00, 0D, 00", "jalr x26");
}

#[test]
fn jr_1472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jr x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 0E, 00", "jr x29");
}

#[test]
fn jr_1473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jr x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 80, 01, 00", "jr x3");
}

#[test]
fn jump_1474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jump 1373956178, x20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, FA, E4, 51, 67, 00, 2A, 85", "jump 1373956178, x20");
}

#[test]
fn jump_1475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; jump -319161919, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 05, FA, EC, 67, 80, 15, 9C", "jump -319161919, x11");
}

#[test]
fn la_1476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; la x16, -458360782
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 08, AE, E4, 13, 08, 28, 83", "la x16, -458360782");
}

#[test]
fn la_1477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; la X(27), -1769920121
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 3D, 81, 96, 93, 8D, 7D, 98", "la X(27), -1769920121");
}

#[test]
fn lb_1478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(11), [X(8), 65]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 05, 14, 04", "lb X(11), [X(8), 65]");
}

#[test]
fn lb_1479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb X(5), [X(12), 1517]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 02, D6, 5E", "lb X(5), [X(12), 1517]");
}

#[test]
fn lb_1480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb x26, -2038654683
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, AD, 7C, 86, 03, 0D, 5D, 92", "lb x26, -2038654683");
}

#[test]
fn lb_1481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lb x5, -1722138868
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 42, 5A, 99, 83, 82, C2, F0", "lb x5, -1722138868");
}

#[test]
fn lbu_1482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x21, [X(24), -1986]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 4A, EC, 83", "lbu x21, [X(24), -1986]");
}

#[test]
fn lbu_1483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu X(21), [x4, -436]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 4A, C2, E4", "lbu X(21), [x4, -436]");
}

#[test]
fn lbu_1484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu X(4), -474882538
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, E2, B1, E3, 03, 42, 62, E1", "lbu X(4), -474882538");
}

#[test]
fn lbu_1485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lbu x11, -1012091769
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, B5, AC, C3, 83, C5, 75, 48", "lbu x11, -1012091769");
}

#[test]
fn ld_1486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(4), [X(18), 2034]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 32, 29, 7F", "ld X(4), [X(18), 2034]");
}

#[test]
fn ld_1487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld x29, [X(27), 887]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, BE, 7D, 37", "ld x29, [X(27), 887]");
}

#[test]
fn ld_1488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(17), -1242106941
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, F8, F6, B5, 83, B8, 38, 3C", "ld X(17), -1242106941");
}

#[test]
fn ld_1489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; ld X(31), 1368601167
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 3F, 93, 51, 83, BF, FF, 24", "ld X(31), 1368601167");
}

#[test]
fn lh_1490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh X(18), [X(18), 1218]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 19, 29, 4C", "lh X(18), [X(18), 1218]");
}

#[test]
fn lh_1491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x22, [x25, -915]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 9B, DC, C6", "lh x22, [x25, -915]");
}

#[test]
fn lh_1492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh x20, 336675647
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 4A, 11, 14, 03, 1A, FA, 33", "lh x20, 336675647");
}

#[test]
fn lh_1493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lh X(8), 1550892017
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, C4, 70, 5C, 03, 14, 14, BF", "lh X(8), 1550892017");
}

#[test]
fn lhu_1494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu x3, [x24, -1645]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, 51, 3C, 99", "lhu x3, [x24, -1645]");
}

#[test]
fn lhu_1495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu X(18), [x19, 1133]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, D9, D9, 46", "lhu X(18), [x19, 1133]");
}

#[test]
fn lhu_1496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu x5, -1902926604
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A2, 93, 8E, 83, D2, 42, 4F", "lhu x5, -1902926604");
}

#[test]
fn lhu_1497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lhu X(30), -1285120423
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, AF, 66, B3, 03, 5F, 9F, E5", "lhu X(30), -1285120423");
}

#[test]
fn lpad_1498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; lpad 183951
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, F0, E8, 2C", "lpad 183951");
}

#[test]
fn lpad_1499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zicfilp
        ; lpad 1994
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, A0, 7C, 00", "lpad 1994");
}

#[test]
fn lr_d_1500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d X(15), [X(7)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B7, 03, 10", "lr.d X(15), [X(7)]");
}

#[test]
fn lr_d_1501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d X(16), [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B8, 04, 10", "lr.d X(16), [X(9)]");
}

#[test]
fn lr_d_aq_1502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aq X(3), [X(30)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 31, 0F, 14", "lr.d.aq X(3), [X(30)]");
}

#[test]
fn lr_d_aq_1503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aq X(30), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 3F, 09, 14", "lr.d.aq X(30), [X(18)]");
}

#[test]
fn lr_d_aqrl_1504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aqrl X(3), [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 31, 07, 16", "lr.d.aqrl X(3), [x14]");
}

#[test]
fn lr_d_aqrl_1505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.aqrl X(13), [x1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, B6, 00, 16", "lr.d.aqrl X(13), [x1]");
}

#[test]
fn lr_d_rl_1506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.rl X(31), [X(18)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 3F, 09, 12", "lr.d.rl X(31), [X(18)]");
}

#[test]
fn lr_d_rl_1507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.d.rl X(18), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, B9, 0D, 12", "lr.d.rl X(18), [x27]");
}

#[test]
fn lr_w_1508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w X(4), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 22, 0C, 10", "lr.w X(4), [x24]");
}

#[test]
fn lr_w_1509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w x8, [x2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 24, 01, 10", "lr.w x8, [x2]");
}

#[test]
fn lr_w_aq_1510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aq x2, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 21, 02, 14", "lr.w.aq x2, [x4]");
}

#[test]
fn lr_w_aq_1511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aq x11, [X(9)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A5, 04, 14", "lr.w.aq x11, [X(9)]");
}

#[test]
fn lr_w_aqrl_1512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aqrl x30, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2F, 08, 16", "lr.w.aqrl x30, [x16]");
}

#[test]
fn lr_w_aqrl_1513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.aqrl x12, [X(1)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, A6, 00, 16", "lr.w.aqrl x12, [X(1)]");
}

#[test]
fn lr_w_rl_1514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.rl X(28), [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 2E, 04, 12", "lr.w.rl X(28), [X(8)]");
}

#[test]
fn lr_w_rl_1515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature a
        ; lr.w.rl x17, [X(8)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 28, 04, 12", "lr.w.rl x17, [X(8)]");
}

#[test]
fn lw_1516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(7), [x19, 742]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, A3, 69, 2E", "lw X(7), [x19, 742]");
}

#[test]
fn lw_1517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(4), [X(10), -699]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 22, 55, D4", "lw X(4), [X(10), -699]");
}

#[test]
fn lw_1518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw X(19), 683121355
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, A9, B7, 28, 83, A9, B9, AC", "lw X(19), 683121355");
}

#[test]
fn lw_1519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lw x28, 2118115946
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, EE, 3F, 7E, 03, 2E, AE, 26", "lw x28, 2118115946");
}

#[test]
fn lwu_1520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu x13, [X(3), 681]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, E6, 91, 2A", "lwu x13, [X(3), 681]");
}

#[test]
fn lwu_1521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(3), [x5, -625]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, E1, F2, D8", "lwu X(3), [x5, -625]");
}

#[test]
fn lwu_1522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(21), 1476630601
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, AA, 03, 58, 83, EA, 9A, 84", "lwu X(21), 1476630601");
}

#[test]
fn lwu_1523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature i
        ; lwu X(16), -1039572304
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 68, 09, C2, 03, 68, 08, 2B", "lwu X(16), -1039572304");
}

#[test]
fn max_1524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; max x23, x0, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 6B, 60, 0A", "max x23, x0, x6");
}

#[test]
fn max_1525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; max X(5), x16, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 62, 28, 0B", "max X(5), x16, X(18)");
}

#[test]
fn maxu_1526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; maxu X(8), x28, x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 74, AE, 0A", "maxu X(8), x28, x10");
}

#[test]
fn maxu_1527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; maxu X(8), X(2), X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 74, 31, 0A", "maxu X(8), X(2), X(3)");
}

#[test]
fn min_1528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; min X(13), x26, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 46, BD, 0A", "min X(13), x26, x11");
}

#[test]
fn min_1529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; min X(6), X(6), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 43, 83, 0B", "min X(6), X(6), x24");
}

#[test]
fn minu_1530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; minu x15, X(1), X(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, D7, 60, 0A", "minu x15, X(1), X(6)");
}

#[test]
fn minu_1531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zbb
        ; minu X(6), x20, X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 53, FA, 0B", "minu X(6), x20, X(31)");
}

#[test]
fn mop_r_0_1532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.0 x0, X(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C0, C5, 81", "mop.r.0 x0, X(11)");
}

#[test]
fn mop_r_0_1533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.0 x27, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, C1, 81", "mop.r.0 x27, X(2)");
}

#[test]
fn mop_r_1_1534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.1 X(31), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, DD, 81", "mop.r.1 X(31), x26");
}

#[test]
fn mop_r_1_1535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.1 X(1), X(7)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C0, D3, 81", "mop.r.1 X(1), X(7)");
}

#[test]
fn mop_r_10_1536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.10 x25, X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, EA, 89", "mop.r.10 x25, X(20)");
}

#[test]
fn mop_r_10_1537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.10 x2, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C1, EC, 89", "mop.r.10 x2, x25");
}

#[test]
fn mop_r_11_1538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.11 X(2), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C1, FA, 89", "mop.r.11 X(2), X(21)");
}

#[test]
fn mop_r_11_1539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.11 X(6), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 43, F9, 89", "mop.r.11 X(6), x18");
}

#[test]
fn mop_r_12_1540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.12 x0, X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, C1, 8D", "mop.r.12 x0, X(2)");
}

#[test]
fn mop_r_12_1541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.12 X(13), x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C6, CA, 8D", "mop.r.12 X(13), x21");
}

#[test]
fn mop_r_13_1542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.13 X(14), x23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C7, DB, 8D", "mop.r.13 X(14), x23");
}

#[test]
fn mop_r_13_1543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.13 x4, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C2, D4, 8D", "mop.r.13 x4, x9");
}

#[test]
fn mop_r_14_1544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.14 X(3), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C1, E5, 8D", "mop.r.14 X(3), x11");
}

#[test]
fn mop_r_14_1545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.14 x12, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C6, EB, 8D", "mop.r.14 x12, X(23)");
}

#[test]
fn mop_r_15_1546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.15 x10, x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 45, F4, 8D", "mop.r.15 x10, x8");
}

#[test]
fn mop_r_15_1547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.15 x16, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, F8, 8D", "mop.r.15 x16, x16");
}

#[test]
fn mop_r_16_1548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.16 X(22), X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CB, C4, C1", "mop.r.16 X(22), X(9)");
}

#[test]
fn mop_r_16_1549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.16 X(16), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 48, C5, C1", "mop.r.16 X(16), x10");
}

#[test]
fn mop_r_17_1550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.17 x31, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, D1, C1", "mop.r.17 x31, X(3)");
}

#[test]
fn mop_r_17_1551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.17 X(30), x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, D6, C1", "mop.r.17 X(30), x13");
}

#[test]
fn mop_r_18_1552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.18 x0, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, EE, C1", "mop.r.18 x0, X(28)");
}

#[test]
fn mop_r_18_1553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.18 X(17), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 48, E5, C1", "mop.r.18 X(17), x10");
}

#[test]
fn mop_r_19_1554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.19 X(5), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 42, F1, C1", "mop.r.19 X(5), X(2)");
}

#[test]
fn mop_r_19_1555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.19 x28, X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4E, F9, C1", "mop.r.19 x28, X(18)");
}

#[test]
fn mop_r_2_1556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.2 X(1), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 40, E9, 81", "mop.r.2 X(1), X(18)");
}

#[test]
fn mop_r_2_1557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.2 X(16), X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, ED, 81", "mop.r.2 X(16), X(27)");
}

#[test]
fn mop_r_20_1558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.20 x13, X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, C2, C5", "mop.r.20 x13, X(4)");
}

#[test]
fn mop_r_20_1559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.20 x5, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 42, C6, C5", "mop.r.20 x5, X(12)");
}

#[test]
fn mop_r_21_1560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.21 X(20), X(18)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4A, D9, C5", "mop.r.21 X(20), X(18)");
}

#[test]
fn mop_r_21_1561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.21 x13, x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 46, DC, C5", "mop.r.21 x13, x24");
}

#[test]
fn mop_r_22_1562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.22 X(7), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, E1, C5", "mop.r.22 X(7), X(2)");
}

#[test]
fn mop_r_22_1563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.22 x30, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, E1, C5", "mop.r.22 x30, x3");
}

#[test]
fn mop_r_23_1564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.23 x5, X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 42, FE, C5", "mop.r.23 x5, X(28)");
}

#[test]
fn mop_r_23_1565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.23 x22, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CB, FC, C5", "mop.r.23 x22, x25");
}

#[test]
fn mop_r_24_1566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.24 x24, x5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CC, C2, C9", "mop.r.24 x24, x5");
}

#[test]
fn mop_r_24_1567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.24 x1, x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 40, C1, C9", "mop.r.24 x1, x2");
}

#[test]
fn mop_r_25_1568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.25 X(11), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 45, DC, C9", "mop.r.25 X(11), x24");
}

#[test]
fn mop_r_25_1569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.25 x30, X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CF, DA, C9", "mop.r.25 x30, X(21)");
}

#[test]
fn mop_r_26_1570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.26 x25, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, E6, C9", "mop.r.26 x25, X(12)");
}

#[test]
fn mop_r_26_1571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.26 x0, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 40, ED, C9", "mop.r.26 x0, x26");
}

#[test]
fn mop_r_27_1572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.27 x17, X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C8, F9, C9", "mop.r.27 x17, X(19)");
}

#[test]
fn mop_r_27_1573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.27 x14, x12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 47, F6, C9", "mop.r.27 x14, x12");
}

#[test]
fn mop_r_28_1574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.28 X(1), x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C0, CD, CD", "mop.r.28 X(1), x27");
}

#[test]
fn mop_r_28_1575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.28 X(26), x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4D, C9, CD", "mop.r.28 X(26), x18");
}

#[test]
fn mop_r_29_1576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.29 x22, x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CB, D9, CD", "mop.r.29 x22, x19");
}

#[test]
fn mop_r_29_1577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.29 x4, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C2, DD, CD", "mop.r.29 x4, X(27)");
}

#[test]
fn mop_r_3_1578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.3 X(31), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, CF, FA, 81", "mop.r.3 X(31), X(21)");
}

#[test]
fn mop_r_3_1579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.3 x25, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, F0, 81", "mop.r.3 x25, x0");
}

#[test]
fn mop_r_30_1580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.30 x15, X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, EE, CD", "mop.r.30 x15, X(29)");
}

#[test]
fn mop_r_30_1581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.30 X(25), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, EF, CD", "mop.r.30 X(25), x30");
}

#[test]
fn mop_r_31_1582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.31 x30, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4F, F2, CD", "mop.r.31 x30, x4");
}

#[test]
fn mop_r_31_1583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.31 x15, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C7, F5, CD", "mop.r.31 x15, x11");
}

#[test]
fn mop_r_4_1584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.4 x16, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, C8, CA, 85", "mop.r.4 x16, x21");
}

#[test]
fn mop_r_4_1585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.4 x5, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C2, C5, 85", "mop.r.4 x5, x11");
}

#[test]
fn mop_r_5_1586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.5 X(30), X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 4F, D7, 85", "mop.r.5 X(30), X(14)");
}

#[test]
fn mop_r_5_1587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.5 X(18), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 49, DE, 85", "mop.r.5 X(18), X(28)");
}

#[test]
fn mop_r_6_1588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.6 X(28), x31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, EF, 85", "mop.r.6 X(28), x31");
}

#[test]
fn mop_r_6_1589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.6 x13, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C6, EB, 85", "mop.r.6 x13, X(23)");
}

#[test]
fn mop_r_7_1590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.7 X(29), X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4E, F8, 85", "mop.r.7 X(29), X(16)");
}

#[test]
fn mop_r_7_1591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.7 X(25), X(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4C, F1, 85", "mop.r.7 X(25), X(2)");
}

#[test]
fn mop_r_8_1592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.8 x28, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, CE, C1, 89", "mop.r.8 x28, X(3)");
}

#[test]
fn mop_r_8_1593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.8 x19, X(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C9, C6, 89", "mop.r.8 x19, X(13)");
}

#[test]
fn mop_r_9_1594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.9 X(7), X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 43, D6, 89", "mop.r.9 X(7), X(12)");
}

#[test]
fn mop_r_9_1595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.9 X(2), X(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, DE, 89", "mop.r.9 X(2), X(28)");
}

#[test]
fn mop_r_n_1596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.N 3, X(31), x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4F, F2, 81", "mop.r.N 3, X(31), x4");
}

#[test]
fn mop_r_n_1597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.r.N 12, X(27), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 4D, C7, 8D", "mop.r.N 12, X(27), x14");
}

#[test]
fn mop_rr_0_1598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.0 X(17), x9, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, C8, B4, 83", "mop.rr.0 X(17), x9, x27");
}

#[test]
fn mop_rr_0_1599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch riscv64
        ; .feature zimop
        ; mop.rr.0 X(2), X(4), X(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 41, D2, 83", "mop.rr.0 X(2), X(4), X(29)");
}
