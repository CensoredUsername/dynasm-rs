
#[test]
fn enc_avx_vaddsd990() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm4, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0x58, 0xE3", "vaddsd xmm4, xmm0, xmm11");
}



#[test]
fn enc_avx_vaddsd991() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm11, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x58, 0xD9", "vaddsd xmm11, xmm12, xmm1");
}



#[test]
fn enc_avx_vaddsd992() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm12, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0x58, 0xE3", "vaddsd xmm12, xmm1, xmm11");
}



#[test]
fn enc_avx_vaddsd993() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm2, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x58, 0xD4", "vaddsd xmm2, xmm3, xmm12");
}



#[test]
fn enc_avx_vaddsd994() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm3, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x58, 0xDA", "vaddsd xmm3, xmm1, xmm2");
}



#[test]
fn enc_avx_vaddsd995() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x58, 0x58, 0x10", "vaddsd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd996() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm12, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x58, 0x60, 0x10", "vaddsd xmm12, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd997() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x58, 0x38", "vaddsd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vaddsd998() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x58, 0x24, 0x42", "vaddsd xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddsd999() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddsd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x58, 0x10", "vaddsd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vaddss1000() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm0, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x58, 0xC4", "vaddss xmm0, xmm0, xmm4");
}



#[test]
fn enc_avx_vaddss1001() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm4, xmm12, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x58, 0xE3", "vaddss xmm4, xmm12, xmm3");
}



#[test]
fn enc_avx_vaddss1002() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm12, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x58, 0xE7", "vaddss xmm12, xmm12, xmm15");
}



#[test]
fn enc_avx_vaddss1003() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm15, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x58, 0xFC", "vaddss xmm15, xmm0, xmm4");
}



#[test]
fn enc_avx_vaddss1004() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm4, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x58, 0xE0", "vaddss xmm4, xmm1, xmm0");
}



#[test]
fn enc_avx_vaddss1005() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x58, 0x38", "vaddss xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss1006() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm15, xmm4, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x58, 0x38", "vaddss xmm15, xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss1007() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm0, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x58, 0x00", "vaddss xmm0, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss1008() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm4, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x58, 0x20", "vaddss xmm4, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss1009() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaddss xmm12, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x58, 0x60, 0x10", "vaddss xmm12, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vaesdec1010() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdec xmm2, xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xDE, 0xD3", "vaesdec xmm2, xmm15, xmm11");
}



#[test]
fn enc_avx_vaesdec1011() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdec xmm4, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDE, 0xE4", "vaesdec xmm4, xmm1, xmm4");
}



#[test]
fn enc_avx_vaesdec1012() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdec xmm2, xmm12, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xDE, 0xD3", "vaesdec xmm2, xmm12, xmm3");
}



#[test]
fn enc_avx_vaesdec1013() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdec xmm1, xmm2, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xDE, 0x0A", "vaesdec xmm1, xmm2, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdec1014() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdec xmm12, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xDE, 0x22", "vaesdec xmm12, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdeclast1015() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdeclast xmm4, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xDF, 0x24, 0x42", "vaesdeclast xmm4, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesdeclast1016() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdeclast xmm3, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0xDF, 0xDB", "vaesdeclast xmm3, xmm4, xmm11");
}



#[test]
fn enc_avx_vaesdeclast1017() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdeclast xmm3, xmm11, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xDF, 0x18", "vaesdeclast xmm3, xmm11, OWORD [rax]");
}



#[test]
fn enc_avx_vaesdeclast1018() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesdeclast xmm3, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xDF, 0xDC", "vaesdeclast xmm3, xmm2, xmm12");
}



#[test]
fn enc_avx_vaesenc1019() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenc xmm15, xmm2, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xDC, 0xFA", "vaesenc xmm15, xmm2, xmm2");
}



#[test]
fn enc_avx_vaesenc1020() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenc xmm1, xmm12, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xDC, 0xC8", "vaesenc xmm1, xmm12, xmm0");
}



#[test]
fn enc_avx_vaesenc1021() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenc xmm4, xmm2, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xDC, 0x22", "vaesenc xmm4, xmm2, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesenc1022() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenc xmm12, xmm11, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0xDC, 0xE7", "vaesenc xmm12, xmm11, xmm15");
}



#[test]
fn enc_avx_vaesenc1023() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenc xmm0, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xDC, 0xC3", "vaesenc xmm0, xmm12, xmm11");
}



#[test]
fn enc_avx_vaesenclast1024() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenclast xmm1, xmm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xDD, 0xCB", "vaesenclast xmm1, xmm3, xmm11");
}



#[test]
fn enc_avx_vaesenclast1025() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenclast xmm3, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDD, 0xD8", "vaesenclast xmm3, xmm1, xmm0");
}



#[test]
fn enc_avx_vaesenclast1026() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenclast xmm3, xmm1, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDD, 0xD9", "vaesenclast xmm3, xmm1, xmm1");
}



#[test]
fn enc_avx_vaesenclast1027() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenclast xmm12, xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xDD, 0xE7", "vaesenclast xmm12, xmm0, xmm15");
}



#[test]
fn enc_avx_vaesenclast1028() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesenclast xmm3, xmm15, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xDD, 0x18", "vaesenclast xmm3, xmm15, OWORD [rax]");
}



#[test]
fn enc_avx_vaesimc1029() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesimc xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xCC", "vaesimc xmm1, xmm4");
}



#[test]
fn enc_avx_vaesimc1030() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesimc xmm2, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0x10", "vaesimc xmm2, OWORD [rax]");
}



#[test]
fn enc_avx_vaesimc1031() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesimc xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xD3", "vaesimc xmm2, xmm3");
}



#[test]
fn enc_avx_vaesimc1032() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesimc xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xDB, 0xFB", "vaesimc xmm15, xmm11");
}



#[test]
fn enc_avx_vaesimc1033() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaesimc xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xE4", "vaesimc xmm4, xmm4");
}



#[test]
fn enc_avx_vaeskeygenassist1034() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaeskeygenassist xmm2, xmm11, 64
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x79, 0xDF, 0xD3, 0x40", "vaeskeygenassist xmm2, xmm11, 64");
}



#[test]
fn enc_avx_vaeskeygenassist1035() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaeskeygenassist xmm12, xmm1, 32
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0xDF, 0xE1, 0x20", "vaeskeygenassist xmm12, xmm1, 32");
}



#[test]
fn enc_avx_vaeskeygenassist1036() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaeskeygenassist xmm12, OWORD [rdx], 112
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0xDF, 0x22, 0x70", "vaeskeygenassist xmm12, OWORD [rdx], 112");
}



#[test]
fn enc_avx_vaeskeygenassist1037() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaeskeygenassist xmm12, OWORD [rax], 98
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0xDF, 0x20, 0x62", "vaeskeygenassist xmm12, OWORD [rax], 98");
}



#[test]
fn enc_avx_vaeskeygenassist1038() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vaeskeygenassist xmm12, xmm15, 85
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0xDF, 0xE7, 0x55", "vaeskeygenassist xmm12, xmm15, 85");
}



#[test]
fn enc_avx_vbroadcastf1281039() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastf128 ymm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x0C, 0x42", "vbroadcastf128 ymm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastf1281040() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastf128 ymm11, OWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x1A, 0x58, 0x10", "vbroadcastf128 ymm11, OWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastf1281041() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastf128 ymm3, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x18", "vbroadcastf128 ymm3, OWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastf1281042() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastf128 ymm1, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x08", "vbroadcastf128 ymm1, OWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1043() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x14, 0x42", "vbroadcastsd ymm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1044() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x40, 0x10", "vbroadcastsd ymm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastsd1045() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x1C, 0x42", "vbroadcastsd ymm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1046() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x10", "vbroadcastsd ymm2, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1047() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xE3", "vbroadcastsd ymm4, xmm3");
}



#[test]
fn enc_avx_vbroadcastsd1048() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0xFB", "vbroadcastsd ymm15, xmm3");
}



#[test]
fn enc_avx_vbroadcastsd1049() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0xFA", "vbroadcastsd ymm15, xmm2");
}



#[test]
fn enc_avx_vbroadcastsd1050() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x7D, 0x19, 0xDB", "vbroadcastsd ymm3, xmm11");
}



#[test]
fn enc_avx_vbroadcastsd1051() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vbroadcastsd ymm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0xF8", "vbroadcastsd ymm15, xmm0");
}



#[test]
fn enc_avx_vcomisd1052() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xFC", "vcomisd xmm15, xmm4");
}



#[test]
fn enc_avx_vcomisd1053() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xDA", "vcomisd xmm11, xmm2");
}



#[test]
fn enc_avx_vcomisd1054() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xCA", "vcomisd xmm1, xmm2");
}



#[test]
fn enc_avx_vcomisd1055() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm1, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xCB", "vcomisd xmm1, xmm3");
}



#[test]
fn enc_avx_vcomisd1056() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm2, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xD0", "vcomisd xmm2, xmm0");
}



#[test]
fn enc_avx_vcomisd1057() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x00", "vcomisd xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcomisd1058() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x24, 0x42", "vcomisd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomisd1059() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x20", "vcomisd xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcomisd1060() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x10", "vcomisd xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcomisd1061() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomisd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x40, 0x10", "vcomisd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomiss1062() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0xC4", "vcomiss xmm0, xmm4");
}



#[test]
fn enc_avx_vcomiss1063() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0xF8", "vcomiss xmm15, xmm0");
}



#[test]
fn enc_avx_vcomiss1064() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0xE4", "vcomiss xmm4, xmm4");
}



#[test]
fn enc_avx_vcomiss1065() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0xFB", "vcomiss xmm15, xmm3");
}



#[test]
fn enc_avx_vcomiss1066() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm12, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0xE0", "vcomiss xmm12, xmm0");
}



#[test]
fn enc_avx_vcomiss1067() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x38", "vcomiss xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vcomiss1068() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x14, 0x42", "vcomiss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1069() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x08", "vcomiss xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vcomiss1070() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x24, 0x42", "vcomiss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1071() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcomiss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x50, 0x10", "vcomiss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd1072() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtdq2pd xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x38", "vcvtdq2pd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtdq2pd1073() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtdq2pd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x14, 0x42", "vcvtdq2pd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd1074() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtdq2pd xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x18", "vcvtdq2pd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtdq2pd1075() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtdq2pd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x0C, 0x42", "vcvtdq2pd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd1076() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtdq2pd xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x18", "vcvtdq2pd xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtph2ps1077() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtph2ps xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x60, 0x10", "vcvtph2ps xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1078() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtph2ps xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x20", "vcvtph2ps xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtph2ps1079() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtph2ps xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x24, 0x42", "vcvtph2ps xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtph2ps1080() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtph2ps xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x18", "vcvtph2ps xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd1081() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2pd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x3C, 0x42", "vcvtps2pd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtps2pd1082() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2pd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x58, 0x10", "vcvtps2pd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd1083() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2pd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x0C, 0x42", "vcvtps2pd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtps2pd1084() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2pd xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x20", "vcvtps2pd xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2ph1085() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm3, 26
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x1C, 0x42, 0x1A", "vcvtps2ph QWORD [rax * 2 + rdx], xmm3, 26");
}



#[test]
fn enc_avx_vcvtps2ph1086() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2ph QWORD [rax + 16], xmm1, 60
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x48, 0x10, 0x3C", "vcvtps2ph QWORD [rax + 16], xmm1, 60");
}



#[test]
fn enc_avx_vcvtps2ph1087() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm11, 99
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x1C, 0x42, 0x63", "vcvtps2ph QWORD [rax * 2 + rdx], xmm11, 99");
}



#[test]
fn enc_avx_vcvtps2ph1088() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2ph QWORD [rax], xmm4, 39
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x20, 0x27", "vcvtps2ph QWORD [rax], xmm4, 39");
}



#[test]
fn enc_avx_vcvtps2ph1089() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm11, 94
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x1C, 0x42, 0x5E", "vcvtps2ph QWORD [rax * 2 + rdx], xmm11, 94");
}



#[test]
fn enc_avx_vcvtsd2si1090() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rdx, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xD1", "vcvtsd2si rdx, xmm1");
}



#[test]
fn enc_avx_vcvtsd2si1091() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rcx, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xCC", "vcvtsd2si rcx, xmm12");
}



#[test]
fn enc_avx_vcvtsd2si1092() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rax, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC2", "vcvtsd2si rax, xmm2");
}



#[test]
fn enc_avx_vcvtsd2si1093() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rbx, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xDC", "vcvtsd2si rbx, xmm12");
}



#[test]
fn enc_avx_vcvtsd2si1094() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x14, 0x42", "vcvtsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2si1095() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x0C, 0x42", "vcvtsd2si rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2si1096() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x04, 0x42", "vcvtsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2si1097() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x10", "vcvtsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2ss1098() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm4, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x5A, 0xE7", "vcvtsd2ss xmm4, xmm3, xmm15");
}



#[test]
fn enc_avx_vcvtsd2ss1099() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm3, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5A, 0xDC", "vcvtsd2ss xmm3, xmm0, xmm4");
}



#[test]
fn enc_avx_vcvtsd2ss1100() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm0, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5A, 0xC0", "vcvtsd2ss xmm0, xmm11, xmm0");
}



#[test]
fn enc_avx_vcvtsd2ss1101() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm11, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5A, 0xD9", "vcvtsd2ss xmm11, xmm12, xmm1");
}



#[test]
fn enc_avx_vcvtsd2ss1102() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm1, xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0x5A, 0xCB", "vcvtsd2ss xmm1, xmm15, xmm11");
}



#[test]
fn enc_avx_vcvtsd2ss1103() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5A, 0x0C, 0x42", "vcvtsd2ss xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2ss1104() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5A, 0x40, 0x10", "vcvtsd2ss xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss1105() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm3, xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5A, 0x18", "vcvtsd2ss xmm3, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2ss1106() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5A, 0x18", "vcvtsd2ss xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2ss1107() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsd2ss xmm3, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5A, 0x1C, 0x42", "vcvtsd2ss xmm3, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1108() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2sd xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xEB, 0x2A, 0x0C, 0x42", "vcvtsi2sd xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1109() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2sd xmm4, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0x83, 0x2A, 0x24, 0x42", "vcvtsi2sd xmm4, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1110() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2sd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xEB, 0x2A, 0x38", "vcvtsi2sd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2sd1111() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2sd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0x9B, 0x2A, 0x18", "vcvtsi2sd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2sd1112() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2sd xmm4, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xDB, 0x2A, 0x20", "vcvtsi2sd xmm4, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2ss1113() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2ss xmm11, xmm2, rcx
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xEA, 0x2A, 0xD9", "vcvtsi2ss xmm11, xmm2, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss1114() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2ss xmm3, xmm11, rcx
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xA2, 0x2A, 0xD9", "vcvtsi2ss xmm3, xmm11, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss1115() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2ss xmm12, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xA2, 0x2A, 0x24, 0x42", "vcvtsi2ss xmm12, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1116() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2ss xmm3, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0x82, 0x2A, 0x1C, 0x42", "vcvtsi2ss xmm3, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1117() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtsi2ss xmm15, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xE2, 0x2A, 0x3C, 0x42", "vcvtsi2ss xmm15, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1118() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm1, xmm12, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x5A, 0xCC", "vcvtss2sd xmm1, xmm12, xmm12");
}



#[test]
fn enc_avx_vcvtss2sd1119() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm0, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x5A, 0xC3", "vcvtss2sd xmm0, xmm0, xmm11");
}



#[test]
fn enc_avx_vcvtss2sd1120() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm11, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x72, 0x5A, 0xDC", "vcvtss2sd xmm11, xmm1, xmm12");
}



#[test]
fn enc_avx_vcvtss2sd1121() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm12, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5A, 0xE2", "vcvtss2sd xmm12, xmm1, xmm2");
}



#[test]
fn enc_avx_vcvtss2sd1122() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm2, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x5A, 0xD4", "vcvtss2sd xmm2, xmm2, xmm12");
}



#[test]
fn enc_avx_vcvtss2sd1123() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5A, 0x38", "vcvtss2sd xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2sd1124() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5A, 0x10", "vcvtss2sd xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2sd1125() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm3, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5A, 0x1C, 0x42", "vcvtss2sd xmm3, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1126() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm4, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5A, 0x24, 0x42", "vcvtss2sd xmm4, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1127() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2sd xmm12, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x5A, 0x24, 0x42", "vcvtss2sd xmm12, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1128() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rax, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xC1", "vcvtss2si rax, xmm1");
}



#[test]
fn enc_avx_vcvtss2si1129() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rcx, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xC8", "vcvtss2si rcx, xmm0");
}



#[test]
fn enc_avx_vcvtss2si1130() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rax, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xC2", "vcvtss2si rax, xmm2");
}



#[test]
fn enc_avx_vcvtss2si1131() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rax, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xC0", "vcvtss2si rax, xmm0");
}



#[test]
fn enc_avx_vcvtss2si1132() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rbx, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xDA", "vcvtss2si rbx, xmm2");
}



#[test]
fn enc_avx_vcvtss2si1133() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rbx, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x58, 0x10", "vcvtss2si rbx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2si1134() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rdx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x14, 0x42", "vcvtss2si rdx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1135() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rbx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x1C, 0x42", "vcvtss2si rbx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1136() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvtss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x50, 0x10", "vcvtss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si1137() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rbx, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xDA", "vcvttsd2si rbx, xmm2");
}



#[test]
fn enc_avx_vcvttsd2si1138() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rax, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xC4", "vcvttsd2si rax, xmm4");
}



#[test]
fn enc_avx_vcvttsd2si1139() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rcx, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xCB", "vcvttsd2si rcx, xmm3");
}



#[test]
fn enc_avx_vcvttsd2si1140() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rbx, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xDC", "vcvttsd2si rbx, xmm4");
}



#[test]
fn enc_avx_vcvttsd2si1141() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x18", "vcvttsd2si rbx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvttsd2si1142() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x08", "vcvttsd2si rcx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvttsd2si1143() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttsd2si rdx, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x50, 0x10", "vcvttsd2si rdx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttss2si1144() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rcx, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xC9", "vcvttss2si rcx, xmm1");
}



#[test]
fn enc_avx_vcvttss2si1145() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rcx, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xC8", "vcvttss2si rcx, xmm0");
}



#[test]
fn enc_avx_vcvttss2si1146() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rax, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xC7", "vcvttss2si rax, xmm15");
}



#[test]
fn enc_avx_vcvttss2si1147() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rcx, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xCB", "vcvttss2si rcx, xmm3");
}



#[test]
fn enc_avx_vcvttss2si1148() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rax, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xC1", "vcvttss2si rax, xmm1");
}



#[test]
fn enc_avx_vcvttss2si1149() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x10", "vcvttss2si rdx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si1150() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x50, 0x10", "vcvttss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttss2si1151() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rdx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x14, 0x42", "vcvttss2si rdx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttss2si1152() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rbx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x1C, 0x42", "vcvttss2si rbx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttss2si1153() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vcvttss2si rax, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x04, 0x42", "vcvttss2si rax, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd1154() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm12, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0x5E, 0xE4", "vdivsd xmm12, xmm2, xmm12");
}



#[test]
fn enc_avx_vdivsd1155() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm4, xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5E, 0xE2", "vdivsd xmm4, xmm3, xmm2");
}



#[test]
fn enc_avx_vdivsd1156() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm3, xmm11, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5E, 0xDB", "vdivsd xmm3, xmm11, xmm3");
}



#[test]
fn enc_avx_vdivsd1157() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm4, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0x5E, 0xE3", "vdivsd xmm4, xmm0, xmm11");
}



#[test]
fn enc_avx_vdivsd1158() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm4, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5E, 0xE1", "vdivsd xmm4, xmm12, xmm1");
}



#[test]
fn enc_avx_vdivsd1159() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5E, 0x60, 0x10", "vdivsd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd1160() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm15, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5E, 0x3C, 0x42", "vdivsd xmm15, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd1161() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm3, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5E, 0x18", "vdivsd xmm3, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vdivsd1162() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm1, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5E, 0x08", "vdivsd xmm1, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vdivsd1163() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivsd xmm15, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5E, 0x3C, 0x42", "vdivsd xmm15, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1164() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm1, xmm12, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x5E, 0xCC", "vdivss xmm1, xmm12, xmm12");
}



#[test]
fn enc_avx_vdivss1165() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm1, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5E, 0xC8", "vdivss xmm1, xmm3, xmm0");
}



#[test]
fn enc_avx_vdivss1166() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm15, xmm4, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5A, 0x5E, 0xFF", "vdivss xmm15, xmm4, xmm15");
}



#[test]
fn enc_avx_vdivss1167() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5E, 0xCC", "vdivss xmm1, xmm3, xmm4");
}



#[test]
fn enc_avx_vdivss1168() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm4, xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5E, 0xE3", "vdivss xmm4, xmm2, xmm3");
}



#[test]
fn enc_avx_vdivss1169() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm0, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x5E, 0x40, 0x10", "vdivss xmm0, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivss1170() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm12, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5E, 0x24, 0x42", "vdivss xmm12, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1171() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm15, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5E, 0x78, 0x10", "vdivss xmm15, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivss1172() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm15, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5E, 0x38", "vdivss xmm15, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vdivss1173() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdivss xmm11, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x5E, 0x18", "vdivss xmm11, xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vdppd1174() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdppd xmm12, xmm15, OWORD [rax * 2 + rdx], 21
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x41, 0x24, 0x42, 0x15", "vdppd xmm12, xmm15, OWORD [rax * 2 + rdx], 21");
}



#[test]
fn enc_avx_vdppd1175() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdppd xmm2, xmm15, xmm3, 112
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x41, 0xD3, 0x70", "vdppd xmm2, xmm15, xmm3, 112");
}



#[test]
fn enc_avx_vdppd1176() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdppd xmm12, xmm0, OWORD [rdx], 53
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x41, 0x22, 0x35", "vdppd xmm12, xmm0, OWORD [rdx], 53");
}



#[test]
fn enc_avx_vdppd1177() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdppd xmm15, xmm1, xmm3, 115
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x41, 0xFB, 0x73", "vdppd xmm15, xmm1, xmm3, 115");
}



#[test]
fn enc_avx_vdppd1178() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vdppd xmm3, xmm12, xmm0, 42
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x41, 0xD8, 0x2A", "vdppd xmm3, xmm12, xmm0, 42");
}



#[test]
fn enc_avx_vextractf1281179() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractf128 xmm3, ymm15, 87
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x19, 0xFB, 0x57", "vextractf128 xmm3, ymm15, 87");
}



#[test]
fn enc_avx_vextractf1281180() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractf128 xmm15, ymm2, 53
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x7D, 0x19, 0xD7, 0x35", "vextractf128 xmm15, ymm2, 53");
}



#[test]
fn enc_avx_vextractf1281181() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractf128 xmm2, ymm4, 35
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xE2, 0x23", "vextractf128 xmm2, ymm4, 35");
}



#[test]
fn enc_avx_vextractf1281182() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractf128 xmm1, ymm2, 86
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xD1, 0x56", "vextractf128 xmm1, ymm2, 86");
}



#[test]
fn enc_avx_vextractf1281183() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractf128 OWORD [rdx], ymm12, 3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x19, 0x22, 0x03", "vextractf128 OWORD [rdx], ymm12, 3");
}



#[test]
fn enc_avx_vextractps1184() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractps eax, xmm1, 99
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xC8, 0x63", "vextractps eax, xmm1, 99");
}



#[test]
fn enc_avx_vextractps1185() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractps DWORD [rax], xmm3, 63
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0x18, 0x3F", "vextractps DWORD [rax], xmm3, 63");
}



#[test]
fn enc_avx_vextractps1186() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractps DWORD [rax], xmm2, 11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0x10, 0x0B", "vextractps DWORD [rax], xmm2, 11");
}



#[test]
fn enc_avx_vextractps1187() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractps eax, xmm1, 56
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xC8, 0x38", "vextractps eax, xmm1, 56");
}



#[test]
fn enc_avx_vextractps1188() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vextractps eax, xmm1, 19
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xC8, 0x13", "vextractps eax, xmm1, 19");
}



#[test]
fn enc_avx_vinsertf1281189() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertf128 ymm11, ymm4, OWORD [rax], 121
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x5D, 0x18, 0x18, 0x79", "vinsertf128 ymm11, ymm4, OWORD [rax], 121");
}



#[test]
fn enc_avx_vinsertf1281190() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertf128 ymm3, ymm0, xmm12, 29
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x7D, 0x18, 0xDC, 0x1D", "vinsertf128 ymm3, ymm0, xmm12, 29");
}



#[test]
fn enc_avx_vinsertf1281191() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertf128 ymm0, ymm3, xmm11, 89
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x65, 0x18, 0xC3, 0x59", "vinsertf128 ymm0, ymm3, xmm11, 89");
}



#[test]
fn enc_avx_vinsertf1281192() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertf128 ymm0, ymm3, xmm4, 113
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x65, 0x18, 0xC4, 0x71", "vinsertf128 ymm0, ymm3, xmm4, 113");
}



#[test]
fn enc_avx_vinsertf1281193() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertf128 ymm3, ymm1, xmm4, 33
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x75, 0x18, 0xDC, 0x21", "vinsertf128 ymm3, ymm1, xmm4, 33");
}



#[test]
fn enc_avx_vinsertps1194() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm12, xmm11, xmm11, 126
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x21, 0x21, 0xE3, 0x7E", "vinsertps xmm12, xmm11, xmm11, 126");
}



#[test]
fn enc_avx_vinsertps1195() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm4, xmm4, xmm4, 34
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x21, 0xE4, 0x22", "vinsertps xmm4, xmm4, xmm4, 34");
}



#[test]
fn enc_avx_vinsertps1196() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm15, xmm15, xmm15, 16
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x01, 0x21, 0xFF, 0x10", "vinsertps xmm15, xmm15, xmm15, 16");
}



#[test]
fn enc_avx_vinsertps1197() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm15, xmm0, xmm1, 102
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x21, 0xF9, 0x66", "vinsertps xmm15, xmm0, xmm1, 102");
}



#[test]
fn enc_avx_vinsertps1198() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm4, xmm2, xmm1, 118
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x21, 0xE1, 0x76", "vinsertps xmm4, xmm2, xmm1, 118");
}



#[test]
fn enc_avx_vinsertps1199() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm1, xmm12, DWORD [rax + 16], 3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x21, 0x48, 0x10, 0x03", "vinsertps xmm1, xmm12, DWORD [rax + 16], 3");
}



#[test]
fn enc_avx_vinsertps1200() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm4, xmm2, DWORD [rax * 2 + rdx], 125
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x21, 0x24, 0x42, 0x7D", "vinsertps xmm4, xmm2, DWORD [rax * 2 + rdx], 125");
}



#[test]
fn enc_avx_vinsertps1201() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm1, xmm3, DWORD [rax + 16], 91
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x21, 0x48, 0x10, 0x5B", "vinsertps xmm1, xmm3, DWORD [rax + 16], 91");
}



#[test]
fn enc_avx_vinsertps1202() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm0, xmm0, DWORD [rax], 86
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x21, 0x00, 0x56", "vinsertps xmm0, xmm0, DWORD [rax], 86");
}



#[test]
fn enc_avx_vinsertps1203() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vinsertps xmm2, xmm0, DWORD [rax * 2 + rdx], 11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x21, 0x14, 0x42, 0x0B", "vinsertps xmm2, xmm0, DWORD [rax * 2 + rdx], 11");
}



#[test]
fn enc_avx_vldmxcsr1204() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldmxcsr DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x10", "vldmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vldmxcsr1205() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x14, 0x42", "vldmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1206() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldqqu ymm15, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x3C, 0x42", "vldqqu ymm15, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1207() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldqqu ymm11, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x1C, 0x42", "vldqqu ymm11, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1208() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldqqu ymm1, YWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x48, 0x10", "vldqqu ymm1, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu1209() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldqqu ymm12, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x24, 0x42", "vldqqu ymm12, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1210() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vldqqu ymm0, YWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x00", "vldqqu ymm0, YWORD [rax]");
}



#[test]
fn enc_avx_vmaskmovdqu1211() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaskmovdqu xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xF7, 0xD9", "vmaskmovdqu xmm11, xmm1");
}



#[test]
fn enc_avx_vmaskmovdqu1212() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaskmovdqu xmm4, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xE0", "vmaskmovdqu xmm4, xmm0");
}



#[test]
fn enc_avx_vmaskmovdqu1213() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaskmovdqu xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xF7, 0xDC", "vmaskmovdqu xmm11, xmm4");
}



#[test]
fn enc_avx_vmaskmovdqu1214() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaskmovdqu xmm12, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xF7, 0xE4", "vmaskmovdqu xmm12, xmm4");
}



#[test]
fn enc_avx_vmaskmovdqu1215() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaskmovdqu xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xCC", "vmaskmovdqu xmm1, xmm4");
}



#[test]
fn enc_avx_vmaxsd1216() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm1, xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5F, 0xCC", "vmaxsd xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vmaxsd1217() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm11, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5F, 0xD9", "vmaxsd xmm11, xmm3, xmm1");
}



#[test]
fn enc_avx_vmaxsd1218() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm3, xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5F, 0xDC", "vmaxsd xmm3, xmm15, xmm4");
}



#[test]
fn enc_avx_vmaxsd1219() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm2, xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x5F, 0xD4", "vmaxsd xmm2, xmm11, xmm12");
}



#[test]
fn enc_avx_vmaxsd1220() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm4, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5F, 0xE4", "vmaxsd xmm4, xmm4, xmm4");
}



#[test]
fn enc_avx_vmaxsd1221() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5F, 0x20", "vmaxsd xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1222() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm15, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5F, 0x38", "vmaxsd xmm15, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1223() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5F, 0x48, 0x10", "vmaxsd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxsd1224() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm0, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5F, 0x00", "vmaxsd xmm0, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1225() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxsd xmm11, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x5F, 0x58, 0x10", "vmaxsd xmm11, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss1226() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm11, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5F, 0xD8", "vmaxss xmm11, xmm1, xmm0");
}



#[test]
fn enc_avx_vmaxss1227() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm11, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0x5F, 0xDF", "vmaxss xmm11, xmm3, xmm15");
}



#[test]
fn enc_avx_vmaxss1228() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm2, xmm15, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0x5F, 0xD7", "vmaxss xmm2, xmm15, xmm15");
}



#[test]
fn enc_avx_vmaxss1229() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm1, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5F, 0xCB", "vmaxss xmm1, xmm4, xmm3");
}



#[test]
fn enc_avx_vmaxss1230() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm0, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x5F, 0xC3", "vmaxss xmm0, xmm1, xmm11");
}



#[test]
fn enc_avx_vmaxss1231() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5F, 0x0C, 0x42", "vmaxss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1232() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm2, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5F, 0x50, 0x10", "vmaxss xmm2, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss1233() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm2, xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5F, 0x10", "vmaxss xmm2, xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vmaxss1234() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm12, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5F, 0x24, 0x42", "vmaxss xmm12, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1235() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmaxss xmm3, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5F, 0x1C, 0x42", "vmaxss xmm3, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1236() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm12, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5D, 0xE0", "vminsd xmm12, xmm11, xmm0");
}



#[test]
fn enc_avx_vminsd1237() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm2, xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5D, 0xD3", "vminsd xmm2, xmm2, xmm3");
}



#[test]
fn enc_avx_vminsd1238() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm2, xmm4, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5D, 0xD0", "vminsd xmm2, xmm4, xmm0");
}



#[test]
fn enc_avx_vminsd1239() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm15, xmm4, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0x5D, 0xFF", "vminsd xmm15, xmm4, xmm15");
}



#[test]
fn enc_avx_vminsd1240() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm2, xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5D, 0xD1", "vminsd xmm2, xmm11, xmm1");
}



#[test]
fn enc_avx_vminsd1241() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5D, 0x18", "vminsd xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vminsd1242() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm12, xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5D, 0x20", "vminsd xmm12, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vminsd1243() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm11, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5D, 0x1C, 0x42", "vminsd xmm11, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1244() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5D, 0x58, 0x10", "vminsd xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd1245() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminsd xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5D, 0x18", "vminsd xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vminss1246() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm1, xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5D, 0xCB", "vminss xmm1, xmm2, xmm3");
}



#[test]
fn enc_avx_vminss1247() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm11, xmm1, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5D, 0xD9", "vminss xmm11, xmm1, xmm1");
}



#[test]
fn enc_avx_vminss1248() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm12, xmm15, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5D, 0xE1", "vminss xmm12, xmm15, xmm1");
}



#[test]
fn enc_avx_vminss1249() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm2, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x5D, 0xD2", "vminss xmm2, xmm1, xmm2");
}



#[test]
fn enc_avx_vminss1250() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm12, xmm3, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5D, 0xE3", "vminss xmm12, xmm3, xmm3");
}



#[test]
fn enc_avx_vminss1251() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5D, 0x18", "vminss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vminss1252() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm11, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5D, 0x58, 0x10", "vminss xmm11, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss1253() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm1, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5D, 0x48, 0x10", "vminss xmm1, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss1254() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm4, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5D, 0x24, 0x42", "vminss xmm4, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminss1255() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vminss xmm1, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5D, 0x0C, 0x42", "vminss xmm1, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovapd1256() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd OWORD [rax], xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x29, 0x18", "vmovapd OWORD [rax], xmm3");
}



#[test]
fn enc_avx_vmovapd1257() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x28, 0xDC", "vmovapd xmm3, xmm12");
}



#[test]
fn enc_avx_vmovapd1258() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xCA", "vmovapd xmm1, xmm2");
}



#[test]
fn enc_avx_vmovapd1259() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd xmm3, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xDB", "vmovapd xmm3, xmm3");
}



#[test]
fn enc_avx_vmovapd1260() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xD9", "vmovapd xmm3, xmm1");
}



#[test]
fn enc_avx_vmovapd1261() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd YWORD [rdx], ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x29, 0x1A", "vmovapd YWORD [rdx], ymm3");
}



#[test]
fn enc_avx_vmovapd1262() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd ymm4, ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x28, 0xE3", "vmovapd ymm4, ymm3");
}



#[test]
fn enc_avx_vmovapd1263() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd ymm15, ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x28, 0xFF", "vmovapd ymm15, ymm15");
}



#[test]
fn enc_avx_vmovapd1264() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd ymm12, ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x28, 0xE7", "vmovapd ymm12, ymm15");
}



#[test]
fn enc_avx_vmovapd1265() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovapd ymm4, ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x28, 0xE2", "vmovapd ymm4, ymm2");
}



#[test]
fn enc_avx_vmovaps1266() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x28, 0xDC", "vmovaps xmm11, xmm12");
}



#[test]
fn enc_avx_vmovaps1267() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps OWORD [rax], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x29, 0x00", "vmovaps OWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovaps1268() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x28, 0xFB", "vmovaps xmm15, xmm3");
}



#[test]
fn enc_avx_vmovaps1269() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps xmm12, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x28, 0xE4", "vmovaps xmm12, xmm12");
}



#[test]
fn enc_avx_vmovaps1270() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps OWORD [rax], xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x29, 0x18", "vmovaps OWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovaps1271() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps ymm11, ymm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x28, 0xD9", "vmovaps ymm11, ymm1");
}



#[test]
fn enc_avx_vmovaps1272() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps YWORD [rdx], ymm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x29, 0x02", "vmovaps YWORD [rdx], ymm0");
}



#[test]
fn enc_avx_vmovaps1273() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps YWORD [rax], ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x29, 0x18", "vmovaps YWORD [rax], ymm3");
}



#[test]
fn enc_avx_vmovaps1274() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps ymm11, ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7C, 0x28, 0xDF", "vmovaps ymm11, ymm15");
}



#[test]
fn enc_avx_vmovaps1275() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovaps YWORD [rax * 2 + rdx], ymm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x29, 0x04, 0x42", "vmovaps YWORD [rax * 2 + rdx], ymm0");
}



#[test]
fn enc_avx_vmovd1276() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd xmm3, eax
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0xD8", "vmovd xmm3, eax");
}



#[test]
fn enc_avx_vmovd1277() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd xmm15, eax
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6E, 0xF8", "vmovd xmm15, eax");
}



#[test]
fn enc_avx_vmovd1278() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd xmm2, eax
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0xD0", "vmovd xmm2, eax");
}



#[test]
fn enc_avx_vmovd1279() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd eax, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xD8", "vmovd eax, xmm3");
}



#[test]
fn enc_avx_vmovd1280() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd DWORD [rax], xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0x18", "vmovd DWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovd1281() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd DWORD [rax], xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0x20", "vmovd DWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovd1282() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd eax, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xC8", "vmovd eax, xmm1");
}



#[test]
fn enc_avx_vmovd1283() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovd DWORD [rax], xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0x10", "vmovd DWORD [rax], xmm2");
}



#[test]
fn enc_avx_vmovddup1284() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovddup xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x12, 0x24, 0x42", "vmovddup xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1285() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovddup xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x14, 0x42", "vmovddup xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1286() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovddup xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x58, 0x10", "vmovddup xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovddup1287() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovddup xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x12, 0x18", "vmovddup xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovddup1288() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovddup xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x12, 0x3C, 0x42", "vmovddup xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovdqa1289() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa xmm12, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6F, 0xE3", "vmovdqa xmm12, xmm3");
}



#[test]
fn enc_avx_vmovdqa1290() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6F, 0xDA", "vmovdqa xmm3, xmm2");
}



#[test]
fn enc_avx_vmovdqa1291() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa xmm15, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x6F, 0xFC", "vmovdqa xmm15, xmm12");
}



#[test]
fn enc_avx_vmovdqa1292() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa xmm2, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6F, 0xD0", "vmovdqa xmm2, xmm0");
}



#[test]
fn enc_avx_vmovdqa1293() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6F, 0xD8", "vmovdqa xmm11, xmm0");
}



#[test]
fn enc_avx_vmovdqa1294() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa ymm3, ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xDB", "vmovdqa ymm3, ymm3");
}



#[test]
fn enc_avx_vmovdqa1295() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa ymm3, ymm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xD8", "vmovdqa ymm3, ymm0");
}



#[test]
fn enc_avx_vmovdqa1296() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa ymm15, ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xFC", "vmovdqa ymm15, ymm4");
}



#[test]
fn enc_avx_vmovdqa1297() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa ymm15, ymm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xF9", "vmovdqa ymm15, ymm1");
}



#[test]
fn enc_avx_vmovdqa1298() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqa ymm15, ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xFB", "vmovdqa ymm15, ymm3");
}



#[test]
fn enc_avx_vmovdqu1299() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu OWORD [rdx], xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7F, 0x12", "vmovdqu OWORD [rdx], xmm2");
}



#[test]
fn enc_avx_vmovdqu1300() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x6F, 0xC4", "vmovdqu xmm0, xmm12");
}



#[test]
fn enc_avx_vmovdqu1301() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu xmm12, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xE3", "vmovdqu xmm12, xmm3");
}



#[test]
fn enc_avx_vmovdqu1302() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu xmm12, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xE4", "vmovdqu xmm12, xmm4");
}



#[test]
fn enc_avx_vmovdqu1303() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu OWORD [rax], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7F, 0x08", "vmovdqu OWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovdqu1304() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu YWORD [rax], ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x18", "vmovdqu YWORD [rax], ymm3");
}



#[test]
fn enc_avx_vmovdqu1305() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu ymm12, ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7E, 0x6F, 0xE7", "vmovdqu ymm12, ymm15");
}



#[test]
fn enc_avx_vmovdqu1306() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu ymm4, ymm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xE3", "vmovdqu ymm4, ymm11");
}



#[test]
fn enc_avx_vmovdqu1307() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu YWORD [rax], ymm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x7F, 0x18", "vmovdqu YWORD [rax], ymm11");
}



#[test]
fn enc_avx_vmovdqu1308() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovdqu YWORD [rax * 2 + rdx], ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x1C, 0x42", "vmovdqu YWORD [rax * 2 + rdx], ymm3");
}



#[test]
fn enc_avx_vmovhlps1309() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhlps xmm2, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x12, 0xD1", "vmovhlps xmm2, xmm0, xmm1");
}



#[test]
fn enc_avx_vmovhlps1310() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhlps xmm4, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x12, 0xE1", "vmovhlps xmm4, xmm3, xmm1");
}



#[test]
fn enc_avx_vmovhlps1311() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhlps xmm12, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x70, 0x12, 0xE2", "vmovhlps xmm12, xmm1, xmm2");
}



#[test]
fn enc_avx_vmovhlps1312() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhlps xmm12, xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x12, 0xE4", "vmovhlps xmm12, xmm0, xmm12");
}



#[test]
fn enc_avx_vmovhlps1313() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhlps xmm11, xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x68, 0x12, 0xDC", "vmovhlps xmm11, xmm2, xmm4");
}



#[test]
fn enc_avx_vmovhpd1314() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd xmm12, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0x16, 0x24, 0x42", "vmovhpd xmm12, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1315() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0x16, 0x3C, 0x42", "vmovhpd xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1316() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x16, 0x58, 0x10", "vmovhpd xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhpd1317() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x16, 0x14, 0x42", "vmovhpd xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1318() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0x16, 0x38", "vmovhpd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhpd1319() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x58, 0x10", "vmovhpd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovhpd1320() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x60, 0x10", "vmovhpd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovhpd1321() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd QWORD [rax + 16], xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x17, 0x78, 0x10", "vmovhpd QWORD [rax + 16], xmm15");
}



#[test]
fn enc_avx_vmovhpd1322() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhpd QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x17, 0x1C, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovhps1323() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x16, 0x60, 0x10", "vmovhps xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1324() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps xmm11, xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x70, 0x16, 0x18", "vmovhps xmm11, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps1325() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps xmm11, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x58, 0x16, 0x18", "vmovhps xmm11, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps1326() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps xmm15, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x58, 0x16, 0x78, 0x10", "vmovhps xmm15, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1327() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps xmm0, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA0, 0x16, 0x00", "vmovhps xmm0, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps1328() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x3C, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovhps1329() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps QWORD [rax], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x08", "vmovhps QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovhps1330() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x60, 0x10", "vmovhps QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovhps1331() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x24, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovhps1332() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovhps QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x48, 0x10", "vmovhps QWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovlhps1333() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlhps xmm15, xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x20, 0x16, 0xFA", "vmovlhps xmm15, xmm11, xmm2");
}



#[test]
fn enc_avx_vmovlhps1334() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlhps xmm15, xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x68, 0x16, 0xFB", "vmovlhps xmm15, xmm2, xmm3");
}



#[test]
fn enc_avx_vmovlhps1335() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlhps xmm2, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x16, 0xD4", "vmovlhps xmm2, xmm1, xmm4");
}



#[test]
fn enc_avx_vmovlhps1336() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlhps xmm1, xmm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x60, 0x16, 0xCB", "vmovlhps xmm1, xmm3, xmm11");
}



#[test]
fn enc_avx_vmovlhps1337() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlhps xmm12, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x16, 0xE3", "vmovlhps xmm12, xmm0, xmm3");
}



#[test]
fn enc_avx_vmovlpd1338() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x12, 0x48, 0x10", "vmovlpd xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd1339() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd xmm4, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0x12, 0x20", "vmovlpd xmm4, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1340() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0x12, 0x60, 0x10", "vmovlpd xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd1341() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd xmm12, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0x12, 0x24, 0x42", "vmovlpd xmm12, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlpd1342() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0x12, 0x60, 0x10", "vmovlpd xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd1343() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd QWORD [rax], xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x13, 0x18", "vmovlpd QWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovlpd1344() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x60, 0x10", "vmovlpd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovlpd1345() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x04, 0x42", "vmovlpd QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovlpd1346() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x48, 0x10", "vmovlpd QWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovlpd1347() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlpd QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x24, 0x42", "vmovlpd QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovlps1348() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps QWORD [rax], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x08", "vmovlps QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovlps1349() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps QWORD [rax], xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x10", "vmovlps QWORD [rax], xmm2");
}



#[test]
fn enc_avx_vmovlps1350() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps QWORD [rax], xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x18", "vmovlps QWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovlps1351() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x24, 0x42", "vmovlps QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_avx_vmovlps1352() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x58, 0x12, 0x38", "vmovlps xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps1353() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps xmm3, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD8, 0x12, 0x58, 0x10", "vmovlps xmm3, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlps1354() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps xmm1, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x12, 0x0C, 0x42", "vmovlps xmm1, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlps1355() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE8, 0x12, 0x1C, 0x42", "vmovlps xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlps1356() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovlps xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x12, 0x04, 0x42", "vmovlps xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovntqq1357() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovntqq YWORD [rax], ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x20", "vmovntqq YWORD [rax], ymm4");
}



#[test]
fn enc_avx_vmovntqq1358() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovntqq YWORD [rax * 2 + rdx], ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xE7, 0x3C, 0x42", "vmovntqq YWORD [rax * 2 + rdx], ymm15");
}



#[test]
fn enc_avx_vmovntqq1359() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovntqq YWORD [rax + 16], ymm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x40, 0x10", "vmovntqq YWORD [rax + 16], ymm0");
}



#[test]
fn enc_avx_vmovntqq1360() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovntqq YWORD [rax + 16], ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x50, 0x10", "vmovntqq YWORD [rax + 16], ymm2");
}



#[test]
fn enc_avx_vmovntqq1361() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovntqq YWORD [rax * 2 + rdx], ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x1C, 0x42", "vmovntqq YWORD [rax * 2 + rdx], ymm3");
}



#[test]
fn enc_avx_vmovq1362() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq [rax], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x00", "vmovq [rax], xmm0");
}



#[test]
fn enc_avx_vmovq1363() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq rax, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xF9, 0x7E, 0xD8", "vmovq rax, xmm11");
}



#[test]
fn enc_avx_vmovq1364() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq [rax], xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x38", "vmovq [rax], xmm15");
}



#[test]
fn enc_avx_vmovq1365() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq rax, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xE0", "vmovq rax, xmm4");
}



#[test]
fn enc_avx_vmovq1366() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm1, [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x08", "vmovq xmm1, [rax]");
}



#[test]
fn enc_avx_vmovq1367() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm11, rax
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xF9, 0x6E, 0xD8", "vmovq xmm11, rax");
}



#[test]
fn enc_avx_vmovq1368() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm12, rax
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xF9, 0x6E, 0xE0", "vmovq xmm12, rax");
}



#[test]
fn enc_avx_vmovq1369() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, rax
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xC0", "vmovq xmm0, rax");
}



#[test]
fn enc_avx_vmovq1370() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xDC", "vmovq xmm11, xmm4");
}



#[test]
fn enc_avx_vmovq1371() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm2, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xD0", "vmovq xmm2, xmm0");
}



#[test]
fn enc_avx_vmovq1372() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xC2", "vmovq xmm0, xmm2");
}



#[test]
fn enc_avx_vmovq1373() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xD4", "vmovq xmm2, xmm4");
}



#[test]
fn enc_avx_vmovq1374() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xC7", "vmovq xmm0, xmm15");
}



#[test]
fn enc_avx_vmovq1375() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x58, 0x10", "vmovq QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovq1376() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq QWORD [rax], xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x38", "vmovq QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovq1377() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq QWORD [rax], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x00", "vmovq QWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovq1378() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq QWORD [rax + 16], xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x78, 0x10", "vmovq QWORD [rax + 16], xmm15");
}



#[test]
fn enc_avx_vmovq1379() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xC3", "vmovq xmm0, xmm11");
}



#[test]
fn enc_avx_vmovq1380() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xDA", "vmovq xmm11, xmm2");
}



#[test]
fn enc_avx_vmovq1381() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xE2", "vmovq xmm12, xmm2");
}



#[test]
fn enc_avx_vmovq1382() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xDF", "vmovq xmm3, xmm15");
}



#[test]
fn enc_avx_vmovq1383() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xC1", "vmovq xmm0, xmm1");
}



#[test]
fn enc_avx_vmovq1384() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x48, 0x10", "vmovq xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1385() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0x1C, 0x42", "vmovq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovq1386() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x08", "vmovq xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovq1387() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x04, 0x42", "vmovq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovq1388() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x40, 0x10", "vmovq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovqqa1389() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm4, YWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0x22", "vmovqqa ymm4, YWORD [rdx]");
}



#[test]
fn enc_avx_vmovqqa1390() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm3, ymm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xDB", "vmovqqa ymm3, ymm11");
}



#[test]
fn enc_avx_vmovqqa1391() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm3, YWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0x18", "vmovqqa ymm3, YWORD [rax]");
}



#[test]
fn enc_avx_vmovqqa1392() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm12, ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xE3", "vmovqqa ymm12, ymm3");
}



#[test]
fn enc_avx_vmovqqa1393() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm0, YWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0x00", "vmovqqa ymm0, YWORD [rax]");
}



#[test]
fn enc_avx_vmovqqa1394() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm11, ymm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x6F, 0xDC", "vmovqqa ymm11, ymm12");
}



#[test]
fn enc_avx_vmovqqa1395() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm4, ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xE4", "vmovqqa ymm4, ymm4");
}



#[test]
fn enc_avx_vmovqqa1396() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm2, ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xD2", "vmovqqa ymm2, ymm2");
}



#[test]
fn enc_avx_vmovqqa1397() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm1, ymm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xCC", "vmovqqa ymm1, ymm12");
}



#[test]
fn enc_avx_vmovqqa1398() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqa ymm3, ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xDA", "vmovqqa ymm3, ymm2");
}



#[test]
fn enc_avx_vmovqqu1399() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm2, ymm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xD4", "vmovqqu ymm2, ymm12");
}



#[test]
fn enc_avx_vmovqqu1400() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu YWORD [rdx], ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x22", "vmovqqu YWORD [rdx], ymm4");
}



#[test]
fn enc_avx_vmovqqu1401() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu YWORD [rax * 2 + rdx], ymm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x04, 0x42", "vmovqqu YWORD [rax * 2 + rdx], ymm0");
}



#[test]
fn enc_avx_vmovqqu1402() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm11, ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xDA", "vmovqqu ymm11, ymm2");
}



#[test]
fn enc_avx_vmovqqu1403() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm3, ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xDA", "vmovqqu ymm3, ymm2");
}



#[test]
fn enc_avx_vmovqqu1404() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm11, ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xDC", "vmovqqu ymm11, ymm4");
}



#[test]
fn enc_avx_vmovqqu1405() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm11, YWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0x18", "vmovqqu ymm11, YWORD [rax]");
}



#[test]
fn enc_avx_vmovqqu1406() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm0, ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xC7", "vmovqqu ymm0, ymm15");
}



#[test]
fn enc_avx_vmovqqu1407() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm3, ymm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xDB", "vmovqqu ymm3, ymm11");
}



#[test]
fn enc_avx_vmovqqu1408() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovqqu ymm4, ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xE4", "vmovqqu ymm4, ymm4");
}



#[test]
fn enc_avx_vmovsd1409() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm3, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0xD9", "vmovsd xmm3, xmm0, xmm1");
}



#[test]
fn enc_avx_vmovsd1410() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm1, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x10, 0xCB", "vmovsd xmm1, xmm12, xmm11");
}



#[test]
fn enc_avx_vmovsd1411() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm2, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x10, 0xD4", "vmovsd xmm2, xmm4, xmm4");
}



#[test]
fn enc_avx_vmovsd1412() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm1, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x10, 0xC8", "vmovsd xmm1, xmm15, xmm0");
}



#[test]
fn enc_avx_vmovsd1413() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm11, xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x10, 0xDA", "vmovsd xmm11, xmm12, xmm2");
}



#[test]
fn enc_avx_vmovsd1414() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x58, 0x10", "vmovsd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovsd1415() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd QWORD [rax], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x08", "vmovsd QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovsd1416() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd QWORD [rax], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x00", "vmovsd QWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovsd1417() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd QWORD [rax + 16], xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x60, 0x10", "vmovsd QWORD [rax + 16], xmm12");
}



#[test]
fn enc_avx_vmovsd1418() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x0C, 0x42", "vmovsd QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_avx_vmovsd1419() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x10, 0x1C, 0x42", "vmovsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1420() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x0C, 0x42", "vmovsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1421() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x10", "vmovsd xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmovsd1422() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x18", "vmovsd xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmovsd1423() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x1C, 0x42", "vmovsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1424() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm3, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0xDB", "vmovsd xmm3, xmm0, xmm3");
}



#[test]
fn enc_avx_vmovsd1425() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm0, xmm4, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0x10, 0xC4", "vmovsd xmm0, xmm4, xmm12");
}



#[test]
fn enc_avx_vmovsd1426() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm2, xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x10, 0xD2", "vmovsd xmm2, xmm3, xmm2");
}



#[test]
fn enc_avx_vmovsd1427() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm15, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0x10, 0xFB", "vmovsd xmm15, xmm0, xmm11");
}



#[test]
fn enc_avx_vmovsd1428() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovsd xmm11, xmm11, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x23, 0x10, 0xDF", "vmovsd xmm11, xmm11, xmm15");
}



#[test]
fn enc_avx_vmovss1429() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x58, 0x10", "vmovss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovss1430() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x08", "vmovss xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vmovss1431() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x14, 0x42", "vmovss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovss1432() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x10", "vmovss xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vmovss1433() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm4, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x10, 0xE3", "vmovss xmm4, xmm0, xmm11");
}



#[test]
fn enc_avx_vmovss1434() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm1, xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x10, 0xCA", "vmovss xmm1, xmm11, xmm2");
}



#[test]
fn enc_avx_vmovss1435() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm3, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x10, 0xDC", "vmovss xmm3, xmm4, xmm4");
}



#[test]
fn enc_avx_vmovss1436() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm15, xmm15, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0x10, 0xFF", "vmovss xmm15, xmm15, xmm15");
}



#[test]
fn enc_avx_vmovss1437() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm11, xmm15, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0x10, 0xDC", "vmovss xmm11, xmm15, xmm12");
}



#[test]
fn enc_avx_vmovss1438() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss DWORD [rax + 16], xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x48, 0x10", "vmovss DWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovss1439() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss DWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x11, 0x24, 0x42", "vmovss DWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_avx_vmovss1440() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss DWORD [rax], xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x11, 0x20", "vmovss DWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovss1441() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss DWORD [rax], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x00", "vmovss DWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovss1442() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss DWORD [rax + 16], xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x58, 0x10", "vmovss DWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovss1443() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm15, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x72, 0x10, 0xFF", "vmovss xmm15, xmm1, xmm15");
}



#[test]
fn enc_avx_vmovss1444() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm2, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x10, 0xD0", "vmovss xmm2, xmm11, xmm0");
}



#[test]
fn enc_avx_vmovss1445() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm4, xmm2, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x10, 0xE1", "vmovss xmm4, xmm2, xmm1");
}



#[test]
fn enc_avx_vmovss1446() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm12, xmm2, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0x10, 0xE3", "vmovss xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vmovss1447() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovss xmm3, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x10, 0xDA", "vmovss xmm3, xmm1, xmm2");
}



#[test]
fn enc_avx_vmovupd1448() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xDA", "vmovupd xmm3, xmm2");
}



#[test]
fn enc_avx_vmovupd1449() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd xmm2, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xD1", "vmovupd xmm2, xmm1");
}



#[test]
fn enc_avx_vmovupd1450() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x10, 0xCB", "vmovupd xmm1, xmm11");
}



#[test]
fn enc_avx_vmovupd1451() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd xmm1, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xCB", "vmovupd xmm1, xmm3");
}



#[test]
fn enc_avx_vmovupd1452() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x10, 0xD9", "vmovupd xmm11, xmm1");
}



#[test]
fn enc_avx_vmovupd1453() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd ymm4, ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xE4", "vmovupd ymm4, ymm4");
}



#[test]
fn enc_avx_vmovupd1454() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd YWORD [rax], ymm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x11, 0x18", "vmovupd YWORD [rax], ymm11");
}



#[test]
fn enc_avx_vmovupd1455() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd YWORD [rax * 2 + rdx], ymm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x11, 0x14, 0x42", "vmovupd YWORD [rax * 2 + rdx], ymm2");
}



#[test]
fn enc_avx_vmovupd1456() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd ymm4, ymm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xE0", "vmovupd ymm4, ymm0");
}



#[test]
fn enc_avx_vmovupd1457() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovupd ymm11, ymm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x10, 0xDB", "vmovupd ymm11, ymm11");
}



#[test]
fn enc_avx_vmovups1458() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x10, 0xDF", "vmovups xmm3, xmm15");
}



#[test]
fn enc_avx_vmovups1459() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups OWORD [rdx], xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x11, 0x1A", "vmovups OWORD [rdx], xmm11");
}



#[test]
fn enc_avx_vmovups1460() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x10, 0xE1", "vmovups xmm12, xmm1");
}



#[test]
fn enc_avx_vmovups1461() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups OWORD [rdx], xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x11, 0x02", "vmovups OWORD [rdx], xmm0");
}



#[test]
fn enc_avx_vmovups1462() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups ymm2, ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x10, 0xD3", "vmovups ymm2, ymm3");
}



#[test]
fn enc_avx_vmovups1463() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups YWORD [rax * 2 + rdx], ymm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x11, 0x24, 0x42", "vmovups YWORD [rax * 2 + rdx], ymm4");
}



#[test]
fn enc_avx_vmovups1464() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups ymm15, ymm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x10, 0xFB", "vmovups ymm15, ymm3");
}



#[test]
fn enc_avx_vmovups1465() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups ymm1, ymm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7C, 0x10, 0xCC", "vmovups ymm1, ymm12");
}



#[test]
fn enc_avx_vmovups1466() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmovups YWORD [rax], ymm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x11, 0x38", "vmovups YWORD [rax], ymm15");
}



#[test]
fn enc_avx_vmulsd1467() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm15, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x59, 0xF9", "vmulsd xmm15, xmm3, xmm1");
}



#[test]
fn enc_avx_vmulsd1468() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm2, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x59, 0xD3", "vmulsd xmm2, xmm0, xmm3");
}



#[test]
fn enc_avx_vmulsd1469() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm0, xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0x59, 0xC7", "vmulsd xmm0, xmm0, xmm15");
}



#[test]
fn enc_avx_vmulsd1470() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm11, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x59, 0xDB", "vmulsd xmm11, xmm4, xmm3");
}



#[test]
fn enc_avx_vmulsd1471() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm4, xmm12, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x59, 0xE3", "vmulsd xmm4, xmm12, xmm3");
}



#[test]
fn enc_avx_vmulsd1472() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x59, 0x24, 0x42", "vmulsd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd1473() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x59, 0x04, 0x42", "vmulsd xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd1474() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm12, xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x59, 0x20", "vmulsd xmm12, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd1475() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x59, 0x24, 0x42", "vmulsd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd1476() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulsd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x59, 0x10", "vmulsd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmulss1477() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm15, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x59, 0xFC", "vmulss xmm15, xmm0, xmm4");
}



#[test]
fn enc_avx_vmulss1478() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm4, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x59, 0xE1", "vmulss xmm4, xmm3, xmm1");
}



#[test]
fn enc_avx_vmulss1479() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm2, xmm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x59, 0xD2", "vmulss xmm2, xmm15, xmm2");
}



#[test]
fn enc_avx_vmulss1480() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm1, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x59, 0xCB", "vmulss xmm1, xmm12, xmm11");
}



#[test]
fn enc_avx_vmulss1481() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm12, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0x59, 0xE3", "vmulss xmm12, xmm11, xmm11");
}



#[test]
fn enc_avx_vmulss1482() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm0, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x59, 0x04, 0x42", "vmulss xmm0, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulss1483() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x59, 0x08", "vmulss xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vmulss1484() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm4, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x59, 0x60, 0x10", "vmulss xmm4, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulss1485() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm3, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x59, 0x1C, 0x42", "vmulss xmm3, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulss1486() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vmulss xmm3, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x59, 0x18", "vmulss xmm3, xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1487() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqhqdq xmm15, xmm2, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x44, 0x38, 0x11", "vpclmulhqhqdq xmm15, xmm2, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1488() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqhqdq xmm1, xmm12, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0x08, 0x11", "vpclmulhqhqdq xmm1, xmm12, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1489() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqhqdq xmm3, xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x44, 0xDC, 0x11", "vpclmulhqhqdq xmm3, xmm2, xmm4");
}



#[test]
fn enc_avx_vpclmulhqhqdq1490() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqhqdq xmm11, xmm4, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x44, 0x18, 0x11", "vpclmulhqhqdq xmm11, xmm4, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1491() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqhqdq xmm12, xmm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x44, 0xE2, 0x11", "vpclmulhqhqdq xmm12, xmm15, xmm2");
}



#[test]
fn enc_avx_vpclmulhqlqdq1492() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqlqdq xmm0, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0x02, 0x01", "vpclmulhqlqdq xmm0, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmulhqlqdq1493() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqlqdq xmm0, xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x21, 0x44, 0xC4, 0x01", "vpclmulhqlqdq xmm0, xmm11, xmm12");
}



#[test]
fn enc_avx_vpclmulhqlqdq1494() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqlqdq xmm0, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xC4, 0x01", "vpclmulhqlqdq xmm0, xmm0, xmm4");
}



#[test]
fn enc_avx_vpclmulhqlqdq1495() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqlqdq xmm1, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xCC, 0x01", "vpclmulhqlqdq xmm1, xmm0, xmm4");
}



#[test]
fn enc_avx_vpclmulhqlqdq1496() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulhqlqdq xmm12, xmm0, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x44, 0xE0, 0x01", "vpclmulhqlqdq xmm12, xmm0, xmm0");
}



#[test]
fn enc_avx_vpclmullqhqdq1497() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqhqdq xmm1, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x79, 0x44, 0xCB, 0x10", "vpclmullqhqdq xmm1, xmm0, xmm11");
}



#[test]
fn enc_avx_vpclmullqhqdq1498() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqhqdq xmm12, xmm11, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0x20, 0x10", "vpclmullqhqdq xmm12, xmm11, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmullqhqdq1499() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqhqdq xmm15, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x44, 0x3A, 0x10", "vpclmullqhqdq xmm15, xmm4, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmullqhqdq1500() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqhqdq xmm12, xmm4, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x59, 0x44, 0xE7, 0x10", "vpclmullqhqdq xmm12, xmm4, xmm15");
}



#[test]
fn enc_avx_vpclmullqhqdq1501() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqhqdq xmm12, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0x22, 0x10", "vpclmullqhqdq xmm12, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmullqlqdq1502() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqlqdq xmm15, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x71, 0x44, 0xFC, 0x00", "vpclmullqlqdq xmm15, xmm1, xmm12");
}



#[test]
fn enc_avx_vpclmullqlqdq1503() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqlqdq xmm11, xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0x1C, 0x42, 0x00", "vpclmullqlqdq xmm11, xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmullqlqdq1504() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqlqdq xmm2, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x44, 0x14, 0x42, 0x00", "vpclmullqlqdq xmm2, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmullqlqdq1505() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqlqdq xmm2, xmm0, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xD0, 0x00", "vpclmullqlqdq xmm2, xmm0, xmm0");
}



#[test]
fn enc_avx_vpclmullqlqdq1506() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmullqlqdq xmm15, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x44, 0xF9, 0x00", "vpclmullqlqdq xmm15, xmm0, xmm1");
}



#[test]
fn enc_avx_vpclmulqdq1507() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulqdq xmm3, xmm0, xmm3, 100
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xDB, 0x64", "vpclmulqdq xmm3, xmm0, xmm3, 100");
}



#[test]
fn enc_avx_vpclmulqdq1508() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulqdq xmm0, xmm12, xmm15, 49
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x19, 0x44, 0xC7, 0x31", "vpclmulqdq xmm0, xmm12, xmm15, 49");
}



#[test]
fn enc_avx_vpclmulqdq1509() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulqdq xmm0, xmm4, OWORD [rdx], 81
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x44, 0x02, 0x51", "vpclmulqdq xmm0, xmm4, OWORD [rdx], 81");
}



#[test]
fn enc_avx_vpclmulqdq1510() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulqdq xmm11, xmm1, xmm4, 40
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x44, 0xDC, 0x28", "vpclmulqdq xmm11, xmm1, xmm4, 40");
}



#[test]
fn enc_avx_vpclmulqdq1511() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpclmulqdq xmm0, xmm11, xmm3, 9
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0xC3, 0x09", "vpclmulqdq xmm0, xmm11, xmm3, 9");
}



#[test]
fn enc_avx_vperm2f1281512() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vperm2f128 ymm2, ymm15, ymm3, 44
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x05, 0x06, 0xD3, 0x2C", "vperm2f128 ymm2, ymm15, ymm3, 44");
}



#[test]
fn enc_avx_vperm2f1281513() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vperm2f128 ymm3, ymm2, ymm4, 2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x6D, 0x06, 0xDC, 0x02", "vperm2f128 ymm3, ymm2, ymm4, 2");
}



#[test]
fn enc_avx_vperm2f1281514() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vperm2f128 ymm3, ymm0, ymm2, 79
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x06, 0xDA, 0x4F", "vperm2f128 ymm3, ymm0, ymm2, 79");
}



#[test]
fn enc_avx_vperm2f1281515() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vperm2f128 ymm15, ymm4, ymm12, 64
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x5D, 0x06, 0xFC, 0x40", "vperm2f128 ymm15, ymm4, ymm12, 64");
}



#[test]
fn enc_avx_vperm2f1281516() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vperm2f128 ymm4, ymm11, ymm11, 92
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x25, 0x06, 0xE3, 0x5C", "vperm2f128 ymm4, ymm11, ymm11, 92");
}



#[test]
fn enc_avx_vpextrb1517() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb rdx, xmm2, 79
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xD2, 0x4F", "vpextrb rdx, xmm2, 79");
}



#[test]
fn enc_avx_vpextrb1518() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb rcx, xmm11, 20
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xD9, 0x14", "vpextrb rcx, xmm11, 20");
}



#[test]
fn enc_avx_vpextrb1519() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb rcx, xmm0, 107
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC1, 0x6B", "vpextrb rcx, xmm0, 107");
}



#[test]
fn enc_avx_vpextrb1520() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb rax, xmm15, 66
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xF8, 0x42", "vpextrb rax, xmm15, 66");
}



#[test]
fn enc_avx_vpextrb1521() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb rax, xmm0, 59
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC0, 0x3B", "vpextrb rax, xmm0, 59");
}



#[test]
fn enc_avx_vpextrb1522() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb ecx, xmm1, 77
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC9, 0x4D", "vpextrb ecx, xmm1, 77");
}



#[test]
fn enc_avx_vpextrb1523() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb ecx, xmm11, 39
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xD9, 0x27", "vpextrb ecx, xmm11, 39");
}



#[test]
fn enc_avx_vpextrb1524() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb ecx, xmm4, 75
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xE1, 0x4B", "vpextrb ecx, xmm4, 75");
}



#[test]
fn enc_avx_vpextrb1525() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb ecx, xmm3, 41
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xD9, 0x29", "vpextrb ecx, xmm3, 41");
}



#[test]
fn enc_avx_vpextrb1526() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb edx, xmm0, 101
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC2, 0x65", "vpextrb edx, xmm0, 101");
}



#[test]
fn enc_avx_vpextrb1527() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb BYTE [rax], xmm1, 81
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x08, 0x51", "vpextrb BYTE [rax], xmm1, 81");
}



#[test]
fn enc_avx_vpextrb1528() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb BYTE [rax * 2 + rdx], xmm11, 48
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0x1C, 0x42, 0x30", "vpextrb BYTE [rax * 2 + rdx], xmm11, 48");
}



#[test]
fn enc_avx_vpextrb1529() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb BYTE [rax + 16], xmm15, 74
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0x78, 0x10, 0x4A", "vpextrb BYTE [rax + 16], xmm15, 74");
}



#[test]
fn enc_avx_vpextrb1530() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb BYTE [rax + 16], xmm4, 92
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x60, 0x10, 0x5C", "vpextrb BYTE [rax + 16], xmm4, 92");
}



#[test]
fn enc_avx_vpextrb1531() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrb BYTE [rax], xmm11, 32
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0x18, 0x20", "vpextrb BYTE [rax], xmm11, 32");
}



#[test]
fn enc_avx_vpextrd1532() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd rax, xmm3, 111
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD8, 0x6F", "vpextrd rax, xmm3, 111");
}



#[test]
fn enc_avx_vpextrd1533() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd rax, xmm12, 53
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xE0, 0x35", "vpextrd rax, xmm12, 53");
}



#[test]
fn enc_avx_vpextrd1534() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd rdx, xmm15, 120
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xFA, 0x78", "vpextrd rdx, xmm15, 120");
}



#[test]
fn enc_avx_vpextrd1535() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd rcx, xmm2, 4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD1, 0x04", "vpextrd rcx, xmm2, 4");
}



#[test]
fn enc_avx_vpextrd1536() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd rcx, xmm15, 36
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xF9, 0x24", "vpextrd rcx, xmm15, 36");
}



#[test]
fn enc_avx_vpextrd1537() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd DWORD [rax], xmm2, 4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0x10, 0x04", "vpextrd DWORD [rax], xmm2, 4");
}



#[test]
fn enc_avx_vpextrd1538() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd eax, xmm1, 37
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xC8, 0x25", "vpextrd eax, xmm1, 37");
}



#[test]
fn enc_avx_vpextrd1539() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd eax, xmm2, 30
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD0, 0x1E", "vpextrd eax, xmm2, 30");
}



#[test]
fn enc_avx_vpextrd1540() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd DWORD [rax], xmm11, 80
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0x18, 0x50", "vpextrd DWORD [rax], xmm11, 80");
}



#[test]
fn enc_avx_vpextrd1541() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrd eax, xmm0, 126
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xC0, 0x7E", "vpextrd eax, xmm0, 126");
}



#[test]
fn enc_avx_vpextrq1542() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrq rax, xmm15, 118
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x16, 0xF8, 0x76", "vpextrq rax, xmm15, 118");
}



#[test]
fn enc_avx_vpextrq1543() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrq [rax], xmm2, 95
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x10, 0x5F", "vpextrq [rax], xmm2, 95");
}



#[test]
fn enc_avx_vpextrq1544() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrq [rax], xmm0, 20
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x14", "vpextrq [rax], xmm0, 20");
}



#[test]
fn enc_avx_vpextrq1545() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrq [rax], xmm4, 118
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x20, 0x76", "vpextrq [rax], xmm4, 118");
}



#[test]
fn enc_avx_vpextrq1546() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrq [rax], xmm0, 43
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x2B", "vpextrq [rax], xmm0, 43");
}



#[test]
fn enc_avx_vpextrw1547() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rdx, xmm12, 95
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD4, 0x5F", "vpextrw rdx, xmm12, 95");
}



#[test]
fn enc_avx_vpextrw1548() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rcx, xmm3, 84
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x54", "vpextrw rcx, xmm3, 84");
}



#[test]
fn enc_avx_vpextrw1549() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rdx, xmm3, 106
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD3, 0x6A", "vpextrw rdx, xmm3, 106");
}



#[test]
fn enc_avx_vpextrw1550() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rdx, xmm2, 4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD2, 0x04", "vpextrw rdx, xmm2, 4");
}



#[test]
fn enc_avx_vpextrw1551() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rdx, xmm11, 62
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x3E", "vpextrw rdx, xmm11, 62");
}



#[test]
fn enc_avx_vpextrw1552() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw eax, xmm4, 55
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC4, 0x37", "vpextrw eax, xmm4, 55");
}



#[test]
fn enc_avx_vpextrw1553() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm2, 65
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD2, 0x41", "vpextrw edx, xmm2, 65");
}



#[test]
fn enc_avx_vpextrw1554() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm1, 56
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD1, 0x38", "vpextrw edx, xmm1, 56");
}



#[test]
fn enc_avx_vpextrw1555() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw ecx, xmm1, 17
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC9, 0x11", "vpextrw ecx, xmm1, 17");
}



#[test]
fn enc_avx_vpextrw1556() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm15, 29
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD7, 0x1D", "vpextrw edx, xmm15, 29");
}



#[test]
fn enc_avx_vpextrw1557() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw WORD [rax], xmm2, 98
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x10, 0x62", "vpextrw WORD [rax], xmm2, 98");
}



#[test]
fn enc_avx_vpextrw1558() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw WORD [rax], xmm1, 30
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x08, 0x1E", "vpextrw WORD [rax], xmm1, 30");
}



#[test]
fn enc_avx_vpextrw1559() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw WORD [rax * 2 + rdx], xmm0, 103
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x04, 0x42, 0x67", "vpextrw WORD [rax * 2 + rdx], xmm0, 103");
}



#[test]
fn enc_avx_vpextrw1560() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw WORD [rax], xmm12, 10
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x20, 0x0A", "vpextrw WORD [rax], xmm12, 10");
}



#[test]
fn enc_avx_vpextrw1561() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw WORD [rax], xmm12, 59
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x20, 0x3B", "vpextrw WORD [rax], xmm12, 59");
}



#[test]
fn enc_avx_vpextrw1562() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rcx, xmm12, 119
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xCC, 0x77", "vpextrw rcx, xmm12, 119");
}



#[test]
fn enc_avx_vpextrw1563() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rax, xmm2, 31
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC2, 0x1F", "vpextrw rax, xmm2, 31");
}



#[test]
fn enc_avx_vpextrw1564() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rcx, xmm2, 94
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCA, 0x5E", "vpextrw rcx, xmm2, 94");
}



#[test]
fn enc_avx_vpextrw1565() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rcx, xmm11, 59
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xCB, 0x3B", "vpextrw rcx, xmm11, 59");
}



#[test]
fn enc_avx_vpextrw1566() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw rcx, xmm0, 60
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x3C", "vpextrw rcx, xmm0, 60");
}



#[test]
fn enc_avx_vpextrw1567() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm0, 61
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD0, 0x3D", "vpextrw edx, xmm0, 61");
}



#[test]
fn enc_avx_vpextrw1568() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm11, 123
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x7B", "vpextrw edx, xmm11, 123");
}



#[test]
fn enc_avx_vpextrw1569() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm11, 74
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x4A", "vpextrw edx, xmm11, 74");
}



#[test]
fn enc_avx_vpextrw1570() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw ecx, xmm3, 81
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x51", "vpextrw ecx, xmm3, 81");
}



#[test]
fn enc_avx_vpextrw1571() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpextrw edx, xmm11, 68
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x44", "vpextrw edx, xmm11, 68");
}



#[test]
fn enc_avx_vphminposuw1572() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vphminposuw xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x41, 0xFB", "vphminposuw xmm15, xmm3");
}



#[test]
fn enc_avx_vphminposuw1573() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vphminposuw xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0x41, 0xFB", "vphminposuw xmm15, xmm11");
}



#[test]
fn enc_avx_vphminposuw1574() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vphminposuw xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xC3", "vphminposuw xmm0, xmm3");
}



#[test]
fn enc_avx_vphminposuw1575() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vphminposuw xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xD8", "vphminposuw xmm3, xmm0");
}



#[test]
fn enc_avx_vphminposuw1576() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vphminposuw xmm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x41, 0xFA", "vphminposuw xmm15, xmm2");
}



#[test]
fn enc_avx_vpinsrb1577() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm4, xmm11, BYTE [rax], 8
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x20, 0x20, 0x08", "vpinsrb xmm4, xmm11, BYTE [rax], 8");
}



#[test]
fn enc_avx_vpinsrb1578() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm12, xmm0, BYTE [rax], 2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x20, 0x20, 0x02", "vpinsrb xmm12, xmm0, BYTE [rax], 2");
}



#[test]
fn enc_avx_vpinsrb1579() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm4, xmm11, BYTE [rax], 102
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x20, 0x20, 0x66", "vpinsrb xmm4, xmm11, BYTE [rax], 102");
}



#[test]
fn enc_avx_vpinsrb1580() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm0, xmm15, al, 19
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x20, 0xC0, 0x13", "vpinsrb xmm0, xmm15, al, 19");
}



#[test]
fn enc_avx_vpinsrb1581() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm1, xmm12, BYTE [rax], 126
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0x08, 0x7E", "vpinsrb xmm1, xmm12, BYTE [rax], 126");
}



#[test]
fn enc_avx_vpinsrb1582() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm11, xmm2, eax, 57
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x20, 0xD8, 0x39", "vpinsrb xmm11, xmm2, eax, 57");
}



#[test]
fn enc_avx_vpinsrb1583() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm0, xmm15, edx, 47
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x20, 0xC2, 0x2F", "vpinsrb xmm0, xmm15, edx, 47");
}



#[test]
fn enc_avx_vpinsrb1584() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm1, xmm12, edx, 96
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xCA, 0x60", "vpinsrb xmm1, xmm12, edx, 96");
}



#[test]
fn enc_avx_vpinsrb1585() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm0, xmm4, eax, 58
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x20, 0xC0, 0x3A", "vpinsrb xmm0, xmm4, eax, 58");
}



#[test]
fn enc_avx_vpinsrb1586() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrb xmm11, xmm1, ecx, 50
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x20, 0xD9, 0x32", "vpinsrb xmm11, xmm1, ecx, 50");
}



#[test]
fn enc_avx_vpinsrd1587() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrd xmm1, xmm11, eax, 13
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x22, 0xC8, 0x0D", "vpinsrd xmm1, xmm11, eax, 13");
}



#[test]
fn enc_avx_vpinsrd1588() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrd xmm3, xmm15, DWORD [rax], 123
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x22, 0x18, 0x7B", "vpinsrd xmm3, xmm15, DWORD [rax], 123");
}



#[test]
fn enc_avx_vpinsrd1589() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrd xmm0, xmm11, eax, 19
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x22, 0xC0, 0x13", "vpinsrd xmm0, xmm11, eax, 19");
}



#[test]
fn enc_avx_vpinsrd1590() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrd xmm2, xmm4, eax, 109
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x22, 0xD0, 0x6D", "vpinsrd xmm2, xmm4, eax, 109");
}



#[test]
fn enc_avx_vpinsrd1591() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrd xmm1, xmm2, DWORD [rax], 23
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x22, 0x08, 0x17", "vpinsrd xmm1, xmm2, DWORD [rax], 23");
}



#[test]
fn enc_avx_vpinsrq1592() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrq xmm0, xmm4, rax, 80
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x22, 0xC0, 0x50", "vpinsrq xmm0, xmm4, rax, 80");
}



#[test]
fn enc_avx_vpinsrq1593() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrq xmm12, xmm0, [rax], 36
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x22, 0x20, 0x24", "vpinsrq xmm12, xmm0, [rax], 36");
}



#[test]
fn enc_avx_vpinsrq1594() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrq xmm4, xmm2, [rax], 103
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x22, 0x20, 0x67", "vpinsrq xmm4, xmm2, [rax], 103");
}



#[test]
fn enc_avx_vpinsrq1595() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrq xmm3, xmm15, rax, 112
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x22, 0xD8, 0x70", "vpinsrq xmm3, xmm15, rax, 112");
}



#[test]
fn enc_avx_vpinsrq1596() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrq xmm2, xmm2, rax, 75
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x22, 0xD0, 0x4B", "vpinsrq xmm2, xmm2, rax, 75");
}



#[test]
fn enc_avx_vpinsrw1597() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm4, xmm0, ax, 46
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC4, 0xE0, 0x2E", "vpinsrw xmm4, xmm0, ax, 46");
}



#[test]
fn enc_avx_vpinsrw1598() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm1, xmm1, ax, 6
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0xC4, 0xC8, 0x06", "vpinsrw xmm1, xmm1, ax, 6");
}



#[test]
fn enc_avx_vpinsrw1599() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm4, xmm2, WORD [rax], 13
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0xC4, 0x20, 0x0D", "vpinsrw xmm4, xmm2, WORD [rax], 13");
}



#[test]
fn enc_avx_vpinsrw1600() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm12, xmm3, ax, 56
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0xC4, 0xE0, 0x38", "vpinsrw xmm12, xmm3, ax, 56");
}



#[test]
fn enc_avx_vpinsrw1601() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm12, xmm1, ax, 45
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC4, 0xE0, 0x2D", "vpinsrw xmm12, xmm1, ax, 45");
}



#[test]
fn enc_avx_vpinsrw1602() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm2, xmm3, ecx, 115
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC4, 0xD1, 0x73", "vpinsrw xmm2, xmm3, ecx, 115");
}



#[test]
fn enc_avx_vpinsrw1603() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm2, xmm4, ecx, 122
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC4, 0xD1, 0x7A", "vpinsrw xmm2, xmm4, ecx, 122");
}



#[test]
fn enc_avx_vpinsrw1604() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm0, xmm11, ecx, 77
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC4, 0xC1, 0x4D", "vpinsrw xmm0, xmm11, ecx, 77");
}



#[test]
fn enc_avx_vpinsrw1605() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm12, xmm1, edx, 10
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC4, 0xE2, 0x0A", "vpinsrw xmm12, xmm1, edx, 10");
}



#[test]
fn enc_avx_vpinsrw1606() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpinsrw xmm11, xmm1, eax, 72
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC4, 0xD8, 0x48", "vpinsrw xmm11, xmm1, eax, 72");
}



#[test]
fn enc_avx_vpmovsxbd1607() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbd xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x60, 0x10", "vpmovsxbd xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbd1608() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbd xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x14, 0x42", "vpmovsxbd xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbd1609() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbd xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x24, 0x42", "vpmovsxbd xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbd1610() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbd xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x10", "vpmovsxbd xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbd1611() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbd xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x08", "vpmovsxbd xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw1612() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x58, 0x10", "vpmovsxbw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbw1613() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbw xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x18", "vpmovsxbw xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw1614() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbw xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x60, 0x10", "vpmovsxbw xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbw1615() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbw xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x3C, 0x42", "vpmovsxbw xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw1616() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxbw xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x18", "vpmovsxbw xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq1617() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxdq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x04, 0x42", "vpmovsxdq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq1618() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxdq xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x48, 0x10", "vpmovsxdq xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxdq1619() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxdq xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x20", "vpmovsxdq xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq1620() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxdq xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x25, 0x60, 0x10", "vpmovsxdq xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxdq1621() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxdq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x25, 0x1C, 0x42", "vpmovsxdq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd1622() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x60, 0x10", "vpmovsxwd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1623() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x78, 0x10", "vpmovsxwd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1624() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x04, 0x42", "vpmovsxwd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd1625() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x58, 0x10", "vpmovsxwd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq1626() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwq xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x1C, 0x42", "vpmovsxwq xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwq1627() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwq xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x3C, 0x42", "vpmovsxwq xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwq1628() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwq xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x38", "vpmovsxwq xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq1629() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwq xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x20", "vpmovsxwq xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq1630() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovsxwq xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x24, 0x42", "vpmovsxwq xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1631() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbd xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x48, 0x10", "vpmovzxbd xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbd1632() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbd xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x1C, 0x42", "vpmovzxbd xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1633() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbd xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x18", "vpmovzxbd xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw1634() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbw xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x04, 0x42", "vpmovzxbw xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw1635() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbw xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x60, 0x10", "vpmovzxbw xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbw1636() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbw xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x30, 0x24, 0x42", "vpmovzxbw xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw1637() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbw xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x00", "vpmovzxbw xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw1638() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxbw xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x50, 0x10", "vpmovzxbw xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxdq1639() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxdq xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x14, 0x42", "vpmovzxdq xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq1640() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxdq xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x08", "vpmovzxdq xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1641() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxdq xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x10", "vpmovzxdq xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1642() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxdq xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x35, 0x24, 0x42", "vpmovzxdq xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq1643() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxdq xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x00", "vpmovzxdq xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwd1644() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwd xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x20", "vpmovzxwd xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwd1645() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwd xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x18", "vpmovzxwd xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwd1646() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x40, 0x10", "vpmovzxwd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwd1647() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x58, 0x10", "vpmovzxwd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwd1648() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x48, 0x10", "vpmovzxwd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwq1649() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwq xmm4, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x20", "vpmovzxwq xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwq1650() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwq xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x10", "vpmovzxwq xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwq1651() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwq xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x48, 0x10", "vpmovzxwq xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwq1652() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwq xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x34, 0x20", "vpmovzxwq xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwq1653() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vpmovzxwq xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x0C, 0x42", "vpmovzxwq xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1654() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm15, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x53, 0xFB", "vrcpss xmm15, xmm12, xmm11");
}



#[test]
fn enc_avx_vrcpss1655() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm15, xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0x53, 0xFF", "vrcpss xmm15, xmm0, xmm15");
}



#[test]
fn enc_avx_vrcpss1656() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm11, xmm12, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x53, 0xD8", "vrcpss xmm11, xmm12, xmm0");
}



#[test]
fn enc_avx_vrcpss1657() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm15, xmm3, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x53, 0xFC", "vrcpss xmm15, xmm3, xmm4");
}



#[test]
fn enc_avx_vrcpss1658() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm4, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0x53, 0xE3", "vrcpss xmm4, xmm11, xmm11");
}



#[test]
fn enc_avx_vrcpss1659() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm15, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x53, 0x3C, 0x42", "vrcpss xmm15, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1660() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm1, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x53, 0x08", "vrcpss xmm1, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss1661() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm4, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x53, 0x20", "vrcpss xmm4, xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss1662() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm12, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x53, 0x20", "vrcpss xmm12, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss1663() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrcpss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x53, 0x18", "vrcpss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vroundsd1664() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm4, xmm3, xmm0, 19
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x0B, 0xE0, 0x13", "vroundsd xmm4, xmm3, xmm0, 19");
}



#[test]
fn enc_avx_vroundsd1665() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm2, xmm1, xmm3, 54
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x0B, 0xD3, 0x36", "vroundsd xmm2, xmm1, xmm3, 54");
}



#[test]
fn enc_avx_vroundsd1666() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm2, xmm3, xmm15, 48
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x61, 0x0B, 0xD7, 0x30", "vroundsd xmm2, xmm3, xmm15, 48");
}



#[test]
fn enc_avx_vroundsd1667() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm12, xmm3, xmm15, 112
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x61, 0x0B, 0xE7, 0x70", "vroundsd xmm12, xmm3, xmm15, 112");
}



#[test]
fn enc_avx_vroundsd1668() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm3, xmm12, xmm15, 100
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x19, 0x0B, 0xDF, 0x64", "vroundsd xmm3, xmm12, xmm15, 100");
}



#[test]
fn enc_avx_vroundsd1669() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm0, xmm0, QWORD [rax * 2 + rdx], 96
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x0B, 0x04, 0x42, 0x60", "vroundsd xmm0, xmm0, QWORD [rax * 2 + rdx], 96");
}



#[test]
fn enc_avx_vroundsd1670() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm1, xmm15, QWORD [rax + 16], 21
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x0B, 0x48, 0x10, 0x15", "vroundsd xmm1, xmm15, QWORD [rax + 16], 21");
}



#[test]
fn enc_avx_vroundsd1671() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm12, xmm15, QWORD [rax * 2 + rdx], 97
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x0B, 0x24, 0x42, 0x61", "vroundsd xmm12, xmm15, QWORD [rax * 2 + rdx], 97");
}



#[test]
fn enc_avx_vroundsd1672() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm12, xmm12, QWORD [rax + 16], 35
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0B, 0x60, 0x10, 0x23", "vroundsd xmm12, xmm12, QWORD [rax + 16], 35");
}



#[test]
fn enc_avx_vroundsd1673() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundsd xmm15, xmm2, QWORD [rax], 86
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x0B, 0x38, 0x56", "vroundsd xmm15, xmm2, QWORD [rax], 86");
}



#[test]
fn enc_avx_vroundss1674() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm0, xmm3, xmm3, 117
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x0A, 0xC3, 0x75", "vroundss xmm0, xmm3, xmm3, 117");
}



#[test]
fn enc_avx_vroundss1675() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm12, xmm12, xmm1, 14
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0A, 0xE1, 0x0E", "vroundss xmm12, xmm12, xmm1, 14");
}



#[test]
fn enc_avx_vroundss1676() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm12, xmm3, xmm12, 95
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x61, 0x0A, 0xE4, 0x5F", "vroundss xmm12, xmm3, xmm12, 95");
}



#[test]
fn enc_avx_vroundss1677() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm15, xmm3, xmm4, 118
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x0A, 0xFC, 0x76", "vroundss xmm15, xmm3, xmm4, 118");
}



#[test]
fn enc_avx_vroundss1678() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm11, xmm12, xmm0, 15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0A, 0xD8, 0x0F", "vroundss xmm11, xmm12, xmm0, 15");
}



#[test]
fn enc_avx_vroundss1679() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm2, xmm0, DWORD [rax * 2 + rdx], 121
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x0A, 0x14, 0x42, 0x79", "vroundss xmm2, xmm0, DWORD [rax * 2 + rdx], 121");
}



#[test]
fn enc_avx_vroundss1680() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm15, xmm2, DWORD [rax * 2 + rdx], 97
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x0A, 0x3C, 0x42, 0x61", "vroundss xmm15, xmm2, DWORD [rax * 2 + rdx], 97");
}



#[test]
fn enc_avx_vroundss1681() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm4, xmm11, DWORD [rax * 2 + rdx], 111
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x0A, 0x24, 0x42, 0x6F", "vroundss xmm4, xmm11, DWORD [rax * 2 + rdx], 111");
}



#[test]
fn enc_avx_vroundss1682() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm12, xmm12, DWORD [rax + 16], 62
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0A, 0x60, 0x10, 0x3E", "vroundss xmm12, xmm12, DWORD [rax + 16], 62");
}



#[test]
fn enc_avx_vroundss1683() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vroundss xmm3, xmm2, DWORD [rax], 52
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0A, 0x18, 0x34", "vroundss xmm3, xmm2, DWORD [rax], 52");
}



#[test]
fn enc_avx_vrsqrtss1684() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm2, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x52, 0xD3", "vrsqrtss xmm2, xmm4, xmm11");
}



#[test]
fn enc_avx_vrsqrtss1685() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm0, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x52, 0xC0", "vrsqrtss xmm0, xmm11, xmm0");
}



#[test]
fn enc_avx_vrsqrtss1686() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm11, xmm0, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x52, 0xDA", "vrsqrtss xmm11, xmm0, xmm2");
}



#[test]
fn enc_avx_vrsqrtss1687() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm4, xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x52, 0xE2", "vrsqrtss xmm4, xmm11, xmm2");
}



#[test]
fn enc_avx_vrsqrtss1688() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm2, xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0x52, 0xD4", "vrsqrtss xmm2, xmm11, xmm12");
}



#[test]
fn enc_avx_vrsqrtss1689() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm4, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x52, 0x24, 0x42", "vrsqrtss xmm4, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrsqrtss1690() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm1, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x52, 0x48, 0x10", "vrsqrtss xmm1, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrsqrtss1691() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm3, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x52, 0x58, 0x10", "vrsqrtss xmm3, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrsqrtss1692() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm0, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x52, 0x00", "vrsqrtss xmm0, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss1693() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vrsqrtss xmm3, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x52, 0x18", "vrsqrtss xmm3, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vsqrtsd1694() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm1, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x51, 0xCC", "vsqrtsd xmm1, xmm11, xmm4");
}



#[test]
fn enc_avx_vsqrtsd1695() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm12, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x51, 0xE0", "vsqrtsd xmm12, xmm15, xmm0");
}



#[test]
fn enc_avx_vsqrtsd1696() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm15, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0x51, 0xFB", "vsqrtsd xmm15, xmm1, xmm11");
}



#[test]
fn enc_avx_vsqrtsd1697() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm12, xmm2, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0x51, 0xE3", "vsqrtsd xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vsqrtsd1698() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm0, xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x51, 0xC2", "vsqrtsd xmm0, xmm12, xmm2");
}



#[test]
fn enc_avx_vsqrtsd1699() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm11, xmm1, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x51, 0x18", "vsqrtsd xmm11, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vsqrtsd1700() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm1, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x51, 0x0C, 0x42", "vsqrtsd xmm1, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd1701() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm12, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x51, 0x60, 0x10", "vsqrtsd xmm12, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd1702() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x51, 0x48, 0x10", "vsqrtsd xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd1703() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtsd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x51, 0x60, 0x10", "vsqrtsd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtss1704() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm1, xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0x51, 0xCC", "vsqrtss xmm1, xmm11, xmm12");
}



#[test]
fn enc_avx_vsqrtss1705() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm2, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x51, 0xD1", "vsqrtss xmm2, xmm0, xmm1");
}



#[test]
fn enc_avx_vsqrtss1706() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm15, xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x51, 0xFC", "vsqrtss xmm15, xmm15, xmm4");
}



#[test]
fn enc_avx_vsqrtss1707() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm4, xmm3, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x51, 0xE4", "vsqrtss xmm4, xmm3, xmm4");
}



#[test]
fn enc_avx_vsqrtss1708() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm11, xmm1, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x51, 0xD9", "vsqrtss xmm11, xmm1, xmm1");
}



#[test]
fn enc_avx_vsqrtss1709() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm4, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x51, 0x24, 0x42", "vsqrtss xmm4, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss1710() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm2, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x51, 0x10", "vsqrtss xmm2, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vsqrtss1711() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm11, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x51, 0x58, 0x10", "vsqrtss xmm11, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtss1712() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x51, 0x38", "vsqrtss xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vsqrtss1713() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsqrtss xmm12, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x51, 0x24, 0x42", "vsqrtss xmm12, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vstmxcsr1714() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vstmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x1C, 0x42", "vstmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vstmxcsr1715() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vstmxcsr DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x18", "vstmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vstmxcsr1716() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vstmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x58, 0x10", "vstmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd1717() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm3, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x5C, 0xDB", "vsubsd xmm3, xmm11, xmm11");
}



#[test]
fn enc_avx_vsubsd1718() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm3, xmm0, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5C, 0xDA", "vsubsd xmm3, xmm0, xmm2");
}



#[test]
fn enc_avx_vsubsd1719() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm15, xmm12, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5C, 0xFC", "vsubsd xmm15, xmm12, xmm4");
}



#[test]
fn enc_avx_vsubsd1720() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm11, xmm4, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5C, 0xD8", "vsubsd xmm11, xmm4, xmm0");
}



#[test]
fn enc_avx_vsubsd1721() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm12, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5C, 0xE4", "vsubsd xmm12, xmm11, xmm4");
}



#[test]
fn enc_avx_vsubsd1722() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm2, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5C, 0x50, 0x10", "vsubsd xmm2, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd1723() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5C, 0x20", "vsubsd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1724() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm0, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5C, 0x00", "vsubsd xmm0, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1725() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm15, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5C, 0x78, 0x10", "vsubsd xmm15, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd1726() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubsd xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5C, 0x48, 0x10", "vsubsd xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1727() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm15, xmm2, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0x5C, 0xFB", "vsubss xmm15, xmm2, xmm11");
}



#[test]
fn enc_avx_vsubss1728() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm2, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x5C, 0xD3", "vsubss xmm2, xmm4, xmm11");
}



#[test]
fn enc_avx_vsubss1729() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm15, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5A, 0x5C, 0xFB", "vsubss xmm15, xmm4, xmm11");
}



#[test]
fn enc_avx_vsubss1730() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm15, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0x5C, 0xFC", "vsubss xmm15, xmm2, xmm12");
}



#[test]
fn enc_avx_vsubss1731() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm0, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x5C, 0xC4", "vsubss xmm0, xmm3, xmm12");
}



#[test]
fn enc_avx_vsubss1732() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm11, xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5C, 0x18", "vsubss xmm11, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vsubss1733() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm12, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5C, 0x60, 0x10", "vsubss xmm12, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1734() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm2, xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x5C, 0x10", "vsubss xmm2, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vsubss1735() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm3, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5C, 0x58, 0x10", "vsubss xmm3, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1736() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vsubss xmm11, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5C, 0x1C, 0x42", "vsubss xmm11, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomisd1737() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0xD4", "vucomisd xmm2, xmm4");
}



#[test]
fn enc_avx_vucomisd1738() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm12, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2E, 0xE4", "vucomisd xmm12, xmm12");
}



#[test]
fn enc_avx_vucomisd1739() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2E, 0xDB", "vucomisd xmm11, xmm11");
}



#[test]
fn enc_avx_vucomisd1740() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0xFC", "vucomisd xmm15, xmm4");
}



#[test]
fn enc_avx_vucomisd1741() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0xD8", "vucomisd xmm11, xmm0");
}



#[test]
fn enc_avx_vucomisd1742() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0x18", "vucomisd xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vucomisd1743() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x1C, 0x42", "vucomisd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomisd1744() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x60, 0x10", "vucomisd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomisd1745() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0x1C, 0x42", "vucomisd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomisd1746() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomisd xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x38", "vucomisd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vucomiss1747() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0xDA", "vucomiss xmm11, xmm2");
}



#[test]
fn enc_avx_vucomiss1748() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x2E, 0xDC", "vucomiss xmm11, xmm12");
}



#[test]
fn enc_avx_vucomiss1749() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xD3", "vucomiss xmm2, xmm3");
}



#[test]
fn enc_avx_vucomiss1750() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm1, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xC9", "vucomiss xmm1, xmm1");
}



#[test]
fn enc_avx_vucomiss1751() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xE4", "vucomiss xmm4, xmm4");
}



#[test]
fn enc_avx_vucomiss1752() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0x3C, 0x42", "vucomiss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1753() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x60, 0x10", "vucomiss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomiss1754() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x14, 0x42", "vucomiss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1755() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0x58, 0x10", "vucomiss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomiss1756() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vucomiss xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0x20", "vucomiss xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vzeroall1757() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vzeroall
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x77", "vzeroall");
}



#[test]
fn enc_avx_vzeroupper1758() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vzeroupper
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x77", "vzeroupper");
}


