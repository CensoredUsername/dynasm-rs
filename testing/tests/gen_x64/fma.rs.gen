
#[test]
fn enc_fma_vfmadd123sd511() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xA9, 0xDF", "vfmadd123sd xmm3, xmm11, xmm15");
}



#[test]
fn enc_fma_vfmadd123sd512() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm3, xmm15, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0xA9, 0xDF", "vfmadd123sd xmm3, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmadd123sd513() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm0, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xA9, 0xC0", "vfmadd123sd xmm0, xmm3, xmm0");
}



#[test]
fn enc_fma_vfmadd123sd514() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm4, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xA9, 0xE4", "vfmadd123sd xmm4, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmadd123sd515() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm15, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0xA9, 0xFB", "vfmadd123sd xmm15, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmadd123sd516() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xA9, 0x60, 0x10", "vfmadd123sd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd517() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm15, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xA9, 0x78, 0x10", "vfmadd123sd xmm15, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd518() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm15, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xA9, 0x78, 0x10", "vfmadd123sd xmm15, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd519() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm3, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0x58, 0x10", "vfmadd123sd xmm3, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd520() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123sd xmm1, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xA9, 0x08", "vfmadd123sd xmm1, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123ss521() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm0, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xA9, 0xC3", "vfmadd123ss xmm0, xmm4, xmm3");
}



#[test]
fn enc_fma_vfmadd123ss522() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm0, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xA9, 0xC1", "vfmadd123ss xmm0, xmm3, xmm1");
}



#[test]
fn enc_fma_vfmadd123ss523() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm15, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xA9, 0xF9", "vfmadd123ss xmm15, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmadd123ss524() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm3, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xA9, 0xDC", "vfmadd123ss xmm3, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmadd123ss525() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm2, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0xD2", "vfmadd123ss xmm2, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmadd123ss526() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm1, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xA9, 0x08", "vfmadd123ss xmm1, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123ss527() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm0, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xA9, 0x40, 0x10", "vfmadd123ss xmm0, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123ss528() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm0, xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xA9, 0x00", "vfmadd123ss xmm0, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123ss529() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm0, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xA9, 0x04, 0x42", "vfmadd123ss xmm0, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd123ss530() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd123ss xmm12, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xA9, 0x24, 0x42", "vfmadd123ss xmm12, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132sd531() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm3, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0x99, 0xDB", "vfmadd132sd xmm3, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmadd132sd532() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm12, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x99, 0xE0", "vfmadd132sd xmm12, xmm15, xmm0");
}



#[test]
fn enc_fma_vfmadd132sd533() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm3, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x99, 0xD9", "vfmadd132sd xmm3, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmadd132sd534() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm15, xmm11, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0x99, 0xFF", "vfmadd132sd xmm15, xmm11, xmm15");
}



#[test]
fn enc_fma_vfmadd132sd535() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm4, xmm2, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x99, 0xE1", "vfmadd132sd xmm4, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmadd132sd536() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0x20", "vfmadd132sd xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132sd537() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x99, 0x40, 0x10", "vfmadd132sd xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132sd538() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm2, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x99, 0x50, 0x10", "vfmadd132sd xmm2, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132sd539() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm15, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x99, 0x3C, 0x42", "vfmadd132sd xmm15, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132sd540() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132sd xmm0, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x99, 0x00", "vfmadd132sd xmm0, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss541() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm3, xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x99, 0xDA", "vfmadd132ss xmm3, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmadd132ss542() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm11, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x99, 0xD8", "vfmadd132ss xmm11, xmm15, xmm0");
}



#[test]
fn enc_fma_vfmadd132ss543() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm3, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x99, 0xDC", "vfmadd132ss xmm3, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmadd132ss544() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm11, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x99, 0xDC", "vfmadd132ss xmm11, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmadd132ss545() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm4, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0xE0", "vfmadd132ss xmm4, xmm11, xmm0");
}



#[test]
fn enc_fma_vfmadd132ss546() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm3, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x99, 0x1C, 0x42", "vfmadd132ss xmm3, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132ss547() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm2, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x99, 0x14, 0x42", "vfmadd132ss xmm2, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132ss548() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm12, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0x99, 0x60, 0x10", "vfmadd132ss xmm12, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132ss549() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm3, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0x18", "vfmadd132ss xmm3, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss550() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd132ss xmm15, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x99, 0x78, 0x10", "vfmadd132ss xmm15, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd551() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm11, xmm2, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE9, 0xA9, 0xDB", "vfmadd213sd xmm11, xmm2, xmm11");
}



#[test]
fn enc_fma_vfmadd213sd552() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm15, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xA9, 0xFC", "vfmadd213sd xmm15, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmadd213sd553() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm15, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xA9, 0xFB", "vfmadd213sd xmm15, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmadd213sd554() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm3, xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xA9, 0xDC", "vfmadd213sd xmm3, xmm11, xmm12");
}



#[test]
fn enc_fma_vfmadd213sd555() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm4, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xA9, 0xE0", "vfmadd213sd xmm4, xmm3, xmm0");
}



#[test]
fn enc_fma_vfmadd213sd556() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm15, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xA9, 0x38", "vfmadd213sd xmm15, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213sd557() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm3, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xA9, 0x58, 0x10", "vfmadd213sd xmm3, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd558() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm12, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xA9, 0x20", "vfmadd213sd xmm12, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213sd559() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm2, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0x50, 0x10", "vfmadd213sd xmm2, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd560() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213sd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0x48, 0x10", "vfmadd213sd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213ss561() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm4, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xA9, 0xE1", "vfmadd213ss xmm4, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmadd213ss562() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm2, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xA9, 0xD3", "vfmadd213ss xmm2, xmm4, xmm3");
}



#[test]
fn enc_fma_vfmadd213ss563() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm2, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xA9, 0xD4", "vfmadd213ss xmm2, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmadd213ss564() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm15, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x19, 0xA9, 0xFB", "vfmadd213ss xmm15, xmm12, xmm11");
}



#[test]
fn enc_fma_vfmadd213ss565() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm12, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xA9, 0xE1", "vfmadd213ss xmm12, xmm3, xmm1");
}



#[test]
fn enc_fma_vfmadd213ss566() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm11, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xA9, 0x1C, 0x42", "vfmadd213ss xmm11, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213ss567() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm15, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xA9, 0x78, 0x10", "vfmadd213ss xmm15, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213ss568() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm11, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xA9, 0x1C, 0x42", "vfmadd213ss xmm11, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213ss569() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm2, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xA9, 0x14, 0x42", "vfmadd213ss xmm2, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213ss570() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd213ss xmm15, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xA9, 0x3C, 0x42", "vfmadd213ss xmm15, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd571() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm2, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xB9, 0xD2", "vfmadd231sd xmm2, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmadd231sd572() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm3, xmm4, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xB9, 0xD9", "vfmadd231sd xmm3, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmadd231sd573() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm11, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xB9, 0xDB", "vfmadd231sd xmm11, xmm1, xmm11");
}



#[test]
fn enc_fma_vfmadd231sd574() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm4, xmm15, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0xB9, 0xE7", "vfmadd231sd xmm4, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmadd231sd575() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm2, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xB9, 0xD1", "vfmadd231sd xmm2, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmadd231sd576() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xB9, 0x40, 0x10", "vfmadd231sd xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231sd577() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xB9, 0x24, 0x42", "vfmadd231sd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd578() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm0, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xB9, 0x00", "vfmadd231sd xmm0, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231sd579() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xB9, 0x60, 0x10", "vfmadd231sd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231sd580() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231sd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xB9, 0x18", "vfmadd231sd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231ss581() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm12, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xB9, 0xE0", "vfmadd231ss xmm12, xmm3, xmm0");
}



#[test]
fn enc_fma_vfmadd231ss582() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm3, xmm4, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xB9, 0xD9", "vfmadd231ss xmm3, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmadd231ss583() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm1, xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xB9, 0xCB", "vfmadd231ss xmm1, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd231ss584() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm2, xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xB9, 0xD3", "vfmadd231ss xmm2, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmadd231ss585() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm3, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xB9, 0xDB", "vfmadd231ss xmm3, xmm1, xmm11");
}



#[test]
fn enc_fma_vfmadd231ss586() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm12, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xB9, 0x24, 0x42", "vfmadd231ss xmm12, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231ss587() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm11, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xB9, 0x58, 0x10", "vfmadd231ss xmm11, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231ss588() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm1, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xB9, 0x48, 0x10", "vfmadd231ss xmm1, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231ss589() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm15, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xB9, 0x78, 0x10", "vfmadd231ss xmm15, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231ss590() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd231ss xmm1, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xB9, 0x0C, 0x42", "vfmadd231ss xmm1, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312sd591() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm2, xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x99, 0xD1", "vfmadd312sd xmm2, xmm11, xmm1");
}



#[test]
fn enc_fma_vfmadd312sd592() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm2, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0xD1", "vfmadd312sd xmm2, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmadd312sd593() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm11, xmm12, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x99, 0xDC", "vfmadd312sd xmm11, xmm12, xmm4");
}



#[test]
fn enc_fma_vfmadd312sd594() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm11, xmm11, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x99, 0xDB", "vfmadd312sd xmm11, xmm11, xmm3");
}



#[test]
fn enc_fma_vfmadd312sd595() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm0, xmm3, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x99, 0xC3", "vfmadd312sd xmm0, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmadd312sd596() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x99, 0x18", "vfmadd312sd xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd597() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x99, 0x20", "vfmadd312sd xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd598() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm4, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x99, 0x60, 0x10", "vfmadd312sd xmm4, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312sd599() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm15, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x99, 0x38", "vfmadd312sd xmm15, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd600() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312sd xmm4, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x99, 0x60, 0x10", "vfmadd312sd xmm4, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss601() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm2, xmm12, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x99, 0xD4", "vfmadd312ss xmm2, xmm12, xmm4");
}



#[test]
fn enc_fma_vfmadd312ss602() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm2, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0x99, 0xD3", "vfmadd312ss xmm2, xmm4, xmm11");
}



#[test]
fn enc_fma_vfmadd312ss603() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm4, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x99, 0xE7", "vfmadd312ss xmm4, xmm3, xmm15");
}



#[test]
fn enc_fma_vfmadd312ss604() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm3, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x99, 0xDC", "vfmadd312ss xmm3, xmm3, xmm12");
}



#[test]
fn enc_fma_vfmadd312ss605() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm4, xmm0, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x99, 0xE0", "vfmadd312ss xmm4, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmadd312ss606() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm11, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x99, 0x1C, 0x42", "vfmadd312ss xmm11, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312ss607() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm11, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x99, 0x1C, 0x42", "vfmadd312ss xmm11, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312ss608() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x99, 0x38", "vfmadd312ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312ss609() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm2, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x99, 0x50, 0x10", "vfmadd312ss xmm2, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss610() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd312ss xmm3, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x99, 0x58, 0x10", "vfmadd312ss xmm3, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd611() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm12, xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xB9, 0xE4", "vfmadd321sd xmm12, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmadd321sd612() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm12, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xB9, 0xE4", "vfmadd321sd xmm12, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmadd321sd613() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm3, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xB9, 0xDF", "vfmadd321sd xmm3, xmm12, xmm15");
}



#[test]
fn enc_fma_vfmadd321sd614() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm3, xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xB9, 0xDB", "vfmadd321sd xmm3, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd321sd615() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm4, xmm12, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xB9, 0xE4", "vfmadd321sd xmm4, xmm12, xmm12");
}



#[test]
fn enc_fma_vfmadd321sd616() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xB9, 0x0C, 0x42", "vfmadd321sd xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321sd617() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm15, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xB9, 0x3C, 0x42", "vfmadd321sd xmm15, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321sd618() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm11, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xB9, 0x58, 0x10", "vfmadd321sd xmm11, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd619() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xB9, 0x1C, 0x42", "vfmadd321sd xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321sd620() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321sd xmm12, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xB9, 0x60, 0x10", "vfmadd321sd xmm12, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss621() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm11, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0xB9, 0xDB", "vfmadd321ss xmm11, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmadd321ss622() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm2, xmm12, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xB9, 0xD0", "vfmadd321ss xmm2, xmm12, xmm0");
}



#[test]
fn enc_fma_vfmadd321ss623() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm11, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xB9, 0xDC", "vfmadd321ss xmm11, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmadd321ss624() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm1, xmm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xB9, 0xCB", "vfmadd321ss xmm1, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmadd321ss625() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm2, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xB9, 0xD4", "vfmadd321ss xmm2, xmm2, xmm12");
}



#[test]
fn enc_fma_vfmadd321ss626() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm12, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xB9, 0x60, 0x10", "vfmadd321ss xmm12, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss627() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm15, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xB9, 0x78, 0x10", "vfmadd321ss xmm15, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss628() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xB9, 0x38", "vfmadd321ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321ss629() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm4, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xB9, 0x60, 0x10", "vfmadd321ss xmm4, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss630() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmadd321ss xmm2, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xB9, 0x50, 0x10", "vfmadd321ss xmm2, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123sd631() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm11, xmm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE1, 0xAB, 0xDB", "vfmsub123sd xmm11, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmsub123sd632() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm3, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0xD8", "vfmsub123sd xmm3, xmm3, xmm0");
}



#[test]
fn enc_fma_vfmsub123sd633() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm3, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0xDC", "vfmsub123sd xmm3, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmsub123sd634() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm11, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAB, 0xDC", "vfmsub123sd xmm11, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmsub123sd635() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm1, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAB, 0xC8", "vfmsub123sd xmm1, xmm1, xmm0");
}



#[test]
fn enc_fma_vfmsub123sd636() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm1, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0x0C, 0x42", "vfmsub123sd xmm1, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd637() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAB, 0x0C, 0x42", "vfmsub123sd xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd638() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAB, 0x04, 0x42", "vfmsub123sd xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd639() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xAB, 0x40, 0x10", "vfmsub123sd xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123sd640() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123sd xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAB, 0x24, 0x42", "vfmsub123sd xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123ss641() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm12, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xAB, 0xE7", "vfmsub123ss xmm12, xmm3, xmm15");
}



#[test]
fn enc_fma_vfmsub123ss642() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm15, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xAB, 0xFC", "vfmsub123ss xmm15, xmm3, xmm12");
}



#[test]
fn enc_fma_vfmsub123ss643() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm3, xmm2, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAB, 0xD9", "vfmsub123ss xmm3, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmsub123ss644() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm15, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xAB, 0xFB", "vfmsub123ss xmm15, xmm0, xmm3");
}



#[test]
fn enc_fma_vfmsub123ss645() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm4, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xAB, 0xE7", "vfmsub123ss xmm4, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmsub123ss646() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm0, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAB, 0x00", "vfmsub123ss xmm0, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123ss647() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm12, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAB, 0x20", "vfmsub123ss xmm12, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123ss648() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm11, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAB, 0x58, 0x10", "vfmsub123ss xmm11, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss649() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm12, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAB, 0x60, 0x10", "vfmsub123ss xmm12, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss650() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub123ss xmm4, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAB, 0x24, 0x42", "vfmsub123ss xmm4, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132sd651() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm1, xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0xCA", "vfmsub132sd xmm1, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmsub132sd652() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm3, xmm15, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0x9B, 0xDF", "vfmsub132sd xmm3, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmsub132sd653() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm4, xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9B, 0xE2", "vfmsub132sd xmm4, xmm3, xmm2");
}



#[test]
fn enc_fma_vfmsub132sd654() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm15, xmm4, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9B, 0xF9", "vfmsub132sd xmm15, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmsub132sd655() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm4, xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0xE2", "vfmsub132sd xmm4, xmm11, xmm2");
}



#[test]
fn enc_fma_vfmsub132sd656() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm11, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9B, 0x58, 0x10", "vfmsub132sd xmm11, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132sd657() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9B, 0x10", "vfmsub132sd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132sd658() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0x24, 0x42", "vfmsub132sd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132sd659() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm11, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9B, 0x1C, 0x42", "vfmsub132sd xmm11, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132sd660() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132sd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0x10", "vfmsub132sd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132ss661() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm4, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x9B, 0xE7", "vfmsub132ss xmm4, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmsub132ss662() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm4, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0xE1", "vfmsub132ss xmm4, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmsub132ss663() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm0, xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9B, 0xC4", "vfmsub132ss xmm0, xmm15, xmm4");
}



#[test]
fn enc_fma_vfmsub132ss664() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm3, xmm4, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9B, 0xD8", "vfmsub132ss xmm3, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmsub132ss665() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm15, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x9B, 0xFC", "vfmsub132ss xmm15, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmsub132ss666() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9B, 0x40, 0x10", "vfmsub132ss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132ss667() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm15, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9B, 0x78, 0x10", "vfmsub132ss xmm15, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132ss668() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm0, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9B, 0x40, 0x10", "vfmsub132ss xmm0, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132ss669() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm2, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0x10", "vfmsub132ss xmm2, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132ss670() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub132ss xmm12, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x9B, 0x20", "vfmsub132ss xmm12, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213sd671() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm1, xmm4, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xAB, 0xCC", "vfmsub213sd xmm1, xmm4, xmm12");
}



#[test]
fn enc_fma_vfmsub213sd672() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm2, xmm2, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xAB, 0xD7", "vfmsub213sd xmm2, xmm2, xmm15");
}



#[test]
fn enc_fma_vfmsub213sd673() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm4, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAB, 0xE2", "vfmsub213sd xmm4, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmsub213sd674() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm0, xmm15, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0xAB, 0xC7", "vfmsub213sd xmm0, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmsub213sd675() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm4, xmm3, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0xE3", "vfmsub213sd xmm4, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmsub213sd676() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0x10", "vfmsub213sd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213sd677() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm15, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAB, 0x3C, 0x42", "vfmsub213sd xmm15, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd678() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm4, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0x60, 0x10", "vfmsub213sd xmm4, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub213sd679() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAB, 0x78, 0x10", "vfmsub213sd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub213sd680() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213sd xmm12, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xAB, 0x24, 0x42", "vfmsub213sd xmm12, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213ss681() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm11, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAB, 0xDC", "vfmsub213ss xmm11, xmm4, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss682() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm4, xmm4, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0xAB, 0xE4", "vfmsub213ss xmm4, xmm4, xmm12");
}



#[test]
fn enc_fma_vfmsub213ss683() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm3, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAB, 0xDC", "vfmsub213ss xmm3, xmm4, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss684() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm1, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xAB, 0xCB", "vfmsub213ss xmm1, xmm12, xmm11");
}



#[test]
fn enc_fma_vfmsub213ss685() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm4, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAB, 0xE4", "vfmsub213ss xmm4, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss686() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xAB, 0x38", "vfmsub213ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss687() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm15, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAB, 0x38", "vfmsub213ss xmm15, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss688() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm3, xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAB, 0x18", "vfmsub213ss xmm3, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss689() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm11, xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xAB, 0x18", "vfmsub213ss xmm11, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss690() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub213ss xmm2, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAB, 0x50, 0x10", "vfmsub213ss xmm2, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd691() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm3, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBB, 0xD9", "vfmsub231sd xmm3, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmsub231sd692() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm12, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x99, 0xBB, 0xE7", "vfmsub231sd xmm12, xmm12, xmm15");
}



#[test]
fn enc_fma_vfmsub231sd693() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm11, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x99, 0xBB, 0xDF", "vfmsub231sd xmm11, xmm12, xmm15");
}



#[test]
fn enc_fma_vfmsub231sd694() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm12, xmm11, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0xBB, 0xE7", "vfmsub231sd xmm12, xmm11, xmm15");
}



#[test]
fn enc_fma_vfmsub231sd695() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm0, xmm4, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xBB, 0xC7", "vfmsub231sd xmm0, xmm4, xmm15");
}



#[test]
fn enc_fma_vfmsub231sd696() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm12, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBB, 0x60, 0x10", "vfmsub231sd xmm12, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd697() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBB, 0x58, 0x10", "vfmsub231sd xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd698() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0x40, 0x10", "vfmsub231sd xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd699() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm11, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBB, 0x18", "vfmsub231sd xmm11, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231sd700() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231sd xmm3, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0x18", "vfmsub231sd xmm3, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss701() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm11, xmm1, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBB, 0xDB", "vfmsub231ss xmm11, xmm1, xmm3");
}



#[test]
fn enc_fma_vfmsub231ss702() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm12, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xBB, 0xE3", "vfmsub231ss xmm12, xmm1, xmm11");
}



#[test]
fn enc_fma_vfmsub231ss703() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm4, xmm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBB, 0xE2", "vfmsub231ss xmm4, xmm15, xmm2");
}



#[test]
fn enc_fma_vfmsub231ss704() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm0, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xBB, 0xC7", "vfmsub231ss xmm0, xmm12, xmm15");
}



#[test]
fn enc_fma_vfmsub231ss705() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm1, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xBB, 0xCC", "vfmsub231ss xmm1, xmm2, xmm12");
}



#[test]
fn enc_fma_vfmsub231ss706() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm0, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBB, 0x40, 0x10", "vfmsub231ss xmm0, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231ss707() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBB, 0x20", "vfmsub231ss xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss708() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm12, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xBB, 0x60, 0x10", "vfmsub231ss xmm12, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231ss709() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm2, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBB, 0x14, 0x42", "vfmsub231ss xmm2, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub231ss710() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub231ss xmm0, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBB, 0x04, 0x42", "vfmsub231ss xmm0, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312sd711() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm1, xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9B, 0xCC", "vfmsub312sd xmm1, xmm15, xmm4");
}



#[test]
fn enc_fma_vfmsub312sd712() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm12, xmm11, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9B, 0xE3", "vfmsub312sd xmm12, xmm11, xmm3");
}



#[test]
fn enc_fma_vfmsub312sd713() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm3, xmm4, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0x9B, 0xDF", "vfmsub312sd xmm3, xmm4, xmm15");
}



#[test]
fn enc_fma_vfmsub312sd714() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm1, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9B, 0xCB", "vfmsub312sd xmm1, xmm0, xmm3");
}



#[test]
fn enc_fma_vfmsub312sd715() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm11, xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x81, 0x9B, 0xDB", "vfmsub312sd xmm11, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmsub312sd716() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x9B, 0x1C, 0x42", "vfmsub312sd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312sd717() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm1, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9B, 0x08", "vfmsub312sd xmm1, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312sd718() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9B, 0x10", "vfmsub312sd xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312sd719() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm1, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9B, 0x0C, 0x42", "vfmsub312sd xmm1, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312sd720() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312sd xmm12, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9B, 0x20", "vfmsub312sd xmm12, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312ss721() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm4, xmm15, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0x9B, 0xE4", "vfmsub312ss xmm4, xmm15, xmm12");
}



#[test]
fn enc_fma_vfmsub312ss722() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm12, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x19, 0x9B, 0xE7", "vfmsub312ss xmm12, xmm12, xmm15");
}



#[test]
fn enc_fma_vfmsub312ss723() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm12, xmm15, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9B, 0xE1", "vfmsub312ss xmm12, xmm15, xmm1");
}



#[test]
fn enc_fma_vfmsub312ss724() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm0, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x9B, 0xC4", "vfmsub312ss xmm0, xmm3, xmm12");
}



#[test]
fn enc_fma_vfmsub312ss725() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm3, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0xDB", "vfmsub312ss xmm3, xmm0, xmm3");
}



#[test]
fn enc_fma_vfmsub312ss726() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm3, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9B, 0x1C, 0x42", "vfmsub312ss xmm3, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312ss727() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm3, xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9B, 0x18", "vfmsub312ss xmm3, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312ss728() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm1, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0x08", "vfmsub312ss xmm1, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312ss729() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm1, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9B, 0x48, 0x10", "vfmsub312ss xmm1, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312ss730() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub312ss xmm11, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9B, 0x1C, 0x42", "vfmsub312ss xmm11, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd731() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm11, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBB, 0xDC", "vfmsub321sd xmm11, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmsub321sd732() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm1, xmm2, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBB, 0xC9", "vfmsub321sd xmm1, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmsub321sd733() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm12, xmm3, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBB, 0xE4", "vfmsub321sd xmm12, xmm3, xmm4");
}



#[test]
fn enc_fma_vfmsub321sd734() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm2, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBB, 0xD4", "vfmsub321sd xmm2, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmsub321sd735() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm1, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xBB, 0xCB", "vfmsub321sd xmm1, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmsub321sd736() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBB, 0x04, 0x42", "vfmsub321sd xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd737() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBB, 0x24, 0x42", "vfmsub321sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd738() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBB, 0x40, 0x10", "vfmsub321sd xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub321sd739() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm1, xmm11, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBB, 0x08", "vfmsub321sd xmm1, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321sd740() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321sd xmm1, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0x08", "vfmsub321sd xmm1, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss741() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm4, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBB, 0xE0", "vfmsub321ss xmm4, xmm3, xmm0");
}



#[test]
fn enc_fma_vfmsub321ss742() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm3, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xBB, 0xDF", "vfmsub321ss xmm3, xmm3, xmm15");
}



#[test]
fn enc_fma_vfmsub321ss743() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm15, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xBB, 0xFC", "vfmsub321ss xmm15, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmsub321ss744() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm12, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xBB, 0xE7", "vfmsub321ss xmm12, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmsub321ss745() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm4, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xBB, 0xE7", "vfmsub321ss xmm4, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmsub321ss746() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm4, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBB, 0x20", "vfmsub321ss xmm4, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss747() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm2, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBB, 0x14, 0x42", "vfmsub321ss xmm2, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321ss748() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0x10", "vfmsub321ss xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss749() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm15, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xBB, 0x78, 0x10", "vfmsub321ss xmm15, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub321ss750() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfmsub321ss xmm12, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBB, 0x20", "vfmsub321ss xmm12, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123sd751() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm0, xmm4, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xAD, 0xC4", "vfnmadd123sd xmm0, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmadd123sd752() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm11, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAD, 0xDC", "vfnmadd123sd xmm11, xmm11, xmm4");
}



#[test]
fn enc_fma_vfnmadd123sd753() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm4, xmm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xAD, 0xE3", "vfnmadd123sd xmm4, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd123sd754() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm1, xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAD, 0xCA", "vfnmadd123sd xmm1, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmadd123sd755() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm11, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAD, 0xDB", "vfnmadd123sd xmm11, xmm4, xmm3");
}



#[test]
fn enc_fma_vfnmadd123sd756() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm2, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0x50, 0x10", "vfnmadd123sd xmm2, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123sd757() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm1, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0x08", "vfnmadd123sd xmm1, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123sd758() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xAD, 0x78, 0x10", "vfnmadd123sd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123sd759() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xAD, 0x0C, 0x42", "vfnmadd123sd xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123sd760() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123sd xmm1, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAD, 0x08", "vfnmadd123sd xmm1, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss761() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm4, xmm11, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0xAD, 0xE4", "vfnmadd123ss xmm4, xmm11, xmm12");
}



#[test]
fn enc_fma_vfnmadd123ss762() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm4, xmm15, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xAD, 0xE3", "vfnmadd123ss xmm4, xmm15, xmm11");
}



#[test]
fn enc_fma_vfnmadd123ss763() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm15, xmm2, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAD, 0xF9", "vfnmadd123ss xmm15, xmm2, xmm1");
}



#[test]
fn enc_fma_vfnmadd123ss764() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm2, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0xAD, 0xD3", "vfnmadd123ss xmm2, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmadd123ss765() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm0, xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAD, 0xC2", "vfnmadd123ss xmm0, xmm3, xmm2");
}



#[test]
fn enc_fma_vfnmadd123ss766() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm11, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAD, 0x18", "vfnmadd123ss xmm11, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss767() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm2, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0x50, 0x10", "vfnmadd123ss xmm2, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123ss768() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm1, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0x48, 0x10", "vfnmadd123ss xmm1, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123ss769() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm15, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAD, 0x78, 0x10", "vfnmadd123ss xmm15, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123ss770() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd123ss xmm12, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAD, 0x60, 0x10", "vfnmadd123ss xmm12, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132sd771() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm0, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9D, 0xC4", "vfnmadd132sd xmm0, xmm0, xmm4");
}



#[test]
fn enc_fma_vfnmadd132sd772() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm15, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE1, 0x9D, 0xFF", "vfnmadd132sd xmm15, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmadd132sd773() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm15, xmm1, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9D, 0xFB", "vfnmadd132sd xmm15, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmadd132sd774() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm0, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0x9D, 0xC3", "vfnmadd132sd xmm0, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmadd132sd775() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm11, xmm4, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xD9, 0x9D, 0xDF", "vfnmadd132sd xmm11, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmadd132sd776() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9D, 0x20", "vfnmadd132sd xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132sd777() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9D, 0x1C, 0x42", "vfnmadd132sd xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132sd778() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm11, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9D, 0x58, 0x10", "vfnmadd132sd xmm11, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132sd779() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm12, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0x9D, 0x24, 0x42", "vfnmadd132sd xmm12, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132sd780() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132sd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9D, 0x60, 0x10", "vfnmadd132sd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132ss781() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm12, xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0x9D, 0xE7", "vfnmadd132ss xmm12, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmadd132ss782() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm12, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0x9D, 0xE3", "vfnmadd132ss xmm12, xmm4, xmm3");
}



#[test]
fn enc_fma_vfnmadd132ss783() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm15, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9D, 0xF8", "vfnmadd132ss xmm15, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmadd132ss784() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm0, xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9D, 0xC3", "vfnmadd132ss xmm0, xmm15, xmm3");
}



#[test]
fn enc_fma_vfnmadd132ss785() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm0, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0x9D, 0xC3", "vfnmadd132ss xmm0, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmadd132ss786() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm3, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9D, 0x58, 0x10", "vfnmadd132ss xmm3, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132ss787() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm2, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9D, 0x10", "vfnmadd132ss xmm2, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss788() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm12, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9D, 0x20", "vfnmadd132ss xmm12, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss789() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm0, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9D, 0x04, 0x42", "vfnmadd132ss xmm0, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132ss790() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd132ss xmm11, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9D, 0x1C, 0x42", "vfnmadd132ss xmm11, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213sd791() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm12, xmm12, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xAD, 0xE2", "vfnmadd213sd xmm12, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmadd213sd792() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm11, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAD, 0xDB", "vfnmadd213sd xmm11, xmm0, xmm3");
}



#[test]
fn enc_fma_vfnmadd213sd793() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm11, xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAD, 0xD8", "vfnmadd213sd xmm11, xmm3, xmm0");
}



#[test]
fn enc_fma_vfnmadd213sd794() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm11, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xAD, 0xDF", "vfnmadd213sd xmm11, xmm1, xmm15");
}



#[test]
fn enc_fma_vfnmadd213sd795() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm0, xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAD, 0xC2", "vfnmadd213sd xmm0, xmm3, xmm2");
}



#[test]
fn enc_fma_vfnmadd213sd796() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAD, 0x1C, 0x42", "vfnmadd213sd xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213sd797() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0x24, 0x42", "vfnmadd213sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213sd798() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm1, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAD, 0x08", "vfnmadd213sd xmm1, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd799() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAD, 0x18", "vfnmadd213sd xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd800() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213sd xmm15, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAD, 0x3C, 0x42", "vfnmadd213sd xmm15, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213ss801() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAD, 0xCC", "vfnmadd213ss xmm1, xmm3, xmm4");
}



#[test]
fn enc_fma_vfnmadd213ss802() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm11, xmm15, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xAD, 0xD9", "vfnmadd213ss xmm11, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmadd213ss803() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm15, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0xAD, 0xFC", "vfnmadd213ss xmm15, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmadd213ss804() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm2, xmm2, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAD, 0xD3", "vfnmadd213ss xmm2, xmm2, xmm3");
}



#[test]
fn enc_fma_vfnmadd213ss805() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm4, xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAD, 0xE3", "vfnmadd213ss xmm4, xmm15, xmm3");
}



#[test]
fn enc_fma_vfnmadd213ss806() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm0, xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAD, 0x00", "vfnmadd213ss xmm0, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213ss807() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm4, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAD, 0x60, 0x10", "vfnmadd213ss xmm4, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213ss808() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm11, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAD, 0x1C, 0x42", "vfnmadd213ss xmm11, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213ss809() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm11, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAD, 0x18", "vfnmadd213ss xmm11, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213ss810() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd213ss xmm1, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0x48, 0x10", "vfnmadd213ss xmm1, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd811() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm15, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBD, 0xF9", "vfnmadd231sd xmm15, xmm3, xmm1");
}



#[test]
fn enc_fma_vfnmadd231sd812() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm11, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBD, 0xD9", "vfnmadd231sd xmm11, xmm0, xmm1");
}



#[test]
fn enc_fma_vfnmadd231sd813() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm1, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xBD, 0xCC", "vfnmadd231sd xmm1, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmadd231sd814() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm12, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xBD, 0xE0", "vfnmadd231sd xmm12, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmadd231sd815() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm1, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xBD, 0xCC", "vfnmadd231sd xmm1, xmm3, xmm12");
}



#[test]
fn enc_fma_vfnmadd231sd816() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm15, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBD, 0x78, 0x10", "vfnmadd231sd xmm15, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd817() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBD, 0x1C, 0x42", "vfnmadd231sd xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231sd818() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm3, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBD, 0x58, 0x10", "vfnmadd231sd xmm3, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd819() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBD, 0x14, 0x42", "vfnmadd231sd xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231sd820() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231sd xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBD, 0x04, 0x42", "vfnmadd231sd xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231ss821() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm4, xmm15, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBD, 0xE1", "vfnmadd231ss xmm4, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmadd231ss822() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm12, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xBD, 0xE4", "vfnmadd231ss xmm12, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmadd231ss823() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm3, xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBD, 0xDC", "vfnmadd231ss xmm3, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmadd231ss824() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm4, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0xE0", "vfnmadd231ss xmm4, xmm1, xmm0");
}



#[test]
fn enc_fma_vfnmadd231ss825() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm0, xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xBD, 0xC4", "vfnmadd231ss xmm0, xmm0, xmm12");
}



#[test]
fn enc_fma_vfnmadd231ss826() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm11, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xBD, 0x1C, 0x42", "vfnmadd231ss xmm11, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231ss827() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm4, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0x20", "vfnmadd231ss xmm4, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231ss828() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm2, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBD, 0x10", "vfnmadd231ss xmm2, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231ss829() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm15, xmm12, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xBD, 0x38", "vfnmadd231ss xmm15, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231ss830() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd231ss xmm11, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xBD, 0x58, 0x10", "vfnmadd231ss xmm11, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312sd831() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm12, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9D, 0xE4", "vfnmadd312sd xmm12, xmm11, xmm4");
}



#[test]
fn enc_fma_vfnmadd312sd832() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm1, xmm15, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0xCC", "vfnmadd312sd xmm1, xmm15, xmm4");
}



#[test]
fn enc_fma_vfnmadd312sd833() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm4, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0x9D, 0xE4", "vfnmadd312sd xmm4, xmm3, xmm12");
}



#[test]
fn enc_fma_vfnmadd312sd834() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm3, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0x9D, 0xDF", "vfnmadd312sd xmm3, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmadd312sd835() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm4, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9D, 0xE4", "vfnmadd312sd xmm4, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmadd312sd836() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0x9D, 0x24, 0x42", "vfnmadd312sd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312sd837() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm2, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0x14, 0x42", "vfnmadd312sd xmm2, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312sd838() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9D, 0x08", "vfnmadd312sd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312sd839() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9D, 0x38", "vfnmadd312sd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312sd840() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312sd xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9D, 0x18", "vfnmadd312sd xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss841() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm0, xmm11, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9D, 0xC2", "vfnmadd312ss xmm0, xmm11, xmm2");
}



#[test]
fn enc_fma_vfnmadd312ss842() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm2, xmm2, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0x9D, 0xD7", "vfnmadd312ss xmm2, xmm2, xmm15");
}



#[test]
fn enc_fma_vfnmadd312ss843() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm11, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0x9D, 0xD9", "vfnmadd312ss xmm11, xmm3, xmm1");
}



#[test]
fn enc_fma_vfnmadd312ss844() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm11, xmm2, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0x9D, 0xDB", "vfnmadd312ss xmm11, xmm2, xmm11");
}



#[test]
fn enc_fma_vfnmadd312ss845() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm2, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x9D, 0xD4", "vfnmadd312ss xmm2, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmadd312ss846() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm1, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9D, 0x08", "vfnmadd312ss xmm1, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss847() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm2, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9D, 0x14, 0x42", "vfnmadd312ss xmm2, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312ss848() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm0, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9D, 0x40, 0x10", "vfnmadd312ss xmm0, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312ss849() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm11, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x9D, 0x58, 0x10", "vfnmadd312ss xmm11, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312ss850() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd312ss xmm11, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0x9D, 0x58, 0x10", "vfnmadd312ss xmm11, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321sd851() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm1, xmm12, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBD, 0xCC", "vfnmadd321sd xmm1, xmm12, xmm4");
}



#[test]
fn enc_fma_vfnmadd321sd852() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm0, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBD, 0xC4", "vfnmadd321sd xmm0, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmadd321sd853() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm11, xmm3, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE1, 0xBD, 0xDB", "vfnmadd321sd xmm11, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd321sd854() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm4, xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBD, 0xE4", "vfnmadd321sd xmm4, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmadd321sd855() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm12, xmm0, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBD, 0xE1", "vfnmadd321sd xmm12, xmm0, xmm1");
}



#[test]
fn enc_fma_vfnmadd321sd856() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xBD, 0x20", "vfnmadd321sd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321sd857() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBD, 0x40, 0x10", "vfnmadd321sd xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321sd858() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBD, 0x1C, 0x42", "vfnmadd321sd xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321sd859() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm15, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBD, 0x3C, 0x42", "vfnmadd321sd xmm15, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321sd860() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321sd xmm3, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBD, 0x58, 0x10", "vfnmadd321sd xmm3, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss861() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm2, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0xD2", "vfnmadd321ss xmm2, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmadd321ss862() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm1, xmm11, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBD, 0xCC", "vfnmadd321ss xmm1, xmm11, xmm4");
}



#[test]
fn enc_fma_vfnmadd321ss863() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm15, xmm2, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xBD, 0xF8", "vfnmadd321ss xmm15, xmm2, xmm0");
}



#[test]
fn enc_fma_vfnmadd321ss864() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm4, xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBD, 0xE1", "vfnmadd321ss xmm4, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmadd321ss865() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm1, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xBD, 0xCC", "vfnmadd321ss xmm1, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmadd321ss866() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm3, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBD, 0x58, 0x10", "vfnmadd321ss xmm3, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss867() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm11, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xBD, 0x18", "vfnmadd321ss xmm11, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321ss868() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0x18", "vfnmadd321ss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321ss869() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm15, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xBD, 0x78, 0x10", "vfnmadd321ss xmm15, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss870() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmadd321ss xmm3, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0x18", "vfnmadd321ss xmm3, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123sd871() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm4, xmm11, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAF, 0xE3", "vfnmsub123sd xmm4, xmm11, xmm3");
}



#[test]
fn enc_fma_vfnmsub123sd872() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm12, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xAF, 0xE0", "vfnmsub123sd xmm12, xmm1, xmm0");
}



#[test]
fn enc_fma_vfnmsub123sd873() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm3, xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAF, 0xDA", "vfnmsub123sd xmm3, xmm3, xmm2");
}



#[test]
fn enc_fma_vfnmsub123sd874() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm3, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAF, 0xD8", "vfnmsub123sd xmm3, xmm11, xmm0");
}



#[test]
fn enc_fma_vfnmsub123sd875() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm11, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE9, 0xAF, 0xDC", "vfnmsub123sd xmm11, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmsub123sd876() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm15, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAF, 0x78, 0x10", "vfnmsub123sd xmm15, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd877() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm4, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAF, 0x60, 0x10", "vfnmsub123sd xmm4, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd878() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAF, 0x04, 0x42", "vfnmsub123sd xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub123sd879() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAF, 0x60, 0x10", "vfnmsub123sd xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd880() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123sd xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xAF, 0x1C, 0x42", "vfnmsub123sd xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub123ss881() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm15, xmm15, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xAF, 0xF9", "vfnmsub123ss xmm15, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmsub123ss882() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm4, xmm4, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0xAF, 0xE4", "vfnmsub123ss xmm4, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmsub123ss883() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm12, xmm2, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAF, 0xE4", "vfnmsub123ss xmm12, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmsub123ss884() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm12, xmm1, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xAF, 0xE7", "vfnmsub123ss xmm12, xmm1, xmm15");
}



#[test]
fn enc_fma_vfnmsub123ss885() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm3, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAF, 0xD9", "vfnmsub123ss xmm3, xmm12, xmm1");
}



#[test]
fn enc_fma_vfnmsub123ss886() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm12, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAF, 0x24, 0x42", "vfnmsub123ss xmm12, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub123ss887() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm4, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAF, 0x20", "vfnmsub123ss xmm4, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss888() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm12, xmm11, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAF, 0x20", "vfnmsub123ss xmm12, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss889() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm3, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAF, 0x18", "vfnmsub123ss xmm3, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss890() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub123ss xmm3, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0x1C, 0x42", "vfnmsub123ss xmm3, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132sd891() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm15, xmm1, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9F, 0xFB", "vfnmsub132sd xmm15, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmsub132sd892() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm12, xmm1, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9F, 0xE1", "vfnmsub132sd xmm12, xmm1, xmm1");
}



#[test]
fn enc_fma_vfnmsub132sd893() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm15, xmm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9F, 0xFA", "vfnmsub132sd xmm15, xmm15, xmm2");
}



#[test]
fn enc_fma_vfnmsub132sd894() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm2, xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0x9F, 0xD3", "vfnmsub132sd xmm2, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmsub132sd895() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm12, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9F, 0xE0", "vfnmsub132sd xmm12, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmsub132sd896() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm1, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9F, 0x08", "vfnmsub132sd xmm1, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd897() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9F, 0x00", "vfnmsub132sd xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd898() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9F, 0x10", "vfnmsub132sd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd899() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm2, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9F, 0x10", "vfnmsub132sd xmm2, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd900() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132sd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9F, 0x20", "vfnmsub132sd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss901() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm4, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0x9F, 0xE3", "vfnmsub132ss xmm4, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmsub132ss902() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm15, xmm2, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x9F, 0xFA", "vfnmsub132ss xmm15, xmm2, xmm2");
}



#[test]
fn enc_fma_vfnmsub132ss903() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm4, xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0x9F, 0xE4", "vfnmsub132ss xmm4, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmsub132ss904() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm0, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0x9F, 0xC3", "vfnmsub132ss xmm0, xmm0, xmm11");
}



#[test]
fn enc_fma_vfnmsub132ss905() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm11, xmm0, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0x9F, 0xDB", "vfnmsub132ss xmm11, xmm0, xmm11");
}



#[test]
fn enc_fma_vfnmsub132ss906() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm4, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9F, 0x60, 0x10", "vfnmsub132ss xmm4, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub132ss907() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x9F, 0x18", "vfnmsub132ss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss908() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm12, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9F, 0x24, 0x42", "vfnmsub132ss xmm12, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132ss909() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm2, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9F, 0x14, 0x42", "vfnmsub132ss xmm2, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132ss910() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub132ss xmm3, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0x18", "vfnmsub132ss xmm3, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213sd911() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm1, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xAF, 0xCF", "vfnmsub213sd xmm1, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmsub213sd912() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm11, xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xAF, 0xDC", "vfnmsub213sd xmm11, xmm0, xmm12");
}



#[test]
fn enc_fma_vfnmsub213sd913() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm4, xmm2, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAF, 0xE2", "vfnmsub213sd xmm4, xmm2, xmm2");
}



#[test]
fn enc_fma_vfnmsub213sd914() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm3, xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF1, 0xAF, 0xDC", "vfnmsub213sd xmm3, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmsub213sd915() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm3, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAF, 0xDC", "vfnmsub213sd xmm3, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmsub213sd916() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAF, 0x24, 0x42", "vfnmsub213sd xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213sd917() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm0, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAF, 0x00", "vfnmsub213sd xmm0, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213sd918() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAF, 0x20", "vfnmsub213sd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213sd919() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213sd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAF, 0x24, 0x42", "vfnmsub213sd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213ss920() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm3, xmm4, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0xDA", "vfnmsub213ss xmm3, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmsub213ss921() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm4, xmm4, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0xE2", "vfnmsub213ss xmm4, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmsub213ss922() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm1, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAF, 0xCC", "vfnmsub213ss xmm1, xmm1, xmm4");
}



#[test]
fn enc_fma_vfnmsub213ss923() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm4, xmm15, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAF, 0xE0", "vfnmsub213ss xmm4, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmsub213ss924() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm11, xmm15, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xAF, 0xDA", "vfnmsub213ss xmm11, xmm15, xmm2");
}



#[test]
fn enc_fma_vfnmsub213ss925() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm3, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAF, 0x58, 0x10", "vfnmsub213ss xmm3, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss926() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm1, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAF, 0x48, 0x10", "vfnmsub213ss xmm1, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss927() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm12, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAF, 0x20", "vfnmsub213ss xmm12, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213ss928() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm3, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0x58, 0x10", "vfnmsub213ss xmm3, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss929() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub213ss xmm11, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xAF, 0x1C, 0x42", "vfnmsub213ss xmm11, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd930() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm2, xmm1, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBF, 0xD2", "vfnmsub231sd xmm2, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmsub231sd931() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm15, xmm1, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBF, 0xF9", "vfnmsub231sd xmm15, xmm1, xmm1");
}



#[test]
fn enc_fma_vfnmsub231sd932() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm12, xmm11, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0xE0", "vfnmsub231sd xmm12, xmm11, xmm0");
}



#[test]
fn enc_fma_vfnmsub231sd933() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm15, xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0xF9", "vfnmsub231sd xmm15, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmsub231sd934() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm1, xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xBF, 0xCF", "vfnmsub231sd xmm1, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmsub231sd935() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBF, 0x0C, 0x42", "vfnmsub231sd xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd936() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm15, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xBF, 0x3C, 0x42", "vfnmsub231sd xmm15, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd937() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBF, 0x60, 0x10", "vfnmsub231sd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231sd938() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm2, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBF, 0x50, 0x10", "vfnmsub231sd xmm2, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231sd939() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231sd xmm15, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBF, 0x78, 0x10", "vfnmsub231sd xmm15, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss940() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm11, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xBF, 0xDF", "vfnmsub231ss xmm11, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmsub231ss941() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm1, xmm15, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0xCB", "vfnmsub231ss xmm1, xmm15, xmm3");
}



#[test]
fn enc_fma_vfnmsub231ss942() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm2, xmm4, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBF, 0xD2", "vfnmsub231ss xmm2, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmsub231ss943() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm12, xmm4, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBF, 0xE3", "vfnmsub231ss xmm12, xmm4, xmm3");
}



#[test]
fn enc_fma_vfnmsub231ss944() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm4, xmm0, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBF, 0xE4", "vfnmsub231ss xmm4, xmm0, xmm4");
}



#[test]
fn enc_fma_vfnmsub231ss945() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm1, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBF, 0x48, 0x10", "vfnmsub231ss xmm1, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss946() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm1, xmm1, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBF, 0x08", "vfnmsub231ss xmm1, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub231ss947() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBF, 0x0C, 0x42", "vfnmsub231ss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231ss948() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm1, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBF, 0x0C, 0x42", "vfnmsub231ss xmm1, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231ss949() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub231ss xmm12, xmm3, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xBF, 0x20", "vfnmsub231ss xmm12, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312sd950() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm15, xmm3, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0x9F, 0xF9", "vfnmsub312sd xmm15, xmm3, xmm1");
}



#[test]
fn enc_fma_vfnmsub312sd951() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm2, xmm2, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9F, 0xD2", "vfnmsub312sd xmm2, xmm2, xmm2");
}



#[test]
fn enc_fma_vfnmsub312sd952() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm1, xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9F, 0xC9", "vfnmsub312sd xmm1, xmm12, xmm1");
}



#[test]
fn enc_fma_vfnmsub312sd953() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm2, xmm3, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0x9F, 0xD4", "vfnmsub312sd xmm2, xmm3, xmm12");
}



#[test]
fn enc_fma_vfnmsub312sd954() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm15, xmm1, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9F, 0xF8", "vfnmsub312sd xmm15, xmm1, xmm0");
}



#[test]
fn enc_fma_vfnmsub312sd955() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9F, 0x24, 0x42", "vfnmsub312sd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub312sd956() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9F, 0x60, 0x10", "vfnmsub312sd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd957() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9F, 0x18", "vfnmsub312sd xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312sd958() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9F, 0x60, 0x10", "vfnmsub312sd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd959() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312sd xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9F, 0x40, 0x10", "vfnmsub312sd xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312ss960() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm15, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x19, 0x9F, 0xFF", "vfnmsub312ss xmm15, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmsub312ss961() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm2, xmm0, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0xD3", "vfnmsub312ss xmm2, xmm0, xmm3");
}



#[test]
fn enc_fma_vfnmsub312ss962() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm3, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9F, 0xDC", "vfnmsub312ss xmm3, xmm1, xmm4");
}



#[test]
fn enc_fma_vfnmsub312ss963() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm15, xmm11, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0x9F, 0xFB", "vfnmsub312ss xmm15, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmsub312ss964() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm3, xmm3, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x9F, 0xDF", "vfnmsub312ss xmm3, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmsub312ss965() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm11, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9F, 0x18", "vfnmsub312ss xmm11, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss966() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm2, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9F, 0x50, 0x10", "vfnmsub312ss xmm2, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312ss967() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm4, xmm0, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0x20", "vfnmsub312ss xmm4, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss968() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm15, xmm4, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0x9F, 0x38", "vfnmsub312ss xmm15, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss969() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub312ss xmm3, xmm2, DWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9F, 0x18", "vfnmsub312ss xmm3, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321sd970() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm3, xmm11, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBF, 0xD9", "vfnmsub321sd xmm3, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmsub321sd971() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm1, xmm0, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBF, 0xCA", "vfnmsub321sd xmm1, xmm0, xmm2");
}



#[test]
fn enc_fma_vfnmsub321sd972() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm12, xmm12, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x99, 0xBF, 0xE7", "vfnmsub321sd xmm12, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmsub321sd973() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm3, xmm4, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBF, 0xDC", "vfnmsub321sd xmm3, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmsub321sd974() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm2, xmm1, xmm4
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBF, 0xD4", "vfnmsub321sd xmm2, xmm1, xmm4");
}



#[test]
fn enc_fma_vfnmsub321sd975() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm2, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBF, 0x14, 0x42", "vfnmsub321sd xmm2, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321sd976() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBF, 0x18", "vfnmsub321sd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321sd977() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBF, 0x24, 0x42", "vfnmsub321sd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321sd978() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm4, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBF, 0x60, 0x10", "vfnmsub321sd xmm4, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321sd979() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321sd xmm12, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xBF, 0x60, 0x10", "vfnmsub321sd xmm12, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321ss980() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm0, xmm12, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xBF, 0xC3", "vfnmsub321ss xmm0, xmm12, xmm11");
}



#[test]
fn enc_fma_vfnmsub321ss981() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm11, xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xBF, 0xDB", "vfnmsub321ss xmm11, xmm1, xmm11");
}



#[test]
fn enc_fma_vfnmsub321ss982() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm15, xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xBF, 0xFC", "vfnmsub321ss xmm15, xmm0, xmm12");
}



#[test]
fn enc_fma_vfnmsub321ss983() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm0, xmm0, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xBF, 0xC7", "vfnmsub321ss xmm0, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmsub321ss984() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm4, xmm1, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBF, 0xE3", "vfnmsub321ss xmm4, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmsub321ss985() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm2, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBF, 0x50, 0x10", "vfnmsub321ss xmm2, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321ss986() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm0, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBF, 0x40, 0x10", "vfnmsub321ss xmm0, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321ss987() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm11, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xBF, 0x1C, 0x42", "vfnmsub321ss xmm11, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321ss988() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm2, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBF, 0x14, 0x42", "vfnmsub321ss xmm2, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321ss989() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; vfnmsub321ss xmm3, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBF, 0x1C, 0x42", "vfnmsub321ss xmm3, xmm12, DWORD [rax * 2 + rdx]");
}


