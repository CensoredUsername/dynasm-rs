
#[test]
fn enc_sha_sha1msg15366() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg1 xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0x04, 0x42", "sha1msg1 xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha1msg15367() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg1 xmm0, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0x02", "sha1msg1 xmm0, OWORD [rdx]");
}



#[test]
fn enc_sha_sha1msg15368() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg1 xmm12, xmm3
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC9, 0xE3", "sha1msg1 xmm12, xmm3");
}



#[test]
fn enc_sha_sha1msg15369() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg1 xmm4, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0x20", "sha1msg1 xmm4, OWORD [rax]");
}



#[test]
fn enc_sha_sha1msg15370() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg1 xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC9, 0xCC", "sha1msg1 xmm1, xmm12");
}



#[test]
fn enc_sha_sha1msg25371() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg2 xmm3, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0x1A", "sha1msg2 xmm3, OWORD [rdx]");
}



#[test]
fn enc_sha_sha1msg25372() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg2 xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0xDA", "sha1msg2 xmm3, xmm2");
}



#[test]
fn enc_sha_sha1msg25373() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg2 xmm1, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0x08", "sha1msg2 xmm1, OWORD [rax]");
}



#[test]
fn enc_sha_sha1msg25374() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg2 xmm2, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xD4", "sha1msg2 xmm2, xmm12");
}



#[test]
fn enc_sha_sha1msg25375() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1msg2 xmm12, xmm1
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0xE1", "sha1msg2 xmm12, xmm1");
}



#[test]
fn enc_sha_sha1nexte5376() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1nexte xmm3, xmm2
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0xDA", "sha1nexte xmm3, xmm2");
}



#[test]
fn enc_sha_sha1nexte5377() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1nexte xmm2, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0x12", "sha1nexte xmm2, OWORD [rdx]");
}



#[test]
fn enc_sha_sha1nexte5378() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1nexte xmm12, OWORD [rax]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC8, 0x20", "sha1nexte xmm12, OWORD [rax]");
}



#[test]
fn enc_sha_sha1nexte5379() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1nexte xmm11, xmm15
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC8, 0xDF", "sha1nexte xmm11, xmm15");
}



#[test]
fn enc_sha_sha1nexte5380() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1nexte xmm4, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC8, 0xE3", "sha1nexte xmm4, xmm11");
}



#[test]
fn enc_sha_sha1rnds45381() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1rnds4 xmm15, xmm15, 50
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x3A, 0xCC, 0xFF, 0x32", "sha1rnds4 xmm15, xmm15, 50");
}



#[test]
fn enc_sha_sha1rnds45382() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1rnds4 xmm2, xmm2, 92
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xD2, 0x5C", "sha1rnds4 xmm2, xmm2, 92");
}



#[test]
fn enc_sha_sha1rnds45383() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1rnds4 xmm15, xmm2, 71
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x3A, 0xCC, 0xFA, 0x47", "sha1rnds4 xmm15, xmm2, 71");
}



#[test]
fn enc_sha_sha1rnds45384() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1rnds4 xmm0, xmm2, 25
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xC2, 0x19", "sha1rnds4 xmm0, xmm2, 25");
}



#[test]
fn enc_sha_sha1rnds45385() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha1rnds4 xmm15, xmm15, 119
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x3A, 0xCC, 0xFF, 0x77", "sha1rnds4 xmm15, xmm15, 119");
}



#[test]
fn enc_sha_sha256msg15386() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg1 xmm1, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x0A", "sha256msg1 xmm1, OWORD [rdx]");
}



#[test]
fn enc_sha_sha256msg15387() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg1 xmm12, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCC, 0x22", "sha256msg1 xmm12, OWORD [rdx]");
}



#[test]
fn enc_sha_sha256msg15388() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg1 xmm3, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xD8", "sha256msg1 xmm3, xmm0");
}



#[test]
fn enc_sha_sha256msg15389() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg1 xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCC, 0xCC", "sha256msg1 xmm1, xmm12");
}



#[test]
fn enc_sha_sha256msg15390() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg1 xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCC, 0xCB", "sha256msg1 xmm1, xmm11");
}



#[test]
fn enc_sha_sha256msg25391() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg2 xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xCB", "sha256msg2 xmm1, xmm11");
}



#[test]
fn enc_sha_sha256msg25392() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg2 xmm0, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xC4", "sha256msg2 xmm0, xmm12");
}



#[test]
fn enc_sha_sha256msg25393() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg2 xmm4, OWORD [rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCD, 0x22", "sha256msg2 xmm4, OWORD [rdx]");
}



#[test]
fn enc_sha_sha256msg25394() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg2 xmm1, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xCC", "sha256msg2 xmm1, xmm12");
}



#[test]
fn enc_sha_sha256msg25395() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256msg2 xmm4, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCD, 0xE0", "sha256msg2 xmm4, xmm0");
}



#[test]
fn enc_sha_sha256rnds25396() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256rnds2 xmm4, xmm12
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xE4", "sha256rnds2 xmm4, xmm12");
}



#[test]
fn enc_sha_sha256rnds25397() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256rnds2 xmm1, xmm11
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xCB", "sha256rnds2 xmm1, xmm11");
}



#[test]
fn enc_sha_sha256rnds25398() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256rnds2 xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0x1C, 0x42", "sha256rnds2 xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha256rnds25399() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256rnds2 xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCB, 0x24, 0x42", "sha256rnds2 xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha256rnds25400() {
     let mut ops = dynasmrt::SimpleAssembler::new();
     dynasm!(ops
             ; .arch x64
             ; sha256rnds2 xmm4, xmm0
     );
     let buf = ops.finalize();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xE0", "sha256rnds2 xmm4, xmm0");
}


